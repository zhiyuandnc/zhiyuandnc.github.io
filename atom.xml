<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhiyuandnc.github.io</id>
    <title>絷缘的博客</title>
    <updated>2025-02-26T10:52:25.911Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhiyuandnc.github.io"/>
    <link rel="self" href="https://zhiyuandnc.github.io/atom.xml"/>
    <subtitle>事实不以人的意志为转移</subtitle>
    <logo>https://zhiyuandnc.github.io/images/avatar.png</logo>
    <icon>https://zhiyuandnc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, 絷缘的博客</rights>
    <entry>
        <title type="html"><![CDATA[ADB工具简单学习（一）]]></title>
        <id>https://zhiyuandnc.github.io/gipeLHNM2/</id>
        <link href="https://zhiyuandnc.github.io/gipeLHNM2/">
        </link>
        <updated>2023-05-14T14:00:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="adb工具">ADB工具</h1>
<h3 id="1-获取设备序列号">1. 获取设备序列号</h3>
<blockquote>
<p><code>adb get-serialno</code></p>
</blockquote>
<h3 id="2-获取设备电量">2. 获取设备电量</h3>
<blockquote>
<p><code>adb shell dumpsys battery</code></p>
<p><code>adb shell dumpsys battery set usb 1</code> 设置为USB充电状态</p>
</blockquote>
<pre><code class="language-shell">Current Battery Service state:
  AC powered: false
  USB powered: false
  Wireless powered: false
  Max charging current: 0
  Max charging voltage: 0
  Charge counter: 3433133
  status: 3
  health: 2
  present: true
  level: 90
  scale: 100
  voltage: 4232
  temperature: 337
  technology: Li-ion
</code></pre>
<h3 id="3-获取设备内存">3. 获取设备内存</h3>
<blockquote>
<p><code>adb shell cat /proc/meminfo</code></p>
<p><code>adb shell procrank</code></p>
<p><code>adb shell dumpsys meminfo</code></p>
</blockquote>
<pre><code class="language-shell">Total RAM: 5,981,832K (status normal)
 Free RAM: 4,121,672K (  123,068K cached pss + 3,998,604K available)
 Used RAM: 1,610,051K (1,372,495K used pss +   237,556K kernel)
 Lost RAM:    44,661K
     ZRAM:        20K physical used for       224K in swap (1,048,572K total swap)
   Tuning: 256 (large 512), oom   322,560K, restore limit   107,520K (high-end-gfx)
</code></pre>
<h3 id="4-获取设备容量">4. 获取设备容量</h3>
<blockquote>
<p><code>adb shell df /data/media</code></p>
<p><code>adb shell df /data </code></p>
</blockquote>
<h3 id="5-获取设备列表">5. 获取设备列表</h3>
<blockquote>
<p><code>adb devices</code></p>
</blockquote>
<h3 id="6-获取设备状态">6. 获取设备状态</h3>
<blockquote>
<p><code>adb get-state</code></p>
<p><code>device</code>：设备正常连接</p>
<p><code>offline</code>：连接异常，设备无响应</p>
<p><code>unknown</code>：没有连接的设备</p>
</blockquote>
<h3 id="7-安装应用">7. 安装应用</h3>
<blockquote>
<p><code>adb install packageName</code></p>
<p>执行结果：</p>
<ul>
<li>
<p><code>Success</code>：安装成功</p>
</li>
<li>
<p><code>INSTALL_FAILED_ALREADY_EXISTS</code>：安装失败</p>
</li>
<li>
<p><code>INSTALL_FAILED_SIGNATURE_ERROR</code>：签名不一致</p>
</li>
<li>
<p><code>INSTALL_FAILED_INSUFFICIENT_STORAGE</code>：存储空间不足</p>
</li>
</ul>
<p><code>adb install -r packageName</code>：重新安装</p>
</blockquote>
<h3 id="8-卸载应用">8. 卸载应用</h3>
<blockquote>
<p><code>adb uninstall</code></p>
</blockquote>
<h3 id="9-文件互传">9. 文件互传</h3>
<blockquote>
<p>将本地文件传到设备上</p>
<p><code>adb push 本地文件全路径 /sdcard/</code></p>
<p>将设备上的文件移动到本地</p>
<p><code>adb pull /sdcard/demo.txt 本地路径</code></p>
</blockquote>
<h3 id="10-获取设备上所有应用信息">10. 获取设备上所有应用信息</h3>
<blockquote>
<p><code>adb shell pm list package</code></p>
<p><code>-s</code>：列出所有系统应用包名</p>
<p><code>-f</code>：列出所有应用包名，apk名及存放位置</p>
</blockquote>
<h3 id="11-设备重启">11. 设备重启</h3>
<blockquote>
<p><code>adb reboot</code></p>
</blockquote>
<h3 id="12-查看android系统版本">12. 查看Android系统版本</h3>
<blockquote>
<p><code>adb shell getprop ro.build.version.release</code></p>
</blockquote>
<h3 id="13-获取cpu信息">13. 获取CPU信息</h3>
<blockquote>
<p><code>adb shell cat /proc/cpuinfo</code></p>
</blockquote>
<h3 id="14-设备关机">14. 设备关机</h3>
<blockquote>
<p><code>adb shell reboot -p</code></p>
</blockquote>
<h3 id="15-屏幕点击事件">15. 屏幕点击事件</h3>
<blockquote>
<p><code>adb shell input tap x轴 y轴</code></p>
</blockquote>
<h3 id="16-屏幕滑动事件">16. 屏幕滑动事件</h3>
<blockquote>
<p><code>adb shell input swipe x轴start y轴start x轴end y轴end</code></p>
</blockquote>
<h3 id="17-屏幕按键事件">17. 屏幕按键事件</h3>
<blockquote>
<p><code>adb shell input keyevent 按键事件</code></p>
</blockquote>
<h3 id="18-获取设备型号">18. 获取设备型号</h3>
<blockquote>
<p><code>adb -d shell getprop ro.product.model</code></p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/gipeLHNM2/">https://zhiyuandnc.github.io/gipeLHNM2/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CRON表达式学习]]></title>
        <id>https://zhiyuandnc.github.io/RGEfzFph6/</id>
        <link href="https://zhiyuandnc.github.io/RGEfzFph6/">
        </link>
        <updated>2023-03-07T07:57:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cron表达式">CRON表达式</h1>
<blockquote>
<p>为程序中的定时任务做执行计划和执行编排的一种表达式</p>
</blockquote>
<h2 id="一-基本格式">一、基本格式</h2>
<blockquote>
<p><code>{秒数}{分钟数}{小时数}{日期}{月份}{星期}{年份[可空]}</code></p>
</blockquote>
<h3 id="1-详解">1. 详解</h3>
<h4 id="11-秒数">1.1 <code>{秒数}</code></h4>
<ul>
<li>范围：0-59</li>
<li>限制：不许为空</li>
<li>注意：值不合法，调度器将会抛出 <code>ScheduleException</code> 异常</li>
</ul>
<blockquote>
<p><code>*</code>：表示每隔1秒钟触发定时任务</p>
<p><code>,</code>：表示在指定秒数触发定时任务</p>
<ul>
<li>示例：<code>0,15,30,45</code> 表示在0秒，15秒，30秒，45秒时触发定时任务</li>
</ul>
<p><code>-</code>：表示在指定秒数范围内触发定时任务，每隔1秒钟触发一次定时任务</p>
<ul>
<li>示例：<code>20-30</code> 表示在20秒到30秒的范围内，每隔1秒钟触发定时任务</li>
</ul>
<p><code>/</code>：表示每隔指定秒数步长就触发定时任务</p>
<ul>
<li>示例：<code>0/20</code> 表示从0秒钟开始，每隔20秒钟触发一次定时任务</li>
</ul>
</blockquote>
<h4 id="12-分钟数">1.2 <code>{分钟数}</code></h4>
<ul>
<li>范围：0-59</li>
<li>限制：不许为空</li>
<li>注意：值不合法，调度器将会抛出 <code>ScheduleException</code> 异常</li>
</ul>
<blockquote>
<p><code>*</code>：表示每隔1分钟触发定时任务</p>
<p><code>,</code>：表示在指定分钟数触发定时任务</p>
<p><code>-</code>：表示在指定分钟数范围内触发定时任务，每隔1分钟触发一次定时任务</p>
<p><code>/</code>：表示每隔指定分钟数步长就触发定时任务</p>
</blockquote>
<h4 id="13-小时数">1.3 <code>{小时数}</code></h4>
<ul>
<li>范围：0-23</li>
<li>限制：不许为空</li>
<li>注意：值不合法，调度器将会抛出 <code>ScheduleException</code> 异常</li>
</ul>
<blockquote>
<p><code>*</code>：表示每隔1小时触发定时任务</p>
<p><code>,</code>：表示在指定小时数触发定时任务</p>
<p><code>-</code>：表示在指定小时数范围内触发定时任务，每隔1小时触发一次定时任务</p>
<p><code>/</code>：表示每隔指定小时数步长就触发定时任务</p>
</blockquote>
<h4 id="14-日期">1.4 <code>{日期}</code></h4>
<ul>
<li>范围：1-31</li>
<li>限制：不许为空</li>
<li>注意：值不合法，调度器将会抛出 <code>ScheduleException</code> 异常</li>
</ul>
<blockquote>
<p><code>*</code>：表示每隔1天触发定时任务</p>
<p><code>?</code>：与<code>{星期}</code>互斥，表示匹配该域任意值</p>
<p><code>,</code>：表示在指定日期触发定时任务</p>
<p><code>-</code>：表示在指定日期范围内触发定时任务，每隔1天触发一次定时任务</p>
<p><code>/</code>：表示每隔指定天数步长就触发定时任务</p>
<p><code>L</code>：表示当月的最后一天触发定时任务</p>
<p><code>W</code>：表示离当天最近的一个工作日触发定时任务</p>
<p><code>LW</code>：表示当月的最后一个工作日触发定时任务</p>
<p><code>C</code>：表示根据日历触发定时任务，不常用</p>
</blockquote>
<h4 id="15-月份">1.5 <code>{月份}</code></h4>
<ul>
<li>范围：1-12</li>
<li>限制：不许为空</li>
<li>注意：值不合法，调度器将会抛出 <code>ScheduleException</code> 异常</li>
</ul>
<blockquote>
<p><code>*</code>：表示每隔1个月触发定时任务</p>
<p><code>,</code>：表示在指定月份触发定时任务</p>
<p><code>-</code>：表示在指定月份范围内触发定时任务，每隔1个月触发一次定时任务</p>
<p><code>/</code>：表示每隔指定月份步长就触发定时任务</p>
</blockquote>
<h4 id="16-星期">1.6 <code>{星期}</code></h4>
<ul>
<li>范围：1-7</li>
<li>限制：不许为空</li>
<li>注意：
<ul>
<li>1为星期日，2为星期一，3为星期二，4为星期三，5为星期四，6为星期五</li>
<li>值不合法，调度器将会抛出 <code>ScheduleException</code> 异常</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>*</code>：表示每隔1个星期触发定时任务</p>
<p><code>?</code>：与<code>{日期}</code>互斥，表示匹配该域任意值</p>
<p><code>,</code>：表示在指定星期触发定时任务</p>
<p><code>-</code>：表示在指定星期范围内触发定时任务，每隔1天触发一次定时任务</p>
<p><code>/</code>：表示每隔指定的天数步长就触发定时任务</p>
<p><code>L</code>：表示当前星期的最后一天触发定时任务，即星期六</p>
<p><code>#</code>：用来表示指定周数，#前面表示星期，#后面表示本月第几周</p>
<ul>
<li>示例：<code>2#2</code> 表示本月第二周的星期一</li>
</ul>
<p><code>C</code>：根据日历触发，使用较少</p>
</blockquote>
<h4 id="17-年份">1.7 <code>{年份}</code></h4>
<ul>
<li>范围：1970-2099</li>
<li>限制：允许为空</li>
<li>注意：值不合法，调度器将会抛出 <code>ScheduleException</code> 异常</li>
</ul>
<blockquote>
<p><code>*</code>：表示每隔1年触发定时任务</p>
<p><code>,</code>：表示在指定年份触发定时任务</p>
<p><code>-</code>：表示在指定年份范围内触发定时任务，每隔1年触发一次定时任务</p>
<p><code>/</code>：表示每隔指定的年份步长就触发定时任务</p>
</blockquote>
<h3 id="2-经典案例">2. 经典案例</h3>
<blockquote>
<p><code>30 * * * * ?</code> 每半分钟触发任务</p>
<p><code>30 10 * * * ?</code> 每小时的10分30秒触发任务</p>
<p><code>30 10 1 * * ?</code> 每天1点10分30秒触发任务</p>
<p><code>30 10 1 20 * ?</code> 每月20号1点10分30秒触发任务</p>
<p><code>30 10 1 20 10 ? *</code> 每年10月20号1点10分30秒触发任务</p>
<p><code>30 10 1 20 10 ? 2011</code> 2011年10月20号1点10分30秒触发任务</p>
<p><code>30 10 1 ? 10 * 2011</code> 2011年10月每天1点10分30秒触发任务</p>
<p><code>30 10 1 ? 10 SUN 2011</code> 2011年10月每周日1点10分30秒触发任务</p>
<p><code>15,30,45 * * * * ?</code> 每15秒，30秒，45秒时触发任务</p>
<p><code>15-45 * * * * ?</code> 15到45秒内，每秒都触发任务</p>
<p><code>15/5 * * * * ?</code> 每分钟的每15秒开始触发，每隔5秒触发一次</p>
<p><code>15-30/5 * * * * ?</code> 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次</p>
<p><code>0 0/3 * * * ?</code> 每小时的第0分0秒开始，每三分钟触发一次</p>
<p><code>0 15 10 ? * MON-FRI</code> 星期一到星期五的10点15分0秒触发任务</p>
<p><code>0 15 10 L * ?</code> 每个月最后一天的10点15分0秒触发任务</p>
<p><code>0 15 10 LW * ?</code> 每个月最后一个工作日的10点15分0秒触发任务</p>
<p><code>0 15 10 ? * 5L</code> 每个月最后一个星期四的10点15分0秒触发任务</p>
<p><code>0 15 10 ? * 5#3</code> 每个月第三周的星期四的10点15分0秒触发任务</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/RGEfzFph6/">https://zhiyuandnc.github.io/RGEfzFph6/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringSecurity学习]]></title>
        <id>https://zhiyuandnc.github.io/fgzXm9vap/</id>
        <link href="https://zhiyuandnc.github.io/fgzXm9vap/">
        </link>
        <updated>2023-02-24T14:07:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="springsecurity">SpringSecurity</h2>
<h3 id="一-初识springsecurity">一、初识SpringSecurity</h3>
<h3 id="1-基本概念">1. 基本概念</h3>
<ul>
<li>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI：Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</li>
<li>常用安全框架
<ul>
<li>Spring Security</li>
<li>Apache Shiro</li>
</ul>
</li>
</ul>
<h3 id="2-过滤器链">2. 过滤器链</h3>
<figure data-type="image" tabindex="1"><img src="http://pic.zyblog.xyz/img/typora/image-20230514142504331.png?origin=typora" alt="image-20230514142504331" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://pic.zyblog.xyz/img/typora/20200430234458488.png?origin=typora" alt="img" loading="lazy"></figure>
<h3 id="3-认证流程图">3. 认证流程图</h3>
<figure data-type="image" tabindex="3"><img src="http://pic.zyblog.xyz/img/typora/20200430234726839.png?origin=typora" alt="认证流程图" loading="lazy"></figure>
<blockquote>
<ul>
<li><code>UsernamePasswordAuthenticationFilter</code>
<ul>
<li>负责处理我们在登录页面填写了用户名和密码之后的登录请求</li>
</ul>
</li>
<li><code>ExceptionTranslationFilter</code>
<ul>
<li>处理过滤器链中跑出的任何 <code>AccessDeniedException</code> 和 <code>AuthenticationException</code></li>
</ul>
</li>
<li><code>FilterSecurityInterceptor</code>
<ul>
<li>负责权限校验的过滤器</li>
</ul>
</li>
<li><code>Authentication</code> ：接口
<ul>
<li>他的实现类表示当前访问系统的用户，封装与用户相关的所有信息</li>
</ul>
</li>
<li><code>AuthenticationManager</code>：接口
<ul>
<li>定义了认证<code>Authentication</code>对象的方法</li>
</ul>
</li>
<li><code>UserDetailsService</code>：接口
<ul>
<li>加载用户特定数据的核心接口，里面定义了一个<code>loadUserByUsername()</code>的方法
<ul>
<li><code>loadUserByUsername()</code>
<ul>
<li>根据用户名获取用户信息</li>
<li>如果该用户存在，将查询到的用户信息封装到UserDetails对象返回</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>UserDetails</code>：接口
<ul>
<li>提供用户的核心信息，通过<code>loadUserByUsername()</code>接口返回的用户对象中的信息，将信息设置到<code>Authentication</code>对象中</li>
</ul>
</li>
<li><code>Authentication</code>：对象
<ul>
<li>拥有权限列表信息的登录用户实体信息封装对象</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="4-快速入门">4. 快速入门</h3>
<figure data-type="image" tabindex="4"><img src="http://pic.zyblog.xyz/img/typora/a620cd8c1c2c4e1381d72180ff92d577.png?origin=typora" alt="img" loading="lazy"></figure>
<h4 id="41-引入依赖">4.1 引入依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;${mybatis-plus.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
    &lt;version&gt;1.2.71&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;
    &lt;version&gt;0.9.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="12-创建启动类">1.2 创建启动类</h4>
<pre><code class="language-java">@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class,args);
    }
}
</code></pre>
<h4 id="13-简单yml配置">1.3 简单yml配置</h4>
<pre><code class="language-yaml">server:
  port: 80
  servlet:
    context-path: /
spring:
  application:
    name: demo
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql//localhost:3306/security
    username: root
    password: 996748
</code></pre>
<h4 id="14-书写简单controller">1.4 书写简单Controller</h4>
<pre><code class="language-java">@RestController
public class TestController{
    
    @GetMapping(&quot;/test&quot;)
    public String test(){
        return &quot;test&quot;;
    }
}
</code></pre>
<h4 id="15-访问项目地址-localhosttest">1.5 访问项目地址 localhost/test</h4>
<ul>
<li>
<p>页面被重定向到SpringSecurity的默认登录页</p>
</li>
<li>
<p>默认账号</p>
<ul>
<li>用户名：user</li>
<li>密码：控制台打印密码</li>
</ul>
</li>
<li>
<p>登录成功后，可以查看到我们书写的简易controller返回信息test</p>
</li>
</ul>
<h2 id="二-securityconfig配置类">二、SecurityConfig配置类</h2>
<blockquote>
<p>实际开发中我们不会把明文密码存入数据库中</p>
<p>默认使用的PassworEncoder要求数据库中的密码格式为{id}password，他会根据id去判断密码的加密方式，如果不写会出错，但是通常我们是不会采用这种方式的，所以我们需要替换默认的PasswordEncoder</p>
<p>我们只需要把要使用的<code>BCryptPasswordEncoder</code>注入Spring容器，SpringSecurity就会使用该编码器进行密码校验，我们可以定义一个<code>SecurityConfig</code>的配置类并继承<code>WebSecurityConfigurerAdapter</code></p>
</blockquote>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    //编码器BCryptPasswordEncoder注入容器
    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }
    //认证管理器注入容器
    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }
    
     @Override
    protected void configure(HttpSecurity http) throws Exception {
        //表单提交
        http.formLogin()
            	//添加表单参数映射，SpringSecurity默认只接受username和password参数，如果我们需要不同名称的参数，需要在此处指定名称映射
            	.usernameParameter(&quot;username&quot;)
            	.passwordParameter(&quot;password&quot;)
            	//指定登录请求服务地址，与表单提交地址一致 
            	.loginProcessingUrl(&quot;/login&quot;)
            	//自定义登录页面
            	.loginPage(&quot;/login.html&quot;)
            	//自定义成功页面，只支持POST方式，因而在前后端分离项目中无法使用
            	.successForwardUrl(&quot;/toIndex&quot;)
            	//自定义失败页面，只支持POST方式，因而在前后端分离项目中无法使用
            	.failureForwardUrl(&quot;/toError&quot;);
        //授权认证
        http.authorizeRequests()
            	//设置过滤器规则，增加页面与访问权限信息
            	.antMatchers(&quot;/login.html&quot;,&quot;/error.html&quot;).permitAll()
            	//混合项目中放行所有静态资源
            	.antMatchers(&quot;/js/**&quot;,&quot;/css/**&quot;,&quot;/images/**&quot;).permitAll()
            	.antMatchers(&quot;/admin.html&quot;).hasRole()
            	.anyRequest().authenticated();
        //关闭csrf防护
        http.csrf().disable();
    }
}
</code></pre>
<h3 id="1-csrf">1. csrf</h3>
<h3 id="2-formlogin">2. formLogin</h3>
<ul>
<li>表单参数映射
<ul>
<li><code>usernameParameter()</code>：设置表单提交的username字段名称映射</li>
<li><code>passwordParameter()</code>：设置表单提交的password字段名称映射</li>
</ul>
</li>
<li>自定义请求与页面
<ul>
<li><code>loginProcessingUrl()</code>：指定自定义的登录请求地址</li>
<li><code>loginPage()</code>：指定自定义的登录页</li>
<li><code>successForwardUrl()</code>：指定自定义的登录成功后欲跳转的页面</li>
<li><code>failureForwardUrl()</code>：指定自定义的登录失败后欲跳转的页面</li>
</ul>
</li>
</ul>
<h3 id="3-authorizerequests">3. authorizeRequests</h3>
<ul>
<li>访问权限控制
<ul>
<li><code>permitAll()</code>：无论是否登录均开放访问</li>
<li><code>denyAll()</code>：无论是否登录均不开放访问</li>
<li><code>anonymous()</code>：在未登录状态下，允许所有人访问</li>
<li><code>authenticated()</code>：在登录状态下，通过认证的可以访问</li>
<li><code>fullyAuthenticated()</code>：必须通过用户名密码直接的登录的用户才可以访问，勾选了记住我登录的用户无权访问</li>
<li><code>rememberMe()</code>：通过勾选了记住我登录的用户才可以访问</li>
</ul>
</li>
<li>访问权限判断
<ul>
<li><code>hasAuthority([权限名称])</code></li>
<li><code>hasAnyAuthority([权限列表，逗号分隔])</code></li>
</ul>
</li>
<li>访问角色判断
<ul>
<li><code>hasRole([角色名称])</code></li>
<li><code>hasAnyRole([角色列表，逗号分隔])</code></li>
</ul>
</li>
<li>访问IP判断
<ul>
<li><code>hasIpAddress([IP地址])</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>访问权限与访问角色是严格区分大小写的，不同的字母会导致不同角色的产生</p>
</blockquote>
<h4 id="31-antmatchers">3.1 antMatchers</h4>
<ul>
<li>请求匹配器：可以为指定请求设置指定的访问权限</li>
</ul>
<h4 id="32-regexmatchers">3.2 regexMatchers</h4>
<ul>
<li>正则匹配器：使用正则表达式对指定格式的请求放行</li>
</ul>
<h4 id="33-mvcmatchers">3.3 mvcMatchers</h4>
<blockquote>
<p>在<code>application.yml</code>配置文件中配置过如下信息的，可以使用<code>mvcMatchers</code>指定<code>servletPath(&quot;/demo&quot;)</code></p>
<pre><code class="language-yaml">spring:
	mvc:
		servlet:
			path: /demo
</code></pre>
</blockquote>
<pre><code class="language-java">http.authorizeRequests()
    	.mvcMatchers(&quot;/login&quot;).servletPath(&quot;/demo&quot;).permitAll();
</code></pre>
<h4 id="34-anyrequests">3.4 anyRequests</h4>
<ul>
<li>除了其他匹配器匹配的请求之外的所有请求
<ul>
<li><code>authenticated()</code>：登录认证后可访问</li>
</ul>
</li>
</ul>
<blockquote>
<p>无论是antMatchers还是regexMatchers，他们都有两个参数的方法，可以使用这些方法来限定请求方式</p>
<ul>
<li><code>antMatchers(HttpMethod method,String patterns)</code></li>
<li><code>regexMatchers(HttpMethod method,String regexPatterns)</code></li>
</ul>
</blockquote>
<h3 id="4-exceptionhandling">4. exceptionHandling</h3>
<ul>
<li><code>accessDeniedHandler()</code>：设置访问拒绝的处理器</li>
</ul>
<h3 id="5-rememberme">5. rememberMe</h3>
<h2 id="三-认证流程">三、认证流程</h2>
<blockquote>
<p>SpringSecurity有对<code>UserDetails</code>默认的实现类<code>User</code>，用来作为请求以及返回的实体信息，我们可以通过自己实现<code>UserDetails</code>来创建我们自定义的请求返回实体信息，并且实现<code>UserDetailsService</code>来实现我们自定义的登录逻辑</p>
</blockquote>
<h3 id="1-实现自定义的登录验证对象">1. 实现自定义的登录验证对象</h3>
<h4 id="11-自定义用户实体类">1.1 自定义用户实体类</h4>
<pre><code class="language-java">@Data
@AllArgsConstructor
@NoArgsConstructor
public class UserInfo {
    private String username;
    private String password;
}
</code></pre>
<h4 id="12-实现userdetails接口创建自定义的验证对象">1.2 实现UserDetails接口创建自定义的验证对象</h4>
<pre><code class="language-java">@Data
public class LoginUser implements UserDetails {

    private UserInfo userInfo;
    private List&lt;GrantedAuthority&gt; authorities;

    public LoginUser(UserInfo userInfo, List&lt;GrantedAuthority&gt; authorities) {
        this.userInfo = userInfo;
        this.authorities = authorities;
    }

    @Override
    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {
        return null;
    }

    @Override
    public String getPassword() {
        return userInfo.getPassword();
    }

    @Override
    public String getUsername() {
        return userInfo.getUsername();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}

</code></pre>
<blockquote>
<p>接下来我们需要自定义登录接口，然后让SpringSecurity对这个接口放行，用户在未登录前当然是没有权限的，所以我们应该将登录接口开放为所有人都可以访问</p>
<ol>
<li>在接口中我们通过AuthenticationManager的authenticate方法来进行用户认证，所以需要在SecurityConfig中配置AuthenticationManager注入Spring容器</li>
<li>认证成功后要生成一个jwt（json-web-token），放入响应体返回，为了让用户下回请求能通过jwt识别出具体是哪个用户，我们需要把用户信息存入redis，以用户id作为作为key</li>
</ol>
</blockquote>
<h3 id="2-实现自定义的登录逻辑">2. 实现自定义的登录逻辑</h3>
<pre><code class="language-java">@Service
public class UserDetailServiceImpl implements UserDetailsService {

    @Resource
    private UserInfoMapper userInfoMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        QueryWrapper&lt;UserInfo&gt; userInfoQueryWrapper = new QueryWrapper&lt;&gt;();
        userInfoQueryWrapper.eq(&quot;username&quot;,username);
        UserInfo userInfo = userInfoMapper.selectOne(userInfoQueryWrapper);
        if(userInfo==null){
            throw new UsernameNotFoundException(&quot;用户名或密码错误&quot;);
        }
        return new LoginUser(userInfo);
    }
}
</code></pre>
<h3 id="3-securityconfig">3. SecurityConfig</h3>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Resource
    private MyAccessDeniedHandler myAccessDeniedHandler;

    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //关闭防护
        http.csrf().disable()
            //不通过Session获取SecurityContext
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
            	//对于登录注册接口允许匿名访问
                .antMatchers(&quot;/user/login&quot;,&quot;/user/register&quot;).anonymous()
            	//除去以上所有配置过的请求，其余请求都需要鉴权认证
                .anyRequest().authenticated()
            .and()
            .formLogin()
                .usernameParameter(&quot;username&quot;)
                .passwordParameter(&quot;password&quot;)
                .loginProcessingUrl(&quot;/login&quot;)
                .loginPage(&quot;/login.html&quot;)
                .successHandler(new MyAuthenticationSuccessHandler(&quot;/admin&quot;))
                .failureHandler(new MyAuthenticationFailureHandler(&quot;/error&quot;));
            .and()
            .exceptionHandling()
                .accessDeniedHandler(myAccessDeniedHandler);
    }
}
</code></pre>
<h3 id="4-实现自定义的登录服务对用户进行认证">4. 实现自定义的登录服务对用户进行认证</h3>
<pre><code class="language-java">@Service
public class LoginServiceImpl implements LoginService {

    @Resource
    private RedisCache redisCache;
    @Resource
    private AuthenticationManager authenticationManager;
    @Override
    public Response login(UserInfo userInfo){
        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(userInfo.getUsername(), userInfo.getPassword());
        Authentication authenticate = authenticationManager.authenticate(usernamePasswordAuthenticationToken);
        if(authenticate==null){
            throw new RuntimeException(&quot;登录失败&quot;);
        }else {
            Object principal = authenticate.getPrincipal();
            if ((principal instanceof LoginUser)){
                LoginUser loginUser = (LoginUser) principal;
                String id = loginUser.getUserInfo().getId().toString();
                String username = loginUser.getUserInfo().getUsername();
                String jwt = JWTUtils.getJWT(id, username);
                Response response = new Response();
                response.code(ResponseCode.SUCCESS_CODE.getCode())
                        .message(ResponseCode.SUCCESS_CODE.getMessage())
                        .data(null)
                        .count(1)
                        .token(jwt);
                redisCache.setCacheObject(&quot;login:&quot; + id,loginUser);
                return response;
            }
        }
        return null;
    }
}
</code></pre>
<h3 id="5-编写controller">5. 编写Controller</h3>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/user&quot;)
public class LoginController {
    @Resource
    private LoginService loginService;
	@PostMapping(&quot;/login&quot;)
    public Response login(@RequestBody UserInfo userInfo){
        return loginService.login(userInfo);
    }
    @PostMapping(&quot;/logout&quot;)
    public Response logout(){
        return loginService.logout();
    }
}
</code></pre>
<h3 id="6-实现token认证过滤器">6. 实现Token认证过滤器</h3>
<pre><code class="language-java">@Component
public class JWTAuthenticationFilter extends OncePerRequestFilter {

    @Resource
    private RedisCache redisCache;
    @Override
    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {
        String token = httpServletRequest.getHeader(&quot;token&quot;);
        if(StringUtils.isEmpty(token)){
            filterChain.doFilter(httpServletRequest,httpServletResponse);
            return;
        }else {
            if(JWTUtils.isValid(token)){
                String uid = JWTUtils.getClaimInfoForString(httpServletRequest, &quot;uid&quot;);
                Object cacheObject = redisCache.getCacheObject(&quot;login:&quot; + uid);
                if (cacheObject instanceof LoginUser){
                    LoginUser loginUser  = (LoginUser) cacheObject;
                    if (loginUser==null){
                        return;
                    }else {
                        //TODO 未构建权限列表
                        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(loginUser, null, null);
                        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
                        filterChain.doFilter(httpServletRequest,httpServletResponse);
                    }
                }
            }
        }
        return;
    }
}
</code></pre>
<h3 id="7-更新securityconfig配置">7. 更新SecurityConfig配置</h3>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Resource
    private MyAccessDeniedHandler myAccessDeniedHandler;
    @Resource
    private JWTAuthenticationFilter jwtAuthenticationFilter;

    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //关闭防护
        http.csrf().disable()
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
                .antMatchers(&quot;/user/login&quot;,&quot;/user/register&quot;).anonymous()
                .anyRequest().authenticated()
            .and()
            .formLogin()
                .usernameParameter(&quot;username&quot;)
                .passwordParameter(&quot;password&quot;)
                .loginProcessingUrl(&quot;/login&quot;)
                .loginPage(&quot;/login.html&quot;)
                .successHandler(new MyAuthenticationSuccessHandler(&quot;/successUrl&quot;))
                .failureHandler(new MyAuthenticationFailureHandler(&quot;/failureUrl&quot;))
            .and()
            .exceptionHandling()
                .accessDeniedHandler(myAccessDeniedHandler)
            .and()
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
    }
}
</code></pre>
<h3 id="8-退出登录">8. 退出登录</h3>
<pre><code class="language-java">@Override
public Response logout() {
    UsernamePasswordAuthenticationToken authentication = (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();
    Object principal = authentication.getPrincipal();
    if(principal instanceof LoginUser){
        LoginUser loginUser = (LoginUser) principal;
        String uid = loginUser.getUserInfo().getId().toString();
        redisCache.deleteObject(&quot;login:&quot; + uid);
        Response response = new Response();
        response.code(ResponseCode.SUCCESS_CODE.getCode())
            .message(&quot;注销成功&quot;)
            .count(0)
            .data(null)
            .token(&quot;&quot;);
        return response;
    }
    return null;
}
</code></pre>
<h2 id="四-前后端分离场景下登录认证跳转解决方案">四、前后端分离场景下登录认证跳转解决方案</h2>
<blockquote>
<p>SpringSecurity默认的认证成功跳转是一种混合项目的post请求，但是目前越来越多的前后端分离项目涌现或者说在前后端分离开发变成一种规范的当下，这种形式已经不再适用我们的开发要求了，所以我们需要自定义SpringSecurity认证成功重定向的处理器，我们通过实现<code>AuthenticationSuccessHandler</code> <code>AuthenticationFailureHandler</code>接口来自定义我们认证成功或失败后的重定向方式</p>
</blockquote>
<h3 id="1-重写认证授权成功处理器">1. 重写认证授权成功处理器</h3>
<pre><code class="language-java">//实现AuthenticationSuccessHandler接口完成请求转发或重定向操作，对应登录成功后的操作
public class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler {
    private String successUrl;

    public MyAuthenticationSuccessHandler(String successUrl) {
        this.successUrl = successUrl;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        response.sendRedirect(successUrl);
    }
}
</code></pre>
<h3 id="2-重写认证授权失败处理器">2. 重写认证授权失败处理器</h3>
<pre><code class="language-java">//实现AuthenticationFailureHandler接口完成请求转发或重定向操作，对应登录失败后的操作
public class MyAuthenticationFailureHandler implements AuthenticationFailureHandler {
    private String failureUrl;

    public MyAuthenticationSuccessHandler(String failureUrl) {
        this.failureUrl = failureUrl;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        response.sendRedirect(failureUrl);
    }
}
</code></pre>
<h3 id="3-配置自定义处理器">3. 配置自定义处理器</h3>
<pre><code class="language-java">//使用我们实现的SuccessHandler和FailureHandler设置登录成功和失败后的请求重定向
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.formLogin()
                .usernameParameter(&quot;username&quot;)
                .passwordParameter(&quot;password&quot;)
                .loginProcessingUrl(&quot;/login&quot;)
                .loginPage(&quot;/login.html&quot;)
            	//此处使用我们自己实现的重定向处理器，这样就可以支持前后端分离了
                .successHandler(new MyAuthenticationSuccessHandler(&quot;/admin&quot;))
                .failureHandler(new MyAuthenticationFailureHandler(&quot;/error&quot;));
        http.authorizeRequests()
                .antMatchers(&quot;/login.html&quot;,&quot;/error.html&quot;).permitAll()
                .antMatchers(&quot;/admin.html&quot;).hasRole(&quot;ADMIN&quot;)
                .anyRequest().authenticated();

        http.csrf().disable();
    }
}
</code></pre>
<h2 id="五-授权流程">五、授权流程</h2>
<blockquote>
<p>在SpringSecurity中，会默认使用<code>FilterSecurityInterceptor</code>进行权限校验，FilterSecurityInterceptor会从SecurityContextHolder中获取Authentication，然后获取其中的权限信息，判断当前用户是否拥有访问当起资源的权限</p>
<p>所以我们需要将当前登录用户的权限信息存入Authentication</p>
<p>然后将对应的资源设置好访问权限</p>
<p>如果满足角色条件，程序正常执行，如果不满足，抛出 <code>org.springframework.security.access.AccessDeniedException</code></p>
</blockquote>
<h3 id="1-授权实现">1. 授权实现</h3>
<h4 id="11-限制访问资源所需权限">1.1 限制访问资源所需权限</h4>
<ul>
<li>
<p><code>@Secured</code></p>
<ul>
<li>
<p>专门用于判断是否具有指定角色权限，可用在方法上或类上，与hasRole方法相反，参数要以ROLE_开头</p>
</li>
<li>
<p>使用方式</p>
<ul>
<li>
<pre><code class="language-java">@SpringBootApplication
//开启注解访问控制
@EnableGlobalMethodSecurity(SecuredEnabled = true)
public class SpringSecurityDemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringSecurityDemoApplication.class, args);
    }
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@Secured(&quot;ROLE_ADMIN&quot;)
@GetMapping(&quot;/admin&quot;)
public String toAdmin(){
    return &quot;redirect:admin.html&quot;;
}
</code></pre>
</li>
<li>
<p>此时当我们访问到/admin时，就会检测用户是否登录成功，如果登录成功判断用户是否存在角色权限，如果存在访问成功，否则500</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>@PreAuthorize</code> 和 <code>@PostAuthorize</code></p>
<ul>
<li>
<p><code>@PreAuthorize</code> 表示在访问方法或类之前先判断权限，注解参数和access方法参数格式相同，都为权限表达式</p>
</li>
<li>
<p><code>@PostAuthorize</code> 表示在访问方法或类之后判断权限，很少用</p>
</li>
<li>
<p>使用方式</p>
<ul>
<li>
<pre><code class="language-java">@SpringBootApplication
//开启注解访问控制
@EnableGlobalMethodSecurity(prePostEnable = true)
public class SpringSecurityDemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringSecurityDemoApplication.class, args);
    }
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@PreAuthorize(&quot;hasRole(ADMIN)&quot;)//PreAuthorize允许角色ROLE_开头
@GetMapping(&quot;/admin&quot;)
public String toAdmin(){
    return &quot;redirect:admin.html&quot;;
}
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="12-封装权限信息">1.2 封装权限信息</h4>
<blockquote>
<p>事实上我之前在UserDetailsServiceImpl中不仅需要查询出数据库中的用户信息，而且还要查询出对应的权限信息，一并封装到UserDetails中返回，我们自己实现了UserDetails为LoginUser</p>
</blockquote>
<ul>
<li>
<pre><code class="language-java">@Data
@NoArgsConstructor
public class LoginUser implements UserDetails {

    private UserInfo userInfo;
    private List&lt;String&gt; roleList;
    @JSONField(serialize = false)
    private HashSet&lt;GrantedAuthority&gt; authorities;

    public LoginUser(UserInfo userInfo, List&lt;String&gt; roleList) {
        this.userInfo = userInfo;
        this.roleList = roleList;
    }

    public LoginUser(UserInfo userInfo) {
        this.userInfo = userInfo;
    }

    @Override
    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {
        if(authorities!=null &amp;&amp; authorities.size()!=0){
            return authorities;
        }
        for (String role : roleList) {
            authorities.add(new SimpleGrantedAuthority(role));
        }
        //authorities = roleList.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList());
        return authorities;
    }

    @Override
    public String getPassword() {
        return userInfo.getPassword();
    }

    @Override
    public String getUsername() {
        return userInfo.getUsername();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@Service
public class UserDetailServiceImpl implements UserDetailsService {

    @Resource
    private UserInfoMapper userInfoMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        QueryWrapper&lt;UserInfo&gt; userInfoQueryWrapper = new QueryWrapper&lt;&gt;();
        userInfoQueryWrapper.eq(&quot;username&quot;,username);
        UserInfo userInfo = userInfoMapper.selectOne(userInfoQueryWrapper);
        if(userInfo==null){
            throw new UsernameNotFoundException(&quot;用户名或密码错误&quot;);
        }
        List&lt;String&gt; roleList = Arrays.asList(&quot;admin&quot;,&quot;user&quot;);
        return new LoginUser(userInfo,roleList);
    }
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@Component
public class JWTAuthenticationFilter extends OncePerRequestFilter {

    @Resource
    private RedisCache redisCache;
    @Override
    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {
        String token = httpServletRequest.getHeader(&quot;token&quot;);
        if(StringUtils.isEmpty(token)){
            filterChain.doFilter(httpServletRequest,httpServletResponse);
            return;
        }else {
            if(JWTUtils.isValid(token)){
                String uid = JWTUtils.getClaimInfoForString(httpServletRequest, &quot;uid&quot;);
                Object cacheObject = redisCache.getCacheObject(&quot;login:&quot; + uid);
                if (cacheObject instanceof LoginUser){
                    LoginUser loginUser  = (LoginUser) cacheObject;
                    if (loginUser==null){
                        return;
                    }else {
                        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
                                new UsernamePasswordAuthenticationToken(loginUser, null, loginUser.getAuthorities());
                        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
                        filterChain.doFilter(httpServletRequest,httpServletResponse);
                    }
                }
            }
        }
        return;
    }
}
</code></pre>
</li>
</ul>
<h3 id="2-基于角色的权限控制rbac">2. 基于角色的权限控制（RBAC）</h3>
<h4 id="21-设计数据表">2.1 设计数据表</h4>
<ul>
<li>
<p>设计权限表</p>
<pre><code class="language-sql">DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `menu_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单名称即权限名称',
  `routing_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '路由地址即服务地址',
  `component_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '组件路径',
  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '0' COMMENT '菜单状态（0显示，1隐藏）',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '0' COMMENT '功能状态（0正常，1停用）',
  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '权限标识',
  `icon` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '#' COMMENT '菜单图标',
  `create_by` bigint NULL DEFAULT NULL COMMENT '创建自',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_by` bigint NULL DEFAULT NULL COMMENT '更新自',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `del_flag` int NULL DEFAULT NULL COMMENT '是否删除（0未删除，1已删除）',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '菜单（权限）表' ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre>
</li>
<li>
<p>设计角色表</p>
<pre><code class="language-sql">DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `role_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '角色名称',
  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '角色权限字符串',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '0' COMMENT '角色状态（0正常，1停用）',
  `del_flag` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '0' COMMENT '是否删除（0未删除，1已删除）',
  `create_by` bigint NULL DEFAULT NULL COMMENT '创建自',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_by` bigint NULL DEFAULT NULL COMMENT '更新自',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '角色表' ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre>
</li>
<li>
<p>设计角色-权限表</p>
<pre><code class="language-sql">DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `role_id` bigint NOT NULL COMMENT '角色ID',
  `menu_id` bigint NOT NULL DEFAULT 0 COMMENT '菜单ID',
  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre>
</li>
<li>
<p>设计用户表</p>
<pre><code class="language-sql">DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户名',
  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '昵称',
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '密码',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '0' COMMENT '账号状态（0正常，1停用）',
  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '邮箱',
  `phone_number` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '手机号',
  `gender` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户性别（0男，1女，2未知）',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '头像地址',
  `user_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户类型（0管理员，1普通用户）',
  `create_by` bigint NULL DEFAULT NULL COMMENT '创建自',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_by` bigint NULL DEFAULT NULL COMMENT '更新自',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `del_flag` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '0' COMMENT '是否删除（0未删除，1已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '用户表' ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre>
</li>
<li>
<p>设计用户-角色表</p>
<pre><code class="language-sql">DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `role_id` bigint NOT NULL COMMENT '角色ID',
  PRIMARY KEY (`user_id`, `role_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre>
</li>
</ul>
<h4 id="22-从数据库中查询权限信息">2.2 从数据库中查询权限信息</h4>
<h2 id="六-access方法">六、access方法</h2>
<blockquote>
<p><code>access()</code>方法中填写权限表达式，具体权限表达式如下表，另外支持自定义权限表达式</p>
</blockquote>
<h3 id="1-springsecurity规定一些常用表达式">1. SpringSecurity规定一些常用表达式</h3>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>hasRole([role])</code></td>
<td>用户拥有制定的角色时返回true （Spring security默认会带有ROLE_前缀）</td>
</tr>
<tr>
<td><code>hasAnyRole([role1,role2])</code></td>
<td>用户拥有任意一个制定的角色时返回true</td>
</tr>
<tr>
<td><code>hasAuthority([authority])</code></td>
<td>等同于hasRole,但不会带有ROLE_前缀</td>
</tr>
<tr>
<td><code>hasAnyAuthority([auth1,auth2])</code></td>
<td>等同于hasAnyRole</td>
</tr>
<tr>
<td><code>permitAll</code></td>
<td>永远返回true</td>
</tr>
<tr>
<td><code>denyAll</code></td>
<td>永远返回false</td>
</tr>
<tr>
<td><code>authentication</code></td>
<td>当前登录用户的authentication对象</td>
</tr>
<tr>
<td><code>fullAuthenticated</code></td>
<td>当前用户既不是anonymous也不是rememberMe用户时返回true</td>
</tr>
<tr>
<td><code>hasIpAddress('192.168.1.0/24')</code></td>
<td>请求发送的IP匹配时返回true</td>
</tr>
</tbody>
</table>
<h3 id="2-自定义表达式">2. 自定义表达式</h3>
<h4 id="21-创建自定义接口">2.1 创建自定义接口</h4>
<pre><code class="language-java">public interface MyAccessExpression {
    boolean hasPermission(HttpServletRequest request, Authentication authentication);
}
</code></pre>
<h4 id="22-实现自定义接口">2.2 实现自定义接口</h4>
<pre><code class="language-java">@Component(&quot;myEX&quot;)
public class MyAccessExpressionImpl implements MyAccessExpression {
    @Override
    public boolean hasPermission(String roleName) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        Object principal = authentication.getPrincipal();
        if(principal instanceof LoginUser){
            LoginUser loginUser = (LoginUser) principal;
            Collection&lt;? extends GrantedAuthority&gt; authorities = loginUser.getAuthorities();
            return authorities.contains(roleName);
        }
        return false;
    }
}
</code></pre>
<h4 id="23-在securityconfig中配置自定义表达式">2.3 在SecurityConfig中配置自定义表达式</h4>
<pre><code class="language-java">.anyRequest().access(&quot;@myEx.hasPermission('sys:file:delete')&quot;) 
</code></pre>
<h4 id="24-使用注解调用自定义表达式">2.4 使用注解调用自定义表达式</h4>
<pre><code class="language-java">@PreAuthorize(&quot;@myEX.hasPermission('sys:file:delete')&quot;)
</code></pre>
<h2 id="七-自定义403处理方案">七、自定义403处理方案</h2>
<blockquote>
<p>当用户请求认证失败或者是授权失败时，SpringSecurity会使用一些默认处理，会在前端展示一些状态信息，但这通常不是我们希望前端开发者以及用户看到的，所以我们应该给前端返回统一的response格式，让前端自行决定展示内容</p>
<ul>
<li>认证失败的异常通常会由<code>AuthenticationException</code>调用<code>AuthenticationEntryPoint</code>对象的<code>commence</code>方法来处理</li>
<li>授权失败的异常通常会由<code>AccessDeniedException</code>调用<code>AccessDeniedHandler</code>对象的<code>handle</code>方法来处理</li>
</ul>
<p>所以如果我们需要拦截这些默认的返回信息，就需要自定义<code>AuthenticationEntryPoint</code>和<code>AccessDeniedHandler</code>的实现类，重写它们对应的处理方法，即可返回我们需要的统一response格式</p>
</blockquote>
<h3 id="1-自定义认证失败处理">1. 自定义认证失败处理</h3>
<h4 id="11-实现authenticationentrypoint接口">1.1 实现<code>AuthenticationEntryPoint</code>接口</h4>
<pre><code class="language-java">@Component
public class AuthenticationEntryPointHandler implements AuthenticationEntryPoint {
    @Override
    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {
        httpServletResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        httpServletResponse.setContentType(&quot;application/json&quot;);
        httpServletResponse.setCharacterEncoding(&quot;UTF-8&quot;);
        PrintWriter writer = httpServletResponse.getWriter();
        writer.println(JSON.toJSONString(
                new Response&lt;String&gt;().code(ResponseCode.UN_AUTHORIZATION_CODE.getCode())
                        .message(ResponseCode.UN_AUTHORIZATION_CODE.getMessage())
                        .count(0)
                        .data(&quot;对不起，认证失败&quot;)
        ));
        writer.flush();
        writer.close();
    }
}
</code></pre>
<h4 id="12-配置自定义认证失败处理器">1.2 配置自定义认证失败处理器</h4>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Resource
    private MyAccessDeniedHandler myAccessDeniedHandler;
    @Resource
    private JWTAuthenticationFilter jwtAuthenticationFilter;
    @Resource
    private AuthenticationEntryPointHandler authenticationEntryPointHandler;

    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //关闭防护
        http.csrf().disable()
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
                .antMatchers(&quot;/user/login&quot;,&quot;/user/register&quot;).anonymous()
                .anyRequest().authenticated()
                .anyRequest().access(&quot;@myAccessExpressionImpl.hasPermission(request,authentication)&quot;)
            .and()
            .formLogin()
                .usernameParameter(&quot;username&quot;)
                .passwordParameter(&quot;password&quot;)
                .loginProcessingUrl(&quot;/login&quot;)
                .loginPage(&quot;/login.html&quot;)
                .successHandler(new MyAuthenticationSuccessHandler(&quot;/successUrl&quot;))
                .failureHandler(new MyAuthenticationFailureHandler(&quot;/failureUrl&quot;))
            .and()
            .exceptionHandling()
                .accessDeniedHandler(myAccessDeniedHandler)
                .authenticationEntryPoint(authenticationEntryPointHandler)
            .and()
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
    }
}
</code></pre>
<h3 id="2-自定义授权失败处理">2. 自定义授权失败处理</h3>
<h4 id="21-实现accessdeniedhandler接口">2.1 实现<code>AccessDeniedHandler</code>接口</h4>
<pre><code class="language-java">@Component
public class MyAccessDeniedHandler implements AccessDeniedHandler {
    @Override
    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e) throws IOException, ServletException {
        httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);
        httpServletResponse.setContentType(&quot;application/json&quot;);
        httpServletResponse.setCharacterEncoding(&quot;UTF-8&quot;);
        PrintWriter writer = httpServletResponse.getWriter();
        writer.println(JSON.toJSONString(
                new Response&lt;String&gt;().code(ResponseCode.FORBIDDEN_CODE.getCode())
                        .message(ResponseCode.FORBIDDEN_CODE.getMessage())
                        .count(0)
                        .data(&quot;对不起，您无权访问此页面&quot;)
        ));
        writer.flush();
        writer.close();
    }
}
</code></pre>
<h4 id="22-配置自定义授权失败处理器">2.2 配置自定义授权失败处理器</h4>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Resource
    private MyAccessDeniedHandler myAccessDeniedHandler;
    @Resource
    private JWTAuthenticationFilter jwtAuthenticationFilter;
    @Resource
    private AuthenticationEntryPointHandler authenticationEntryPointHandler;

    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //关闭防护
        http.csrf().disable()
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
                .antMatchers(&quot;/user/login&quot;,&quot;/user/register&quot;).anonymous()
                .anyRequest().authenticated()
                .anyRequest().access(&quot;@myAccessExpressionImpl.hasPermission(request,authentication)&quot;)
            .and()
            .formLogin()
                .usernameParameter(&quot;username&quot;)
                .passwordParameter(&quot;password&quot;)
                .loginProcessingUrl(&quot;/login&quot;)
                .loginPage(&quot;/login.html&quot;)
                .successHandler(new MyAuthenticationSuccessHandler(&quot;/successUrl&quot;))
                .failureHandler(new MyAuthenticationFailureHandler(&quot;/failureUrl&quot;))
            .and()
            .exceptionHandling()
                .accessDeniedHandler(myAccessDeniedHandler)
                .authenticationEntryPoint(authenticationEntryPointHandler)
            .and()
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
    }
}
</code></pre>
<h2 id="八-rememberme功能实现">八、RememberMe功能实现</h2>
<blockquote>
<p>SpringSecurity中想要实现记住我功能，用户只需要在登录时添加value为<code>remember-me</code>的checkbox。取值为true，SpringSecurity会自动把用户信息存储到数据源中，以后就不用再使用用户名密码登录访问</p>
</blockquote>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Resource
    private UserDetailsService userDetailsService;
    @Resource
    private DataSource dataSource;
    @Resource
    private PersistentTokenRespository persistentTokenRespository;
    
    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }

	@Bean
    public PersistentTokenRespository getPersistentTokenRespository(){
        JdbcTokenRespositoryImpl jsbcTokenRespository = new JdbcTokenRespositoryImpl();
        jsbcTokenRespository.setDataSource(dataSource);
        //在数据库中创建表，首次创建后，无需再次创建
        jsbcTokenRespository.setCreateTableOnStartup(true);
        return jsbcTokenRespository;
    }
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
		http.rememberMe()
            	//token失效时间，单位秒
            	.tokenValiditySeconds(60*60*24*7)
            	//绑定参数名称，默认为“remember-me”
            	.rememberMeParameter(&quot;rememberMe&quot;)
            	//自定义登录逻辑
            	.userDetailsService(userDetailsServiceImpl)
            	//持久层对象
            	.tokenRespository(persistentTokenRespository);
    }
}
</code></pre>
<h2 id="九-退出登录处理器">九、退出登录处理器</h2>
<h3 id="1-书写退出登录代码">1. 书写退出登录代码</h3>
<pre><code class="language-java">@Override
public Response logout() {
    UsernamePasswordAuthenticationToken authentication = (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();
    Object principal = authentication.getPrincipal();
    if(principal instanceof LoginUser){
        LoginUser loginUser = (LoginUser) principal;
        String uid = loginUser.getUserInfo().getId().toString();
        redisCache.deleteObject(&quot;login:&quot; + uid);
        Response response = new Response();
        response.code(ResponseCode.SUCCESS_CODE.getCode())
            .message(&quot;注销成功&quot;)
            .count(0)
            .data(null)
            .token(&quot;&quot;);
        return response;
    }
    return null;
}
</code></pre>
<h3 id="2-实现退出登录处理器">2. 实现退出登录处理器</h3>
<pre><code class="language-java">@Component
public class MyLogoutSuccessHandler implements LogoutSuccessHandler {
    @Override
    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException {
        System.out.println(&quot;退出登录成功&quot;);
    }
}
</code></pre>
<h3 id="3-配置自定义退出登录处理器">3. 配置自定义退出登录处理器</h3>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Resource
    private MyAccessDeniedHandler myAccessDeniedHandler;
    @Resource
    private JWTAuthenticationFilter jwtAuthenticationFilter;
    @Resource
    private AuthenticationEntryPointHandler authenticationEntryPointHandler;
    @Resource
    private MyLogoutSuccessHandler myLogoutSuccessHandler;

    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //关闭防护
        http.csrf().disable()
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
                .antMatchers(&quot;/user/login&quot;,&quot;/user/register&quot;).anonymous()
                .anyRequest().authenticated()
                .anyRequest().access(&quot;@myAccessExpressionImpl.hasPermission(request,authentication)&quot;)
            .and()
            .formLogin()
                .usernameParameter(&quot;username&quot;)
                .passwordParameter(&quot;password&quot;)
                .loginProcessingUrl(&quot;/login&quot;)
                .loginPage(&quot;/login.html&quot;)
                .successHandler(new MyAuthenticationSuccessHandler(&quot;/successUrl&quot;))
                .failureHandler(new MyAuthenticationFailureHandler(&quot;/failureUrl&quot;))
            .and()
            .exceptionHandling()
                .accessDeniedHandler(myAccessDeniedHandler)
                .authenticationEntryPoint(authenticationEntryPointHandler)
            .and()
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)
            .cors()
            .and()
            .logout()
                .logoutSuccessHandler(myLogoutSuccessHandler);

    }
}
</code></pre>
<h2 id="十-csrf和cors">十、CSRF和CORS</h2>
<blockquote>
<p><code>CSRF</code>：跨站请求伪造，也被称为 <code>OneClick Attack</code>或者<code>Session Rifing</code>，通过伪造用户请求访问受信任站点的非法请求访问。</p>
<p><code>CORS</code>：跨域资源共享，只要网络协议、IP地址、端口中的任何一个不相同就是跨域请求</p>
</blockquote>
<h3 id="1-springboot开启跨域">1. SpringBoot开启跨域</h3>
<pre><code class="language-java">@Configuration
public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping(&quot;/**&quot;)
                .allowedOrigins(&quot;*&quot;)
                .allowCredentials(true)
                .allowedMethods(&quot;GET&quot;,&quot;POST&quot;,&quot;DELETE&quot;,&quot;PUT&quot;,&quot;OPTION&quot;)
                .allowedHeaders(&quot;*&quot;)
                .maxAge(3600);
    }
}
</code></pre>
<h3 id="2-springsecurity开启跨域">2. SpringSecurity开启跨域</h3>
<pre><code class="language-java">@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Resource
    private UserDetailsService userDetailsService;
    
    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return new BCryptPasswordEncoder();
    }
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
    	//CSRF防护默认是开启的
        //关闭CSRF防护
        http.csrf().disable();
        //允许跨域
        http.cors();
    }
}
</code></pre>
<blockquote>
<p>当CSRF防护开启时，前端提交登录请求参数必须携带<code>_csrf</code>参数并提交对应token值，后端会验证token是否为后端生成的令牌，确认通过后即可进行登录操作</p>
<p>混合开发中，应该将token值写入隐藏表单域并跟随表单数据一同提交</p>
<p>前后端分离开发中，应该将令牌设置到<code>RequestHeader</code>中与JSON请求体一同提交</p>
</blockquote>
<h2 id="十一-oauth2协议">十一、Oauth2协议</h2>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/14871146-27195c36b3624de0.png" alt="img" loading="lazy"></figure>
<blockquote>
<p>简介：第三方认证技术方案最主要是用来解决认证协议的通用标准问题，因为要实现跨系统认证，各系统之间一定要遵循一定的接口协议</p>
<p>Oauth协议为用户资源的授权提供了一个安全的、开放而又简易的标准。同时，任何第三方都可以使用Oauth认证服务，人和服务提供商都可以实现自身的Oauth认证服务，业界提供了Oauth的多种语言（PHP、JavaScript、Java、Ruby等）实现的SDK，大大节约我们的开发时间。</p>
<p>Oauth目前发展到2.0版本，已得到广泛应用</p>
</blockquote>
<h3 id="1-基本概念-2">1. 基本概念</h3>
<ul>
<li>
<p>常用术语</p>
<ul>
<li>
<p>客户凭证（client credentials）：客户端的clientId和密码用于认证客户</p>
</li>
<li>
<p>令牌（tokens）：授权服务器在接受到客户请求后，颁发的访问令牌</p>
</li>
<li>
<p>作用域（scopes）：客户请求访问令牌时，由资源拥有者额外指定的细分权限（permission）</p>
</li>
</ul>
</li>
<li>
<p>令牌类型</p>
<ul>
<li>授权码：仅用于授权码授权类型，用于交换获取访问令牌和刷新令牌</li>
<li>访问令牌：用于代表一个用户或服务直接去访问受保护的资源</li>
<li>刷新令牌：用于去授权服务器获取一个刷新访问令牌</li>
<li>BearerToken：不管谁拿到Token都可以访问资源</li>
<li>Proof of Possession Token：可以校验client是否对Token由明确的一拥有权</li>
</ul>
</li>
<li>
<p>优点</p>
<ul>
<li>更安全，客户端不接触用户密码，服务器更易集中保护</li>
<li>广泛传播被持续采用</li>
<li>短寿命和封装的token</li>
<li>资源服务器与授权服务器解耦</li>
<li>集中式授权，简化客户端</li>
<li>易于请求和传递</li>
<li>考虑多种客户端架构场景</li>
<li>客户可以具有不同的信任级别</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>协议框架太宽泛，造成各种实现的兼容性和互操作性差</li>
<li>不是一个认证协议，本身并不能告诉你任何用户信息</li>
</ul>
</li>
</ul>
<h3 id="2-授权模式">2. 授权模式</h3>
<h4 id="1-授权码模式">①. 授权码模式</h4>
<figure data-type="image" tabindex="6"><img src="https://pic.zyblog.xyz/img/typora/image-20230514185203694.png?origin=typora" alt="image-20230514185203694" loading="lazy"></figure>
<h4 id="2-简化授权模式">②. 简化授权模式</h4>
<figure data-type="image" tabindex="7"><img src="https://pic.zyblog.xyz/img/typora/image-20230514185306983.png?origin=typora" alt="image-20230514185306983" loading="lazy"></figure>
<h4 id="3-密码模式">③. 密码模式</h4>
<figure data-type="image" tabindex="8"><img src="https://pic.zyblog.xyz/img/typora/image-20230514185427162.png?origin=typora" alt="image-20230514185427162" loading="lazy"></figure>
<h4 id="4-客户端模式">④. 客户端模式</h4>
<figure data-type="image" tabindex="9"><img src="https://pic.zyblog.xyz/img/typora/image-20230514185524440.png?origin=typora" alt="image-20230514185524440" loading="lazy"></figure>
<h4 id="5-刷新令牌">⑤. 刷新令牌</h4>
<figure data-type="image" tabindex="10"><img src="https://pic.zyblog.xyz/img/typora/image-20230514185619563.png?origin=typora" alt="image-20230514185619563" loading="lazy"></figure>
<h3 id="3-springsecurity-oauth2架构">3. SpringSecurity Oauth2架构</h3>
<figure data-type="image" tabindex="11"><img src="https://pic.zyblog.xyz/img/typora/image-20230514185755510.png?origin=typora" alt="image-20230514185755510" loading="lazy"></figure>
<h4 id="1-授权服务器">①. 授权服务器</h4>
<ul>
<li>Authorize Endpoint：授权端点，进行授权</li>
<li>Token Endpoint：令牌端点，经过授权拿到对应token</li>
<li>Introspection Endpoint：校验端点，校验token合法性</li>
<li>Revocation Endpoint：撤销端点，撤销授权<br>
<img src="https://pic.zyblog.xyz/img/typora/image-20220103133248555.png" alt="SpringSecurityOauth2" loading="lazy"></li>
</ul>
<h4 id="2-springsecurityoauth2流程">②. SpringSecurityOauth2流程</h4>
<ol>
<li>
<p>用户访问此时没有Token，Oauth2RestTemplate会报错，这个报错信息会被Oauth2ClientContextFilter捕获</p>
</li>
<li>
<p>认证服务器通过Authorization Endpoint进行授权，并通过AuthorizationServerTokenServices生成授权码并返回给客户端</p>
</li>
<li>
<p>客户端拿到授权码去认证服务器通过Token Endpoint调用AuthorizationServerTokenServices生成Token并返回给客户端</p>
</li>
<li>
<p>客户端拿到Token去资源服务器去访问资源，一般会通过Oauth2AuthenticationManager调用ResourceServerTokenServices进行校验，校验通过可以获取资源</p>
</li>
</ol>
<h4 id="3-快速入门">③. 快速入门</h4>
<ul>
<li>
<p>引入依赖</p>
<pre><code class="language-xml">&lt;!--管理spring-cloud版本--&gt;
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;Hoxton.SR12&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
&lt;!--引入对应依赖--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<figure data-type="image" tabindex="12"><img src="https://pic.zyblog.xyz/img/typora/image-20230514200005489.png?origin=typora" alt="image-20230514200005489" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://pic.zyblog.xyz/img/typora/image-20230514200029459.png?origin=typora" alt="image-20230514200029459" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://pic.zyblog.xyz/img/typora/image-20230514200146473.png?origin=typora" alt="image-20230514200146473" loading="lazy"></figure>
</li>
</ul>
<figure data-type="image" tabindex="15"><img src="https://pic.zyblog.xyz/img/typora/image-20230514192606549.png?origin=typora" alt="image-20230514192606549" loading="lazy"></figure>
<figure data-type="image" tabindex="16"><img src="https://pic.zyblog.xyz/img/typora/image-20230514192736465.png?origin=typora" alt="image-20230514192736465" loading="lazy"></figure>
<h2 id="十二-jwt">十二、JWT</h2>
<h3 id="1-常见的认证机制">1. 常见的认证机制</h3>
<ul>
<li>HTTP Basic Auth</li>
<li>Cookie Auth</li>
<li>OAuth</li>
<li>Token Auth</li>
</ul>
<h3 id="2-token-auth">2. Token Auth</h3>
<ul>
<li>优点
<ul>
<li>支持跨域访问</li>
<li>无状态，服务端无需存储session信息，只需在客户端cookie中存储token值</li>
<li>更适用于CDN</li>
<li>解耦，不需要绑定到一个特定的身份验证方案</li>
<li>适用于移动端应用，原生的移动应用是不支持cookie的</li>
<li>CSRF：不再依赖Cookie，所以不需要考虑CSRF的防护</li>
<li>性能相比于CookieAuth更快，因为只需要对token进行验证和解析</li>
<li>不需要再为登录页面做特殊处理</li>
<li>基于标准化</li>
<li>跨语言</li>
<li>轻量级JSON风格参数</li>
</ul>
</li>
<li>缺点
<ul>
<li>无法更新token有效期</li>
<li>无法销毁一个token</li>
</ul>
</li>
</ul>
<h3 id="3-什么是jwt">3. 什么是JWT</h3>
<blockquote>
<p>JSON Web Token是一个开放的行业标准（RFC7519），它定义了一种简洁的、自包含的协议格式，用于在统信双方传递json对象，传递信息经过数字签名可以被验证和信任，JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改</p>
</blockquote>
<ul>
<li>官网：https://jwt.io</li>
<li>标准：https://tools.ietf.org/html/rfc7519</li>
</ul>
<h4 id="31-jwt的优点">3.1 JWT的优点</h4>
<ol>
<li>jwt基于json，非常方便解析</li>
<li>可以在令牌中自定义丰富的内容，易扩展</li>
<li>通过非对称加密算法及数字签名技术，可以防篡改，安全性高</li>
<li>资源服务使用JWT可以不依赖认证服务完成授权</li>
</ol>
<h3 id="4-jwt组成">4. JWT组成</h3>
<p>一个JWT实际上就是一个字符串，它由三部分组成，头部、负载与签名。</p>
<blockquote>
<p>header（base64）.payload（base64）.singature（HS256）</p>
</blockquote>
<h4 id="41-头部">4.1 头部</h4>
<blockquote>
<p>用于描述关于当前JWT的最基本信息，例：签名所使用的算法</p>
<pre><code class="language-json">{
    &quot;alg&quot;:&quot;HS256&quot;,
    &quot;typ&quot;:&quot;JWT&quot;
}
</code></pre>
<ul>
<li>typ：类型</li>
<li>alg：签名算法</li>
</ul>
</blockquote>
<blockquote>
<p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6bit为一个单元，对应某个可打印字符。3个字节有24bit，对应4个Base64单元，即3个字节需要用4个可打印字符来表示，JDK中提供了非常方便的BASE64Encoder和BASE64Decoder，用他们可以非常方便的完成BASE64的编码和解码。BASE64是一个对称编码，所以JWT头部信息在被BASE64编码后并不安全</p>
</blockquote>
<h4 id="42-负载payload">4.2 负载（Payload）</h4>
<blockquote>
<p>用于存放有效信息，其实就是内容，内容包含以下3个部分</p>
<ul>
<li>
<p>标准中注册的声明</p>
<ul>
<li>
<p>iss：jwt签发者</p>
</li>
<li>
<p>sub：jwt所面向的用户</p>
</li>
<li>
<p>aud：接收jwt的一方</p>
</li>
<li>
<p>exp：jwt过期时间，必须大于签发时间</p>
</li>
<li>
<p>nbf：定义在何时之前jwt是不可用的</p>
</li>
<li>
<p>iat：jwt签发时间</p>
</li>
<li>
<p>jti：jwt的唯一身份标识，用来作为一次性token，回避重放攻击</p>
</li>
</ul>
</li>
<li>
<p>公共的声明</p>
<ul>
<li>可以添加任何信息，一般用来添加用户信息或业务信息，不要存放敏感信息，因为客户端可解密</li>
</ul>
</li>
<li>
<p>私有的声明</p>
<ul>
<li>是提供者和消费者共同定义的声明，一般不建议存放敏感信息，因为客户端可解密</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="43-签证signature">4.3 签证（Signature）</h4>
<blockquote>
<p>jwt的第三部分是一个签证信息，签证信息由以下三个部分组成：</p>
<ul>
<li>header（BASE64加密）</li>
<li>payload（BASE64加密）</li>
<li>secret（秘钥）
<ul>
<li>secret是存储在服务器上的，jwt的签发也是在服务器端，secret就是用来进行jwt的签发和jwt的验证的，这个秘钥是保密的，如果泄露，客户端就可以自行签发jwt</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="5-快速入门">5. 快速入门</h3>
<h4 id="51-引入依赖">5.1 引入依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;
    &lt;version&gt;0.9.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="52-书写工具类">5.2 书写工具类</h4>
<pre><code class="language-java">package com.zhiyuan.security.utils;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import javax.servlet.http.HttpServletRequest;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import static org.springframework.util.StringUtils.isEmpty;

/**
 * @author 絷缘
 * @date 2023-05-14
 * @Description JWT工具类
 */
public class JWTUtils {

    //默认的Token过期时间
    public static final Long EXPIRE_TIME = 7*24*60*60L;
    //JWT秘钥
    public static final String SECRET = &quot;4C5C8A178EE84933B04D21249185EDEB&quot;;
    public static final String SEPARATOR_EMPTY = &quot;&quot;;
    public static final String SEPARATOR_SHORT_LINE = &quot;-&quot;;

    /**
     * 生成UUID
     * @param upperCase 是否转大写
     * @return 返回UUID字符串
     */
    public static String UUID(boolean upperCase){
        String UUID_STR = UUID.randomUUID().toString().replace(SEPARATOR_SHORT_LINE, SEPARATOR_EMPTY);
        if(upperCase){
            return UUID_STR.toUpperCase();
        }
        return UUID_STR.toLowerCase();
    }
    /**
     * 生成JWT
     * @param uid 负载信息userId
     * @param username 负载信息username
     * @return 返回JWT字符串
     */
    public static String generateJWT(String uid,String username){
        HashMap&lt;String, Object&gt; headerMap = new HashMap&lt;&gt;();
        headerMap.put(&quot;alg&quot;,&quot;HS256&quot;);
        headerMap.put(&quot;typ&quot;,&quot;JWT&quot;);
        HashMap&lt;String, Object&gt; claimMap = new HashMap&lt;&gt;();
        claimMap.put(&quot;uid&quot;,uid);
        claimMap.put(&quot;username&quot;,username);
        String jwt = Jwts.builder()
                //设置头部信息
                .setHeader(headerMap)
                //设置负载信息
                .setIssuer(&quot;zhiyuan&quot;)
                .setId(UUID(true))
                .setSubject(&quot;cloud-drive&quot;)
                .setIssuedAt(new Date())
                .setClaims(claimMap)
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRE_TIME))
                //设置签名信息
                .signWith(SignatureAlgorithm.HS256, SECRET)
                .compact();
        return jwt;
    }

    /**
     * 生成JWT
     * @param id 传入jti
     * @param subject 传入sub
     * @param issuedAt 传入iat
     * @param claimMap  传入自定义声明claim
     * @param expireTime 传入exp过期时间
     * @return 返回JWT字符串
     */
    public static String generateJWT(String id, String subject, Date issuedAt,Map claimMap,Long expireTime){
        HashMap&lt;String, Object&gt; headerMap = new HashMap&lt;&gt;();
        headerMap.put(&quot;alg&quot;,&quot;HS256&quot;);
        headerMap.put(&quot;typ&quot;,&quot;JWT&quot;);
        String jwt = Jwts.builder()
                //设置头部信息
                .setHeader(headerMap)
                //设置负载信息
                .setIssuer(&quot;zhiyuan&quot;)
                .setId(id)
                .setSubject(subject)
                .setIssuedAt(issuedAt)
                .setClaims(claimMap)
                .setExpiration(new Date(System.currentTimeMillis() + expireTime))
                //设置签名信息
                .signWith(SignatureAlgorithm.HS256, SECRET)
                .compact();
        return jwt;
    }

    /**
     * 验证Token是否有效
     * @param jwt 传入jwt字符串
     * @return 有效返回true，无效返回false
     */
    public static boolean isValid(String jwt){
        if (isEmpty(jwt)){
            return false;
        }
        try{
            Jwts.parser().setSigningKey(SECRET).parseClaimsJws(jwt);
        }catch (Exception e){
            System.err.println(e.getMessage());
            return false;
        }
        return true;
    }

    /**
     * 验证Token是否有效
     * @param request 传入HttpServletRequest对象
     * @return 有效返回true，无效返回false
     */
    public static boolean isValid(HttpServletRequest request){
        String token = request.getHeader(&quot;token&quot;);
        if(isEmpty(token)){
            return false;
        }
        try{
            Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token);
        }catch (Exception e){
            System.err.println(e.getMessage());
            return false;
        }
        return true;
    }

    /**
     * 获取Token负载内容字符串
     * @param request 传入HttpServletRequest对象
     * @param claimName 传入负载内容key
     * @return 返回负载内容key对应的负载内容value
     */
    public static String getClaimInfoForString(HttpServletRequest request,String claimName){
        String token = request.getHeader(&quot;token&quot;);
        if(isEmpty(token)){
            return &quot;token不存在&quot;;
        }
        try{
            Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token);
            Claims body = claimsJws.getBody();
            return body.get(claimName,String.class);
        }catch (Exception e){
            System.err.println(e.getMessage());
            return &quot;token已失效&quot;;
        }
    }

    /**
     * 获取Token负载内容对象
     * @param request 传入HttpServletRequest对象
     * @param claimName 传入负载内容key
     * @param tClass 传入负载内容value类型
     * @return 返回负载内容key对应的负载内容value
     * @param &lt;T&gt;
     */
    public static &lt;T&gt; T getClaimInfoForObject(HttpServletRequest request,String claimName,Class&lt;T&gt; tClass) {
        String token = request.getHeader(&quot;token&quot;);
        if(isEmpty(token)){
            return null;
        }
        try{
            Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token);
            Claims body = claimsJws.getBody();
            return body.get(claimName,tClass);
        }catch (Exception e){
            System.err.println(e.getMessage());
            return null;
        }
    }

}
</code></pre>
<h4 id="53-redis工具类">5.3 Redis工具类</h4>
<pre><code class="language-java">import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.BoundSetOperations;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Component;

/**
 * spring redis 工具类
 **/
@SuppressWarnings(value = { &quot;unchecked&quot;, &quot;rawtypes&quot; })
@Component
public class RedisCache
{
    @Autowired
    public RedisTemplate redisTemplate;

    /**
     * 缓存基本的对象，Integer、String、实体类等
     *
     * @param key 缓存的键值
     * @param value 缓存的值
     * @return 缓存的对象
     */
    public &lt;T&gt; ValueOperations&lt;String, T&gt; setCacheObject(String key, T value)
    {
        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();
        operation.set(key, value);
        return operation;
    }

    /**
     * 缓存基本的对象，Integer、String、实体类等
     *
     * @param key 缓存的键值
     * @param value 缓存的值
     * @param timeout 时间
     * @param timeUnit 时间颗粒度
     * @return 缓存的对象
     */
    public &lt;T&gt; ValueOperations&lt;String, T&gt; setCacheObject(String key, T value, Integer timeout, TimeUnit timeUnit)
    {
        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();
        operation.set(key, value, timeout, timeUnit);
        return operation;
    }

    /**
     * 获得缓存的基本对象。
     *
     * @param key 缓存键值
     * @return 缓存键值对应的数据
     */
    public &lt;T&gt; T getCacheObject(String key)
    {
        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();
        return operation.get(key);
    }

    /**
     * 删除单个对象
     *
     * @param key
     */
    public void deleteObject(String key)
    {
        redisTemplate.delete(key);
    }

    /**
     * 删除集合对象
     *
     * @param collection
     */
    public void deleteObject(Collection collection)
    {
        redisTemplate.delete(collection);
    }

    /**
     * 缓存List数据
     *
     * @param key 缓存的键值
     * @param dataList 待缓存的List数据
     * @return 缓存的对象
     */
    public &lt;T&gt; ListOperations&lt;String, T&gt; setCacheList(String key, List&lt;T&gt; dataList)
    {
        ListOperations listOperation = redisTemplate.opsForList();
        if (null != dataList)
        {
            int size = dataList.size();
            for (int i = 0; i &lt; size; i++)
            {
                listOperation.leftPush(key, dataList.get(i));
            }
        }
        return listOperation;
    }

    /**
     * 获得缓存的list对象
     *
     * @param key 缓存的键值
     * @return 缓存键值对应的数据
     */
    public &lt;T&gt; List&lt;T&gt; getCacheList(String key)
    {
        List&lt;T&gt; dataList = new ArrayList&lt;T&gt;();
        ListOperations&lt;String, T&gt; listOperation = redisTemplate.opsForList();
        Long size = listOperation.size(key);

        for (int i = 0; i &lt; size; i++)
        {
            dataList.add(listOperation.index(key, i));
        }
        return dataList;
    }

    /**
     * 缓存Set
     *
     * @param key 缓存键值
     * @param dataSet 缓存的数据
     * @return 缓存数据的对象
     */
    public &lt;T&gt; BoundSetOperations&lt;String, T&gt; setCacheSet(String key, Set&lt;T&gt; dataSet)
    {
        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);
        Iterator&lt;T&gt; it = dataSet.iterator();
        while (it.hasNext())
        {
            setOperation.add(it.next());
        }
        return setOperation;
    }

    /**
     * 获得缓存的set
     *
     * @param key
     * @return
     */
    public &lt;T&gt; Set&lt;T&gt; getCacheSet(String key)
    {
        Set&lt;T&gt; dataSet = new HashSet&lt;T&gt;();
        BoundSetOperations&lt;String, T&gt; operation = redisTemplate.boundSetOps(key);
        dataSet = operation.members();
        return dataSet;
    }

    /**
     * 缓存Map
     *
     * @param key
     * @param dataMap
     * @return
     */
    public &lt;T&gt; HashOperations&lt;String, String, T&gt; setCacheMap(String key, Map&lt;String, T&gt; dataMap)
    {
        HashOperations hashOperations = redisTemplate.opsForHash();
        if (null != dataMap)
        {
            for (Map.Entry&lt;String, T&gt; entry : dataMap.entrySet())
            {
                hashOperations.put(key, entry.getKey(), entry.getValue());
            }
        }
        return hashOperations;
    }

    /**
     * 获得缓存的Map
     *
     * @param key
     * @return
     */
    public &lt;T&gt; Map&lt;String, T&gt; getCacheMap(String key)
    {
        Map&lt;String, T&gt; map = redisTemplate.opsForHash().entries(key);
        return map;
    }

    /**
     * 获得缓存的基本对象列表
     *
     * @param pattern 字符串前缀
     * @return 对象列表
     */
    public Collection&lt;String&gt; keys(String pattern)
    {
        return redisTemplate.keys(pattern);
    }
}
</code></pre>
<h4 id="54-redis序列化类">5.4 Redis序列化类</h4>
<pre><code class="language-java">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.SerializationException;

import java.nio.charset.Charset;

public class FastJsonRedisSerializer&lt;T&gt; implements RedisSerializer&lt;T&gt; {

    public static final Charset DEFAULT_CHARSET = Charset.forName(&quot;UTF-8&quot;);
    private Class&lt;T&gt; clazz;

    static
    {
        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
    }

    public FastJsonRedisSerializer(Class&lt;T&gt; clazz){
        super();
        this.clazz = clazz;
    }
    @Override
    public byte[] serialize(T t) throws SerializationException {
        if (t == null) {
            return new byte[0];
        }
        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);
    }
    @Override
    public T deserialize(byte[] bytes) throws SerializationException {
        if (bytes == null || bytes.length &lt;= 0) {
            return null;
        }
        String str = new String(bytes, DEFAULT_CHARSET);
        return (T) JSON.parseObject(str, clazz);
    }
}
</code></pre>
<h4 id="55-redis配置类">5.5 Redis配置类</h4>
<pre><code class="language-java">import com.alibaba.fastjson.support.spring.FastJsonRedisSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig {

    @Bean
    @SuppressWarnings(value = {&quot;unchecked&quot;,&quot;rawtypes&quot;})
    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) {
        RedisTemplate&lt;Object, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();
        redisTemplate.setConnectionFactory(redisConnectionFactory);
        // 使用 FastJsonRedisSerializer 替换默认序列化
        FastJsonRedisSerializer fastJsonRedisSerializer = new FastJsonRedisSerializer(Object.class);
        // 设置key和value的序列化规则
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(fastJsonRedisSerializer);
        // 设置hashKey和hashValue的序列化规则
        redisTemplate.setHashKeySerializer(new StringRedisSerializer());
        redisTemplate.setHashValueSerializer(fastJsonRedisSerializer);
        // 设置支持事物
        redisTemplate.setEnableTransactionSupport(true);
        redisTemplate.afterPropertiesSet();
        return redisTemplate;
    }
}
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/fgzXm9vap/">https://zhiyuandnc.github.io/fgzXm9vap/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2复习&Vue3学习]]></title>
        <id>https://zhiyuandnc.github.io/Vr0OXGyK8/</id>
        <link href="https://zhiyuandnc.github.io/Vr0OXGyK8/">
        </link>
        <updated>2023-01-26T13:01:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-vue简介">一、Vue简介</h2>
<h3 id="1-vue特点">1. Vue特点</h3>
<ul>
<li>采用组件化模式，提高代码复用率让代码更好维护</li>
<li>声明式编码，无需操作DOM，提高开发效率</li>
<li>使用虚拟DOM+Diff算法，尽量复用DOM节点</li>
</ul>
<h3 id="2-起步">2. 起步</h3>
<blockquote>
<p>初学者不建议使用vue-cli安装，请用script标签引入</p>
<pre><code class="language-html">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>下载地址</p>
<ul>
<li>开发版本：https://cn.vuejs.org/js/vue.js</li>
<li>生产版本：https://cn.vuejs.org/js/vue.min.js</li>
</ul>
</blockquote>
<h3 id="3-初识">3. 初识</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;meta charset=&quot;utf-8&quot;&gt;
		&lt;title&gt;Vue学习&lt;/title&gt;
		&lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id=&quot;root&quot;&gt;
			&lt;h2&gt;{{username}}&lt;/h2&gt;
			&lt;h2&gt;{{nickname}}&lt;/h2&gt;
			&lt;h2&gt;{{age}}&lt;/h2&gt;
		&lt;/div&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
			Vue.config.productionTip = false;
			new Vue({
				el:&quot;#root&quot; ,//绑定页面DOM
				data:{
					username:&quot;zhiyuan&quot;,
					nickname:&quot;絷缘&quot;,
					age:26
				},
			});
		&lt;/script&gt;
	&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<blockquote>
<p>Vue中一个实例对应一个页面DOM容器，一个DOM容器无法对应多个实例，一个实例也不能绑定多个DOM容器</p>
</blockquote>
<h3 id="4-模板语法">4. 模板语法</h3>
<h4 id="41-插值语法插值表达式">4.1 插值语法（插值表达式）</h4>
<h5 id="1-插值表达式">①. 插值表达式</h5>
<ul>
<li>格式：{{ 表达式 }}</li>
</ul>
<blockquote>
<p>注意：插值表达式中必须是JS代码或JS表达式或Vue实例中声明的data属性</p>
</blockquote>
<h4 id="42-指令语法属性绑定">4.2 指令语法（属性绑定）</h4>
<h5 id="2-属性绑定">②. 属性绑定</h5>
<ul>
<li>
<p>格式：<code>v-bind:[attributeName]</code></p>
<ul>
<li>
<p>例</p>
<pre><code class="language-html">&lt;div id=&quot;root&quot;&gt;
	&lt;img v-bind:src=&quot;avatar&quot;/&gt;    
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	new Vue({
       el:&quot;#root&quot;,
       data:{
       	   avatar:&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot;	    
       } 
    });
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>页面效果</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20220105104936745.png" alt="页面效果" loading="lazy"></figure>
</li>
<li>
<p>简写：<code>:[attributeName]</code></p>
<ul>
<li>
<p>例</p>
<pre><code class="language-html">&lt;div id=&quot;root&quot;&gt;
	&lt;img :src=&quot;avatar&quot;/&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	new Vue({
       el:&quot;#root&quot;,
       data:{
       	   avatar:&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot;	    
       } 
    });
&lt;/script&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<h5 id="2-双向绑定">②. 双向绑定</h5>
<ul>
<li>
<p>格式：<code>v-model:value</code></p>
<ul>
<li>
<p>例</p>
<pre><code class="language-html">&lt;div id=&quot;root&quot;&gt;
	&lt;img :src=&quot;avatar&quot;/&gt;    
    &lt;input type=&quot;text&quot; v-model:value=&quot;avatar&quot;/&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	new Vue({
       el:&quot;#root&quot;,
       data:{
       	   avatar:&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot;	    
       } 
    });
&lt;/script&gt;
</code></pre>
</li>
</ul>
<blockquote>
<p>如下代码是错误的，因为v-model只能应用表单类元素上，我们认为只有可以被改变value的元素双向绑定才有意义</p>
</blockquote>
</li>
<li>
<p>简写：<code>v-model</code></p>
<ul>
<li>v-model默认绑定就是value属性</li>
</ul>
</li>
</ul>
<h3 id="5-容器绑定两种方式">5. 容器绑定两种方式</h3>
<h4 id="51-方式一el绑定">5.1 方式一：el绑定</h4>
<pre><code class="language-js">new Vue({
   	el:&quot;DOM元素标志&quot;,//使用el挂载DOM容器
    data:{
    	key:value,
        ......
    }
});
</code></pre>
<h4 id="52-方式二mount挂载">5.2 方式二：mount挂载</h4>
<pre><code class="language-js">const vm = new Vue({
   data:{
       key:value,
       ......
   } 
});
vm.$mount('DOM元素标志');//使用实例对象挂载DOM容器
</code></pre>
<h3 id="6-data属性的两种写法">6. data属性的两种写法</h3>
<h4 id="61-方式一对象形式">6.1 方式一：对象形式</h4>
<pre><code class="language-js">new Vue({
   	el:&quot;#container&quot;,
    data:{
        key1:value1,
        key2:value2,
        key...:value...
    }
});
</code></pre>
<h4 id="62-方式二函数形式">6.2 方式二：函数形式</h4>
<pre><code class="language-js">new Vue({
    el:&quot;#container&quot;,
    data:function(){
        return {
            key1:value1,
            key2:value2,
            key...:value...
        }
    }
    //简写
    data(){
    	return {
            key1:value1,
            key2:value2,
            key...:value...
        }
	}
});
</code></pre>
<blockquote>
<p>注意：函数方式返回data数据时，不可使用箭头函数，因为箭头函数没有自己的this对象，会向上寻找父类的this，就会拿到window对象，但是我们书写返回函数需要被Vue对象所调用，故而不能使用箭头函数</p>
<p>应用场景：组件封装时，我们必须使用函数式写法返回data值</p>
</blockquote>
<h2 id="二-mvvm简介">二、MVVM简介</h2>
<h3 id="1-mvvm模型组成">1. MVVM模型组成</h3>
<h4 id="11-m模型model">1.1 M：模型（Model）</h4>
<ul>
<li>对应data中的数据</li>
</ul>
<h4 id="12-v视图view">1.2 V：视图（View）</h4>
<ul>
<li>对应模板渲染</li>
</ul>
<h4 id="13-vm视图模型">1.3 VM：视图模型</h4>
<ul>
<li>对应Vue实例对象</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/mvvm.png" alt="MVVM模型图" loading="lazy"></figure>
<h3 id="2-objectdefineproperty">2. Object.defineProperty</h3>
<h4 id="21-es6为对象添加属性">2.1 ES6为对象添加属性</h4>
<ul>
<li>Object.defineProperty（originObject，attributeName，attributeValue）</li>
</ul>
<pre><code class="language-js">let person = {
    name:&quot;zhiyuan&quot;,
    gender:&quot;male&quot;
}
Object.defineProperty(person,'age',{
    value:18
});
</code></pre>
<blockquote>
<p>注意：通过defineProperty直接添加的对象属性，是无法进行枚举的，即遍历对象无法取得该值，且我们无法修改或删除这个属性</p>
<p>如何直观的看到？</p>
<ul>
<li>Object.keys（object）
<ul>
<li>使用keys函数可以将指定对象的key值抽取为一个数组，我们会发现新加的属性没有出现在数组中</li>
</ul>
</li>
</ul>
<p>如何解决这个问题？</p>
<pre><code class="language-js">Object.defineProperty(person,'age',{
    value:18,
    enumerable:true, //将enumrable置为true，就可以对其进行枚举了
    //为了方便使用，我们将writable,configurable属性也置为true，这样就可以对该属性进行修改删除了	
    writable:true,
    configurable:true
});
</code></pre>
</blockquote>
<ul>
<li>
<p>为属性增加getter和setter方法</p>
<pre><code class="language-js">let age = 18;
let user = {
    username:&quot;zhiyuan&quot;,
    nickname:&quot;絷缘&quot;,
    password:&quot;123456&quot;,
    gender:&quot;male&quot;
}
Object.defineProperty(user,'age',{
   	get:function(){
        return age;
    },
    set:function(age){
        this.age = age;
    }
});
</code></pre>
</li>
</ul>
<h4 id="22-数据代理">2.2 数据代理</h4>
<blockquote>
<p>概念：指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果。</p>
<p>Vue实例中的data就是实现了数据代理，data在Vue实例中实际存在的属性名称为_data</p>
</blockquote>
<h3 id="3-事件处理">3. 事件处理</h3>
<h4 id="31-methods">3.1 methods</h4>
<pre><code class="language-js">const vm = new Vue({
   el:&quot;#container&quot;,
   data:{
       user:{
           username:&quot;zhiyuan&quot;,
    		nickname:&quot;絷缘&quot;,
    		password:&quot;123456&quot;,
    		gender:&quot;male&quot;,
           	age:18
       }
   },
   methods:{
       methodName(event){
           //methodContent
    		console.log(this===vm)	//true 此处this为vm实例对象
       }
   } 
}};
</code></pre>
<h4 id="32-事件绑定">3.2 事件绑定</h4>
<ul>
<li>格式：<code>v-on:[event]</code></li>
</ul>
<pre><code class="language-html">&lt;div id=&quot;container&quot;&gt;
	&lt;button v-on:click=&quot;showInfo($event)&quot;&gt;按钮&lt;/button&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	const vm = new Vue({
        el:&quot;#container&quot;,
        data:{
            user:{
                username:&quot;zhiyuan&quot;,
    			nickname:&quot;絷缘&quot;,
    			password:&quot;123456&quot;,
    			gender:&quot;male&quot;,
           		age:18
            }
        },
        methods:{
            showInfo(event){
                alert(&quot;按钮被点击&quot;);
            }
        }
    });
&lt;/script&gt;
</code></pre>
<ul>
<li>简写：<code>@[event]</code>
<ul>
<li>
<p>例：<code>v-on:click</code>  ==  <code>@click</code></p>
<pre><code class="language-vue">&lt;button @click=&quot;showMessage($event,传递参数)&quot;&gt;点我提示信息&lt;/button&gt;
</code></pre>
<pre><code class="language-js">new Vue({
	el:&quot;#root&quot;,
	data:{},
	methods:{
		showMessage(event,传递参数){
            console.log(event.target.innerText,传递参数);
        }
	}
});
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="33-事件修饰符">3.3 事件修饰符</h4>
<ul>
<li>阻止默认行为：<code>.prevent</code></li>
<li>阻止事件冒泡：<code>.stop</code></li>
<li>事件只触发一次：<code>.once</code></li>
<li>使用事件捕获模式：<code>.capture</code></li>
<li>只有event.target是当前操作的元素时才出发事件：<code>.self</code></li>
<li>立即执行事件默认行为，无需等待事件回调执行完毕：<code>.passive</code>
<ul>
<li><code>@wheel</code>：鼠标滚轮滚动事件</li>
<li><code>@scroll</code>：滚动条滚动事件</li>
</ul>
</li>
</ul>
<h4 id="34-键盘事件">3.4 键盘事件</h4>
<ul>
<li>
<p>Vue中提供的常用按键别名</p>
<ul>
<li><code>enter</code> ：回车键</li>
<li><code>delete</code> ：退格键和删除键</li>
<li><code>esc</code> ：ESC键</li>
<li><code>space</code> ：空格键</li>
<li><code>tab</code> ：Tab键</li>
<li><code>up</code> ：方向键上</li>
<li><code>down</code> ：方向键下</li>
<li><code>left</code> ：方向键左</li>
<li><code>right</code> ：方向键右</li>
</ul>
<blockquote>
<p>Vue未提供别名的按键，可以使用原始key值绑定，但要注意转换为短横线命名方式，如：caps-lock</p>
<p>注意：tab键在@keyup事件中无效，因为tab键默认会切换焦点区域，必须配合@keydown才能正常使用</p>
</blockquote>
</li>
<li>
<p>系统修饰键</p>
<ul>
<li><code>ctrl</code></li>
<li><code>alt</code></li>
<li><code>shift</code></li>
<li><code>win</code>：windows徽标键</li>
</ul>
<blockquote>
<p>注意：系统修饰键配合@keydown才可以正常触发事件，如果是@keyup需要配合其他按键才能正常触发</p>
</blockquote>
</li>
<li>
<p>Vue中自定义按键别名</p>
<pre><code class="language-js">Vue.config.keyCodes.huiche = 13;
</code></pre>
</li>
</ul>
<h3 id="4-计算属性">4. 计算属性</h3>
<h4 id="41-基本概念">4.1 基本概念</h4>
<blockquote>
<p>所谓的计算属性就是用几个data中已有的属性进行处理计算后得到一个全新的属性</p>
</blockquote>
<pre><code class="language-js">const vm = new Vue({
    el:&quot;#container&quot;,
    data:{
        firstName:&quot;絷缘&quot;,
        lastName:&quot;解&quot;
    },
    methods:{},
    computed:{
        fullName:{
            get(){
                return this.firstName + &quot;-&quot; + this.lastName;
            },
            set(value){
                cosnt array = value.split(&quot;-&quot;);
                this.firstName = array[0];
                this.lastName = array[1];
            }
        }
    }
})
</code></pre>
<h4 id="42-getter和setter调用时机">4.2 getter和setter调用时机</h4>
<ul>
<li>get调用时机
<ul>
<li>初次读取计算属性时</li>
<li>计算属性所依赖的其他属性发生变化时</li>
</ul>
</li>
<li>set调用时机
<ul>
<li>当计算属性被修改时</li>
</ul>
</li>
</ul>
<h4 id="43-简写形式">4.3 简写形式</h4>
<ul>
<li>
<p>简写</p>
<ul>
<li>应用场景：计算属性只读不写，默认当做getter使用</li>
</ul>
<pre><code class="language-js">const vm = new Vue({
    el:&quot;#container&quot;,
    data:{
        firstName:&quot;絷缘&quot;,
        lastName:&quot;解&quot;
    },
    methods:{},
    computed:{
        fullName(){
        	return this.firstName + &quot;-&quot; + this.lastName;
        }
    }
})
</code></pre>
</li>
</ul>
<h3 id="5-监视属性">5. 监视属性</h3>
<h4 id="51-在watch属性中书写监视内容">5.1 在watch属性中书写监视内容</h4>
<ul>
<li>监视属性不仅可以监视data中声明的属性，还可以监视计算属性</li>
</ul>
<pre><code class="language-js">const vm = new Vue({
    el:&quot;#container&quot;,
    data:{
        isLogin:true,
    },
    methods:{},
    computed:{},
    watch:{
        'isLogin':{
            //初始化时让handler执行一次
            immediate:true,
            //当被监视属性改变时会调用handler方法
            handler(newValue,oldValue){
                console.log(isLogin==true?&quot;已登录&quot;:&quot;未登录&quot;);
            }
        }
    }
});
</code></pre>
<h4 id="52-vm实例调用watch方法书写监视内容">5.2 vm实例调用$watch方法书写监视内容</h4>
<pre><code class="language-js">vm.$watch('isLogin',{
    //初始化时让handler执行一次
    immediate:true,
    //当被监视属性改变时会调用handler方法
    handler(newValue,oldValue){
        console.log(isLogin==true?&quot;已登录&quot;:&quot;未登录&quot;);
    }
})
</code></pre>
<h4 id="53-深度监视">5.3 深度监视</h4>
<ul>
<li>Vue的watch默认不监视对象内部值的改变，要想让watch可以监视到对象内部属性的变化，需要配置<code>deep:true</code></li>
</ul>
<blockquote>
<p>watch中默认监视外层对象，无法监视多级结构的内容改变，当外层对象改变才会执行handler，内部成员的改变不会触发handler，如果我们想要监视内部成员的改变，需要在watch对应监视属性中添加 <code>deep:true</code></p>
</blockquote>
<pre><code class="language-js">const vm = new Vue({
    el:&quot;#container&quot;,
    data:{
        user:{
            username:&quot;zhiyuan&quot;,
            gender:&quot;male&quot;
        }
    }
    watch:{
    	'user':{
    		deep:true,
    		handler(){
    			console.log(&quot;user被改变&quot;);
			}
		}
	}
})
</code></pre>
<p>此时我们改变user中的属性值，handler也会被触发执行。</p>
<h4 id="54-简写形式">5.4 简写形式</h4>
<blockquote>
<p>watch使用简写方式的代价就是无法进行除了handler方法外的配置，比如深度监视，比如初始化执行</p>
</blockquote>
<pre><code class="language-js">const vm = new Vue({
    el:&quot;#container&quot;,
    data:{
        isLogin:true
    }
    watch:{
    	isLogin(newValue,oldValue){
    		console.log('isLogin被修改',newValue,oldValue);
		}
	}
})
</code></pre>
<h3 id="6-计算属性与监视属性的区别">6. 计算属性与监视属性的区别</h3>
<h4 id="61-区别">6.1 区别</h4>
<blockquote>
<ol>
<li>computed可以完成的功能，watch都可以完成</li>
<li>watch可以完成的功能，computed不一定能够完成，例如watch可以进行异步操作</li>
</ol>
</blockquote>
<h4 id="62-注意事项">6.2 注意事项</h4>
<blockquote>
<p>注意：</p>
<ol>
<li>被Vue所管理的函数应该写成普通函数，这样this的指向才是vue实例对象</li>
<li>所有不被Vue管理的函数（定时器回调函数，ajax回调函数，Promise的回调函数等），最好写成箭头函数，这样this的指向才是vue实例对象，否则它们将指向约定的this为window对象</li>
</ol>
</blockquote>
<h3 id="7-绑定样式">7. 绑定样式</h3>
<h4 id="71-绑定class">7.1 绑定class</h4>
<h5 id="步骤">步骤</h5>
<ul>
<li>先定义好对应选择器的样式</li>
<li>将选择器的名称声明到data数据中</li>
<li>将data数据中的选择器名称与class绑定</li>
</ul>
<h4 id="72-绑定style">7.2 绑定style</h4>
<h5 id="1-写法一">①. 写法一</h5>
<pre><code class="language-html">&lt;div id=&quot;container&quot; :style=&quot;{fontSize:fontSize+'px'}&quot;&gt;
    内容
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:&quot;#container&quot;,
        data:{
            fontSize:40
        }
    });
&lt;/script&gt;
</code></pre>
<h5 id="2-写法二">②. 写法二</h5>
<pre><code class="language-html">&lt;div id=&quot;container&quot; :style=&quot;styleObj&quot;&gt;
    内容
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:&quot;#container&quot;,
        data:{
            styleObj:{
                fontSize:'40px',
                color:'#666'
            }
        }
    });
&lt;/script&gt;
</code></pre>
<h5 id="3-写法三">③. 写法三</h5>
<pre><code class="language-html">&lt;div id=&quot;container&quot; :style=&quot;[styleObj1,styleObj2]&quot;&gt;
    内容
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	const vm = new Vue({
        el:&quot;#container&quot;,
        data:{
            styleObj1:{
                fontSize:'40px'
            },
            styleObj2:{
                color:'#666'
            }
        }
    });
&lt;/script&gt;
</code></pre>
<h3 id="8-条件渲染">8. 条件渲染</h3>
<h4 id="81-v-if">8.1 v-if</h4>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;h2 v-if=&quot;isLogin === false&quot;&gt;登录注册&lt;/h2&gt;
    &lt;h2 v-else&gt;已登录&lt;/h2&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:&quot;.container&quot;,
        data:{
            isLogin:false
        }
    });
&lt;/script&gt;
</code></pre>
<h4 id="82-v-show">8.2 v-show</h4>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;h2 v-show=&quot;isLogin === false&quot;&gt;登录注册&lt;/h2&gt;
    &lt;h2 v-show=&quot;isLogin&quot;&gt;已登录&lt;/h2&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:&quot;.container&quot;,
        data:{
            isLogin:false
        }
    });
&lt;/script&gt;
</code></pre>
<h4 id="83-v-if与v-show的区别">8.3 v-if与v-show的区别</h4>
<ul>
<li>区别
<ol>
<li>v-if 适用于切换频率比较低的场景，因为它是通过DOM渲染节点来完成的显示与隐藏，当不满足条件时，页面元素会被移除，满足条件时又会被创建，所以当大量的元素需要频繁切换的时候，v-if不是很好的解决方案</li>
<li>v-show 适用于切换频率较高的场景，因为它是通过元素的css样式 <code>display:none</code> 属性来实现元素的显示与隐藏的，当满足条件时， <code>display:none</code> 被移除，元素显示，不满足条件时， <code>display:none</code> 被添加，元素隐藏</li>
</ol>
</li>
</ul>
<h4 id="84-条件相同时条件渲染书写方式">8.4 条件相同时条件渲染书写方式</h4>
<ul>
<li>
<p>例</p>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;h2 v-if=&quot;isLogin === false&quot;&gt;登录&lt;/h2&gt;
    &lt;h2 v-if=&quot;isLogin === false&quot;&gt;注册&lt;/h2&gt;
&lt;/div&gt;
&lt;!--v-if条件相同重复书写，进一步优化--&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;div v-if=&quot;isLogin === false&quot;&gt;
        &lt;h2&gt;登录&lt;/h2&gt;
    	&lt;h2&gt;注册&lt;/h2&gt;
    &lt;/div&gt;   
&lt;/div&gt;
</code></pre>
<blockquote>
<p>上面的优化虽然实现了效果也避免了条件渲染重复，但是加入了新的没有必要的页面元素，一定程度影响了布局，不是非常合适，那么有没有一种办法解决这个问题呢？</p>
<p>Vue为我们提供了一个名为 <code>&lt;template&gt;</code> 的标签，这个标签可以与条件渲染 <code>v-if</code> 结合使用而且不影响页面结构，注意只能与 <code>v-if</code> 结合使用</p>
</blockquote>
</li>
</ul>
<h3 id="9-列表渲染">9. 列表渲染</h3>
<h4 id="91-基本列表">9.1 基本列表</h4>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;!-- 遍历数组 --&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li class=&quot;list-item&quot; v-for=&quot;(user,index) in userList&quot; :key=&quot;user.uid&quot;&gt;
            {{ user.uid + &quot;-&quot; + user.username + &quot;-&quot; + user.age}}
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;!-- 遍历对象 --&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li class=&quot;list-item&quot; v-for=&quot;(value,key) of admin&quot; :key=&quot;key&quot;&gt;
            {{ key + &quot;-&quot; + value }}
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;!-- 遍历字符串 --&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li class=&quot;list-item&quot; v-for=&quot;(char,index) of username&quot; :key=&quot;index&quot;&gt;
            {{ index + &quot;-&quot; + char }}
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;!-- 遍历指定次数 --&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li class=&quot;list-item&quot; v-for=&quot;(number,index) of 5&quot;&gt;
            {{ index + &quot;-&quot; + number }}
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:'.container',
        data:{
            userList:[
                {uid:'001',username:'zhiyuan001',age:18},
                {uid:'002',username:'zhiyuan002',age:20},
                {uid:'003',username:'zhiyuan003',age:23},
            ],
            admin:{
                username:&quot;zhiyuan&quot;,
                role:&quot;admin&quot;,
                nickname:&quot;絷缘&quot;,
                email:&quot;1234567890@gmail.com&quot;
            },
            username:&quot;zhiyuan&quot;
        }
    });
&lt;/script&gt;
</code></pre>
<h4 id="92-key的作用">9.2 key的作用</h4>
<blockquote>
<p>之前代码中，我们使用index作为key，其实这是不正确的，虽然当前我们确实没有发现问题，但是当我们对原有数据进行打乱顺序的操作后，如果继续以index作为key，那么会导致vue对DOM元素的复用错乱，进而导致页面数据错乱的结果。</p>
<p>比如：当我们往数组的头部追加一项内容时，列表渲染会按索引与之前的DOM进行比较，查看是否可复用，但是我们现在的DOM元素的顺序已经发生了改变，在对其进行比较复用，就会导致元素和数据的错乱。</p>
<p>那么我们不写怎么样？</p>
<p>Vue会默认将当前数据的索引值作为当前DOM绑定的key值，所以造成的结果是一样的。</p>
</blockquote>
<h5 id="正确的key值绑定">正确的key值绑定</h5>
<blockquote>
<p>key值一定是可以唯一标识当前元素的信息，例如数据的ID值，这样无论我们变换顺序或者做其它操作，都不会对最终列表渲染的结果产生影响。</p>
</blockquote>
<h5 id="key的作用">key的作用</h5>
<blockquote>
<p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据新的数据生成新的虚拟DOM，随后与之前的虚拟DOM进行差异比较，比较规则如下：</p>
<ol>
<li>旧的虚拟DOM中找到了与新的虚拟DOM相同的key
<ul>
<li>若是虚拟DOM的内容没有发生改变，直接使用旧的虚拟DOM所生成的旧的真实DOM元素</li>
<li>若是虚拟DOM的内容已经发生改变，则由新的虚拟DOM生成新的真实DOM元素</li>
</ul>
</li>
<li>旧的虚拟DOM中未找到与新的虚拟DOM相同的key
<ul>
<li>根据新的虚拟DOM创建新的真实DOM元素</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="10-列表过滤">10. 列表过滤</h3>
<h4 id="101-方式一监视属性">10.1 方式一：监视属性</h4>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;input type=&quot;text&quot; v-model=&quot;keyWord&quot; placeholder=&quot;搜索...&quot;&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li class=&quot;list-item&quot; v-for=&quot;(user,index) in tempList&quot; :key=&quot;user.uid&quot;&gt;
            {{ user.uid + &quot;-&quot; + user.username + &quot;-&quot; + user.age}}
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:&quot;.container&quot;,
        data:{
            userList:[
                {uid:'001',username:'胡歌',age:18,gender:'male'},
                {uid:'002',username:'霍建华',age:20,gender:'male'},
                {uid:'003',username:'焦恩俊',age:23,gender:'male'},
                {uid:'004',username:'胡一菲',age:20,gender:'female'},					
                {uid:'005',username:'胡图图',age:6,gender:'male'},					
                {uid:'006',username:'刘诗诗',age:21,gender:'female'},					
                {uid:'007',username:'刘亦菲',age:22,gender:'female'},				
                {uid:'008',username:'刘德华',age:22,gender:'male'}			
            ],
            keyWord:'',
            tempList:[]
        },
        watch:{
            'keyWord':{
                immediate:true,
                handler(newValue,OldValue){
                    this.tempList = this.userList.filter((user)=&gt;{
                        return user.username.indexOf(newVlaue) != -1;
                    })
                }
            }
        }

    });
&lt;/script&gt;
</code></pre>
<h4 id="102-方式二计算属性">10.2 方式二：计算属性</h4>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;input type=&quot;text&quot; v-model=&quot;keyWord&quot; placeholder=&quot;搜索...&quot;&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li class=&quot;list-item&quot; v-for=&quot;(user,index) in tempList&quot; :key=&quot;user.uid&quot;&gt;
            {{ user.uid + &quot;-&quot; + user.username + &quot;-&quot; + user.age}}
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:&quot;.container&quot;,
        data:{
            userList:[
                {uid:'001',username:'胡歌',age:18,gender:'male'},
                {uid:'002',username:'霍建华',age:20,gender:'male'},
                {uid:'003',username:'焦恩俊',age:23,gender:'male'},
                {uid:'004',username:'胡一菲',age:20,gender:'female'},
                {uid:'005',username:'胡图图',age:6,gender:'male'},	
                {uid:'006',username:'刘诗诗',age:21,gender:'female'},
                {uid:'007',username:'刘亦菲',age:22,gender:'female'},				
                {uid:'008',username:'刘德华',age:22,gender:'male'}			
            ],
            keyWord:''
        },
        computed:{
            tempList:{
                get(){
                    return this.userList.filter((user)=&gt;{
                        return user.username.indexOf(this.keyWord) != -1;
                    });
                }
            }
        }
    });
&lt;/script&gt;
</code></pre>
<h3 id="11-列表排序">11. 列表排序</h3>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;input type=&quot;text&quot; v-model=&quot;keyWord&quot; placeholder=&quot;搜索...&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;年龄降序&quot; @click=&quot;sortType = 1&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;年龄升序&quot; @click=&quot;sortType = 2&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;原顺序&quot; @click=&quot;sortType = 0&quot;&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li class=&quot;list-item&quot; v-for=&quot;(user,index) in tempList&quot; :key=&quot;user.uid&quot;&gt;
            {{ user.uid + &quot;-&quot; + user.username + &quot;-&quot; + user.age}}
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const vm = new Vue({
        el:&quot;.container&quot;,
        data:{
            userList:[
                {uid:'001',username:'胡歌',age:18,gender:'male'},
                {uid:'002',username:'霍建华',age:20,gender:'male'},
                {uid:'003',username:'焦恩俊',age:23,gender:'male'},
                {uid:'004',username:'胡一菲',age:20,gender:'female'},					
                {uid:'005',username:'胡图图',age:6,gender:'male'},					
                {uid:'006',username:'刘诗诗',age:21,gender:'female'},					
                {uid:'007',username:'刘亦菲',age:22,gender:'female'},				
                {uid:'008',username:'刘德华',age:22,gender:'male'}			
            ],
            keyWord:'',
            //sortType为0时正常排序，为1时按年龄降序，为2时按年龄升序
            sortType:0
        },
        computed:{
            tempList:{
                get(){
                    const arr = this.userList.filter((user)=&gt;{
                        return user.username.indexOf(this.keyWord)!=-1;
                    });
                    if(this.sortType){
                        arr.sort((u1,u2)=&gt;{
                            return this.sortType===1 ? u2.age-u1.age :u1.age-u2.age;
                        });
                    }
                    return arr;
                }
            }
        }
    });
&lt;/script&gt;
</code></pre>
<h3 id="12-vue监测数据的原理">12. Vue监测数据的原理</h3>
<blockquote>
<ol>
<li>Vue会监视data中所有层次的数据</li>
<li>如何监测对象中的数据？
<ul>
<li>通过setter实现监视，且要在new Vue时就传入要监测的数据
<ul>
<li>对象中后追加的属性，Vue默认不做响应式处理</li>
<li>如需给后添加的属性做响应式，请使用如下API
<ul>
<li><code>Vue.set(target,propertyName/index,value)</code></li>
<li><code>this.$set(target,propertyName/index,value)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>如何监测数组中的数据？
<ul>
<li>通过包裹数组更新元素的方法实现，本质上就是做了两件事
<ul>
<li>调用原生JS对应的数组方法进行更新</li>
<li>重新解析模板，更新页面</li>
</ul>
</li>
</ul>
</li>
<li>在Vue修改数组中的某个元素一定要用如下方法（即Vue重新包装过的方法）：
<ul>
<li><code>push</code> <code>pop</code> <code>shift</code> <code>unshift</code> <code>splice</code> <code>sort</code> <code>reverse</code></li>
<li><code>Vue.set()</code> <code>this.$set()</code></li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="13-收集表单数据">13. 收集表单数据</h3>
<h4 id="v-model的三个修饰符">v-model的三个修饰符</h4>
<ul>
<li><code>lazy</code> ：失去焦点再收集数据</li>
<li><code>number</code> ：输入字符串转为有效的数字</li>
<li><code>trim</code>：输入首尾空格过滤</li>
</ul>
<blockquote>
<p>收集表单数据注意事项：</p>
<ol>
<li><input type="text"/> v-model搜集的是value值，用户的输入就是value值</li>
<li><input type="radio"/> v-model搜集的是value值，而且需要给标签设置value值</li>
<li>
<input type="checkbox"/>
1. 如果没有设置value值，默认搜集checked的值，即true or false
2. 设置了value值
   1. data中搜集此项的属性默认值为字符串，那么vue还是会搜集checked的值
   2. data中搜集此项的属性默认值为数组，那么vue搜集的就是value组成的数组
</li>
</ol>
</blockquote>
<h3 id="14-过滤器">14. 过滤器</h3>
<blockquote>
<p>过滤器</p>
<ul>
<li>定义
<ul>
<li>对要展示的数据进行特定格式化后再显示，适用场景，后端商品价格数据，时间戳格式修改为前端展示格式</li>
</ul>
</li>
<li>语法
<ul>
<li>注册过滤器：<code>Vue.filter(name,callback)</code> 或 <code>new Vue({filters:{...}})</code></li>
<li>使用过滤器：<code>{{ 参数 | 过滤器名 }}</code> 或 <code>v-bind:属性名=&quot; 参数 | 过滤器名&quot;</code></li>
</ul>
</li>
<li>备注
<ul>
<li>过滤器也可以接受额外参数，多个过滤器可以串联使用，后一个过滤器的参数为前一个过滤器的返回结果</li>
<li>过滤器并没有改变原本的数据，只是产生了格式化后的新数据</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="141-局部过滤器">14.1 局部过滤器</h4>
<pre><code class="language-html">&lt;div id=&quot;container&quot;&gt;
	&lt;h3&gt;{{formatTime}}&lt;/h3&gt;
    &lt;h3&gt;{{getFormatTime()}}&lt;/h3&gt;
    &lt;h3&gt;{{time|timeFormatFilter('YYYY-MM-DD')}}&lt;/h3&gt;
&lt;/div&gt;
&lt;script src=&quot;./js/dayjs.min.js&quot;&gt;&lt;/script&gt;
&lt;script	type=&quot;text/javascript&quot;&gt;
	const vm = new Vue({
        el:&quot;#container&quot;,
        data:{
            time:1641475263843
        },
        computed:{
            formatTime(){
                return dayjs(this.time).format('YYYY-MM-DD HH:mm:ss');
            }
        },
        methods:{
            getFormatTime(){
                return dayjs(this.time).format('YYYY-MM-DD HH:mm:ss');
            }
        },
        filters:{
            timeFormatFilter(value,formatStr='YYYY-MM-DD HH:mm:ss'){
                return dayjs(value).format(formatStr);
            }
        }
    });
&lt;/script&gt;
</code></pre>
<h4 id="142-全局过滤器">14.2 全局过滤器</h4>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot;&gt;
    Vue.filter('filterName',function(value){
       return value.slice(0,3);
    });
&lt;/script&gt;
</code></pre>
<blockquote>
<p>过滤器只能与插值表达式或者v-bind使用，无法与v-model结合使用</p>
</blockquote>
<h3 id="15-其他内部指令">15. 其他内部指令</h3>
<h4 id="151-v-text">15.1 v-text</h4>
<ul>
<li>向其所在的节点中渲染文本内容，不过它会替换掉节点中已有的内容</li>
</ul>
<pre><code class="language-html">&lt;div id=&quot;container&quot;&gt;
	&lt;div v-text=&quot;text&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script	type=&quot;text/javascript&quot;&gt;
	const vm = new Vue({
         el:&quot;#container&quot;,
        data:{
            text:&quot;文本内容&quot;
        }
    });
&lt;/script&gt;
</code></pre>
<h4 id="152-v-html">15.2 v-html</h4>
<pre><code class="language-html">&lt;div id=&quot;container&quot;&gt;
	&lt;div v-html=&quot;html&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script	type=&quot;text/javascript&quot;&gt;
	const vm = new Vue({
         el:&quot;#container&quot;,
        data:{
            html:&quot;&lt;h1&gt;html内容&lt;/h1&gt;&quot;
        }
    });
&lt;/script&gt;
</code></pre>
<h4 id="153-v-cloak">15.3 v-cloak</h4>
<ul>
<li>当容器被Vue实例接管的时候，自动删除本属性</li>
</ul>
<blockquote>
<p>使用场景：在Vue实例未接管之前，隐藏没有数据的DOM元素</p>
<pre><code class="language-css">[v-cloak] {
  	display: none;
}
</code></pre>
</blockquote>
<h4 id="154-v-once">15.4 v-once</h4>
<blockquote>
<p>v-once指令在DOM节点初次动态渲染后，就变为静态内容了，之后无论绑定的数据发生何种变化，都不会引起当前内容的更新，用于优化性能</p>
</blockquote>
<h4 id="155-v-pre">15.5 v-pre</h4>
<blockquote>
<p>v-pre指令会跳过当前节点的编译过程，如果没有使用指令语法、插值表达式的节点，添加v-pre，可以加快编译。使用过的节点则会使所使用的语法失效。</p>
</blockquote>
<h3 id="16-自定义指令">16. 自定义指令</h3>
<h4 id="161-函数式写法">16.1 函数式写法</h4>
<pre><code class="language-html">&lt;div id=&quot;container&quot;&gt;
     &lt;span v-text=&quot;number&quot;&gt;&lt;/span&gt;
     &lt;span v-big=&quot;number&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	new Vue({
        el:&quot;#container&quot;,
        data:{
            number:1
        },
        directives:{
            big(element,bindObject){
                element.innerText = bindObject.value * 10;
            }
        }
    });
&lt;/script&gt;
</code></pre>
<blockquote>
<p>自定义指令函数何时被调用？</p>
<ol>
<li>指令与元素成功绑定时，调用一次</li>
<li>指令所在的模板被重新解析时，调用一次</li>
</ol>
</blockquote>
<h4 id="162-对象式写法">16.2 对象式写法</h4>
<pre><code class="language-html">&lt;div id=&quot;container&quot;&gt;
     &lt;input type=&quot;text&quot; v-fbind:value=&quot;number&quot;/&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    new Vue({
        el:&quot;#container&quot;,
        data:{
            number:1
        },
        directives:{
            fbind:{
                //指令与元素成功绑定时被调用
                bind(element,bindObject){
                    element.value = bindObject.value;
                },
                //指令所在元素被插入页面时
                insert(element,bindObject){
                    element.focus();
                },
                //指令所在的模板被重新解析时
                update(element,bindObject){
                    elelment.value = bindObject.value;
                }                
            }
        }
    });
&lt;/script&gt;   
</code></pre>
<h4 id="163-常见问题">16.3 常见问题</h4>
<blockquote>
<ol>
<li>自定义指令命名时不要使用驼峰命名法，要转换为横线命名法，且在声明该指令函数时将函数名用引号包裹，避免Vue解析出错</li>
<li>自定义指令回调函数中的this是window对象，因为是由我们直接操作真实DOM的，Vue不会再管理this</li>
<li>一个Vue实例中的自定义指令只能被当前实例索使用，若想被其他vue实例使用，必须声明为全局指令</li>
</ol>
</blockquote>
<h4 id="164-全局自定义指令">16.4 全局自定义指令</h4>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot;&gt;
    Vue.directive('name',{
       bind(element,bindObject){
           ......
       },
       inserted(element,bindObject){
           ......
       },
       update(element,bindObject){
           ......
       } 
    });
&lt;/script&gt;
</code></pre>
<h2 id="三-生命周期">三、生命周期</h2>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/lifecycle.png" alt="Vue 实例生命周期" loading="lazy"></figure>
<blockquote>
<p>所谓生命周期函数就是Vue在一些关键的节点时刻为我们调用的特殊名称的回调函数</p>
</blockquote>
<h3 id="1-beforecreate">1. beforeCreate</h3>
<blockquote>
<p>刚刚完成初始化生命周期、事件，数据代理未开始，此时无法通过实例访问到data中的数据，methods中的方法</p>
</blockquote>
<h3 id="2-created">2. created</h3>
<blockquote>
<p>刚刚完成初始化数据监视、数据代理，此时可以通过实例访问到data中的数据，methods中的方法</p>
</blockquote>
<h3 id="3-beforemount">3. beforeMount</h3>
<blockquote>
<p>刚刚完成模板解析，在内存中生成虚拟DOM，还未经Vue编译为真实DOM放入到页面，此时对DOM元素的所有操作最终都无效</p>
</blockquote>
<h3 id="4-mounted">4. mounted</h3>
<blockquote>
<p>Vue将虚拟DOM编译为真实DOM元素放入页面后，调用mounted函数</p>
</blockquote>
<h3 id="5-beforeupdate">5. beforeUpdate</h3>
<blockquote>
<p>刚刚完成数据的修改，但是页面还没有改变，此时会调用beforeUpdate函数</p>
</blockquote>
<h3 id="6-updated">6. updated</h3>
<blockquote>
<p>数据被修改，页面也得到了更新，此时调用updated函数</p>
</blockquote>
<h3 id="7-beforedestory">7. beforeDestory</h3>
<blockquote>
<p>实例中所有的属性（data、methods等）都处于可用状态，马上要执行销毁过程，调用beforeDestory函数，一般在此时：关闭定时器、取消订阅消息、解绑自定义事件等收尾操作</p>
<p>注意：虽然此时所有的属性都可用，但对属性的更新不会再触发页面更新</p>
</blockquote>
<h3 id="8-destoryed">8. destoryed</h3>
<blockquote>
<p>实例已经被销毁，实例的监听器，与其关联的子组件以及自定义事件全部被销毁</p>
<p>注意：</p>
<ol>
<li>销毁后借助Vue开发工具看不到任何信息</li>
<li>销毁后所有自定义的事件失效，但是原生DOM事件仍然有效</li>
<li>一般不会在beforeDestory中操作数据，因为即使操作数据，也不会再触发更新了</li>
</ol>
</blockquote>
<h2 id="四-组件化编程">四、组件化编程</h2>
<ul>
<li>组件：实现应用中局部功能代码和资源的集合</li>
</ul>
<blockquote>
<p>组件中的data必须为函数形式，避免引用数据相互影响导致页面混乱</p>
</blockquote>
<blockquote>
<p>组件名注意事项：</p>
<ol>
<li>一个单词组成
<ul>
<li>首字母小写，即全小写</li>
<li>首字母大写</li>
</ul>
</li>
<li>多个单词组成
<ul>
<li>短横线命名</li>
<li>所有单词首字母大写（需要Vue脚手架支持）</li>
</ul>
</li>
<li>注册组件时，尽量回避HTML原有的标签名，否则可能出现意想不到的错误，可以使用name属性在创建组件时指定组件名称</li>
</ol>
<p>在页面中使用组件的方式：</p>
<ul>
<li><code>&lt;componentName&gt;&lt;/componentName&gt;</code></li>
<li><code>&lt;componentName/&gt;</code> （需要Vue脚手架支持）</li>
</ul>
</blockquote>
<h3 id="1-非单文件组件">1. 非单文件组件</h3>
<h4 id="11-创建组件">1.1 创建组件</h4>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot;&gt;
	const headerNavigation = Vue.extend({
        template:`&lt;h1&gt;{{title}}&lt;/h1&gt;`,
        data(){
        	return {
                title:&quot;标题&quot;
            }
    	},
        methods:{}
    });
&lt;/script&gt;
</code></pre>
<h4 id="12-注册组件">1.2 注册组件</h4>
<h5 id="局部注册">局部注册</h5>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot;&gt;
	const vm = new Vue({
        el:&quot;#container&quot;,
        components:{
            'header-navigation':headerNavigation
        }
    });
&lt;/script&gt;
</code></pre>
<h5 id="全局注册">全局注册</h5>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot;&gt;
	Vue.component('header-navigation',headerNavigation);
&lt;/script&gt;
</code></pre>
<h4 id="13-使用组件">1.3 使用组件</h4>
<pre><code class="language-html">&lt;body&gt;
	&lt;div id=&quot;container&quot;&gt;
        &lt;header-navigation&gt;&lt;/header-navigation&gt;
    &lt;/div&gt;	
&lt;/body&gt;
</code></pre>
<h3 id="2-vuecomponent构造函数">2. VueComponent构造函数</h3>
<blockquote>
<p>组件本质是一个名为 <code>VueComponent</code> 的构造函数，是由 <code>Vue.extend</code> 生成的</p>
<p>每次调用 <code>Vue.extend</code> 返回的都是一个全新的 <code>VueComponent</code></p>
<p>在创建组件的过程中，<code>this</code> 是 <code>VueComponent</code> 实例对象</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://pic.zyblog.xyz/img/typora/image-20220107211558018.png" alt="image-20220107211558018" loading="lazy"></figure>
<blockquote>
<p><code>VueComponent.propertype.__proto__ === Vue.propertype</code></p>
</blockquote>
<h3 id="3-单文件组件">3. 单文件组件</h3>
<h4 id="31-示例代码">3.1 示例代码</h4>
<pre><code class="language-vue">&lt;template&gt;
&lt;!--组件结构--&gt;
  &lt;div class=&quot;school&quot;&gt;
      &lt;h1&gt;SchoolVueComponent&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
//组件交互相关代码
export default {
    // eslint-disable-next-line vue/multi-word-component-names
    name: 'School',
    data(){
      return {
          schoolName: 'IMOOC',
          address: 'beijing'
      }
    },
    methods:{},
    computed:{},
    watch:{},
    mixins:{}
}
&lt;/script&gt;
&lt;style&gt;
//组件样式
*{
    padding:0;
    margin:0;
}
&lt;/style&gt;
</code></pre>
<h2 id="五-vuecli">五、VueCLI</h2>
<h3 id="1-准备工作">1. 准备工作</h3>
<h4 id="11-安装nodejs">1.1 安装NodeJS</h4>
<blockquote>
<p>下载地址：https://nodejs.org/dist/v16.13.2/node-v16.13.2-x64.msi</p>
</blockquote>
<h4 id="12-安装npm">1.2 安装NPM</h4>
<blockquote>
<p>换源</p>
<ol>
<li>方式一
<ul>
<li><code>npm install -g nrm</code></li>
<li><code>nrm ls</code></li>
<li><code>nrm use taobao</code></li>
</ul>
</li>
<li>方式二
<ul>
<li><code>npm config set registry https://registry.npm.taobao.org</code></li>
<li><code>npm config get registry</code></li>
</ul>
</li>
<li>方式三：临时指定下载源
<ul>
<li><code>npm --registry https://registry.npm.taobao.org install [name]</code></li>
</ul>
</li>
<li>方式三
<ul>
<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
<li><code>cnpm install [name]</code></li>
</ul>
</li>
</ol>
</blockquote>
<h4 id="13-设置自定义缓存目录和模块下载安装目录">1.3 设置自定义缓存目录和模块下载安装目录</h4>
<pre><code class="language-shell">npm config set prefix E:\Development\NodeJS\npm_prefix
npm config set cache E:\Development\NodeJS\npm_cache
</code></pre>
<h4 id="14-安装vuecli">1.4 安装VueCLI</h4>
<pre><code class="language-shell">npm install -g @vue/cli
</code></pre>
<h4 id="15-创建vue项目">1.5 创建Vue项目</h4>
<pre><code class="language-shell">vue create [option] projectName
</code></pre>
<h4 id="16-运行vue项目">1.6 运行vue项目</h4>
<pre><code class="language-shell">vue serve
</code></pre>
<h3 id="2-render函数">2. render函数</h3>
<h4 id="21-应用场景">2.1 应用场景</h4>
<blockquote>
<p>当我们因为一些需求引入的并非是完整版的 vue 时，没有模板解析器，无法识别 template 项，导致页面无法展示，使用render函数可以将模板内容利用 createElement 函数创建并返回到页面中</p>
</blockquote>
<pre><code class="language-js">import Vue from 'vue'
Vue.config.productionTip = false;
new Vue({
    el:'#app',
  	render(createElement){
    	return createElement('h1','标题内容');
  	}
});
</code></pre>
<blockquote>
<p>render函数没有用到this，所以可以简写为箭头函数，又因为函数中只有一条返回语句，所以可以直接简写为如下格式：</p>
<pre><code class="language-js">import Vue from 'vue'
Vue.config.productionTip = false;
new Vue({
      el:'#app',
      render: h=&gt;h('h1','标题内容');
});
</code></pre>
</blockquote>
<h4 id="22-总结">2.2 总结</h4>
<ul>
<li><code>vue.js</code>与<code>vue.runtime.xxx.js</code>的区别
<ul>
<li><code>vue.js</code> 是完整版的 <code>Vue</code>，包含核心功能和模板解析器</li>
<li><code>vue.runtime.xxx.js</code> 是运行版的 <code>Vue</code>，只包含核心功能没有模板解析器</li>
</ul>
</li>
<li><code>vue.runtime.xxx.js</code> 没有模板解析器，所以不能使用 <code>template</code> 配置，需要使用 <code>render</code> 函数接收到的<code>createElement</code> 函数去指定模板内容</li>
</ul>
<h3 id="3-覆写脚手架配置">3. 覆写脚手架配置</h3>
<h4 id="31-查看脚手架配置">3.1 查看脚手架配置</h4>
<pre><code class="language-shell">vue inspect &gt; output.js
</code></pre>
<h4 id="32-覆写配置-vueconfigjs">3.2 覆写配置 <code>vue.config.js</code></h4>
<pre><code class="language-js">module.exports = {
  pages:{
    index:{
    	//入口
      entry:'src/yourJs.js'
    }
  },
  //关闭语法检查
  lintOnSave:false
}
</code></pre>
<pre><code class="language-shell">npm run serve
</code></pre>
<h4 id="33-具体配置项">3.3 具体配置项</h4>
<blockquote>
<p>详见：https://cli.vuejs.org/zh/</p>
</blockquote>
<h3 id="4-ref属性">4. ref属性</h3>
<ul>
<li>
<p>被用来给元素或子组件注册引用信息（id的替代者）</p>
</li>
<li>
<p>当我们为对应元素设置<code>ref</code>后，可以直接通过<code>this</code>调用<code>$refs</code>获取到对应名称的元素，如果为html元素则返回真实DOM对象，如果为组件元素则返回组件实例对象</p>
</li>
</ul>
<pre><code class="language-vue">&lt;template&gt;
  &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; ref=&quot;img&quot;&gt;
  &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot; ref=&quot;hw&quot;/&gt;
  &lt;School ref=&quot;school&quot;/&gt;
  &lt;button @click=&quot;showElement&quot; ref=&quot;btn&quot;&gt;点我输出元素对象&lt;/button&gt;
&lt;/template&gt;

&lt;script&gt;
import HelloWorld from './components/HelloWorld.vue'
import School from './components/School.vue';
export default {
  name: 'App',
  components: {
    HelloWorld,School
  },
  methods:{
      showElement(){
          console.log(this.$refs.img); //真实DOM元素
          console.log(this.$refs.btn); //真实DOM元素
          console.log(this.$refs.school); //组件实例对象
          console.log(this.$refs.hw); //组件实例对象
      }
  }
}
&lt;/script&gt;

&lt;style&gt;
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
&lt;/style&gt;
</code></pre>
<h3 id="5-props配置">5. props配置</h3>
<blockquote>
<p>props属性：用于接收组件调用方使用组件时传入的数据</p>
</blockquote>
<h4 id="51-props简单接收">5.1 props简单接收</h4>
<pre><code class="language-vue">&lt;template&gt;
&lt;!--组件结构--&gt;
  &lt;div class=&quot;school&quot;&gt;
      &lt;h1&gt;{{ msg }}&lt;/h1&gt;
      &lt;h2&gt;学校名称：{{schoolName}}&lt;/h2&gt;
      &lt;h2&gt;学校地址：{{schoolAddress}}&lt;/h2&gt;
      &lt;h2&gt;学校面积：{{schoolArea*100}}&lt;/h2&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
//组件交互相关代码
export default {
    // eslint-disable-next-line vue/multi-word-component-names
    name: 'School',
    data(){
      return {
          msg:&quot;SchoolComponentMsg&quot;
      }
    },
    //简单接收
    props:['schoolName','schoolAddress','schoolArea']
}
&lt;/script&gt;
&lt;style&gt;
//组件样式
*{
    padding:0;
    margin:0;
}
&lt;/style&gt;
</code></pre>
<h4 id="52-props接收时限定传入的数据类型">5.2 props接收时限定传入的数据类型</h4>
<pre><code class="language-vue">&lt;template&gt;
&lt;!--组件结构--&gt;
  &lt;div class=&quot;school&quot;&gt;
      &lt;h1&gt;{{ msg }}&lt;/h1&gt;
      &lt;h2&gt;学校名称：{{schoolName}}&lt;/h2&gt;
      &lt;h2&gt;学校地址：{{schoolAddress}}&lt;/h2&gt;
      &lt;h2&gt;学校面积：{{schoolArea*100}}&lt;/h2&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
//组件交互相关代码
export default {
    // eslint-disable-next-line vue/multi-word-component-names
    name: 'School',
    data(){
      return {
          msg:&quot;SchoolComponentMsg&quot;
      }
    },
    //接收的同时对数据类型进行限制
    props:{
        schoolName:String,
        schoolAddress:String,
        schoolArea:Number
    }
}
&lt;/script&gt;
&lt;style&gt;
//组件样式
*{
    padding:0;
    margin:0;
}
&lt;/style&gt;
</code></pre>
<h4 id="53-props接收时限定传入数据的各项属性">5.3 props接收时限定传入数据的各项属性</h4>
<pre><code class="language-vue">&lt;template&gt;
&lt;!--组件结构--&gt;
  &lt;div class=&quot;school&quot;&gt;
      &lt;h1&gt;{{ msg }}&lt;/h1&gt;
      &lt;h2&gt;学校名称：{{schoolName}}&lt;/h2&gt;
      &lt;h2&gt;学校地址：{{schoolAddress}}&lt;/h2&gt;
      &lt;h2&gt;学校面积：{{schoolArea*100}}&lt;/h2&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
//组件交互相关代码
export default {
    // eslint-disable-next-line vue/multi-word-component-names
    name: 'School',
    data(){
      return {
          msg:&quot;SchoolComponentMsg&quot;
      }
    },
    props:{
        schoolName:{
            type: String, //数据类型
            required: true //必须传入
            //default:&quot;慕课网&quot; 默认值
        },
        schoolAddress:{
            type:String, //数据类型
            required: true //必须传入
            //default: &quot;上海&quot; 默认值
        },
        schoolArea:{
            type: Number, //数据类型
            required: true //必须传入
            //default: 200 默认值
        }
    }
}
&lt;/script&gt;
&lt;style&gt;
//组件样式
*{
    padding:0;
    margin:0;
}
&lt;/style&gt;
</code></pre>
<h4 id="54-修改传入数据的解决方案">5.4 修改传入数据的解决方案</h4>
<blockquote>
<p>Vue 默认不推荐我们直接修改传入的数据，虽然我们可以修改成功，但是Vue会报错，因为这个过程可能导致Vue 产生错误，但是我们在业务开发中仍然有这样的需求，解决方案就是我们通过在组件定义对应的承接传入数据的data属性，并让页面绑定我们组件内部的data属性，日后修改时只需要修改我们组件内部拥有传入数据的data属性即可重新完成模板解析，实现我们想要的效果</p>
</blockquote>
<h3 id="6-mixin混入">6. mixin混入</h3>
<blockquote>
<p>mixin混入：一段配置让多个组件共用时，可以使用混入完成</p>
</blockquote>
<h4 id="61-书写需要混入的内容">6.1 书写需要混入的内容</h4>
<pre><code class="language-js">export const mixin = {
    data(){
        return {
            username:&quot;zhiyuan&quot;,
            email:&quot;zhiyuanworkemail@163.com&quot;,
            index:&quot;https://www.zync.top&quot;
        }
    }
}
</code></pre>
<h4 id="62-引入需要混入的内容">6.2 引入需要混入的内容</h4>
<h5 id="621-局部引入">6.2.1 局部引入</h5>
<pre><code class="language-vue">&lt;template&gt;
&lt;!--组件结构--&gt;
  &lt;div class=&quot;school&quot;&gt;
      &lt;h1&gt;{{ msg }}&lt;/h1&gt;
      &lt;h2&gt;学校名称：{{schoolName}}&lt;/h2&gt;
      &lt;h2&gt;学校地址：{{schoolAddress}}&lt;/h2&gt;
      &lt;h2&gt;学校面积：{{schoolArea*100}}&lt;/h2&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import {mixin} from &quot;@/mixin&quot;;
//组件交互相关代码
export default {
    name: 'School',
    data(){
      return {
          msg:&quot;SchoolComponentMsg&quot;
      }
    },
    mixins:[mixin]
}
&lt;/script&gt;
&lt;style&gt;
//组件样式
*{
    padding:0;
    margin:0;
}
&lt;/style&gt;
</code></pre>
<h5 id="622-全局引入">6.2.2 全局引入</h5>
<blockquote>
<p>在main.js中作如下修改</p>
</blockquote>
<pre><code class="language-js">import Vue from 'vue'
import App from './App.vue'
import {mixin} from &quot;@/mixin&quot;;
Vue.mixin(mixin);
new Vue({
    el:&quot;#app&quot;,
    render: h=&gt;h(App)
})
</code></pre>
<h4 id="63-注意事项">6.3 注意事项</h4>
<blockquote>
<p>在混入进行的时候，如果组件内部已经有对应data中同名的属性，则会以组件自己的为准</p>
</blockquote>
<h3 id="7-插件">7. 插件</h3>
<blockquote>
<p>插件本质上就是一个对象，但是Vue规定这个对象中必须存在一个<code>install</code>方法，用于增强Vue，我们可以在其中定义全局的过滤器，定义自己的指令，定义全局的混入等等</p>
</blockquote>
<h4 id="71-示例">7.1 示例</h4>
<pre><code class="language-js">export default{
    install(){
        console.info('自定义插件');
    }
}
</code></pre>
<h4 id="72-引入插件">7.2 引入插件</h4>
<pre><code class="language-js">//引入自定义插件
import plugins from &quot;@/plugins&quot;;
Vue.use(plugins);
</code></pre>
<h4 id="73-进阶">7.3 进阶</h4>
<pre><code class="language-js">export default{
    install(Vue){
        console.info('自定义插件',Vue);
        //全局过滤器
        Vue.filter('filterName',function (methodParam){
            return methodParam;
        });
        //自定义指令
        Vue.directive('fbind',{
            bind(element,binding){
                element.value = binding.value;
            },
            inserted(element,binding){
                element.focus();
            },
            updated(element,binding){
                element.value = binding.value;
            }
        });
        //定义混入
        Vue.mixin({
            data(){
                return {
                    username:&quot;zhiyuan&quot;,
                    gender:&quot;male&quot;
                }
            }
        })
    }
}
</code></pre>
<h3 id="8-scoped样式">8. scoped样式</h3>
<blockquote>
<p>当我们书写的vue文件最终被解析为浏览器能够识别的js、css、html时，其实我们所有的css会完成汇总，而汇总样式就会产生一个问题，那就是选择器名称重复时，某些样式可能被覆盖，覆盖的原则是由引入组件的顺序决定的，谁先被引入，谁的样式就会被覆盖，但是我们通常不希望产生这样的结果，所以vue为我们提供了一个解决方案，那就是使用<code>scoped</code>属性，来限定css的作用域或者说css有效的范围</p>
</blockquote>
<pre><code class="language-vue">&lt;style scoped&gt;
//组件样式
*{
    padding:0;
    margin:0;
 }
&lt;/style&gt;
</code></pre>
<ul>
<li>
<p>实现原理</p>
<ul>
<li>Vue在汇总页面样式时，会在对应组件的容器上添加一个名为 <code>data-v-xxxx</code> 的属性，然后通过属性选择器来限定指定样式作用的容器</li>
</ul>
</li>
<li>
<p>书写less</p>
<ul>
<li>
<p>安装less-loader</p>
<pre><code class="language-shell">npm i less-loader@10.2.0
</code></pre>
</li>
<li>
<p>书写less</p>
<pre><code class="language-css">&lt;style lang=&quot;less&quot; scoped&gt;
&lt;/style&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="9-todolist案例">9. ToDoList案例</h3>
<blockquote>
<ol>
<li>
<p>组件化的编码流程</p>
<ul>
<li>
<p>拆分静态组件：组件按照功能点拆分，命名不要与html元素冲突</p>
</li>
<li>
<p>实现动态组件：考虑好数据的存放位置，确认数据是一个组件在用还是一些组件都在用</p>
<ul>
<li>
<p>一个组件在用：放在组件自身即可</p>
</li>
<li>
<p>一些组件在用：放在它们共同的父组件上</p>
</li>
</ul>
</li>
<li>
<p>实现交互：从绑定事件开始</p>
</li>
</ul>
</li>
<li>
<p>props适用于</p>
<ul>
<li>父组件与子组件进行通信</li>
<li>子组件与父组件进行通信（需要父组件传给子组件一个函数）</li>
</ul>
</li>
<li>
<p>使用v-model是要切记：v-model绑定的值不能是props传过来的值，因为props是不建议修改的</p>
</li>
<li>
<p>props传过来的如果是对象类型的值，修改对象中的属性时Vue不会报错，但是不推荐这么做，因为这只是Vue没有检测到，并不意味着Vue允许我们这么做</p>
</li>
</ol>
</blockquote>
<h3 id="10-浏览器本地存储">10. 浏览器本地存储</h3>
<h4 id="101-localstorage">10.1 LocalStorage</h4>
<pre><code class="language-js">//存储基本类型到localStorage中最终都会呈现为字符串类型
window.localStorage.setItem('key','value');
//存储对象需要将对象转为JSON
window.localStorage.setItem('key',JSON.stringify(object));
//读取localStorage中存储的对象
JSON.parse(JSON.parse(localStorage.getItem('key'));
//从localStorage中移除设置的信息
window.localStorage.removeItem('key');      
//清空localStorage
window.localStorage.clear();
</code></pre>
<h4 id="102-sessionstorage">10.2 SessionStorage</h4>
<pre><code class="language-js">//存储基本类型到sessionStorage中最终都会呈现为字符串类型
window.sessionStorage.setItem('key','value');
//存储对象需要将对象转为JSON
window.sessionStorage.setItem('key',JSON.stringify(object));
//读取sessionStorage中存储的对象
JSON.parse(JSON.parse(sessionStorage.getItem('key'));
//从sessionStorage中移除设置的信息
window.sessionStorage.removeItem('key');      
//清空sessionStorage
window.sessionStorage.clear();
</code></pre>
<blockquote>
<p>LocalStorage：浏览器关闭后依然存在</p>
<p>SessionStorage：一次会话结束后就不存在了，即关闭浏览器后就不存在了</p>
</blockquote>
<h3 id="11-组件自定义事件">11. 组件自定义事件</h3>
<ol>
<li>
<p>一种组件间通信的方式，适用于子组件与父组件通信</p>
</li>
<li>
<p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）</p>
</li>
<li>
<p>绑定自定义事件</p>
<ul>
<li>
<p>第一种方式，在父组件中 <code>&lt;Demo @事件名=&quot;test&quot;/&gt;</code> 或 <code>&lt;Demo v-on:事件名=&quot;test&quot;&gt;</code></p>
</li>
<li>
<p>第二种方式，在父组件中</p>
<pre><code class="language-js">&lt;Demo ref=&quot;demo&quot;&gt;
......
mounted(){
    this.$refs.xxx.$on('事件名',this.test);
}
</code></pre>
</li>
<li>
<p>若想让自定义事件只能触发一次，可以使用 <code>once</code> 修饰符，或 <code>$once</code> 方法</p>
</li>
</ul>
</li>
<li>
<p>触发自定义事件 <code>this.$emit('事件名',数据)</code></p>
</li>
<li>
<p>解绑自定义事件 <code>this.$off('事件名')</code></p>
</li>
<li>
<p>组件上绑定原生DOM事件，需要使用 <code>native</code> 修饰符</p>
</li>
<li>
<p>注意：通过 <code>this.$refs.xxx.$on('事件名',回调)</code> 绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题</p>
</li>
</ol>
<h3 id="12-全局事件总线">12. 全局事件总线</h3>
<blockquote>
<p>任意组件间通信</p>
<pre><code class="language-js">new Vue({
    el:&quot;#app&quot;,
    render:h =&gt; h(App),
    //vm创建之前
    beforeCreate(){
        Vue.prototype.$bus = this; //安装全局事件总线
    } 
});
</code></pre>
</blockquote>
<ol>
<li>
<p>一种组件间的通信方式，适用于任意组件间通信</p>
</li>
<li>
<p>安装全局事件总线</p>
<pre><code class="language-js">new Vue({
   el:&quot;#app&quot;,
   render:h =&gt; h(App),
   beforeCreate(){
       Vue.prototype.$bus = this; //安装全局事件总线,$bus就是当前应用的vm对象
   } 
});
</code></pre>
</li>
<li>
<p>使用事件总线</p>
<ol>
<li>
<p>接收数据：A组件想接收数据，则在A组件汇总给$bus绑定自定义事件，事件的回调留在A组件自身</p>
<pre><code class="language-js">methods(){
    demo(data){.......}
}
......
mounted(){
    this.$bus.$on('xxx',this.demo);
}
</code></pre>
</li>
<li>
<p>提供数据：<code>this.$bus.$emit('xxx',数据)</code></p>
</li>
</ol>
</li>
<li>
<p>最好在 <code>beforeDestory()</code> 钩子函数中用 <code>$off</code> 去解绑当前组件所用到的事件</p>
</li>
</ol>
<h3 id="13-消息订阅与发布-pubsub">13. 消息订阅与发布 pubsub</h3>
<blockquote>
<p>仍然是一种支持任意组件通信的方式</p>
</blockquote>
<ul>
<li>安装 <code>pubsub-js</code></li>
</ul>
<pre><code class="language-shell">npm i pubsub-js
</code></pre>
<ul>
<li>引入pubsub</li>
</ul>
<pre><code class="language-js">import pubsub from 'pubsub-js'
</code></pre>
<ul>
<li>发布消息</li>
</ul>
<pre><code class="language-js">//组件挂载完毕
mounted(){
    //发布消息
    pubsub.publish('消息名','消息内容');
}
</code></pre>
<ul>
<li>订阅消息</li>
</ul>
<pre><code class="language-js">//组件挂载完毕
mounted(){
    //订阅消息
    this.pubId = pubsub.subscribe('消息名',function('消息名','消息内容'){
        console.log('有人发布了消息，消息名为：' + 消息名 + '@消息内容为：' + 消息内容);
        ..... 
    });
}
//上方写法中存在错误，错在当前this并非是vc对象，老生常谈的，如果我们需要使用第三方js库时，vue不会帮我们在管理对应的函数、对象以及其他信息，如果想要被vue管理到，就需要把普通函数写成箭头函数，这样this就会去父级找到vm或者vc，正确写法有如下两种：

//第一种
methods:{
    demo('消息名','消息内容'){
        console.log('有人发布了消息，消息名为：' + 消息名 + '@消息内容为：' + 消息内容);
        ..... 
    }
}
//组件挂载完毕
mounted(){
    //订阅消息
    this.pubId = pubsub.subscribe('消息名',this.demo);
}

//第二种
//组件挂载完毕
mounted(){
    //订阅消息
    this.pubId = pubsub.subscribe('消息名',('消息名','消息内容') =&gt; {
        console.log('有人发布了消息，消息名为：' + 消息名 + '@消息内容为：' + 消息内容);
        ..... 
    });
}
</code></pre>
<ul>
<li>取消订阅</li>
</ul>
<pre><code class="language-js">beforeDestory(){
    //根据订阅消息ID 取消订阅消息
    pubsub.unscribe(pubId);
}
</code></pre>
<h3 id="14-nexttick">14. $nextTick</h3>
<blockquote>
<p>由 <code>this.$nextTick(回调函数)</code> 指定的回调函数会在DOM节点更新之后执行</p>
<p>作用：在下一次DOM更新结束后执行其指定的回调</p>
<p>应用场景：当数据改变后，要基于 <code>数据改变后</code> 渲染的DOM进行某些操作时，可以使用此方法来指定</p>
</blockquote>
<pre><code class="language-js">this.$nextTick(function(){
   this.$refs.inputTile.focus(); 
});
</code></pre>
<h3 id="15-过渡与动画">15. 过渡与动画</h3>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/image-20230521124817364.png?origin=typora" alt="image-20230521124817364" loading="lazy"></figure>
<h4 id="151-动画">15.1 动画</h4>
<ul>
<li>CSS3</li>
</ul>
<pre><code class="language-css">@keyframes 动画名称 {
    from {
        transform: translateX(-100px);
    }
    to {
        transform: translateX(0px);
    }
}
.come { 
     /* animation:动画名称 持续时间 是否匀速 */
    animation: 动画名称 1s linear;    
}
.go{
    animation: 动画名称 1s linear reverse;
}
</code></pre>
<ul>
<li>Vue</li>
</ul>
<blockquote>
<p>使用 <code>&lt;transition&gt;&lt;/transition&gt;</code> 标签包裹需要展示动画的内容</p>
</blockquote>
<pre><code class="language-css">@keyframes 动画名称 {
    from {
        transform: translateX(-100px);
    }
    to {
        transform: translateX(0px);
    }
}
.v-enter-active { 
    animation: 动画名称 1s linear;    
}
.v-leave-active {
    animation: 动画名称 1s linear reverse;
}
</code></pre>
<pre><code class="language-html">&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;
&lt;transition&gt;
	&lt;h1 v-show=&quot;isShow&quot;&gt;内容&lt;/h1&gt;
&lt;/transition&gt;
</code></pre>
<ul>
<li>
<p>appear属性</p>
<ul>
<li>我们发现只有我们点击按钮才会触发动画效果，但是通常我们需要一个动画在页面展示时立即播放一次动画，name我们可以在 <code>&lt;transition&gt;&lt;/transition&gt;</code> 标签内添加 <code>appear</code> 属性</li>
</ul>
</li>
<li>
<p>name属性</p>
<ul>
<li>
<p>我们可以给动画起名字，来让一个组件内可以有多个动画</p>
<pre><code class="language-html">&lt;transition name=&quot;动画名称&quot;&gt;&lt;/transition&gt;
</code></pre>
</li>
<li>
<p>对应的css动画名称就需要改成如下格式</p>
<pre><code class="language-css">.动画名称-enter-active {}
.动画名称-leave-active {}
</code></pre>
</li>
<li>
<p>其实我们默认不写，就是将动画名称默认为了 <code>v</code></p>
</li>
</ul>
</li>
</ul>
<h4 id="152-过渡">15.2 过渡</h4>
<pre><code class="language-css">/* 进入的起点 */
.动画名称-enter {
    transform: translateX(-100%);
}
/* 进入的终点 */
.动画名称-enter-to {
    transform: translateX(0);
}
/* 离开的起点 */
.动画名称-leave {
    transform: translateX(0);
}
/* 离开的终点 */
.动画名称-leave-to {
    transform: translateX(-100%);
}
</code></pre>
<pre><code class="language-css">/* 进入的起点,离开的终点 */
.动画名称-enter,.动画名称-leave-to {
    transform: translateX(-100%);
}
/* 进入的终点，离开的起点 */
.动画名称-enter-to,.动画名称-leave{
    transform: translateX(0);
}
.动画名称-enter-active,.动画名称-leave-active{
    transition: 0.5s linear;
}
</code></pre>
<h4 id="153-多个元素的过渡">15.3 多个元素的过渡</h4>
<ul>
<li><code>&lt;transition&gt;&lt;/transition&gt;</code>只能够加在一个单独的元素上，如果需要加在多个元素上需要使用<code>&lt;transition-group&gt;&lt;/transition-group&gt;</code></li>
<li>而且在使用 <code>transition-group</code>标签时，必须为其包裹的每一个元素设置一个key</li>
</ul>
<pre><code class="language-html">&lt;transition-group name=&quot;动画名称&quot; appear&gt;
	&lt;h1 v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;&lt;/h1&gt;
    &lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;&lt;/h1&gt;
&lt;/transition-group&gt;
</code></pre>
<h4 id="154-第三方动画">15.4 第三方动画</h4>
<ul>
<li>
<p>安装 <code>animate.css</code></p>
<pre><code class="language-shell">npm install animate.css
</code></pre>
</li>
<li>
<p>引入 <code>animate.css</code></p>
<pre><code class="language-js">import 'animate.css'
</code></pre>
</li>
<li>
<p>使用方式</p>
<pre><code class="language-html">&lt;transition-group name=&quot;animate__animated animate__bounce&quot;
                  enter-active-class=&quot;animate__swing&quot;
                  leave-active-class=&quot;animate__backOutUp&quot;
                  appear&gt;
&lt;/transition-group&gt;
</code></pre>
</li>
</ul>
<h3 id="16-配置代理-axios">16. 配置代理 axios</h3>
<ul>
<li>
<p>安装 <code>axios</code></p>
<pre><code class="language-shell">npm install axios
</code></pre>
</li>
<li>
<p>引入<code>axios</code></p>
<pre><code class="language-js">import axios from 'axios'
</code></pre>
</li>
<li>
<p>使用<code>axios</code></p>
<pre><code class="language-js">export default{
    name: 'App',
    methods:{
        getUserInfo(){
            axios.get('http://localhost:8080/cloud-drive/user/10000010').then(
                response =&gt; {
                    console.log(&quot;请求成功&quot;,response.data);
                },
                error =&gt; {
                    console.log(&quot;请求失败&quot;,error.message);
                }
            );
        }
    }
}
</code></pre>
</li>
<li>
<p>解决跨域问题</p>
<ul>
<li>cors：后端放行跨域访问</li>
<li>json：利用了script标签的src属性在引入外部文件时不受同源策略影响的特性</li>
<li>代理服务器
<ul>
<li>nginx</li>
<li>vue-cli</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="161-方式一">16.1 方式一</h4>
<ul>
<li>修改 <code>vue.config.js</code> 文件</li>
</ul>
<pre><code class="language-js">module.exports = {
    devServer:{
        proxy: 'http://localhost:8080'
    }
}
</code></pre>
<p>这个方法只能是请求地址没有的资源才走代理服务器，并不能解决我们的跨域问题</p>
<h4 id="162-方式二">16.2 方式二</h4>
<pre><code class="language-js">module.exports = {
    devServer:{
        proxy: {
            //匹配所有以/api开头的请求路径
        	'/cloud-drive':{
        		target:'http://localhost:8080',
                pathRewrite:{'^/cloud-drive':''} // key为书写的路径匹配正则，value为与匹配替换的路径
        		ws: true, // 开启webscoket支持
        		changeOrigin: true // 代理功能实现的核心属性，前端解决跨域问题
        	},
            //匹配所有以/foo开头的请求路径
        	'/admin':{
        		target: 'http://localhost:8085'
        	}
        }
    }
}
</code></pre>
<h3 id="17-vue-resource">17. vue-resource</h3>
<ul>
<li>
<p>安装 <code>vue-resource</code></p>
<pre><code class="language-shell">npm install vue-resource
</code></pre>
</li>
<li>
<p>引入 <code>vue-resource</code></p>
<pre><code class="language-js">//main.js 引入插件
import vueResource from 'vue-resource'
Vue.use(vueResource);
</code></pre>
</li>
</ul>
<blockquote>
<p>官方已经不再维护，不建议使用</p>
</blockquote>
<h3 id="18-插槽">18. 插槽</h3>
<blockquote>
<p>作用：让父组件可以向子组件指定位置插入html结构</p>
<p>应用场景：当一个组件被使用多次，但是组件中部分需求有所不同时，可以使用vue的插槽功能，让不同的需求都可以有对应的实现</p>
</blockquote>
<h4 id="181-默认插槽">18.1 默认插槽</h4>
<pre><code class="language-html">&lt;template&gt;
    &lt;h1&gt;demo组件&lt;/h1&gt;
	&lt;slot&gt;默认插槽&lt;/slot&gt;
&lt;/template&gt;
</code></pre>
<pre><code class="language-html">&lt;demo&gt;
    &lt;h2&gt;使用默认插槽&lt;/h2&gt;
&lt;/demo&gt;
</code></pre>
<h4 id="182-具名插槽">18.2 具名插槽</h4>
<pre><code class="language-html">&lt;template&gt;
	&lt;h1&gt;demo组件&lt;/h1&gt;
    &lt;slot name=&quot;center&quot;&gt;我是具名插槽center&lt;/slot&gt;
    &lt;slot name=&quot;footer&quot;&gt;我是具名插槽footer&lt;/slot&gt;
&lt;/template&gt;
</code></pre>
<pre><code class="language-html">&lt;demo&gt;
	&lt;h2 slot=&quot;center&quot;&gt;使用具名插槽center&lt;/h2&gt;
    &lt;h2 slot=&quot;footer&quot;&gt;使用具名插槽footer&lt;/h2&gt;
&lt;/demo&gt;
&lt;demo&gt;
	&lt;template slot=&quot;center&quot;&gt;
    	&lt;h2&gt;使用具名插槽center&lt;/h2&gt;
    &lt;/template&gt;
    &lt;template v-slot:footer&gt;
    	&lt;h2&gt;使用具名插槽footer&lt;/h2&gt;
    &lt;/template&gt;
&lt;/demo&gt;
</code></pre>
<h4 id="183-作用域插槽">18.3 作用域插槽</h4>
<ul>
<li>数据在组件的自身，但是根据数据生成的结构需要组件的使用者来决定</li>
</ul>
<pre><code class="language-html">&lt;template&gt;
	&lt;h1&gt;demo组件&lt;/h1&gt;
    &lt;slot :userList=&quot;userList&quot;&gt;&lt;/slot&gt;
&lt;/template&gt;
</code></pre>
<pre><code class="language-html">&lt;template&gt;
	&lt;demo&gt;
        &lt;template scope=&quot;userList&quot;&gt;
            &lt;ul&gt;
                &lt;li v-for=&quot;(user,index) in userList&quot; :key=&quot;user.id&quot;&gt;{{user.name}}&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/template&gt;
    &lt;/demo&gt;
    &lt;demo&gt;
    	&lt;template slot-scope=&quot;userList&quot;&gt;
            &lt;h2&gt;{{userList[0].name}}&lt;/h2&gt;
        &lt;/template&gt;
    &lt;/demo&gt;
&lt;/template&gt;
</code></pre>
<h3 id="19-vuex">19. vuex</h3>
<blockquote>
<p>作用：专门在Vue中实现集中式状态数据管理的一个Vue插件，对Vue应用中多个组件的共享状态进行集中式的管理，也是一种组件间通信方式，且适用于任意组件间通信</p>
<p>地址：https://github.com/vuejs/vuex</p>
<p>应用场景：</p>
<ol>
<li>多个组件依赖于同一状态</li>
<li>来自不同的组件的行为需要变更为同一状态</li>
</ol>
</blockquote>
<figure data-type="image" tabindex="6"><img src="https://pic.zyblog.xyz/img/typora/image-20230521145745206.png?origin=typora" alt="image-20230521145745206" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://pic.zyblog.xyz/img/typora/image-20230521150110566.png?origin=typora" alt="image-20230521150110566" loading="lazy"></figure>
<h4 id="191-vuex工作原理图">19.1 vuex工作原理图</h4>
<figure data-type="image" tabindex="8"><img src="https://pic.zyblog.xyz/img/typora/vuex.png?origin=typora" alt="vuex" loading="lazy"></figure>
<h4 id="192-快速入门">19.2 快速入门</h4>
<ul>
<li>安装 <code>vuex</code></li>
</ul>
<blockquote>
<p>在2022年2月7日，vue3 成为了默认版本，使用 npm install vue 如果不指定版本号，那么就会直接安装 vue3，并且使用 npm install vuex 不指定版本号，也会直接安装vuex4版本，vue3.0 对应 vuex4.0</p>
</blockquote>
<pre><code class="language-shell">npm install vuex@3
</code></pre>
<ul>
<li>
<p>引入 <code>vuex</code></p>
<pre><code class="language-js">import Vue from &quot;vue&quot;
import Vuex from &quot;vuex&quot;
Vue.use(Vuex);
</code></pre>
</li>
<li>
<p>创建src/store目录，并新建index.js文件</p>
<pre><code class="language-js">//引入Vue
import Vue form 'vue'
//引入Vuex
import Vuex from 'vuex'
Vue.use(Vuex);
//用于响应组件中的动作
const actions = {
    
}
//用于操作数据state
const mutations = {
    
}
//用于存储数据
const state = {
    
}
//创建store
const store = new Vuex.Store({
    actions:actions,
    mutations:mutations,
    state:state
});
//暴露store
export default store;
</code></pre>
</li>
<li>
<p>引入 <code>store</code> ，修改 main.js 文件如下</p>
<pre><code class="language-js">import store from './store'
</code></pre>
</li>
</ul>
<h4 id="193-getter配置项">19.3 getter配置项</h4>
<pre><code class="language-js">const getters = {
    ......
}
const store = new Vuex.Store({
	......
    getters:getters
});
</code></pre>
<h4 id="194-mapstate与mapgetters">19.4 mapState与mapGetters</h4>
<ul>
<li>
<p>引入 <code>mapState</code> <code>mapGetters</code></p>
<pre><code class="language-js">import {mapState,mapGetters} from 'vuex'
</code></pre>
</li>
<li>
<p>使用 <code>mapState</code> <code>mapGetters</code></p>
<pre><code class="language-js">computed:{
    //借助mapState生成计算属性，从state中读取数据
    ...mapState({sum:'sum',school:'school',subject:'subject'}),
    ...mapState(['sum','school','subject']) //简写形式
    //借助mapGetters生成计算属性，从getters中读取数据
    ...mapGetters({sum:'sum',school:'school',subject:'subject'})
    ...mapGetters(['sum','school','subject'])
}
</code></pre>
</li>
</ul>
<h4 id="195-mapactions与mapmutations">19.5 mapActions与mapMutations</h4>
<ul>
<li>
<p>引入 <code>mapMutations</code> <code>mapActions</code></p>
<pre><code class="language-js">import {mapMutations,mapActions} from 'vuex'
</code></pre>
</li>
<li>
<p>使用 <code>mapMutations</code> <code>mapActions</code></p>
<pre><code class="language-js">methods:{
    //借助mapMutations生成对应的方法，方法中会调用commit去联系mutations中的方法
    ...mapMutations({increment:'SUM',decrement:'SUB'})
    ...mapMutations(['SUM','SUB']); //简写形式
    //借助mapActions生成对应的方法，方法中会调用dispatch去联系actions中
    ...mapActions({increment:'sum',decrement:'sub'})
    ...mapActions(['sum','sub'])
}
</code></pre>
</li>
</ul>
<h4 id="196-多组件共享数据">19.6 多组件共享数据</h4>
<h4 id="197-vuex的模块化编码">19.7 vuex的模块化编码</h4>
<pre><code class="language-js">import Vue from 'vue'
import Vuex from 'vuex'
Vue.use(Vuex);
const options1 = {
    namespaced:true, //开启命名空间
    action:{},
    mutation:{},
    state:{},
    getters:{}
}
const options2 = {
    namespaced:true, //开启命名空间
    action:{},
    mutation:{},
    state:{},
    getters:{}
}
export default new Vuex.Store({
   modules:{
       a:options1,
       b:options2
   } 
});
</code></pre>
<pre><code class="language-js">...mapState('a',['sum','school','subject']);
...mapState('b',['persionList'])
this.store.state.personAbout.list;
...mapMutations('a',{increment:'SUM',decrement:'SUB'}) 
this.$store.commit('a/SUM',2);
...mapActions('a',{increment:'sum',decrement:'sub'})
this.$store.dispatch('a/sum',2);
...mapGetters('a',['sum','school','subject'])
this.$store.getters['a/sum'];
</code></pre>
<h3 id="20-路由">20. 路由</h3>
<blockquote>
<p>SPA（Single Page Web Application）：单页面应用</p>
<p>2022年2月7日以后，vue-router的默认版本变为了4，所以如果我们不需要最新版本，就要在安装时指定他的版本</p>
</blockquote>
<ul>
<li>
<p>安装 <code>vue-router</code></p>
<pre><code class="language-shell">npm install vue-router
</code></pre>
</li>
<li>
<p>引入 <code>vue-router</code></p>
<pre><code class="language-js">import Vue from 'vue'
import VueRouter from 'vue-router'
Vue.use(VueRouter);
new Vue({
    el: '#app',
    render: h =&gt; h(App),
    router:''
})
</code></pre>
</li>
<li>
<p>创建src/router目录，并新建index.js文件</p>
<pre><code class="language-js">import VueRouter from 'vue-router'
import About from '../components/About'
import Home from '../component/Home'
//创建并暴露一个路由器
export default new VueRouter({
    routes:[
        {
            path:'/about',
            component:About
        },
        {
            path:'/home',
            component:Home
        }
    ]
});
</code></pre>
</li>
<li>
<p>在页面中使用 <code>&lt;router-link&gt;</code> 标签的路由切换 代替 <code>&lt;a&gt;</code> 标签的页面跳转</p>
<pre><code class="language-html">&lt;router-link to=&quot;/about&quot; active-class=&quot;active&quot;&gt;About&lt;/router-link&gt;
&lt;router-link to=&quot;/home&quot; active-class=&quot;active&quot;&gt;Home&lt;/router-link&gt;
</code></pre>
</li>
<li>
<p>在页面中使用 <code>&lt;router-view&gt;</code> 标签指定路由切换对应组件呈现的位置</p>
<pre><code class="language-html">&lt;router-view&gt;&lt;/router-view&gt;
</code></pre>
</li>
</ul>
<h4 id="201-注意事项">20.1 注意事项</h4>
<ul>
<li>路由组件一般放在 <code>pages</code> 文件夹，普通组件一般放在 <code>components</code> 中</li>
<li>通过切换，隐藏了的路由组件，默认是被销毁掉的，需要的时候才会再次挂载</li>
<li>每个组件都有自己的 <code>$route</code> 属性，里面存储着自己的路由信息</li>
<li>整个应用只有一个 <code>router</code>，可以通过组件的 <code>$router</code> 属性获取到</li>
</ul>
<h4 id="202-嵌套路由">20.2 嵌套路由</h4>
<pre><code class="language-js">export default new VueRouter({
   routes:[
       {
           path:'/about',
           component:About
       },
       {
           path:'/home',
           component:Home,
           children:[
               {
                   path:'news',
                   component:News
               },
               {
                   path:'message',
                   component:Message
               }
           ]
       }
   ] 
});
</code></pre>
<h4 id="203-路由的query参数">20.3 路由的query参数</h4>
<ul>
<li>
<p>传递参数</p>
<pre><code class="language-html">&lt;!--to的字符串写法--&gt;
&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=test&quot;&gt;跳转&lt;/router-link&gt;
&lt;!--to的对象写法--&gt;
&lt;router-link :to=&quot;{
                  path:'/home/message/detail',
                      query:{
                        id:666,
                  		title:'test'
                      }
                  }&quot;&gt;跳转
&lt;/router-link&gt;            
</code></pre>
</li>
<li>
<p>接收参数</p>
<pre><code class="language-js">$route.query.id
$route.query.title
</code></pre>
</li>
</ul>
<h4 id="204-命令路由">20.4 命令路由</h4>
<ul>
<li>作用：简化路由的跳转</li>
</ul>
<pre><code class="language-js">export default new VueRouter({
   routes:[
       {
           path:'/about',
           component:About
       },
       {
           path:'/home',
           component:Home,
           children:[
               {
                   path:'news',
                   component:News
               },
               {
                   name:'message'
                   path:'message',
                   component:Message
               }
           ]
       }
   ] 
});
</code></pre>
<pre><code class="language-html">&lt;router-link :to=&quot;{name:'message'}&quot;&gt;跳转&lt;/router-link&gt;
&lt;router-link :to=&quot;{
                  	name:'message',
                  	query:{
                  		id:666,
                  		title:'test'
                  	}
                  }&quot;&gt;跳转
&lt;/router-link&gt;
</code></pre>
<h4 id="204-路由的params参数">20.4 路由的params参数</h4>
<pre><code class="language-html">&lt;router-link :to=&quot;{name:'message'}&quot;&gt;跳转&lt;/router-link&gt;
&lt;router-link :to=&quot;{
                  	name:'message',
                  	params:{
                  		id:666,
                  		title:'test'
                  	}
                  }&quot;&gt;跳转
&lt;/router-link&gt;
</code></pre>
<blockquote>
<p>当通过params传递参数时，只能用name，不能用path</p>
</blockquote>
<h4 id="205-路由的props配置">20.5 路由的props配置</h4>
<pre><code class="language-js">export default new VueRouter({
   routes:[
       {
           path:'/about',
           component:About
       },
       {
           path:'/home',
           component:Home,
           children:[
               {
                   path:'news',
                   component:News
               },
               {
                   name:'message'
                   path:'message',
                   component:Message,
                   children:[
                   		{
                   			name:'detail',
                   			path:'detail/:id/:title',
                   			component:Detail,
                   			//第一种写法，值为对象，缺点：数据写死，一般不用
                   			props:{
                   				id:'666',
                   				title:'test'
               				}
               				//第二种写法，值为boolean，true时会把该路由组件收到的所有params参数以props形式传给Detail组件
               				props:true
               				//第三种写法，值为函数
               				props(){
           						return {id:'666',title:'test'}
       						}
       						
               			}
                   ]
               }
           ]
       }
   ] 
});
</code></pre>
<pre><code class="language-js">props($route){
    return {
        id:$route.query.id,
        title:$route.query.title
    }
}
</code></pre>
<h4 id="206-router-link的replace属性">20.6 router-link的replace属性</h4>
<ul>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录由两种写入方式，分别为 <code>push</code> 和 <code>replace</code>，push是追加历史记录，replace是替换当前记录，路由跳转默认为push</li>
<li>我们只需要在 <code>&lt;router-link replace&gt;</code>标签中添加replace属性，就可以实现浏览器没有历史记录即无法后退的场景</li>
</ul>
<h4 id="207-编程式路由导航">20.7 编程式路由导航</h4>
<ul>
<li>
<p>作用：不用借助 <code>router-link</code> 标签实现路由跳转，让路由跳转更加灵活</p>
</li>
<li>
<p>代码</p>
<pre><code class="language-js">this.$router.push({
    name:'detail',
    params:{
        id:xxx,
        title:xxx
    }
})
this.$router.replace({
    name:'detail',
    params:{
        id:xxx,
        title:xxx
    }
})
//前进
this.$router.forward();
//后退
this.$router.back();
//前进(&gt;0)/后退(&lt;0)
this.$router.go(3);
</code></pre>
</li>
</ul>
<h4 id="208-缓存路由组件">20.8 缓存路由组件</h4>
<ul>
<li>
<p>作用：让不展示的路由组件保持挂载，不被销毁</p>
</li>
<li>
<p>代码</p>
<pre><code class="language-html">&lt;!--缓存单个路由组件--&gt;
&lt;keep-alive include=&quot;News&quot;&gt;
	&lt;router-view&gt;&lt;/router-view&gt;
&lt;/keep-alive&gt;
&lt;!--缓存多个路由组件--&gt;
&lt;keep-alive :include=&quot;['News','Message']&quot;&gt;
	&lt;router-view&gt;&lt;/router-view&gt;
&lt;/keep-alive&gt;
</code></pre>
</li>
</ul>
<h4 id="209-两个新的生命周期钩子">20.9 两个新的生命周期钩子</h4>
<pre><code class="language-js">//激活
actived(){
    .......
},
//失活    
deactived(){
    .......
}   
</code></pre>
<h4 id="2010-路由守卫">20.10 路由守卫</h4>
<ul>
<li>
<p>作用：对路由进行权限控制</p>
</li>
<li>
<p>分类：全局守卫、独享守卫、组件内守卫</p>
</li>
<li>
<p>全局前置守卫：初始化时执行，每次路由切换前执行</p>
<pre><code class="language-js">const router = new VueRouter({options});
router.beforeEach((to,from,next)=&gt;{
    if(to.meta.isAuth){
        if(localStorage.getItem('role') === 'admin'){
            next();
        }else{
            alert('无权查看');
        }
    }else{
        next();
    }
});
</code></pre>
</li>
<li>
<p>全局后置守卫：初始化时执行，每次路由切换后执行</p>
<pre><code class="language-js">const router = new VueRouter({options});
router.afterEach((to,from)=&gt;{
    if(to.meta.title){
        document.title = to.meta.title;
    }else{
        document.title = '主页';
    }
});
</code></pre>
</li>
<li>
<p>独享路由守卫</p>
<pre><code class="language-js">export default new VueRouter({
   routes:[
       {
           path:'/about',
           component:About
       },
       {
           path:'/home',
           component:Home,
           children:[
               {
                   name:'news',
                   path:'news',
                   component:News
                   meta:{title:'新闻'},
               	   beforeEnter:(to,from,next)=&gt;{
           				if(to.meta.isAuth){
                            if(localStorage.getItem('role') === 'admin'){
                            next();
                            }else{
                                alert('无权查看');
                            }
                        }else{
                            next();
    					}
       				}
               },
               {
                   name:'message'
                   path:'message',
                   component:Message
               }
           ]
       }
   ] 
});
</code></pre>
</li>
<li>
<p>组件内路由守卫</p>
<pre><code class="language-js">//通过路由规则，进入该组件时被调用
beforeRouteEnter(to,from.next){
    
},
//通过路由规则，离开该组件时被调用
beforeRouteLeave(to,from,next){
    
}    
</code></pre>
</li>
</ul>
<h4 id="2011-history模式与hash模式">20.11 history模式与hash模式</h4>
<ul>
<li>对于一个url来说，在 # 后面的内容就是hash值</li>
<li>hash值不会包含在http请求中</li>
<li>两种模式
<ul>
<li>hash模式
<ul>
<li>地址中永远带着 # 号，不美观</li>
<li>地址通过第三方分享，若第三方校验严格，地址会被标记为不合法</li>
<li>兼容性好</li>
</ul>
</li>
<li>history模式
<ul>
<li>地址干净，美观</li>
<li>兼容性相较hash模式较差</li>
<li>应用部署上线时，需要后端人员支持，解决刷新页面服务端404的问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="六-element-ui">六、Element-UI</h2>
<blockquote>
<p>地址：https://element.eleme.cn/#/zh-CN</p>
</blockquote>
<h2 id="七-vue3">七、Vue3</h2>
<h3 id="1-使用-vue-cli-创建工程">1. 使用 vue-cli 创建工程</h3>
<h3 id="2-使用vite创建工程">2. 使用vite创建工程</h3>
<h3 id="3-分析工程结构">3. 分析工程结构</h3>
<h4 id="31-分析入口文件mainjs">3.1 分析入口文件main.js</h4>
<pre><code class="language-js">//引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数
import {createApp} from 'vue'
import App from './App.vue'
//创建应用实例对象（类似于vue2的vm，但是比vm更加轻量）
const app = createApp(App);
app.mount(&quot;#app&quot;);
</code></pre>
<h4 id="32-分析appvue">3.2 分析App.vue</h4>
<pre><code class="language-vue">&lt;template&gt;
	&lt;!--vue3组件中的模板结构可以没有根标签--&gt;
    &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; ref=&quot;img&quot;&gt;
    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot; ref=&quot;hw&quot;/&gt;
    &lt;School ref=&quot;school&quot; school-name=&quot;黑马程序猿&quot; school-address=&quot;北京&quot; v-bind:school-area=&quot;10&quot;/&gt;
    &lt;button @click=&quot;showElement&quot; ref=&quot;btn&quot;&gt;点我输出元素对象&lt;/button&gt;
&lt;/template&gt;
</code></pre>
<h3 id="4-安装开发者工具">4. 安装开发者工具</h3>
<h3 id="5-初识setup">5. 初识setup</h3>
<blockquote>
<p>Vue3中一个新的配置项，值为一个函数</p>
<p><code>组件中用到的数据data，方法methods等，均要配置到setup中</code></p>
</blockquote>
<ul>
<li>setup函数有两种返回值
<ul>
<li>返回一个对象，则对象中的属性、方法。在模板中均可以直接使用</li>
<li>若返回一个渲染函数，则可以自定义渲染内容</li>
</ul>
</li>
<li>注意事项
<ul>
<li>尽量不要与vue2配置混用
<ul>
<li>vue2配置（data、methods、computed、watch...）中可以访问到setup中的属性、方法</li>
<li>但是setup中不能访问vue2的配置（data、methods、computed、watch...）</li>
<li>如果有重名，以setup优先</li>
</ul>
</li>
<li>setup不能是一个async函数，因为返回值不再是return的对象，而是promise，模板看不到return对象中的属性
<ul>
<li>后期可以返回一个Promise实例，但是需要Suspense和异步组件的配合</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-ref函数">6. ref函数</h3>
<ul>
<li>
<p>作用：定义一个响应式数据</p>
</li>
<li>
<p>语法：<code>const xxx = ref(initValue)</code></p>
<ul>
<li>创建一个包含响应式数据的引用对象</li>
<li>js中操作数据 <code>xxx.value</code></li>
<li>模板中读取数据不需要 <code>.value</code>，直接 <code>{{xxx}}</code></li>
</ul>
</li>
<li>
<p>备注</p>
<ul>
<li>接收的数据可以是基本类型，也可以是对象类型</li>
<li>基本类型的数据，响应式依然是靠 <code>Object.defineProperty()</code> 的 <code>get</code> 与 <code>set</code> 完成的</li>
<li>对象类型的数据，内部求助了Vue3的一个新函数 <code>reactive</code> 函数</li>
</ul>
</li>
<li>
<pre><code class="language-js">import {ref} from 'vue'
</code></pre>
</li>
</ul>
<h3 id="7-reactive函数">7. reactive函数</h3>
<ul>
<li>作用：定义一个对象类型的响应式数据（基本类型别用它，用 <code>ref</code> 函数）</li>
<li>语法：<code>const 代理对象 = reactive(被代理对象)</code> 接收一个对象（或数组），返回一个代理器对象（Proxy对象）</li>
<li>reactive定义的响应式数据是深层次的</li>
<li>内部基于ES6的Proxy实现，通过代理对象操作源对象内部数据都是响应式的</li>
<li>
<pre><code class="language-js">import {reactive} from 'vue'
</code></pre>
</li>
</ul>
<h3 id="8-vue3响应式原理">8. vue3响应式原理</h3>
<h4 id="81-vue2响应式原理">8.1 vue2响应式原理</h4>
<ul>
<li>
<p>实现原理</p>
<ul>
<li>
<p>对象类型：通过 <code>Object.defineProperty()</code> 对属性的读取、修改进行拦截（数据劫持）</p>
</li>
<li>
<p>数组类型：通过重写更新数组的一系列方法来实现拦截</p>
<pre><code class="language-js">Object.defineProperty(data,'count',{
   	get(){},
    set(){}
});
</code></pre>
</li>
</ul>
</li>
<li>
<p>存在的问题</p>
<ul>
<li>新增属性、删除属性，界面不会更新</li>
<li>直接通过数组下标修改数组内容，界面不会更新</li>
</ul>
</li>
</ul>
<h4 id="82-vue3响应式原理">8.2 vue3响应式原理</h4>
<ul>
<li>实现原理
<ul>
<li>通过Proxy（代理）：拦截对象中任意属性的变化，包括（属性值读写、属性添加、属性删除等）</li>
<li>通过Reflect（反射）：对被代理对象的属性进行操作</li>
<li>MDN文档中描述的Proxy与Reflect
<ul>
<li>Proxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</li>
<li>Reflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</li>
</ul>
</li>
</ul>
</li>
<li>Proxy</li>
</ul>
<pre><code class="language-js">new Proxy(data,{
    //有人读取data的某个属性时调用
    get(target,attributeName){
        return target[attributeName];
    },
    //有人修改data属性或者给data追加属性时调用
    set(target,attributeName,value){
        target[attributeName] = value;
    },
    //有人删除data上某个属性时调用
    deleteProperty(target,attributeName){
		return delete target[attributeName];
    }
});
</code></pre>
<ul>
<li>Reflect
<ul>
<li>ECMA组织正在尝试将Object上的属性方法移植到Reflect身上</li>
</ul>
</li>
</ul>
<h3 id="9-reactive与ref对比">9. reactive与ref对比</h3>
<ol>
<li>从定义数据角度对比
<ul>
<li>ref 用来定义基本数据类型</li>
<li>reactive 用来定义对象或数组数据类型</li>
<li>ref 也可以定义对象或数组类型，但是最终内部会通过reactive转为代理对象</li>
</ul>
</li>
<li>从原理的角度对比
<ul>
<li>ref 通过 <code>Object.defineProperty()</code> 的 <code>get</code> 和 <code>set</code> 来实现响应式</li>
<li>reactive 通过使用 <code>Proxy</code> 来实现响应式，并通过 <code>Reflect</code> 操作源对象内部的数据</li>
</ul>
</li>
<li>从使用角度对比
<ul>
<li>ref 定义的数据，操作数据需要 <code>.value</code>，模板读取时不需要 <code>.value</code></li>
<li>reactive 定义的数据，操作数据与读取数据都不需要 <code>.value</code></li>
</ul>
</li>
</ol>
<h3 id="10-setup的两个注意点">10. setup的两个注意点</h3>
<ol>
<li>setup的执行时机
<ul>
<li>在beforeCreate之前执行一次，this是undefined</li>
</ul>
</li>
<li>setup的参数
<ul>
<li>props：值为对象，存储组件外部传递过来并且组件内部声明接收了的属性</li>
<li>context：上下文对象
<ul>
<li>attrs：值为对象，存储组件外部传递过来，但是没有在props中声明接收的属性。相当于 <code>this.$attrs</code></li>
<li>slots：收到的插槽内容。相当于 <code>this.$slots</code></li>
<li>emit：分发自定义事件的函数。相当于 <code>this.$emit</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<pre><code class="language-js">props:['','',''...],
emits:['','',''...],
setup(props,context){
    ...
    return {
        ...
    }
}
</code></pre>
<h3 id="11-computed计算属性">11. computed计算属性</h3>
<pre><code class="language-js">import {computed,reactive} from 'vue'
</code></pre>
<pre><code class="language-js">setup(){
	let person = reactive({
       firstName:'张',
       lastName:'三'
    });
    //简写形式，只考虑读取数据
    person.fullName = computed(()=&gt;{
       return person.firstName + person.lastName; 
    });
    //完整形式，考虑读写
    person.fullName = computed({
       get(){
           return person.firstName + person.lastName; 
       },
       set(value){
           const nameArr = value.split('-');
           person.firstName = nameArr[0];
           person.lastName = nameArr[1] ;
       }
    });
    return {
        person
    }
}
</code></pre>
<blockquote>
<p>与Vue2中的computed配置功能一致，只是需要写在setup函数中</p>
</blockquote>
<h3 id="12-watch监视属性">12. watch监视属性</h3>
<ul>
<li>与Vue2中的watch配置功能一致</li>
<li>两个注意事项
<ul>
<li>监视reactive定义的响应数据时，oldValue无法正确获取，强制开启了深度监视，deep属性失效</li>
<li>监视reactive定义的响应数据中某个属性时，deep属性有效</li>
</ul>
</li>
</ul>
<pre><code class="language-js">import {ref,reactive,watch} from 'vue'
</code></pre>
<pre><code class="language-js">setup(){
    let sum = ref(0);
    let msg = ref('hello');
    let person = reactive({
       	name:'张三',
   		age:18,
        job:{
            name:'JavaEngineer',
            salary:20
        }
    });
    //监视ref所定义的一个响应式数据
    watch(sum,(newValue,oldValue)=&gt;{
       console.log('sum改变了',newValue,oldValue); 
    });
    //监视ref所定义的多个响应式数据
    watch([sum,msg],(newValue,oldValue)=&gt;{
       console.log('sum改变了',newValue,oldValue); 
    },{immediate:true});
    //监视reactive所定义的一个响应式数据，此处oldValue无法正常获取，deep属性失效
    watch(person,(newValue,oldValue)=&gt;{
       console.log('person改变了',newValue,oldValue); 
    },{deep:false});
    //监视reactive所定义的一个响应式数据的某个普通属性，此处oldValue可以正常获取，deep属性有效
    watch(()=&gt;person.age,(newValue,oldValue)=&gt;{
       console.log('person.age改变了',newValue,oldValue); 
    });
    //监视reactive所定义的一个响应式数据的某些普通属性
    watch([()=&gt;person.age,()=&gt;person.name],(newValue,oldValue)=&gt;{
       console.log('person.age或name改变了',newValue,oldValue); 
    });
    //监视reaction所定义的一个响应式数据中的对象属性，deep属性有效
    watch(()=&gt;person.job,(newValue,oldValue)=&gt;{
       console.log('person.job改变了',newValue,oldValue); 
    },{deep:true});
    return {
        sum,age,person
    }
}
</code></pre>
<ul>
<li>
<p>watchEffect函数</p>
<ul>
<li>watch的套路是：既要指明监视的属性，也要指明监视的回调</li>
<li>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，就监视哪个属性</li>
<li>watchEffect有点类似与computed
<ul>
<li>但是computed注重的是计算出来的值（回调函数的返回值），所以必须需要写返回值</li>
<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值</li>
</ul>
</li>
</ul>
<pre><code class="language-js">watchEffect(()=&gt;{
    const x1 = sum.value;
    const v2 = person.value;
    console('watchEffect配置的回调执行了');
});
</code></pre>
</li>
</ul>
<h3 id="13-vue3生命周期">13. Vue3生命周期</h3>
<figure data-type="image" tabindex="9"><img src="https://pic.zyblog.xyz/img/typora/lifecycle.16e4c08e.png?origin=typora" alt="组件生命周期图示" loading="lazy"></figure>
<blockquote>
<ul>
<li>
<p>Vue3中可以继续使用Vue2中的生命周期钩子，但是有两个被更名</p>
<ul>
<li>
<p><code>beforeDestory</code> 改名为 <code>beforeUnmount</code></p>
</li>
<li>
<p><code>destoryed</code> 改名为 <code>unmounted</code></p>
</li>
</ul>
</li>
<li>
<p>Vue3也提供了CompositionAPI形式的生命周期钩子函数，与Vue2对应关系如下：</p>
<ul>
<li><code>beforeCreate</code> ===&gt; <code>setup()</code></li>
<li><code>created</code> ===&gt; <code>setup()</code></li>
<li><code>beforeMount</code> ===&gt; <code>onBeforeMount()</code></li>
<li><code>mounted</code> ===&gt; <code>onMounted()</code></li>
<li><code>beforeUpdate</code> ===&gt; <code>onBeforeUpdate()</code></li>
<li><code>updated</code> ===&gt; <code>onUpdated()</code></li>
<li><code>beforeUnmount</code> ===&gt; <code>onBeforeUnmount()</code></li>
<li><code>unmounted</code> ===&gt; <code>onUnmounted()</code></li>
</ul>
</li>
</ul>
</blockquote>
<pre><code class="language-js">setup(){
    onBeforeMount(()=&gt;{
        
    });
    onMounted(()=&gt;{
        
    });
    onBeforeUpdate(()=&gt;{
        
    });
    onUpdated(()=&gt;{
        
    });
    onBeforeUnmount(()=&gt;{
        
    });
    onUnmounted(()=&gt;{
        
    });
}
</code></pre>
<h3 id="14-自定义hook">14. 自定义hook</h3>
<blockquote>
<p>Vue中的hook：本质是一个函数，把setup函数中使用的CompositionAPI进行了封装</p>
<p>类似于Vue2中的mixin</p>
<p>自定义hook的优势：复用代码，让setup中的逻辑更清楚易懂</p>
</blockquote>
<h3 id="15-toref与torefs">15. toRef与toRefs</h3>
<ul>
<li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性</li>
<li>语法：<code>const name = toRef(person,'name')</code></li>
<li>应用场景：需要将响应式对象中的某个属性单独提供给外部使用时</li>
<li>扩展：<code>toRefs()</code> 与 <code>toRefs()</code> 的功能一致，但可以批量创建多个ref对象，语法为：<code>toRefs(person)</code></li>
</ul>
<pre><code class="language-js">return {
    person,
    ...toRefs(person)
}
</code></pre>
<h3 id="16-compositionapi">16. CompositionAPI</h3>
<h4 id="161-shallowreactive与shallowref">16.1 shallowReactive与shallowRef</h4>
<ul>
<li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）</li>
<li>shallowRef：只处理基本数据类型的响应式，不进行对象的响应式处理</li>
<li>应用场景：
<ul>
<li>如果有一个对象数据，结构比较深，但变化时只是外层属性变化，可以使用shallowReactive</li>
<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生成新的对象来替换，可以使用shallowRef</li>
</ul>
</li>
</ul>
<h4 id="162-readonly与shallowreadonly">16.2 readonly与shallowReadonly</h4>
<ul>
<li>readonly：让一个响应式数据变为只读（深只读）</li>
<li>shallowReadonly：让一个响应式数据变为只读（浅只读）</li>
<li>应用场景：不希望数据被修改</li>
</ul>
<h4 id="163-toraw与markraw">16.3 toRaw与markRaw</h4>
<ul>
<li>toRaw
<ul>
<li>作用：将一个由 <code>reactive</code> 生成的响应式对象转为普通对象</li>
<li>应用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面的更新</li>
</ul>
</li>
<li>markRaw
<ul>
<li>作用：标记一个对象，使其永远不会再成为响应式对象</li>
<li>应用场景：
<ul>
<li>有些值不应被设置为响应式，例如复杂的第三方类库等</li>
<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="164-customref">16.4 customRef</h4>
<ul>
<li>
<p>作用：创建一个自定义的 ref ，并对其依赖项跟踪和更新触发进行显式控制</p>
</li>
<li>
<p>实现防抖效果</p>
<pre><code class="language-vue">&lt;template&gt;
  &lt;p&gt;
    This text only updates 1 second after you've stopped typing:
  &lt;/p&gt;
  &lt;p&gt;{{ text }}&lt;/p&gt;
  &lt;input v-model=&quot;text&quot; /&gt;
&lt;/template&gt;
&lt;script setup&gt;
import { useDebouncedRef } from './debouncedRef.js'
const text = useDebouncedRef('hello', 1000)
&lt;/script&gt;
</code></pre>
<pre><code class="language-js">import { customRef } from 'vue'

export function useDebouncedRef(value, delay = 200) {
  let timeout
  return customRef((track, trigger) =&gt; {
    return {
      get() {
        track()//通知vue追踪value的变化
        return value
      },
      set(newValue) {
        clearTimeout(timeout)
        timeout = setTimeout(() =&gt; {
          value = newValue
          trigger()//通知vue重新解析模板
        }, delay)
      }
    }
  })
}
</code></pre>
</li>
</ul>
<h4 id="165-provide与inject">16.5  provide与inject</h4>
<figure data-type="image" tabindex="10"><img src="https://pic.zyblog.xyz/img/typora/v2-f7110a1bae2d0744997012ca656d8fa1_r.jpg?origin=typora" alt="img" loading="lazy"></figure>
<ul>
<li>
<p>作用：实现祖孙组件间通信</p>
</li>
<li>
<p>套路：父组件有一个 <code>provide</code> 选项来提供数据，子组件有一个 <code>inject</code> 选项来开始使用这些数据</p>
</li>
<li>
<p>具体写法</p>
<ul>
<li>
<p>祖组件</p>
<pre><code class="language-js">setup(){
    ......
    let car = reactive({
        name:'奔驰',
        price:'40万'
    });
    provide('car',car)
    ......
}
</code></pre>
</li>
<li>
<p>后代组件</p>
<pre><code class="language-js">setup(){
    ......
    const car = inject('car');
    return {
        car
    }
    ......
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="166-响应式数据的判断">16.6 响应式数据的判断</h4>
<ul>
<li>isRef：检查一个值是否为一个ref对象</li>
<li>isReactive：检查一个对象是否是由 reactive 创建的响应式代理对象</li>
<li>isReadonly：检查一个对象是否是由 readonly 创建的只读代理对象</li>
<li>isProxy：检查一个对象是否是由 reactive 或者 readonly 方法创建的代理对象</li>
</ul>
<h3 id="17-compositionapi优势">17. CompositionAPI优势</h3>
<h4 id="171-optionapi">17.1 OptionAPI</h4>
<figure data-type="image" tabindex="11"><img src="https://pic.zyblog.xyz/img/typora/b36597b2c96cef710355c7c7476e543a_960x657.gif?origin=typora" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/568b0ced69f241d282cf2c512e4e5f33~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img" loading="lazy"></figure>
<h4 id="172-compositionapi">17.2 CompositionAPI</h4>
<figure data-type="image" tabindex="13"><img src="https://pic.zyblog.xyz/img/typora/09112004_62f1d264cbff085117.gif?origin=typora" alt="【总结】1267- Vue2 迁移到 Vue3 到底要踩多少坑？_缓存" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://pic.zyblog.xyz/img/typora/09112005_62f1d26565bce28102.gif?origin=typora" alt="【总结】1267- Vue2 迁移到 Vue3 到底要踩多少坑？_缓存_02" loading="lazy"></figure>
<h3 id="18-fragment组件">18. Fragment组件</h3>
<ul>
<li>在Vue2中，组件必须有一个根标签</li>
<li>在Vue3中，组件可以没有根标签，内部会将多个标签包含在一个Fragment虚拟元素中
<ul>
<li>好处：减少标签层级，减少内存占用</li>
</ul>
</li>
</ul>
<h3 id="19-teleport组件">19. Teleport组件</h3>
<ul>
<li>
<p>Teleport 是一种能够将我们组件html结构移动到指定位置的技术</p>
<pre><code class="language-html">&lt;teleport to=&quot;移动位置&quot;&gt;
    &lt;div&gt;我是一个弹窗&lt;/div&gt;
&lt;/teleport&gt;
</code></pre>
</li>
</ul>
<h3 id="20-suspense组件">20. Suspense组件</h3>
<ul>
<li>
<p>等待异步组件时渲染一些后备内容，获得更好的用户体验</p>
</li>
<li>
<p>使用步骤</p>
<ul>
<li>
<p>异步引入组件</p>
<pre><code class="language-js">import {defineAsyncComponent} from 'vue'
const Child = defineAsyncComponent(()=&gt;import('./components/Child.vue'))
</code></pre>
</li>
<li>
<p>使用 <code>Suspense</code> 包裹组件，并配置好 <code>default</code> <code>fallback</code></p>
<pre><code class="language-html">&lt;template&gt;
	&lt;div class=&quot;#app&quot;&gt;
        &lt;h3&gt;我是App组件&lt;/h3&gt;
        &lt;Suspense&gt;
        	&lt;template v-slot:default&gt;
            	&lt;Child/&gt;
            &lt;/template&gt;
            &lt;template v-slot:fallback&gt;
            	&lt;h3&gt;加载中......&lt;/h3&gt;
            &lt;/template&gt;
        &lt;/Suspense&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="21-收尾">21. 收尾</h3>
<h4 id="211-全局api的转移">21.1 全局API的转移</h4>
<ul>
<li>
<p>Vue2中有许多全局API和配置</p>
<ul>
<li>例如：注册全局组件，注册全局指令等</li>
</ul>
</li>
<li>
<p>Vue3中对这些API做出了调整</p>
<ul>
<li>
<p>将全局的API，即 <code>Vue.xxx</code> 调整到应用实例 <code>app</code> 上</p>
<table>
<thead>
<tr>
<th>Vue2</th>
<th>Vue3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vue.config.xxx</td>
<td>app.config.xxx</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td>移除</td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>app.config.globalProperties</td>
</tr>
<tr>
<td>Vue.config.keyCodes</td>
<td>移除</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<h4 id="212-其他改变">21.2 其他改变</h4>
<ul>
<li>
<p>data选项应该始终被声明为一个函数</p>
</li>
<li>
<p>过渡类名的更改</p>
<ul>
<li>
<p>Vue2.x写法</p>
<pre><code class="language-css">.v-enter,.v-leave-to{
	opacity: 0;
}
.v-leave,.v-enter-to{
    opacity: 1;
}
</code></pre>
</li>
<li>
<p>Vue3.x写法</p>
<pre><code class="language-css">.v-enter-from,v-leave-to{
    opacity:0;
}
.v-leave-from,v-enter-to{
    opacity:1;
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>移除 keyCode 作为 <code>v-on</code> 的修饰符，同时也不再支持 <code>config.keyCodes</code></p>
</li>
<li>
<p>移除 <code>v-on.native</code> 修饰符</p>
<ul>
<li>
<p>父组件中绑定事件</p>
<pre><code class="language-html">&lt;my-component v-on:close=&quot;handleComponentEvent&quot; v-on:click=&quot;handleNativeClickEvent&quot;&gt;&lt;/my-component&gt;
</code></pre>
</li>
<li>
<p>子组件中声明自定义事件</p>
<pre><code class="language-html">&lt;script&gt;
	export default{
        emits:['close']
    }
&lt;/script&gt;
</code></pre>
</li>
</ul>
</li>
<li>
<p>移除过滤器 filter</p>
<blockquote>
<p>过滤器虽然看起来很方便，但是它需要一个自定义语法，打破大括号内表达式只是javascript的假设，这不仅有学习成本，而且有实现成本，建议用方法调用或计算属性去替换过滤器</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/Vr0OXGyK8/">https://zhiyuandnc.github.io/Vr0OXGyK8/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微服务学习]]></title>
        <id>https://zhiyuandnc.github.io/DZ1f24lyN/</id>
        <link href="https://zhiyuandnc.github.io/DZ1f24lyN/">
        </link>
        <updated>2023-01-08T13:42:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="微服务">微服务</h1>
<blockquote>
<p>微服务就是一种经过良好架构设计的分布式架构方案，微服务架构的特征：</p>
<ul>
<li>单一职责：微服务拆分力度更大，每一个服务都对应唯一的业务能力，做到单一职责，避免重复的业务开发</li>
<li>面向服务：微服务只对外暴露业务接口</li>
<li>自治：团队独立、技术独立、数据独立、部署独立</li>
<li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li>
</ul>
</blockquote>
<blockquote>
<p>第一天</p>
</blockquote>
<h2 id="一-认识微服务">一、认识微服务</h2>
<h3 id="1-几种技术的比较">1. 几种技术的比较</h3>
<table>
<thead>
<tr>
<th></th>
<th>Dubbo</th>
<th>SpringCloud</th>
<th>SpringCloudAlibaba</th>
</tr>
</thead>
<tbody>
<tr>
<td>注册中心</td>
<td>zookeeper、redis</td>
<td>Eureka、Consul</td>
<td>Nacos、Eureka</td>
</tr>
<tr>
<td>服务远程调用</td>
<td>Dubbo协议</td>
<td>Feign（http协议）</td>
<td>Dubbo、Feign</td>
</tr>
<tr>
<td>配置中心</td>
<td>无</td>
<td>SpringCloudConfig</td>
<td>SpringCloudConfig、Nacos</td>
</tr>
<tr>
<td>服务网关</td>
<td>无</td>
<td>SpringCloudGateway、Zuul</td>
<td>SpringCloudGateway、Zuul</td>
</tr>
<tr>
<td>服务监控和保护</td>
<td>dubbo-admin，功能弱</td>
<td>Hystrix</td>
<td>Sentinel</td>
</tr>
</tbody>
</table>
<h3 id="2-springcloud">2. SpringCloud</h3>
<ul>
<li>
<p>SpringCloud是目前国内使用最广泛的微服务框架</p>
<ul>
<li>官网地址：https://spring.io/projects/spring-cloud</li>
<li>版本对应信息查询地址：https://start.spring.io/actuator/info</li>
</ul>
</li>
<li>
<p>SpringCloud集成了各种微服务功能组件，并给予SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验</p>
<ul>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20220215142839247.png" alt="微服务" loading="lazy"></li>
</ul>
</li>
<li>
<p>SpringCloud与SpringBoot的版本兼容情况如下：</p>
<figure data-type="image" tabindex="2"><img src="http://pic.zyblog.xyz/img/typora/image-20240108102144858.png?origin=typora" alt="image-20240108102144858" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>SpringCloud</th>
<th>SpringBoot</th>
</tr>
</thead>
<tbody>
<tr>
<td>2023.0.x aka Leyton</td>
<td>3.2.x</td>
</tr>
<tr>
<td>2022.0.x aka Kilburn</td>
<td>3.0.x，3.1.x（Starting with 2022.0.3）</td>
</tr>
<tr>
<td>2021.0.x aka Jubilee</td>
<td>2.6.x，2.7.x（Starting with 2021.0.3）</td>
</tr>
<tr>
<td>2020.0.x aka Ilford</td>
<td>2.4.x，2.5.x（Starting with 2020.0.3）</td>
</tr>
<tr>
<td>Hoxton</td>
<td>2.2.x，2.3.x（Starting with SR5）</td>
</tr>
<tr>
<td>Greenwich</td>
<td>2.1.x</td>
</tr>
<tr>
<td>Finchley</td>
<td>2.0.x</td>
</tr>
<tr>
<td>Edgware</td>
<td>1.5.x</td>
</tr>
<tr>
<td>Dalston</td>
<td>1.5.x</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="3-服务拆分及远程调用">3. 服务拆分及远程调用</h3>
<h4 id="31-服务拆分注意事项">3.1 服务拆分注意事项</h4>
<ol>
<li>微服务要根据业务模块拆分，做到单一职责，不同的微服务中不要重复开发相同的业务</li>
<li>微服务可以将业务暴露为接口，供其他微服务使用</li>
<li>微服务数据独立，不要访问其他微服务的数据库</li>
</ol>
<h4 id="32-微服务的远程调用">3.2 微服务的远程调用</h4>
<ul>
<li>基于RestTemplate发起的http请求实现远程调用</li>
</ul>
<h3 id="4-提供者与消费者">4. 提供者与消费者</h3>
<ul>
<li>服务提供者：在一次业务中，被其他微服务调用的服务</li>
<li>服务消费者：在一次业务中，调用其他微服务的服务</li>
</ul>
<h2 id="二-eureka注册中心">二、Eureka注册中心</h2>
<blockquote>
<p>Eureka的作用：将所有微服务集中注册，微服务请求时向注册中心发送消息即可获取服务列表</p>
<ul>
<li>消费者如何获取服务提供者的具体信息？
<ul>
<li>服务提供者启动时会向EurekaServer注册自己的信息</li>
<li>消费者根据服务名称向EurekaServer拉取提供者信息</li>
</ul>
</li>
<li>如果有多个服务提供者，消费者该如何选择？
<ul>
<li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li>
</ul>
</li>
<li>消费者如何感知服务提供者的健康状态？
<ul>
<li>服务提供者会每隔30秒向EurekaServer注册中心发送心跳请求，报告健康状态</li>
<li>EurekaServer会根据健康状态更新服务列表，消费者就可以获取到最新的服务信息</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="1-搭建eurekaserver">1. 搭建EurekaServer</h3>
<h4 id="搭建eurekaserver服务步骤如下">搭建EurekaServer服务步骤如下：</h4>
<ol>
<li>
<p>创建项目，引入<code>spring-cloud-starter-netflix-eureka-server</code>依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>编写启动类，添加<code>@EnableEurekaServer</code>注解</p>
</li>
<li>
<p>添加<code>application.yml</code>文件，书写配置内容如下：</p>
<pre><code class="language-yaml">server:
	port: 10086
spring:
	application:
		name: eurekaserver
eureka:
	client:
		service-url:
			defaultZone: http://127.0.0.1:10086/eureka
</code></pre>
</li>
</ol>
<h3 id="2-注册微服务">2. 注册微服务</h3>
<h4 id="步骤如下">步骤如下：</h4>
<ol>
<li>
<p>在<code>user-service</code>项目中引入<code>spring-cloud-starter-netflix-eureka-client</code>的依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>在<code>application.yml</code>文件添加如下配置：</p>
<pre><code class="language-yaml">spring:
	application:
		name: userservice
eureka:
	client:
		service-url:
			defaultZone: http://127.0.0.1:10086/eureka/
</code></pre>
</li>
</ol>
<h3 id="3-服务发现">3. 服务发现</h3>
<h4 id="在order-service中完成服务发现">在order-service中完成服务发现</h4>
<ol>
<li>
<p>修改<code>OrderService</code>的代码，修改访问的url路径，用服务名代替IP和端口号</p>
<pre><code class="language-java">String url = &quot;http://uservice/user/&quot; + order.getUserId();
User user = restTemplate.getForObject(url,User.class);
</code></pre>
</li>
<li>
<p>在<code>order-service</code>项目的启动类<code>OrderApplication</code>中的<code>RestTemplate</code>添加负载均衡注解<code>@LoadBalanced</code>：</p>
<pre><code class="language-java">@Bean
@LoadBalanced
public RestTemplate restTemplate(){
  return new RestTemplate();
}
</code></pre>
</li>
</ol>
<h2 id="三-ribbon负载均衡">三、Ribbon负载均衡</h2>
<h3 id="1-负载均衡的流程">1. 负载均衡的流程</h3>
<ul>
<li><code>order-service</code>发起请求<code>http://userservice/user/1</code></li>
<li><code>LoadBalancerInterceptor</code>负载均衡拦截器拦截请求，交给<code>RibbonLoadBanlancerClient</code></li>
<li><code>RibbonLoadBanlancerClient</code>获得服务名称交给<code>DynamicServerListLoadBalancer</code></li>
<li><code>DynamicServerListLoadBalancer</code>从<code>IRule</code>中选取负载均衡规则去决定选择使用的服务并将服务地址返还给<code>RibbonLoadBalancerClient</code></li>
<li><code>RibbonLoadBalancerClient</code>将带有服务名称的url修改为指定服务真实地址的url并发送请求</li>
</ul>
<h3 id="2-irule负载均衡的策略">2. IRule负载均衡的策略</h3>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/image-20220215163327792.png" alt="IRule" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>内置负载均衡规则类</th>
<th>规则描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>RoundRobinRule</td>
<td>简单轮询服务列表来选择服务器，它是Ribbon默认的负载均衡规则</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>对以下两种服务器进行过滤：<br>1. 在默认情况下，如果服务器3次连接均失败，该服务器就会被设置为&quot;短路&quot;状态，此状态持续30秒，如果再次连接失败，短路持续的时间就会几何倍增<br>2. 并发数过高的服务器，如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略，并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;-&lt;clientConfigNameSpace&gt;-ActiveConnectionsLimit</code>属性进行配置</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>为每一个服务器赋予一个权重值，服务器响应时间越长，该服务器权重越小</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>以区域内可用的服务器为基础进行服务器的选择，使用Zone对服务器进行分类，Zone可以理解为一个机房，然后对Zone内的多个服务做轮询</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>忽略短路的服务器，并选择并发数较低的服务器</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个可用的服务器</td>
</tr>
<tr>
<td>RetryRule</td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody>
</table>
<h3 id="3-修改负载均衡规则的方式">3. 修改负载均衡规则的方式</h3>
<h4 id="31-代码方式">3.1 代码方式</h4>
<ul>
<li>
<p>在order-service中的Order Application类中，定义一个新的IRule：</p>
<pre><code class="language-java">@Bean
public IRule randomRule(){
  return new RandomRule();
}
</code></pre>
</li>
</ul>
<h4 id="32-配置文件方式">3.2 配置文件方式</h4>
<ul>
<li>
<p>在order-service的application.yml文件中，添加新的配置也可以修改规则：</p>
<pre><code class="language-yaml">userservice:
	ribbon:
		NFLoadBanlancerRuleClassName: com.netflix.loadbalancer.RandomRule
</code></pre>
</li>
</ul>
<h3 id="4-饥饿加载">4. 饥饿加载</h3>
<blockquote>
<p>Ribbon默认采用懒加载，即第一次访问时才会创建LoadBalanceClient，请求时间会很长，而饥饿加载会在项目启动时创建，降低第一次访问时的耗时，通过下面的配置开启饥饿加载：</p>
<pre><code class="language-yml">ribbon
	eager-load:
		enabled: true
		clients: 
			- userservice
</code></pre>
</blockquote>
<h2 id="四-nacos注册中心">四、Nacos注册中心</h2>
<h3 id="github-httpsgithubcomalibabanacos">GitHub： <a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></h3>
<h3 id="版本对应说明地址">版本对应说明：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">地址</a></h3>
<p>前往Github下载安装包，解压到指定位置即可，使用以下命令启动：</p>
<pre><code class="language-shell">startup.cmd -m standalone
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://pic.zyblog.xyz/img/typora/image-20220215183004197.png" alt="启动成功" loading="lazy"></figure>
<h3 id="1-nacos搭建">1. Nacos搭建</h3>
<h4 id="步骤如下-2">步骤如下：</h4>
<p>创建项目，引入<code>spring-cloud-alibaba</code>的依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;
  &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;
  &lt;type&gt;pom&lt;/type&gt;
  &lt;scope&gt;import&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="2-注册微服务-2">2. 注册微服务</h3>
<ol>
<li>
<p>对应微服务引入<code>spring-cloud-starter-alibaba-nacos-discovery</code></p>
<pre><code class="language-xml"></code></pre>
</li>
</ol>
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
</dependency>
	```
<ol start="2">
<li>
<p>修改该服务的application.yml文件，配置如下：</p>
<pre><code class="language-yaml">spring:
	cloud:
		nacos:
			server-addr: localhost:8848
</code></pre>
</li>
</ol>
<h3 id="3-nacos服务多级存储模型">3. Nacos服务多级存储模型</h3>
<blockquote>
<p>一级是服务，二级是集群，三级是实例</p>
</blockquote>
<h4 id="31-服务集群属性">3.1 服务集群属性</h4>
<ol>
<li>
<p>修改提供者<code>application.yml</code>，添加配置如下：</p>
<pre><code class="language-yaml">spring:
	cloud:
		nacos:
			server-addr: localhost:8848 #配置nacos服务端地址
			discovery:
				cluster-name: HZ #配置集群名称
</code></pre>
</li>
<li>
<p>修改消费者<code>application.yml</code>，添加配置如下：</p>
<pre><code class="language-yaml">servicename:
	ribbon:
		NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule
</code></pre>
<blockquote>
<p>NacosRule负载均衡策略</p>
<ol>
<li>优先选择同集群服务实例列表</li>
<li>本地集群找不到提供者，才去其他集群寻找，并且会警告</li>
<li>确定了可用实例列表后，再采用随机负载均衡挑选实例</li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<p>注：从<code>spring-cloud-alibaba2020.*</code>版本开始，已经逐渐弃用netflix相关组件，例如ribbon，要想继续使用，应该回退版本到<code>spring-cloud-alibaba2.*</code>，还要注意对应的<code>spring-boot</code>和<code>spring-cloud</code>版本的兼容性</p>
<p>版本说明：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">Github版本说明</a></p>
</blockquote>
<ol start="3">
<li>实例的权重控制
<ul>
<li>Nacos控制台可以设置实例的权重值，0-1之间</li>
<li>统计群内的多个实例，权重越高被访问的频率越高</li>
<li>权重设置为0则完全不会被访问</li>
</ul>
</li>
</ol>
<h4 id="32-环境隔离-namespace">3.2 环境隔离 namespace</h4>
<blockquote>
<p>Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离，未设置namespace的情况下默认为public</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/image-20220703081115288.png" alt="image-20220703081115288" loading="lazy"></figure>
<blockquote>
<h4 id="实例">实例</h4>
<ol>
<li>
<p>在Nacos控制台创建命名空间dev，并复制namespace的UUID</p>
<figure data-type="image" tabindex="6"><img src="https://pic.zyblog.xyz/img/typora/image-20220703081956710.png" alt="image-20220703081956710" loading="lazy"></figure>
</li>
<li>
<p>在注册服务的application.yml中添加如下配置文件，即可将该服务分配到此命名空间下，此时若其他服务与它不属于同一namespace下，将无法访问此服务</p>
<p><code>namespace: 8f6f25b2-4758-40f7-8445-6c36ae9fb962 </code></p>
</li>
</ol>
<pre><code class="language-yaml">spring:
	cloud:
		nacos:
			server-addr: localhost:8848  
			discovery:
				cluster-name: 西安
				namespace: 8f6f25b2-4758-40f7-8445-6c36ae9fb962 #dev环境
</code></pre>
</blockquote>
<blockquote>
<p>Nacos环境隔离</p>
<ul>
<li>namespace用来做环境隔离</li>
<li>每个namespace都有唯一id，由Nacos控制台生成UUID</li>
<li>不同namespace下服务不可见</li>
</ul>
<p>可用来分别控制开发环境，测试环境，生产环境下的服务之间不可随意调用</p>
</blockquote>
<h3 id="4-nacos和eureka的区别">4. Nacos和Eureka的区别</h3>
<figure data-type="image" tabindex="7"><img src="https://pic.zyblog.xyz/img/typora/image-20220703083516074.png" alt="image-20220703083516074" loading="lazy"></figure>
<h4 id="41-临时实例和非临时实例">4.1 临时实例和非临时实例</h4>
<p>服务注册时，在启动配置文件中添加以下配置来设置当前实例的类别</p>
<pre><code class="language-yaml">spring:
	cloud:
		nacos:
			discovery:
				ephemeral: false #设置为非临时实例 
</code></pre>
<blockquote>
<p><code>ephemeral</code>: <code>英 [ɪˈfemərəl]</code> <code>美 [ɪˈfemərəl]</code></p>
<ul>
<li>adj. 短暂的；（主指植物）短生的，短命的</li>
<li>n. 只生存一天的事物；短生植物</li>
</ul>
</blockquote>
<h4 id="42-区别与联系">4.2 区别与联系</h4>
<ol>
<li>共同点
<ul>
<li>都支持服务注册和服务拉取</li>
<li>都支持服务提供者心跳方式做健康检测</li>
</ul>
</li>
<li>区别
<ul>
<li>Nacos支持服务端主动检测提供者状态
<ul>
<li>临时实例采用心跳模式</li>
<li>非临时实例采用主动监测模式</li>
</ul>
</li>
<li>在Nacos中，临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新及时</li>
<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>
</ul>
</li>
</ol>
<blockquote>
<p>第二天</p>
</blockquote>
<h2 id="五-nacos配置管理">五、 Nacos配置管理</h2>
<figure data-type="image" tabindex="8"><img src="https://pic.zyblog.xyz/img/typora/image-20220703085636245.png" alt="image-20220703085636245" loading="lazy"></figure>
<h3 id="1-统一配置管理">1. 统一配置管理</h3>
<figure data-type="image" tabindex="9"><img src="https://pic.zyblog.xyz/img/typora/image-20220703090539366.png" alt="image-20220703090539366" loading="lazy"></figure>
<blockquote>
<p>因为bootstrap.yml的优先级高于application.yml，所以我们可以通过将Nacos服务信息配置到bootstrap.yml中来读取Nacos管理的配置文件，然后与本地配置文件进行合并，然后创建Spring容器，加载Bean启动程序</p>
</blockquote>
<h4 id="11-在指定服务的pom中引入nacos配置管理客户端依赖">1.1 在指定服务的pom中引入Nacos配置管理客户端依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="12-在指定服务的resources目录下添加一个bootstrapyml文件这是一个引导文件优先级高于applicationyml">1.2 在指定服务的resources目录下添加一个<code>bootstrap.yml</code>文件，这是一个引导文件，优先级高于<code>application.yml</code></h4>
<pre><code class="language-yaml">spring:
  application:
    name: user-service #服务名称
  profiles:
    active: dev #开发环境
  cloud:
    nacos:
      server-addr: localhost:8848 #Nacos地址
      config:
        file-extension: yaml #文件后缀
</code></pre>
<h3 id="2-配置热更新">2. 配置热更新</h3>
<h4 id="21-方式一">2.1 方式一</h4>
<blockquote>
<p>通过<code>@Value</code>注解注入，结合<code>@RefreshScope</code>来刷新</p>
</blockquote>
<h4 id="22-方式二">2.2 方式二</h4>
<blockquote>
<p>通过<code>@ConfigurationProperties</code>注解创建对应配置类注入，自动刷新</p>
</blockquote>
<h4 id="23-注意事项">2.3 注意事项</h4>
<ul>
<li>不是所有的配置都适合放到配置中心，维护起来比较麻烦</li>
<li>建议将一些关键参数，需要运行时调整的参数放到nacos配置中心，一般都是自定义配置</li>
</ul>
<h3 id="3-多环境配置共享">3. 多环境配置共享</h3>
<blockquote>
<p>微服务启动时会从Nacos中读取多个配置文件：</p>
<ul>
<li>[spring.application.name]-[spring.profiles.active].yaml</li>
<li>[spring.application.name].yaml</li>
</ul>
<p>我们发现无论是开发环境，测试环境，生产环境，[spring.application.name].yaml一定会被加载，因此我们可以将多环境共享的配置内容写入这个文件</p>
</blockquote>
<h4 id="31-注意事项">3.1 注意事项</h4>
<blockquote>
<p>当一个环境共享配置文件的值在本地配置文件中也存在时，以环境共享配置文件的值为主</p>
</blockquote>
<p>多种配置的优先级：</p>
<ul>
<li><code>[spring.application.name]-[spring.profiles.active].yaml</code>  &gt;  <code>[spring.application.name].yaml</code> &gt; <code>application.yaml</code></li>
</ul>
<h3 id="4-搭建nacos集群">4. 搭建Nacos集群</h3>
<figure data-type="image" tabindex="10"><img src="https://nacos.io/img/deployDnsVipMode.jpg" alt="https://nacos.io/img/deployDnsVipMode.jpg" loading="lazy"></figure>
<h4 id="41-创建集群数据库">4.1 创建集群数据库</h4>
<pre><code class="language-sql">create database if not exists nacos_config default character set utf8mb4 collate utf8mb4_general_ci;
</code></pre>
<h4 id="42-创建集群数据表">4.2 创建集群数据表</h4>
<pre><code class="language-sql">CREATE TABLE `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) DEFAULT NULL,
  `content` longtext NOT NULL COMMENT 'content',
  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COMMENT 'source user',
  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) DEFAULT NULL,
  `c_use` varchar(64) DEFAULT NULL,
  `effect` varchar(64) DEFAULT NULL,
  `type` varchar(64) DEFAULT NULL,
  `c_schema` text,
  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) NOT NULL COMMENT 'datum_id',
  `content` longtext NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `config_info_beta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
  `content` longtext NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COMMENT 'source user',
  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `config_info_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
  `content` longtext NOT NULL COMMENT 'content',
  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COMMENT 'source user',
  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `config_tags_relation` (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `group_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `his_config_info` (
  `id` bigint(64) unsigned NOT NULL,
  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) NOT NULL,
  `group_id` varchar(128) NOT NULL,
  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
  `content` longtext NOT NULL,
  `md5` varchar(32) DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text,
  `src_ip` varchar(50) DEFAULT NULL,
  `op_type` char(10) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `tenant_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `tenant_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) default '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) default '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';
</code></pre>
<pre><code class="language-sql">CREATE TABLE `users` (
	`username` varchar(50) NOT NULL PRIMARY KEY,
	`password` varchar(500) NOT NULL,
	`enabled` boolean NOT NULL
);
</code></pre>
<pre><code class="language-sql">CREATE TABLE `roles` (
	`username` varchar(50) NOT NULL,
	`role` varchar(50) NOT NULL,
	UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE
);
</code></pre>
<pre><code class="language-sql">CREATE TABLE `permissions` (
    `role` varchar(50) NOT NULL,
    `resource` varchar(255) NOT NULL,
    `action` varchar(8) NOT NULL,
    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
);
</code></pre>
<h4 id="43-向表中插入数据">4.3 向表中插入数据</h4>
<pre><code class="language-sql">INSERT INTO users (username, password, enabled) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE);

INSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');
</code></pre>
<h4 id="44-配置nacos">4.4 配置Nacos</h4>
<h5 id="1-打开-nacos安装目录conf">1. 打开 <code>\Nacos安装目录\conf\</code></h5>
<ul>
<li>
<p>找到<code>cluster.conf.example</code>文件，将后缀<code>.example</code>去掉，编辑<code>cluster.conf</code>文件，配置多个Nacos服务的地址及端口</p>
<pre><code class="language-conf">127.0.0.1:8845
127.0.0.1:8846
127.0.0.1:8847

</code></pre>
</li>
<li>
<p>找到<code>application.properties</code>文件，编辑文件</p>
<ul>
<li>将第33行取消注释，表示我们所使用的数据库为mysql</li>
</ul>
<pre><code class="language-properties">#*************** Config Module Related Configurations ***************#
### If use MySQL as datasource:
spring.datasource.platform=mysql
</code></pre>
<ul>
<li>将36,39,40,41行取消注释，并修改为我们刚才建立的集群数据库信息</li>
</ul>
<pre><code class="language-properties">### Count of DB:
db.num=1

### Connect URL of DB:
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC
db.user.0=root
db.password.0=root
</code></pre>
</li>
</ul>
<h5 id="2-复制nacos文件夹并分别修改为nacos1nacos2nacos3">2. 复制Nacos文件夹并分别修改为Nacos1，Nacos2，Nacos3</h5>
<ul>
<li>
<p>编辑<code>application.properties</code>文件，修改对应端口</p>
<ul>
<li>
<p>nacos1</p>
<pre><code class="language-properties">server.port = 8840
</code></pre>
</li>
<li>
<p>nacos2</p>
<pre><code class="language-properties">server.port = 8845
</code></pre>
</li>
<li>
<p>nacos3</p>
<pre><code class="language-properties">server.port = 8847
</code></pre>
</li>
</ul>
</li>
<li>
<p>分别启动三个nacos节点 <code>startup.cmd</code></p>
</li>
</ul>
<h4 id="45-nginx反向代理">4.5 Nginx反向代理</h4>
<pre><code class="language-conf">upstream nacos-cluster {
		server 192.168.1.7:8840;
		server 192.168.1.7:8845;
		server 192.168.1.7:8847;
	}
	server {
		listen		80;
		server_name	localhost;
		
		location /nacos {
			proxy_pass http://nacos-cluster;
		}
	}
</code></pre>
<blockquote>
<p>如果访问<code>localhost/nacos</code>提示404，那么就是80端口号被占用，请更改端口号重启nginx</p>
</blockquote>
<figure data-type="image" tabindex="11"><img src="https://pic.zyblog.xyz/img/typora/image-20220703115917500.png" alt="image-20220703115917500" loading="lazy"></figure>
<h2 id="六-基于feign的远程调用">六、 基于Feign的远程调用</h2>
<figure data-type="image" tabindex="12"><img src="https://camo.githubusercontent.com/f1bd8b9bfe3c049484b0776b42668bb76a57872fe0f01402e5ef73d29b811e50/687474703a2f2f7777772e706c616e74756d6c2e636f6d2f706c616e74756d6c2f70726f78793f63616368653d6e6f267372633d68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f70656e466569676e2f666569676e2f6d61737465722f7372632f646f63732f6f766572766965772d6d696e646d61702e69756d6c" alt="MindMap overview" loading="lazy"></figure>
<h3 id="1-添加依赖">1. 添加依赖</h3>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/ artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="2-代码书写">2. 代码书写</h3>
<ul>
<li>
<p>在服务启动类上添加<code>@EnableFeignClients</code>注解</p>
<pre><code class="language-java">@SpringBootApplication
@EnableFeignClients
public class OrderServiceApplication {

  public static void main(String[] args) {
      SpringApplication.run(OrderServiceApplication.class, args);
  }
}
</code></pre>
</li>
<li>
<p>创建远程调用服务接口，格式如下</p>
<pre><code class="language-java">@FeignClient(&quot;user-service&quot;)
public interface UserClients {

    @GetMapping(&quot;/user/info/{id}&quot;)
    Response getUserInfoById(@PathVariable(&quot;id&quot;) Long id);
}
</code></pre>
</li>
<li>
<p>Feign调用远程服务接口实例</p>
<pre><code class="language-java">public Response getOrderInfoById(Long id){
  Response response = new Response();
  OrderInfo orderInfo = orderMapper.selectById(id);
  if(orderInfo!=null){
    OrderVO orderVO = new OrderVO();
    BeanUtils.copyProperties(orderInfo,orderVO);
    orderVO.setPrice(Double.valueOf((orderInfo.getPrice()/100)));
    Response userInfoById = userClients.getUserInfoById(orderInfo.getUserId());
    orderVO.setUserInfo(userInfoById.getData());
    response.code(ResponseCode.SUCCESS).message(&quot;获取成功&quot;).count(1).data(orderVO);
  }
  return response;
}
</code></pre>
</li>
<li>
<p>返回结果</p>
<blockquote>
<p>{<br>
&quot;code&quot;: 200,<br>
&quot;message&quot;: &quot;获取成功&quot;,<br>
&quot;count&quot;: 1,<br>
&quot;data&quot;: {<br>
&quot;id&quot;: &quot;1543151273902505986&quot;,<br>
&quot;price&quot;: 3902.0,<br>
&quot;name&quot;: &quot;OculusQuest2&quot;,<br>
&quot;num&quot;: 2,<br>
&quot;userId&quot;: &quot;1543062156246155265&quot;,<br>
&quot;userInfo&quot;: {<br>
&quot;id&quot;: &quot;1543062156246155265&quot;,<br>
&quot;username&quot;: &quot;zhiyuan121&quot;,<br>
&quot;email&quot;: &quot;5168154488@gmail.com&quot;,<br>
&quot;introduction&quot;: &quot;个人简介&quot;,<br>
&quot;phoneNumber&quot;: &quot;97938192868&quot;,<br>
&quot;nickname&quot;: &quot;絷缘&quot;,<br>
&quot;status&quot;: &quot;正常&quot;,<br>
&quot;registerTime&quot;: &quot;2022-07-02&quot;<br>
},<br>
&quot;createTime&quot;: &quot;2022-07-02&quot;<br>
}<br>
}</p>
</blockquote>
</li>
</ul>
<h3 id="3-feign的自定义配置">3. Feign的自定义配置</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>feign.Logger.Level</td>
<td>日志级别</td>
<td>包含四种不同级别：NONE、BASIC、HEADERS、FULL</td>
</tr>
<tr>
<td>feign.codec.Decoder</td>
<td>响应结果解析器</td>
<td>远程调用返回结果解析</td>
</tr>
<tr>
<td>feign.codec.Encoder</td>
<td>请求参数编码</td>
<td>将请求参数编码</td>
</tr>
<tr>
<td>feign.Contract</td>
<td>支持的注解格式</td>
<td>默认SpringMVC注解</td>
</tr>
<tr>
<td>feign.Retryer</td>
<td>失败重试机制</td>
<td>请求失败重试，默认没有，但是会使用Ribbon重试</td>
</tr>
</tbody>
</table>
<h4 id="31-日志配置方式">3.1 日志配置方式</h4>
<ol>
<li>
<p>配置文件方式</p>
<ul>
<li>
<p>全局生效</p>
<pre><code class="language-yaml">feign:
	client:
		config:	
			default: #default表示全局配置
				loggerLevel: FULL #日志级别
</code></pre>
</li>
<li>
<p>局部生效</p>
<pre><code class="language-yaml">feign:
	client:
		config:
			user-service: #对应服务名表示局部配置
				loggerLevel: FULL #日志级别
</code></pre>
</li>
</ul>
</li>
<li>
<p>Java代码方式</p>
<ul>
<li>
<p>声明一个Bean</p>
<pre><code class="language-java">public class FeignClientConfiguration{
	@Bean
  public Logger.Level feignLogLevel(){
    return Logger.Level.BASIC;
  }
}
</code></pre>
</li>
<li>
<p>全局生效：使用加在启动类上的<code>@EnableFeignClients</code>上</p>
<pre><code class="language-java">@EnableFeignClients(defaultConfiguration = FeignClientConfiguration.class)
</code></pre>
</li>
<li>
<p>局部生效：使用加在指定服务上的<code>@FeignClient</code>上</p>
<pre><code class="language-java">@FeignClient(value = &quot;user-service&quot;,configuration = FeignClientsConfiguration.class)
</code></pre>
</li>
</ul>
</li>
</ol>
<h3 id="3-feign性能优化">3. Feign性能优化</h3>
<h4 id="31-feign底层客户端的实现">3.1 Feign底层客户端的实现</h4>
<ul>
<li>URLConnection：默认实现，不支持连接池</li>
<li>Apache HttpClient：支持连接池</li>
<li>OKHttp：支持连接池</li>
</ul>
<blockquote>
<p>因此优化Feign的性能主要包括：</p>
<ol>
<li>使用连接池代替默认的URLConnection</li>
<li>日志级别，最好用basic或none</li>
</ol>
</blockquote>
<h4 id="32-为feign添加httpclient支持">3.2 为Feign添加HttpClient支持</h4>
<ol>
<li>
<p>引入依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;
  &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>配置连接池</p>
<pre><code class="language-yaml">feign:
	client:
		config:
			default:
				loggerLevel: BASIC
	httpclient:
		enabled: true #开启httpclient支持
		max-connections: 200 #最大连接数
		max-connections-per-route: 50 #每个路径最大连接数
</code></pre>
</li>
</ol>
<h3 id="4-feign的最佳实践">4. Feign的最佳实践</h3>
<h4 id="41-方式一继承">4.1 方式一(继承)</h4>
<blockquote>
<p>给消费者的FeignClient和提供者的Controller定义统一的父接口作为标准</p>
</blockquote>
<h4 id="42-方式二抽取">4.2 方式二（抽取）</h4>
<blockquote>
<p>将FeignClient抽取为独立模块，并且把接口有关的Entity、默认的Feign配置都放到这个模块中，提供给所有消费者使用</p>
</blockquote>
<figure data-type="image" tabindex="13"><img src="https://pic.zyblog.xyz/img/typora/image-20220703214647319.png" alt="image-20220703214647319" loading="lazy"></figure>
<blockquote>
<p>步骤：</p>
<ol>
<li>首先创建一个module，命名为feign-api，然后引入feign依赖</li>
<li>将order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</li>
<li>在order-service中引入feign-api依赖</li>
<li>修改order-service中所有与上述三个组件有关的import部分，改成导入feign-api中的包</li>
</ol>
</blockquote>
<blockquote>
<p>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用，解决方式有两种：</p>
<ol>
<li>
<p>指定FeignClient所在包</p>
<p><code>@EnableFeignClients(basePackages = &quot;com.zhiyuan.feign.clients&quot;)</code></p>
</li>
<li>
<p>指定FeignClient字节码</p>
<p><code>@EnableFeignClients(clients = {UserClient.class})</code></p>
</li>
</ol>
</blockquote>
<blockquote>
<p>抽取为feign-api后会导致日志配置失效，通过添加 <code>logging.level.com.zhiyuan.clients:DEBUG</code> 可以使日志配置生效</p>
</blockquote>
<h2 id="七-统一网关gateway">七、统一网关Gateway</h2>
<h3 id="1-网关的功能">1. 网关的功能</h3>
<h4 id="11-身份认证和权限校验">1.1 身份认证和权限校验</h4>
<h4 id="12-服务路由-负载均衡">1.2 服务路由、负载均衡</h4>
<h4 id="13-请求限流">1.3 请求限流</h4>
<h3 id="2-springcloud中网关的实现">2. SpringCloud中网关的实现</h3>
<h4 id="21-gateway">2.1 Gateway</h4>
<h4 id="22-zuul">2.2 zuul</h4>
<blockquote>
<p>Zuul是基于Servlet实现的，属于阻塞式编程，而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能</p>
</blockquote>
<h3 id="3-搭建网关">3. 搭建网关</h3>
<h4 id="31-创建新的module引入springcloudgateway的依赖和nacos的服务发现依赖">3.1 创建新的module，引入SpringCloudGateway的依赖和nacos的服务发现依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-alibaba-nacos-discovery&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="32-编写路由配置及nacos地址">3.2 编写路由配置及nacos地址</h4>
<pre><code class="language-yaml">server:
	port: 10010
spring:
	application:
		name: gateway
	cloud:
		nacos:
			server-addr: localhost:8848
		gateway:
			routes: #网关路由配置
				- id: user-service #路由ID，自定义唯一即可
					uri: lb://user-service # 路由目标地址 
					predicates: #路由断言，即用来判断请求是否符合路由规则的配置
						- Path=/user/** 
</code></pre>
<h4 id="33-路由断言工厂route-predicate-factory">3.3 路由断言工厂Route Predicate Factory</h4>
<blockquote>
<p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>
<p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>After</td>
<td>某个时间点后的请求</td>
<td><code>- After=2022-06-20T17:00:00.369+8:00[Asia/Shanghai]</code></td>
</tr>
<tr>
<td>Before</td>
<td>某个时间点前的请求</td>
<td><code>- Before2022-06-20T17:00:00.369+8:00[Asia/Shanghai]</code></td>
</tr>
<tr>
<td>Between</td>
<td>某两个时间点之间的请求</td>
<td><code>- Between=2022-06-20T17:00:00.369+8:00[Asia/Shanghai],2022-07-01T17:00:00.369+8:00[Asia/Shanghai]</code></td>
</tr>
<tr>
<td>Cookie</td>
<td>请求必须包含某些Cookie</td>
<td><code>- Cookie=</code></td>
</tr>
<tr>
<td>Header</td>
<td>请求必须包含某些Header</td>
<td><code>- Header=</code></td>
</tr>
<tr>
<td>Host</td>
<td>请求必须访问某个host</td>
<td><code>- Host=**</code></td>
</tr>
<tr>
<td>Method</td>
<td>请求必须以指定方式发起</td>
<td><code>- Method=GET,POST</code></td>
</tr>
<tr>
<td>Path</td>
<td>请求路径必须符合指定规则</td>
<td><code>- Path=</code></td>
</tr>
<tr>
<td>Query</td>
<td>请求参数必须包含指定参数</td>
<td><code>- Query=</code></td>
</tr>
<tr>
<td>RemoteAddr</td>
<td>请求者的ip必须是指定范围</td>
<td><code>- RemoteAddr=192.168.1.1/24</code></td>
</tr>
<tr>
<td>Weight</td>
<td>权重处理</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="34-路由过滤器gatewayfilter">3.4 路由过滤器GatewayFilter</h4>
<ul>
<li>
<h5 id="局部过滤器">局部过滤器</h5>
<table>
<thead>
<tr>
<th>过滤器工厂</th>
<th>作用</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>AddRequestHeader</td>
<td>给原始请求添加Header</td>
<td>Header名称，Header值</td>
</tr>
<tr>
<td>AddRequestParameter</td>
<td>给原始请求添加请求参数</td>
<td>参数名称，参数值</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>给原始响应添加Header</td>
<td>Header名称，Header值</td>
</tr>
<tr>
<td>DedupeResponseHeader</td>
<td>剔除响应头中的重复值</td>
<td>Header名称，去重策略</td>
</tr>
<tr>
<td>Hystrix</td>
<td>引入Hystrix的断路器保护</td>
<td><code>HystrixCommand</code>名称</td>
</tr>
<tr>
<td>FallbackHeaders</td>
<td>给FallbackURL请求头中添加具体的异常信息</td>
<td>Header名称</td>
</tr>
<tr>
<td>PrefixPath</td>
<td>给原始请求路径添加前缀</td>
<td>前缀路径</td>
</tr>
<tr>
<td>PreserveHostHeader</td>
<td>给请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性来决定是否要发送原始的Host</td>
<td>无</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>对请求限流，限流算法为令牌桶</td>
<td>keyResolver、rateLimiter、status Code、denyEmptyKey、emptyKeyStatus</td>
</tr>
<tr>
<td>RedirectTo</td>
<td>将原始请求重定向到指定URL</td>
<td>HTTP状态码，重定向URL</td>
</tr>
<tr>
<td>RemoveHopByHopHeadersFilter</td>
<td>将原始请求中IETF组织规定的Header信息全部移除</td>
<td>默认启用，可以通过配置指定删除的Header</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>将原始请求中的某个Header移除</td>
<td>Header名称</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>将原始响应中的某个Header移除</td>
<td>Header名称</td>
</tr>
<tr>
<td>RewritePath</td>
<td>重写原始请求路径</td>
<td>原始路径正则表达式，重写后路径的正则表达式</td>
</tr>
<tr>
<td>RewriteResponseHeader</td>
<td>重写原始响应中的某个Header</td>
<td>Header名称，值的正则表达式，重写后的值</td>
</tr>
<tr>
<td>SaveSession</td>
<td>在转发请求之前强制执行<code>WebSession::save</code>操作</td>
<td>无</td>
</tr>
<tr>
<td>SecureHeaders</td>
<td>给原始响应添加有安全作用的Header</td>
<td>无</td>
</tr>
<tr>
<td>SetPath</td>
<td>修改原始请求路径</td>
<td>修改后的路径</td>
</tr>
<tr>
<td>SetResponseHeader</td>
<td>修改原始响应中某个Header的值</td>
<td>Header名称，修改后的值</td>
</tr>
<tr>
<td>SetStatus</td>
<td>修改原始响应中的状态码</td>
<td>HTTP状态码，字符串或数字均可</td>
</tr>
<tr>
<td>StripPrefix</td>
<td>截断原始请求路径</td>
<td>使用数字表示要截断路径的数量</td>
</tr>
<tr>
<td>Retry</td>
<td>针对不同的响应进行重试</td>
<td>retries、statuses、methods、series</td>
</tr>
<tr>
<td>RequestSize</td>
<td>设置允许接收的最大请求包，如果请求大小超过设置的值，返回<code>413 Payload Too Large</code></td>
<td>请求包大小，单位Byte，默认5M</td>
</tr>
<tr>
<td>ModifyRequestBody</td>
<td>在转发请求之前修改原始请求体内容</td>
<td>修改后的请求体内容</td>
</tr>
<tr>
<td>ModifyResponseBody</td>
<td>修改原始响应体的内容</td>
<td>修改后的响应体内容</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<h5 id="全局过滤器">全局过滤器</h5>
</li>
</ul>
<figure data-type="image" tabindex="14"><img src="https://pic.zyblog.xyz/img/typora/1731789-20210729134816531-578321460.png" alt="img" loading="lazy"></figure>
<ul>
<li>
<p>使用示例</p>
<ul>
<li>
<h5 id="局部过滤器-2">局部过滤器</h5>
</li>
</ul>
<pre><code class="language-yaml">#局部过滤器，只对定义该过滤器的服务有效
server:
  port: 10010
spring:
  application:
    name: gateway
  cloud:
    nacos:
      server-addr: localhost:8848 #nacos服务端地址
      discovery:
        cluster-name: 西安
    gateway:
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user/**
          filters:
          	- AddRequestHeader=Author,ZhiYuanXie
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/order/**
</code></pre>
<pre><code class="language-yaml">#默认过滤器，对配置的所有的服务有效
server:
  port: 10010
spring:
  application:
    name: gateway
  cloud:
    nacos:
      server-addr: localhost:8848 #nacos服务端地址
      discovery:
        cluster-name: 西安
    gateway:
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user/**
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/order/**
     default-filters:
        - AddRequestHeader=Author,ZhiYuanXie
</code></pre>
<ul>
<li>
<h5 id="全局过滤器-2">全局过滤器</h5>
</li>
</ul>
<pre><code class="language-java">@Order(-1)
@Component
public class AuthorizeFilter implements GlobalFilter,Ordered {
    @Override
    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        //获取请求参数
        MultiValueMap&lt;String, String&gt; queryParams = exchange.getRequest().getQueryParams();
        //获取响应对象
        ServerHttpResponse response = exchange.getResponse();
        //获取authorization参数  
        String auth = queryParams.getFirst(&quot;authorization&quot;);
        if (&quot;admin&quot;.equals(auth)){
            //放行
            return chain.filter(exchange);
        }
        //拦截请求，响应对象设置HTTP状态码
        response.setStatusCode(HttpStatus.UNAUTHORIZED);
        return response.setComplete();
    }
    
    //设置过滤器优先级
    public int getOrder(){
        return -1;
    }
}
</code></pre>
<blockquote>
<p><code>@Order</code>注解</p>
<p>路由过滤器、默认过滤器、全局过滤器的执行顺序</p>
<figure data-type="image" tabindex="15"><img src="https://pic.zyblog.xyz/img/typora/image-20220704132511162.png" alt="image-20220704132511162" loading="lazy"></figure>
<ul>
<li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高</strong></li>
<li>全局过滤器GlobalFilter通过实现Ordered接口，或者添加<code>@Order</code>注解来指定order值，由我们自己实现</li>
<li>路由过滤器Filters和默认过滤器defaultFilter由Spring指定，默认是按声明顺序从1开始递增</li>
<li>当过滤器的order值都一样时，会按照 <strong>defaultFilter &gt; 路由过滤器 &gt; GlobalFilter</strong> 的顺序执行</li>
</ul>
<p>参考以下方法查看优先级：</p>
<figure data-type="image" tabindex="16"><img src="https://pic.zyblog.xyz/img/typora/image-20220704133728495.png" alt="image-20220704133728495" loading="lazy"></figure>
</blockquote>
</li>
</ul>
<h4 id="35-网关的跨域请求配置">3.5 网关的跨域请求配置</h4>
<blockquote>
<p>跨域：域名不一致就是跨域，主要包括：</p>
<ul>
<li>域名不同</li>
<li>域名相同，端口不同</li>
</ul>
<p>跨域问题：浏览器禁止请求发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>
<p>解决方案：CORS</p>
</blockquote>
<p>Gateway的跨域只需要简单配置即可实现</p>
<pre><code class="language-yaml">server:
  port: 10010
spring:
  application:
    name: gateway
  cloud:
    nacos:
      server-addr: localhost:8848 #nacos服务端地址
      discovery: 
        cluster-name: 西安
    gateway:
      globalcors: #全局跨域处理
        add-to-simple-url-handler-mapping: true #解决options请求被拦截的问题
        cors-configurations:
          '[/**]':
            allowedOrigins: #跨域允许的网址
              - &quot;http://localhost:8080/&quot;
            allowedMethods: #跨域允许的请求方式
              - &quot;GET&quot;
              - &quot;POST&quot;
              - &quot;DELETE&quot;
              - &quot;PUT&quot;
              - &quot;OPTIONS&quot;
            allowedHeaders: &quot;*&quot; #跨域是否允许携带Header信息
            allowedCredentials: true #跨域是否允许携带Cookie信息
            maxAge: 360000 #跨域检测有效期
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user/**
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/order/**
      default-filters:
        - AddRequestHeader=Author,ZhiYuanXie
</code></pre>
<blockquote>
<p>第三天</p>
</blockquote>
<h2 id="八-容器化部署docker">八、容器化部署Docker</h2>
<blockquote>
<p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p>
<ul>
<li>Docker允许开发汇总将应用、依赖、函数库、配置一起打包，形成可以直接安装的镜像</li>
<li>Docker应用运行在容器中，使用沙箱机制，相互隔离</li>
</ul>
</blockquote>
<blockquote>
<p>Docker如何解决开发、测试、生产环境有差异的问题？</p>
<p>Docker镜像中包含完整的运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</p>
</blockquote>
<blockquote>
<p>Docker与虚拟机的区别：</p>
<p>虚拟机是使用Hypervisor技术在操作系统中模拟硬件设备，然后运行另一个操作系统，比如在Windows系统里面运行Ubuntu系统。</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Docker</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>性能较差</td>
</tr>
<tr>
<td>硬盘占用</td>
<td>一般为MB</td>
<td>一般为GB</td>
</tr>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="1-概念">1. 概念</h3>
<h4 id="11-镜像image">1.1 镜像（Image）</h4>
<ul>
<li>Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为<strong>镜像</strong></li>
</ul>
<h4 id="12-容器container">1.2 容器（Container）</h4>
<ul>
<li>镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器做隔离，对外不可见</li>
</ul>
<h4 id="13-dockerhub">1.3 DockerHub</h4>
<ul>
<li>DockerHub是一个Docker镜像的托管平台，这样的平台称为Docker Registry</li>
<li>国内也有类似于DockerHub的公开服务，比如网易云镜像服务、阿里云镜像库等</li>
</ul>
<h4 id="14-docker">1.4 Docker</h4>
<ul>
<li>
<p>Docker是一个CS架构的程序，由两部分组成</p>
<ul>
<li>服务端：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li>
<li>客户端：通过命令或RestAPI向Docker服务端发送指令，可以在本地或远程向服务端发送指令</li>
</ul>
<figure data-type="image" tabindex="17"><img src="https://pic.zyblog.xyz/img/typora/image-20220704170659232.png" alt="image-20220704170659232" loading="lazy"></figure>
</li>
</ul>
<h3 id="2-安装docker">2. 安装Docker</h3>
<h4 id="21-centos7安装docker">2.1 CentOS7安装Docker</h4>
<blockquote>
<p>CentOS7系统下载地址：</p>
<p>http://mirrors.163.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</p>
<p>迅雷下载镜像文件有奇效，IDM平时下载很快，下载镜像开8线程只能跑到1M/s，迅雷直接10M/s</p>
</blockquote>
<ul>
<li>
<h5 id="若之前安装过其他版本docker通过以下方式完成卸载">若之前安装过其他版本Docker，通过以下方式完成卸载：</h5>
<pre><code class="language-shell">yum remove docker \
                docker-client \
                docker-client-latest \
                docker-common \
                docker-lastest-logrotate \
                docker-logrotate \
                docker-selinux \
                docker-engine-selinux \
                docker-engine \
                docker-ce
</code></pre>
</li>
<li>
<h5 id="安装docker">安装Docker</h5>
<pre><code class="language-shell">yum install -y yum-utils device-mapper-persistent-data lvm2
</code></pre>
<ul>
<li>
<p>更新yum本地镜像源</p>
<pre><code class="language-shell"># 删除原有配置源目录
cd /etc
rm -rf yum.repos.d
# 新建配置源目录
mkdir yum.repos.d
# 下载阿里镜像源
cd yum.repos.d
wget https://mirrors.aliyun.com/repo/Centos-7.repo
# 更新yum缓存
yum makecache
</code></pre>
</li>
<li>
<p>更新软件源信息</p>
<blockquote>
<p>参考：https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.40491b11PUGxwo</p>
</blockquote>
<pre><code class="language-shell"># step 1: 安装必要的一些系统工具
yum install -y yum-utils device-mapper-persistent-data lvm2
# Step 2: 添加软件源信息
yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# Step 3
# Step 4: 更新并安装Docker-CE
yum makecache fast
yum -y install docker-ce
# Step 4: 开启Docker服务
service docker start
</code></pre>
</li>
<li>
<p>关闭防火墙（为了学习Docker，开发中应该开启指定端口）</p>
<pre><code class="language-shell"># 关闭防火墙应用
systemctl stop firewalld
# 禁止开机启动防火墙
systemctl disable firewalld
# 查看防火墙状态
systemctl status firewalld
</code></pre>
</li>
<li>
<p>配置Docker镜像源</p>
<pre><code class="language-shell">mkdir -p /etc/docker
tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://xm9ypajm.mirror.aliyuncs.com&quot;]
}
EOF
systemctl daemon-reload
systemctl restart docker
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="22-docker基本操作">2.2 Docker基本操作</h4>
<blockquote>
<p>镜像的命名规范：</p>
<ul>
<li>镜像名称一般由两部分组成：<code>[respository]:[tag]</code>
<ul>
<li>respository：镜像名称</li>
<li>tag：版本</li>
</ul>
</li>
<li>如果没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
</blockquote>
<figure data-type="image" tabindex="18"><img src="https://pic.zyblog.xyz/img/typora/image-20220705111817819.png" alt="DOCKER" loading="lazy"></figure>
<ul>
<li>
<h5 id="镜像相关指令">镜像相关指令</h5>
<ul>
<li><code>docker images</code>：查看当前所有镜像</li>
<li><code>docker pull [respository]:[tag]</code>：从镜像仓库中拉取指定镜像</li>
<li><code>docker save -o [Path/FileName.tar] [respository]:[tag]</code>：将指定镜像打包</li>
<li><code>docker load -i [Path/FileName.tar]</code>：将打包好的镜像加载到Docker中</li>
<li><code>docker rmi [respository]:[tag]</code>：移除指定镜像</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>示例：</strong></p>
<ul>
<li>
<p>从DockerHub中拉取一个nginx镜像并查看</p>
<p><code>docker pull nginx</code></p>
<p><code>docker images</code></p>
</li>
<li>
<p>将nginx镜像打包到本地</p>
<p><code>docker save -o ~/nginx.tar nginx:latest</code></p>
</li>
<li>
<p>将镜像文件从本地tar包加载</p>
<p><code>docker load -i ~/nginx.tar</code></p>
<p><code>docker images</code></p>
</li>
</ul>
</blockquote>
<ul>
<li>
<h5 id="容器相关命令">容器相关命令</h5>
<ul>
<li><code>docker run</code>：创建并运行一个容器</li>
<li><code>docker pause</code>：暂停运行</li>
<li><code>docker unpause</code>：继续运行</li>
<li><code>docker stop</code>：停止运行</li>
<li><code>docker start</code>：运行</li>
<li><code>docker ps</code>：查看所有运行容器及状态</li>
<li><code>docker logs</code>：查看容器运行日志</li>
<li><code>docker exec</code>：进入容器执行命令</li>
<li><code>docker rm</code>：删除指定容器</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>示例：</strong></p>
<ul>
<li>
<p>运行一个nginx容器</p>
<p><code>docker run --name mn -p 80:80 -d nginx</code></p>
<ul>
<li><code>--name</code>：指定容器名称</li>
<li><code>-p</code>：指定端口映射</li>
<li><code>-d</code>：后台运行</li>
</ul>
<p><code>docker ps</code></p>
</li>
<li>
<p>查看指定容器运行日志</p>
<p><code>docker logs mn</code></p>
<p>跟踪查看运行日志：<code>docker logs -f mn</code></p>
</li>
<li>
<p>进入容器执行命令</p>
<p><code>docker exec -it mv bash</code></p>
<p><code>exit</code>：退出容器</p>
</li>
<li>
<p>停止运行容器</p>
<p><code>docker stop mn</code></p>
</li>
<li>
<p>查看所有容器包括未运行的</p>
<p><code>docker ps -a</code></p>
</li>
<li>
<p>运行容器</p>
<p><code>docker start mn</code></p>
</li>
<li>
<p>删除容器</p>
<p><code>docker rm</code>：只能删除未运行的容器</p>
<p><code>docker rm -f mn</code>：强制删除容器，无论是否运行</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>示例：运行一个持久化存储的redis容器，并通过redis-cli设置num=666</p>
<ul>
<li>
<p>运行容器</p>
<p><code>docker run --name my-redis -p 6379:6379 -d redis redis-server --appendonly yes</code></p>
</li>
<li>
<p>进入容器</p>
<p><code>docker exec -it my-redis bash</code></p>
</li>
<li>
<p>启动redis-cli</p>
<p><code>redis-cli</code></p>
</li>
<li>
<p>设置num=666</p>
<p><code>set num 666</code></p>
</li>
<li>
<p>退出redis-cli，退出容器</p>
<p><code>exit</code></p>
<blockquote>
<p><code>docker exec -it my-redis redis-cli</code>：直接进入容器中启动redis-cli</p>
</blockquote>
</li>
</ul>
</blockquote>
<h4 id="23-数据卷操作">2.3 数据卷操作</h4>
<blockquote>
<p>数据卷的作用：将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</p>
</blockquote>
<figure data-type="image" tabindex="19"><img src="https://pic.zyblog.xyz/img/typora/image-20220705192332218.png" alt="image-20220705192332218" loading="lazy"></figure>
<ul>
<li>
<p><strong>基本语法</strong>：<code>docker volume [COMMAND]</code></p>
<ul>
<li>COMMAND
<ul>
<li>create：创建一个volume</li>
<li>inspect：显示一个或多个volume的信息</li>
<li>ls：列出所有的volume</li>
<li>prune：删除未使用的volume</li>
<li>rm：删除一个或多个指定的volume</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>挂载数据卷</strong></p>
<ul>
<li>
<p>创建并运行容器时指定数据卷的挂载目录，若数据卷不存在，则自动创建数据卷</p>
<pre><code class="language-shell">docker run \
--name mn \
-p 80:80 \
-v html:/usr/share/nginx/html \
-d nginx
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>挂载目录</strong></p>
<ul>
<li>
<pre><code class="language-shell">docker run \
--name some-mysql \
-e MYSQL_ROOT_PASSWORD=root \
-p 3306:3306 \
-v /tmp/mysql/data:/var/lib/mysql \
-v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \
-d mysql:latest
</code></pre>
</li>
</ul>
<blockquote>
<p>数据卷挂载与目录挂载</p>
<ul>
<li>数据卷挂载耦合度低，有docker来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="3-镜像结构">3. 镜像结构</h3>
<blockquote>
<p>镜像就是将应用程序及其所需要的系统函数库、环境、配置、依赖打包而成的</p>
<ul>
<li>基础镜像（BaseImage）：应用依赖的系统函数库、环境变量、配置、文件系统等</li>
<li>入口（Entrypoint）：镜像运行入口，一般是程序启动的脚本和参数</li>
<li>层（Layer）：在BaseImage基础上添加安装包、依赖、配置等，每次操作形成新的一层</li>
</ul>
<p>镜像是分层结构，每一层称一个Layer</p>
</blockquote>
<h4 id="31-自定义镜像">3.1 自定义镜像</h4>
<blockquote>
<p>Dockerfile：一个文本文件，指令的合集，用指令来说明要执行什么操作来构建镜像，每一个指令都会形成一层Layer</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>FROM</td>
<td>指定BaseImage</td>
<td>FROM centos:6</td>
</tr>
<tr>
<td>ENV</td>
<td>设置环境变量，可在后面指令使用</td>
<td>ENV key value</td>
</tr>
<tr>
<td>COPY</td>
<td>拷贝本地文件到镜像的指定目录</td>
<td>COPY ./mysql-5.7.rpm /tmp</td>
</tr>
<tr>
<td>RUN</td>
<td>执行Linux的shell命令，一般是安装过程的命令</td>
<td>RUN yum install gcc</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>指定容器运行时监听的端口，是给镜像使用者看的</td>
<td>EXPOSE 8080</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>镜像中应用的启动命令，容器运行时调用</td>
<td>ENTRYPOINT java -jar xx.jar</td>
</tr>
</tbody>
</table>
</blockquote>
<pre><code class="language-shell"># 指定基础镜像
FROM ubuntu:16.04
# 配置环境变量，JDK的安装目录
ENV JAVA_DIR=/usr/local

# 拷贝jdk和java项目的包
COPY ./jdk8.tar.gz $JAVA_DIR/
COPY ./docker-demo.jar /tmp/app.jar

# 安装JDK
RUN cd $JAVA_DIR \
 &amp;&amp; tar -xf ./jdk8.tar.gz \
 &amp;&amp; mv ./jdk1.8.0_144 ./java8

# 配置环境变量
ENV JAVA_HOME=$JAVA_DIR/java8
ENV PATH=$PATH:$JAVA_HOME/bin

# 暴露端口
EXPOSE 8090
# 入口，java项目的启动命令
ENTRYPOINT java -jar /tmp/app.jar
</code></pre>
<ul>
<li>
<p><code>mkdir -p /tmp/docker-demo</code></p>
</li>
<li>
<p>将<code>docker-demo.jar</code> <code>jdk8.tar.gz</code> <code>Dockerfile</code>上传至<code>/tmp/docker-demo</code></p>
</li>
<li>
<p><code>docker build -t javaweb:1.0 .</code></p>
</li>
<li>
<p><code>docker images</code></p>
</li>
<li>
<p><code>docker run --name web -p 8090:8090 -d javaweb:1.0</code></p>
</li>
<li>
<p>访问<code>ip:8090/hello/count</code></p>
</li>
</ul>
<blockquote>
<p>我们发现在Dockerfile中构建jdk环境的操作是可复用的，我们应该把构建jdk环境的部分构建一个镜像，这样以后就可以直接使用了，而java:8-alpine帮我们做了这件事</p>
</blockquote>
<h4 id="32-dockercompose">3.2 DockerCompose</h4>
<blockquote>
<p>DockerCompose可以基于Compose文件帮我们快速部署分布式应用，而无需手动一个个创建和运行容器</p>
<p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行</p>
<pre><code class="language-yaml">version: &quot;3.9&quot;
services:
	mysql: #指定服务名称
		image: mysql:8.0.21 # 指定镜像文件
		environment: #设置环境变量
			MYSQL_ROOT_PASSWORD: 123456
		volumes: #数据卷挂载
			- /tmp/mysql/data:/var/lib/mysql
			- /tmp/mysql/conf/hym.cnf:/etc/mysql/conf.d/hym.cnf
	web: #指定服务名称
		build: . #从当前目录中构建镜像
		ports:   #设置端口号
			- &quot;8090:8090&quot;
</code></pre>
<blockquote>
<p>书写格式参考规范：</p>
<ul>
<li>https://docs.docker.com/compose/compose-file/compose-file-v3/</li>
<li>https://docs.docker.com/compose/compose-file/compose-file-v2/</li>
</ul>
</blockquote>
</blockquote>
<h5 id="321-安装dockercompose">3.2.1 安装DockerCompose</h5>
<blockquote>
<p>参考：https://docs.docker.com/compose/install/compose-plugin/#installing-compose-on-linux-systems</p>
</blockquote>
<pre><code class="language-shell"> curl -SL https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
</code></pre>
<ul>
<li>
<p><code>docker-compose</code>所在目录<code>/usr/local/bin/docker-compose</code></p>
</li>
<li>
<p>给<code>docker-compose</code>添加可执行权限<code>chmod +x docker-compose</code></p>
</li>
<li>
<p>Base自动补全命令</p>
<pre><code class="language-shell">curl \
    -L https://raw.githubusercontent.com/docker/compose/v2.6.1/contrib/completion/bash/docker-compose \
    -o /etc/bash_completion.d/docker-compose
</code></pre>
<blockquote>
<p>如果无法访问该地址，则修改本机hosts文件</p>
<p><code>echo &quot;185.199.108.133 raw.githubusercontent.com&quot; &gt;&gt; /etc/hosts</code></p>
</blockquote>
</li>
</ul>
<h5 id="322-部署微服务集群">3.2.2 部署微服务集群</h5>
<pre><code class="language-shell">docker run \
--name my-mysql8 \
-e MYSQL_ROOT_PASSWORD=root \
-p 3306:3306 \
-d mysql:latest \
--character-set-server=utf8mb4 \
--collation-server=utf8mb4_unicode_ci

</code></pre>
<blockquote>
<pre><code class="language-dockerfile">FROM java:8-alpine
COPY ./app.jar /tmp/app.jar
ENTRYPOINT java -jar /tmp/app.jar
</code></pre>
<pre><code class="language-yaml"># docker-comspose配置文件语法版本
version: 3.8
services:
	nacos:
		images: nacos/nacos-server
		environment: 
			MODE: standalone
		ports:
			- &quot;8848:8848&quot;
	mysql:
		images: mysql:8.0.31
		environment: 
			MYSQL_ROOT_PASSWORD: 996748
		volumes:
			- &quot;$PWD/mysql/data:/var/lib/mysql&quot;
			- &quot;$PWD/mysql/conf:/etc/mysql/conf.d&quot;
	user-service: 
		build: ./user-service
	order-service:
		build: ./order-service
	gateway:
		build: ./gateway
		ports: 
			- &quot;10010:10010&quot;
		
</code></pre>
<figure data-type="image" tabindex="20"><img src="https://pic.zyblog.xyz/img/typora/image-20230505123711539.png?origin=typora" alt="image-20230505123711539" loading="lazy"></figure>
</blockquote>
<h3 id="4-docker镜像仓库">4. Docker镜像仓库</h3>
<h4 id="41-配置docker信任地址">4.1 配置Docker信任地址</h4>
<blockquote>
<p>我们的私服采用的是http协议，默认不被Docker信任</p>
</blockquote>
<pre><code class="language-shell"># 编辑Docker服务守护进程配置文件
vi /etc/docker/daemon.json
# 添加内容
&quot;insecure-registries&quot;:[&quot;http://192.168.96.130:8080&quot;]
# 重新加载Docker服务守护进程
systemctl daemon-reload
# 重启Docker
systemctl restart docker  
</code></pre>
<h4 id="42-使用docker部署带有图形界面的dockerregistry">4.2 使用Docker部署带有图形界面的DockerRegistry</h4>
<pre><code class="language-yaml">version: '3.0'
services:
	registry:
		image: registry
		volumes:
			- ./registry-data:/var/lib/registry
	ui:
		image: joxit/docker-registry-ui:1.5-static
		ports:
			- 8080:80
		environment:
			- REGISTRY_TITLE=絷缘私有仓库
			- REGISTRY_URL=http://registry:5000
		depends_on:
			- registry
</code></pre>
<pre><code class="language-shell">mkdir /tmp/docker-registry-ui
cd /tmp/docker-registry-ui
touch docker-compose.yml
vim docker-compose.yml
docker-compose up -d 
</code></pre>
<h4 id="43-在私有镜像仓库推送拉取镜像">4.3 在私有镜像仓库推送/拉取镜像</h4>
<pre><code class="language-shell"># 将现有镜像打包成为私有镜像
docker tag nginx:latest 192.168.96.130:8080/nginx:latest
# 将私有镜像推送到私有仓库
docker push 192.168.96.130:8080/nginx:latest
# 将私有镜像拉取到当前环境
docker pull 192.168.96.130:8080/nginx:latest
</code></pre>
<figure data-type="image" tabindex="21"><img src="https://pic.zyblog.xyz/img/typora/image-20220706180422059.png" alt="image-20220706180422059" loading="lazy"></figure>
<blockquote>
<p>第四天</p>
</blockquote>
<h2 id="九-消息队列rabbitmq">九、消息队列RabbitMQ</h2>
<blockquote>
<p>同步调用的问题</p>
<ul>
<li>微服务之间基于Feign的调用就属于同步方式，存在一些问题
<ul>
<li>耦合度高，每次加入新的需求，就需要修改原来的代码</li>
<li>阻塞调用，调用者需要等待提供者响应，调用链过长时等待时间相当于业务执行时间总和</li>
<li>资源浪费，调用者在等待过程中，不会释放请求占用的资源</li>
<li>级联失败：当调用链中有一个服务出现问题，name就会导致依赖于此服务的所有微服务发生故障</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>异步调用的方案</p>
<ul>
<li>实现方式是事件驱动模式
<ul>
<li>优势
<ul>
<li>服务解耦</li>
<li>性能提升，吞吐量提高</li>
<li>故障隔离，服务之间没有强依赖，不担心级联失败</li>
<li>流量削峰</li>
</ul>
</li>
<li>缺点
<ul>
<li>依赖于Broker的可靠性、安全性、吞吐能力</li>
<li>架构复杂了，业务之间没有明显的流程线，不好追踪管理</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="1-mqmessagequeue">1. MQ（MessageQueue）</h3>
<blockquote>
<p>消息队列，字面来看就是存放消息的队列，也就是事件驱动架构中的Broker</p>
</blockquote>
<table>
<thead>
<tr>
<th>信息</th>
<th>RabbitMQ</th>
<th>ActiveMQ</th>
<th>RocketMQ</th>
<th>Kafka</th>
</tr>
</thead>
<tbody>
<tr>
<td>公司/社区</td>
<td>Rabbit</td>
<td>Apache</td>
<td>阿里</td>
<td>Apache</td>
</tr>
<tr>
<td>开发语言</td>
<td>Erlang</td>
<td>Java</td>
<td>Java</td>
<td>Scala&amp;Java</td>
</tr>
<tr>
<td>协议支持</td>
<td>AMQP,XMPP,SMTP,STOMP</td>
<td>OpenWire,STOMP,REST,XMPP,AMQP</td>
<td>自定义协议</td>
<td>自定义协议</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>单击吞吐量</td>
<td>一般</td>
<td>差</td>
<td>高</td>
<td>非常高</td>
</tr>
<tr>
<td>消息延迟</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
<td>毫秒以内</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
</tr>
</tbody>
</table>
<h3 id="2-rabbitmq快速入门">2. RabbitMQ快速入门</h3>
<blockquote>
<p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件</p>
<p>官网地址：https://rabbitmq.com/</p>
</blockquote>
<h4 id="21-安装rabbitmq">2.1 安装RabbitMQ</h4>
<h5 id="211-下载镜像">2.1.1 下载镜像</h5>
<pre><code class="language-shell">docker pull rabbitmq:3-management
</code></pre>
<h5 id="212-安装mq">2.1.2 安装MQ</h5>
<pre><code class="language-shell">docker run \
-e RABBITMQ_DEFAULT_USER=zhiyuan \
-e RABBITMQ_DEFAULT_PASS=123456 \
--name my-mq \
--hostname mql \
-p 15672:15672 \
-p 5672:5672 \
-d \
rabbitmq:3-management
</code></pre>
<blockquote>
<p>若浏览器无法访问<code>ip:15672</code>，则按照下方操作即可：</p>
<pre><code class="language-shell">docker exec -it my-mq bash
rabbitmq_plugins enable rabbitmq_management
</code></pre>
</blockquote>
<h4 id="22-概念解析">2.2 概念解析</h4>
<figure data-type="image" tabindex="22"><img src="https://pic.zyblog.xyz/img/typora/image-20220706190426729.png" alt="image-20220706190426729" loading="lazy"></figure>
<ul>
<li>channel：操作MQ的工具</li>
<li>exchange：路由消息到队列中</li>
<li>queue：缓存消息</li>
<li>virtualhost：虚拟主机，是对queue、exchange等资源的逻辑分组</li>
</ul>
<h4 id="23-常见消息模型">2.3 常见消息模型</h4>
<h5 id="231-基本消息队列basicqueue">2.3.1 基本消息队列（BasicQueue）</h5>
<figure data-type="image" tabindex="23"><img src="https://pic.zyblog.xyz/img/typora/image-20230505173449633.png?origin=typora" alt="image-20230505173449633" loading="lazy"></figure>
<h5 id="232-工作消息队列work-queue">2.3.2 工作消息队列（Work Queue）</h5>
<ul>
<li>
<p>可以提高消息处理速度，避免队列消息堆积</p>
<figure data-type="image" tabindex="24"><img src="https://pic.zyblog.xyz/img/typora/image-20230506114816183.png?origin=typora" alt="image-20230506114816183" loading="lazy"></figure>
</li>
</ul>
<h5 id="233-发布订阅publish-subscribe">2.3.3 发布订阅（Publish Subscribe）</h5>
<ul>
<li>发布订阅模式允许将同一消息发送给多个消费者，实现方式就是加入交换机exchange</li>
</ul>
<figure data-type="image" tabindex="25"><img src="https://pic.zyblog.xyz/img/typora/image-20230506121857146.png?origin=typora" alt="image-20230506121857146" loading="lazy"></figure>
<ul>
<li>Fanout Exchange：广播</li>
<li>Direct Exchange：路由</li>
<li>Topic Exchange：主题</li>
</ul>
<h3 id="3-springamqp">3. SpringAMQP</h3>
<figure data-type="image" tabindex="26"><img src="https://pic.zyblog.xyz/img/typora/image-20230505173640193.png?origin=typora" alt="image-20230505173640193" loading="lazy"></figure>
<h4 id="31-入门案例消息的发送">3.1 入门案例：消息的发送</h4>
<ul>
<li>引入AMQP依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>在publisher服务中编写application.yml，添加mq连接信息：</li>
</ul>
<pre><code class="language-yaml">spring：
	rabbitmq:
		host: 192.168.174.130
		port: 5672
		virtual-host: /
		username: zhiyuan
		password: 123456
</code></pre>
<ul>
<li>在publisher服务中新建一个测试类，编写测试方法：</li>
</ul>
<pre><code class="language-java">@RunWith(SpringRunner.class)
@SpringBootTest
public class SpringAMQPTest{
    @Autowired
    private RabbitTemplate rabbitTemplate;
    @Test
    public void testSimpleQueue(){
        String queueName = &quot;simple.queue&quot;;
        String message = &quot;Hello,SpringAMQP&quot;;
        rabbitTemplate.covertAndSend(queueName,message);
    }
}
</code></pre>
<h4 id="32-入门案例消息的接收">3.2 入门案例：消息的接收</h4>
<ul>
<li>在consumer服务中编写application.yml，添加mq连接信息：</li>
</ul>
<pre><code class="language-yaml">spring:
	rabbitmq:
		host: 192.168.174.130
		port: 5672
		virtual-host: /
		username: zhiyuan
		password: 123456
</code></pre>
<ul>
<li>在consumer服务中新建一个类，编写消费逻辑：</li>
</ul>
<pre><code class="language-java">@Component
public class SpringRabbitListener{
    @RabbitListener(queues = {&quot;simple.queue&quot;})
    public void listenSimpleQueueMessage(String msg) throws InterruptedException{
        System.out.println(&quot;SpringConsumer接受到消息：【&quot; + msg + &quot;】&quot;);
    }
}
</code></pre>
<blockquote>
<p>注意事项：消息一旦被消费就会从队列中移除，RabbitMQ没有消息回溯功能</p>
</blockquote>
<h4 id="33-工作队列案例">3.3 工作队列案例</h4>
<ul>
<li>
<p>基本思路</p>
<ul>
<li>在publisher服务中定义测试方法，每秒产生50条消息发送到simple.queue</li>
<li>在consumer服务中定义两个消息监听者，都监听simple.queue</li>
<li>消费者1每秒钟处理50条消息，消费者2每秒钟处理10条消息</li>
</ul>
</li>
<li>
<pre><code class="language-java">@Test
public void testSendMessageToWorkQueue() throws InterruptedException {
    String queueName = &quot;simple.queue&quot;;
    String message = &quot;Hello,SpringAMQP-MESSAGE_&quot;;
    for (int i = 0; i &lt; 50; i++) {
        rabbitTemplate.convertAndSend(queueName,message + i);
        Thread.sleep(20);
    }
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@RabbitListener(queues = {&quot;simple.queue&quot;})
public void listenWorkQueueMessage1(String msg) throws InterruptedException {
    System.out.println(&quot;SpringConsumer1接收到消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
    Thread.sleep(20);
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@RabbitListener(queues = {&quot;simple.queue&quot;})
public void listenWorkQueueMessage2(String msg) throws InterruptedException {
    System.err.println(&quot;SpringConsumer2接收到消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
    Thread.sleep(200);
}
</code></pre>
<blockquote>
<p>我们发现一个现象，消费者1很快处理完消息后就停止处理了，而把所有的消息都交由速度较慢的消费者2，这是由于预取消息导致的，我们可以通过修改application.yml文件来限制预取消息的上限</p>
<pre><code class="language-yaml">spring:
  rabbitmq:
    host: 192.168.174.130
    port: 5672
    virtual-host: /
    username: zhiyuan
    password: 123456
    listener:
      simple:
        prefetch: 1 # 每次只能获取一条消息，处理完成才能发获取下一条消息
</code></pre>
</blockquote>
</li>
</ul>
<h4 id="34-发布订阅案例">3.4 发布订阅案例</h4>
<h5 id="341-fanout-exchange将接受到的消息路由到每一个与其绑定的queue">3.4.1 Fanout Exchange：将接受到的消息路由到每一个与其绑定的queue</h5>
<figure data-type="image" tabindex="27"><img src="https://pic.zyblog.xyz/img/typora/image-20230506122404242.png?origin=typora" alt="image-20230506122404242" loading="lazy"></figure>
<ul>
<li>
<p>实现思路</p>
<ul>
<li>在consumer服务中利用代码声明队列，交换机，并将二者绑定</li>
<li>在consumer服务中编写两个消费者方法，分别监听fanout.queue1和fanoput.queue2</li>
<li>在publisher服务中编写测试方法，向zhiyuan.fanout发送消息</li>
</ul>
</li>
<li>
<pre><code class="language-java">@Configuration
public class FanoutConfig {
    @Bean
    public FanoutExchange fanoutExchange(){
        return new FanoutExchange(&quot;zhiyuan.fanout&quot;);
    }

    @Bean
    public Queue fanoutQueue1(){
        return new Queue(&quot;fanout.queue1&quot;);
    }

    @Bean
    public Binding bindingQueue1(Queue fanoutQueue1,FanoutExchange fanoutExchange){
        return BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);
    }

    @Bean
    public Queue fanoutQueue2(){
        return new Queue(&quot;fanout.queue2&quot;);
    }

    @Bean
    public Binding bindingQueue2(Queue fanoutQueue2,FanoutExchange fanoutExchange){
        return BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);
    }

}
</code></pre>
</li>
<li>
<pre><code class="language-java">@RabbitListener(queues = {&quot;fanout.queue1&quot;})
public void listenFanoutQueue1(String msg) throws InterruptedException {
    System.err.println(&quot;SpringConsumer1接收到FanoutQueue1消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
}
@RabbitListener(queues = {&quot;fanout.queue2&quot;})
public void listenFanoutQueue2(String msg) throws InterruptedException {
    System.err.println(&quot;SpringConsumer2接收到FanoutQueue2消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@Test
public void testSendMessageToFanoutQueue() throws InterruptedException {
    String exchangeName = &quot;zhiyuan.fanout&quot;;
    String message = &quot;Hello,Fanout EveryOne!&quot;;
    rabbitTemplate.convertAndSend(exchangeName,&quot;&quot;,message);
}
</code></pre>
</li>
</ul>
<h5 id="342-direct-exchange将接受到的消息根据规则路由到指定的queue">3.4.2 Direct Exchange：将接受到的消息根据规则路由到指定的queue</h5>
<figure data-type="image" tabindex="28"><img src="https://pic.zyblog.xyz/img/typora/image-20230506125801143.png?origin=typora" alt="image-20230506125801143" loading="lazy"></figure>
<ul>
<li>
<p>实现思路</p>
<ul>
<li>每一个queue都与Exchange设置一个BindingKey</li>
<li>发布者发送消息时，指定消息的RoutingKey</li>
<li>Exchange将消息路由到BindingKey与消息RoutingKey一致的队列</li>
</ul>
<blockquote>
<ol>
<li>利用@RabbitListener声明Exchange、Queue、RoutingKey</li>
<li>在consumer服务中编写两个消费者方法，分别监听direct.queue1和direct.queue2</li>
<li>在publisher中编写测试方法，向zhiyuan.direct发送消息</li>
</ol>
</blockquote>
</li>
<li>
<pre><code class="language-java">@RabbitListener(bindings = @QueueBinding(
    value = @Queue(name = &quot;direct.queue1&quot;),
    exchange = @Exchange(name = &quot;zhiyuan.direct&quot;,type = ExchangeTypes.DIRECT),
    key = {&quot;red&quot;,&quot;blue&quot;}
))
public void listenDirectQueue1(String msg){
    System.err.println(&quot;SpringConsumer接收到DirectQueue1消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
}

@RabbitListener(bindings = @QueueBinding(
    value = @Queue(name = &quot;direct.queue2&quot;),
    exchange = @Exchange(name = &quot;zhiyuan.direct&quot;,type = ExchangeTypes.DIRECT),
    key = {&quot;red&quot;,&quot;yellow&quot;}
))
public void listenDirectQueue2(String msg){
    System.err.println(&quot;SpringConsumer接收到DirectQueue2消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@Test
public void testSendMessageToDirectQueue1() throws InterruptedException {
    String exchangeName = &quot;zhiyuan.direct&quot;;
    String message = &quot;Hello,Direct key is blue&quot;;
    rabbitTemplate.convertAndSend(exchangeName,&quot;blue&quot;,message);
}
@Test
public void testSendMessageToDirectQueue2() throws InterruptedException {
    String exchangeName = &quot;zhiyuan.direct&quot;;
    String message = &quot;Hello,Direct key is yellow&quot;;
    rabbitTemplate.convertAndSend(exchangeName,&quot;yellow&quot;,message);
}

@Test
public void testSendMessageToDirectQueue() throws InterruptedException {
    String exchangeName = &quot;zhiyuan.direct&quot;;
    String message = &quot;Hello,Direct key is red&quot;;
    rabbitTemplate.convertAndSend(exchangeName,&quot;red&quot;,message);
}
</code></pre>
</li>
</ul>
<h5 id="343-topicexchange与directexchange类似区别在于routingkey必须是多个单词列表并且以分割">3.4.3 TopicExchange：与DirectExchange类似，区别在于routingKey必须是多个单词列表，并且以<code>.</code>分割</h5>
<ul>
<li>Queue和Exchange指定BindingKey时可以使用通配符
<ul>
<li><code>#</code>：代指0个或多个单词</li>
<li><code>*</code>：代指一个单词</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="29"><img src="https://pic.zyblog.xyz/img/typora/image-20230506131941723.png?origin=typora" alt="image-20230506131941723" loading="lazy"></figure>
<ul>
<li>
<p>实现思路</p>
<ul>
<li>利用@RabbitListener声明Exchange、Queue、RoutingKey</li>
<li>在consumer服务中编写两个消费者方法，分别监听topic.queue1和topic.queue2</li>
<li>在publisher中编写测试方法，向zhiyuan.topic发送消息</li>
</ul>
</li>
<li>
<pre><code class="language-java">@RabbitListener(bindings = @QueueBinding(
    value = @Queue(name = &quot;topic.queue1&quot;),
    exchange = @Exchange(name = &quot;zhiyuan.topic&quot;,type = ExchangeTypes.TOPIC),
    key = &quot;china.#&quot;
))
public void listenTopicQueue1(String msg){
    System.err.println(&quot;SpringConsumer接收到TopicQueue1消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
}

@RabbitListener(bindings = @QueueBinding(
    value = @Queue(name = &quot;topic.queue2&quot;),
    exchange = @Exchange(name = &quot;zhiyuan.topic&quot;,type = ExchangeTypes.TOPIC),
    key = &quot;#.news&quot;
))
public void listenTopicQueue2(String msg){
    System.err.println(&quot;SpringConsumer接收到TopicQueue2消息“【&quot; + msg + &quot;】&quot; + LocalTime.now());
}
</code></pre>
</li>
<li>
<pre><code class="language-java">@Test
public void testSendMessageToTopicQueue() throws InterruptedException {
    String exchangeName = &quot;zhiyuan.topic&quot;;
    String message = &quot;Hello,Topic key is china.news&quot;;
    rabbitTemplate.convertAndSend(exchangeName,&quot;china.news&quot;,message);
}
</code></pre>
</li>
</ul>
<h4 id="4springamqp消息转换器">4.SpringAMQP消息转换器</h4>
<blockquote>
<p>在SpringAMQP的发送方法中，接收消息的类型时Object，也就是说我们可以发送任意对象类型的消息，SpringAMQP最终会帮我们序列化为字节后发送，<code>content-type</code> 为 <code>application/x-java-serialized-object</code> ，默认直接以对象方式传输是很不安全的而且消息很长</p>
</blockquote>
<ul>
<li>
<p>SpringAMQP对消息对象的处理是由 <code>org.springframework.amqp.support.converter.MessageConverter</code>完成的</p>
<ul>
<li>
<p>默认实现：<code>SimpleMessageConverter</code></p>
<ul>
<li>
<p>基于JDK的 <code>ObjectOutputStream</code> 完成序列化</p>
</li>
<li>
<p>如果要修改只需要定义一个MessageConverter类型的Bean即可</p>
<ul>
<li>
<p>创建 object.queue 队列</p>
<pre><code class="language-java">@Bean
public Queue objectQueue(){
    return new Queue(&quot;object.queue&quot;);
}
</code></pre>
</li>
<li>
<p>引入依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;
    &lt;version&gt;2.9.10&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>在publisher、consumer服务声明MessageConverter</p>
<pre><code class="language-java">@Bean
public MessageConverter jsonMessageConverter(){
    return new Jackson2JsonMessageConverter();
}
</code></pre>
</li>
<li>
<p>测试发送HashMap类型消息</p>
<pre><code class="language-java">@Test
public void testSendObjectMessageToSimpleQueue(){
    String queueName = &quot;object.queue&quot;;
    HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();
    map.put(&quot;name&quot;,&quot;zhiyuan&quot;);
    map.put(&quot;gender&quot;,&quot;male&quot;);
    rabbitTemplate.convertAndSend(queueName,map);
}
</code></pre>
</li>
<li>
<p>测试接收HashMap类型消息</p>
<pre><code class="language-java">@RabbitListener(queues = &quot;object.queue&quot;)
public void listenObjectQueue(Map&lt;String,String&gt; msg){
    System.out.println(&quot;收到消息：【&quot; + msg + &quot;】&quot;);
}
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="十-分布式搜索elasticsearch">十、分布式搜索Elasticsearch</h2>
<h3 id="1-初识elasticsearch">1. 初识elasticsearch</h3>
<blockquote>
<p>介绍：elasticsearch是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容</p>
<ul>
<li>elasticsearch结合kibana、Logstash、Beats，也就是说elastic stack（ELK）被广泛应用于日志数据分析、实时监控等领域</li>
<li>elasticsearch是elastic stack的核心，负责存储、搜索、分析数据</li>
</ul>
<figure data-type="image" tabindex="30"><img src="https://pic.zyblog.xyz/img/typora/image-20230506142641009.png?origin=typora" alt="image-20230506142641009" loading="lazy"></figure>
<ul>
<li>elasticsearch的发展
<ul>
<li>Lucene是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发
<ul>
<li>官网地址：https://lucene.apache.org</li>
<li>优势：
<ul>
<li>易扩展</li>
<li>高性能（基于倒排索引）</li>
</ul>
</li>
<li>缺点：
<ul>
<li>只限于java语言开发</li>
<li>学习曲线陡峭</li>
<li>不支持水平扩展</li>
</ul>
</li>
</ul>
</li>
<li>相比于lucene，elasticsearch具有以下优势
<ul>
<li>支持分布式，可水平扩展</li>
<li>提供Restful接口，可被任何语言调用</li>
</ul>
</li>
<li>搜索引擎技术排名
<ol>
<li>Elasticsearch：开源的分布式搜索引擎</li>
<li>Splunk：商业项目收费</li>
<li>Solr： Apache的开源搜索引擎</li>
</ol>
</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="11-正向索引和倒排索引">1.1. 正向索引和倒排索引</h4>
<blockquote>
<p>传统数据库采用正向索引</p>
</blockquote>
<ul>
<li>elaticsearch采用倒排索引
<ul>
<li>文档（document）：每条数据就是一个文档</li>
<li>词条（term）：文档按照语义分成的词语</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="31"><img src="https://pic.zyblog.xyz/img/typora/image-20230506173552402.png?origin=typora" alt="image-20230506173552402" loading="lazy"></figure>
<figure data-type="image" tabindex="32"><img src="https://pic.zyblog.xyz/img/typora/image-20230506173822385.png?origin=typora" alt="image-20230506173822385" loading="lazy"></figure>
<h4 id="12-文档">1.2 文档</h4>
<ul>
<li>elasticsearch是面向文档存储的，可以是数据库中的一条商品数据，一个订单信息</li>
<li>文档数据会被序列化为json格式存储在elasticsearch中</li>
</ul>
<h4 id="13-索引">1.3 索引</h4>
<ul>
<li>索引（index）：相同类型文档的集合</li>
<li>映射（mapping）：索引中文档的字段约束信息，类似表的结构约束</li>
</ul>
<figure data-type="image" tabindex="33"><img src="https://pic.zyblog.xyz/img/typora/image-20230506175935509.png?origin=typora" alt="image-20230506175935509" loading="lazy"></figure>
<h4 id="14-概念对比">1.4 概念对比</h4>
<figure data-type="image" tabindex="34"><img src="https://pic.zyblog.xyz/img/typora/image-20230506183639661.png?origin=typora" alt="image-20230506183639661" loading="lazy"></figure>
<ul>
<li>MySQL擅长事务类型操作，可以确保数据的安全和一致性</li>
<li>Elasticsearch擅长海量数据的搜索、分析、计算</li>
</ul>
<figure data-type="image" tabindex="35"><img src="https://pic.zyblog.xyz/img/typora/image-20230506184113064.png?origin=typora" alt="image-20230506184113064" loading="lazy"></figure>
<h3 id="2-安装elasticsearch">2. 安装Elasticsearch</h3>
<h4 id="21-创建网络">2.1 创建网络</h4>
<p>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联，这里先创建一个网络</p>
<pre><code class="language-shell">docker network create es-net
</code></pre>
<h4 id="22-加载镜像">2.2 加载镜像</h4>
<pre><code class="language-shell">docker pull elasticsearch:7.12.1
</code></pre>
<h4 id="23-运行">2.3 运行</h4>
<pre><code class="language-shell">docker run -d \
--name es \
-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \
-e &quot;discovery.type=single-node&quot; \
-v es-data:/usr/share/elasticsearch/data \
-v es-plugins:/usr/share/elasticsearch/plugins \
--privileged \
--network es-net \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.12.1
</code></pre>
<blockquote>
<p>命令解释：</p>
<ul>
<li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li>
<li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：设置JAVA程序运行内存</li>
<li><code>-e &quot;discovery.type=single-node&quot;</code>：设置es为单例模式</li>
<li><code>--privileged</code>：授予数据卷访问权</li>
<li><code>--network es-net</code>：加入名为es-net的网络</li>
</ul>
</blockquote>
<h4 id="24-部署kibana">2.4 部署kibana</h4>
<pre><code class="language-shell">docker pull kibana:7.12.1
</code></pre>
<pre><code class="language-shell">docker run -d \
--name kibana \
-e ELASTICSEARCH_HOSTS=http://es:9200 \
--network=es-net \
-p 5601:5601 \
kibana:7.12.1
</code></pre>
<figure data-type="image" tabindex="36"><img src="https://pic.zyblog.xyz/img/typora/image-20230506190829754.png?origin=typora" alt="image-20230506190829754" loading="lazy"></figure>
<h3 id="3-分词器">3. 分词器</h3>
<blockquote>
<p>es在创建倒排索引时需要对文档分词，在搜索时，需要对用户输入内容分词，但默认的分词规则对中文处理并不友好</p>
<pre><code class="language-json">POST /_analyze
{
    &quot;analyzer&quot;:&quot;standard&quot;,
    &quot;text&quot;:&quot;神探狄仁杰&quot;
}
</code></pre>
<ul>
<li>语法说明
<ul>
<li>POST：请求方式</li>
<li>/_analyze：请求路径，省略了<code>http://IP:9200</code>，kibana会帮我们补充</li>
<li>请求参数：JSON风格
<ul>
<li>analyzer：分词器类型，这里默认时standard分词器</li>
<li>text：要分词的内容</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>
<p>elasticsearch 的分词器对中文支持不好，一般我们会采用IK分词器</p>
<ul>
<li>
<p>测试默认分词器效果</p>
<ul>
<li>
<pre><code class="language-json">POST /_analyze
{ 
  &quot;text&quot;:&quot;神探狄仁杰&quot;, 
  &quot;analyzer&quot;:&quot;standard&quot;
}
</code></pre>
</li>
<li>
<pre><code>{
  &quot;tokens&quot; : [
    {
      &quot;token&quot; : &quot;神&quot;,
      &quot;start_offset&quot; : 0,
      &quot;end_offset&quot; : 1,
      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
      &quot;position&quot; : 0
    },
    {
      &quot;token&quot; : &quot;探&quot;,
      &quot;start_offset&quot; : 1,
      &quot;end_offset&quot; : 2,
      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
      &quot;position&quot; : 1
    },
    {
      &quot;token&quot; : &quot;狄&quot;,
      &quot;start_offset&quot; : 2,
      &quot;end_offset&quot; : 3,
      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
      &quot;position&quot; : 2
    },
    {
      &quot;token&quot; : &quot;仁&quot;,
      &quot;start_offset&quot; : 3,
      &quot;end_offset&quot; : 4,
      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
      &quot;position&quot; : 3
    },
    {
      &quot;token&quot; : &quot;杰&quot;,
      &quot;start_offset&quot; : 4,
      &quot;end_offset&quot; : 5,
      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,
      &quot;position&quot; : 4
    }
  ]
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>IK分词器：https://github.com/medcl/elasticsearch-analysis-ik</p>
</li>
</ul>
</li>
</ul>
<h4 id="31-安装分词器">3.1 安装分词器</h4>
<pre><code class="language-shell"># 进入容器内部
docker exec -it elasticsearch /bin/bash
# 在线下载插件并安装
./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip
# 退出
exit
# 重启容器
docker restart elasticsearch
</code></pre>
<blockquote>
<p>在线安装可能会失败，解决办法离线安装</p>
<pre><code class="language-shell">docker volume inspect es-plugins
cd /var/lib/docker/volume/es-plugins/_data
# 上传插件压缩包解压后目录
# 重启容器
docker restart es
# 查看es日志
docker logs -f es
</code></pre>
</blockquote>
<h4 id="32-ik分词器">3.2 IK分词器</h4>
<p>IK分词器包含两种模式</p>
<ul>
<li><code>ik_smart</code>：最少切分</li>
<li><code>ik_max_word</code>：最细切分</li>
</ul>
<p>测试请求：</p>
<pre><code class="language-json">POST /_analyze
{
    &quot;text&quot;:&quot;神探狄仁杰&quot;,
    &quot;analyzer&quot;:&quot;ik_smart&quot;
}
</code></pre>
<p>返回结果</p>
<pre><code class="language-JSON">{
  &quot;tokens&quot; : [
    {
      &quot;token&quot; : &quot;神&quot;,
      &quot;start_offset&quot; : 0,
      &quot;end_offset&quot; : 1,
      &quot;type&quot; : &quot;CN_CHAR&quot;,
      &quot;position&quot; : 0
    },
    {
      &quot;token&quot; : &quot;探&quot;,
      &quot;start_offset&quot; : 1,
      &quot;end_offset&quot; : 2,
      &quot;type&quot; : &quot;CN_CHAR&quot;,
      &quot;position&quot; : 1
    },
    {
      &quot;token&quot; : &quot;狄仁杰&quot;,
      &quot;start_offset&quot; : 2,
      &quot;end_offset&quot; : 5,
      &quot;type&quot; : &quot;CN_WORD&quot;,
      &quot;position&quot; : 2
    }
  ]
}
</code></pre>
<h4 id="33-ik分词器的拓展和停用字典">3.3 IK分词器的拓展和停用字典</h4>
<p>要拓展IK分词器的词库，只需要修改一个IK分词器目录中config目录下的<code>IKAnalyzer.cfg.xml</code>文件</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;
&lt;properties&gt;
    &lt;comment&gt;IK Analyzer扩展配置&lt;/comment&gt;
    &lt;!-- 用户可以在这里配置自己的扩展字典 --&gt;
    &lt;entry key=&quot;ext_dict&quot;&gt;ext.dic&lt;/entry&gt;
    &lt;!-- 用户可以在这里配置自己的扩展停止词典 --&gt;
    &lt;entry key=&quot;ext_stopwords&quot;&gt;stopword.dic&lt;/entry&gt;
&lt;/properties&gt;
</code></pre>
<p>在config目录下对应的字典文件中添加扩展词语，或创建自己的扩展字典加入扩展词语，词语以换行符分隔</p>
<h3 id="4-索引库操作">4. 索引库操作</h3>
<h4 id="41-mapping属性">4.1 mapping属性</h4>
<ul>
<li>mapping是对索引库中文档的约束
<ul>
<li>type：字段数据类型，常见的简单类型有：
<ul>
<li>字符串：text（可分词的文本）关键字：keyword（精确值）</li>
<li>数值：long、integer、short、byte、double、float</li>
<li>布尔：boolean</li>
<li>日期：date</li>
<li>对象：object</li>
</ul>
</li>
<li>index：是否创建索引，默认为true</li>
<li>analyzer：分词器</li>
<li>properties：某字段的子字段</li>
</ul>
</li>
</ul>
<h4 id="42-创建索引库">4.2 创建索引库</h4>
<blockquote>
<p>ES中通过Restful请求操作索引库、文档。请求内容用DSL语句来表示</p>
</blockquote>
<pre><code class="language-json">PUT /索引库名称
{
    &quot;mappings&quot;:{
        &quot;properties&quot;:{
            &quot;字段名1&quot;:{
                &quot;type&quot;:&quot;text&quot;,
                &quot;analzyer&quot;:&quot;ik_smart&quot;
            },
            &quot;字段名2&quot;:{
                &quot;type&quot;:&quot;keyword&quot;,
                &quot;index&quot;:false
            },
            &quot;字段名3&quot;:{
                &quot;properties&quot;:{
                    &quot;子字段&quot;: {
                       &quot;type&quot;:&quot;keyword&quot; 
                    }  
                }             
            } 
        } 
    } 
}
</code></pre>
<h4 id="43-查看-删除索引库">4.3 查看、删除索引库</h4>
<ul>
<li>查看索引库</li>
</ul>
<pre><code>GET /索引库名
</code></pre>
<ul>
<li>删除索引库</li>
</ul>
<pre><code>DELETE /索引库名
</code></pre>
<h4 id="44-修改索引库">4.4 修改索引库</h4>
<blockquote>
<p>索引库和mapping一旦创建无法修改，但是可以加入新的字段</p>
</blockquote>
<pre><code class="language-json">PUT /索引库名/_mapping
{
    &quot;properties&quot;:{
        &quot;新字段名&quot;:{
            &quot;type&quot;:&quot;integer&quot;
        }
    }
}
</code></pre>
<h3 id="5-文档操作">5. 文档操作</h3>
<h4 id="51-新增文档">5.1 新增文档</h4>
<pre><code class="language-json">POST /索引库名/_doc/文档ID
{
    &quot;字段1&quot;:&quot;值1&quot;,
    &quot;字段2&quot;:&quot;值2&quot;,
    &quot;字段3&quot;:{
        &quot;子属性1&quot;:&quot;值3&quot;,
        &quot;子属性2&quot;:&quot;值4&quot;
    }
}
</code></pre>
<h4 id="52-查询文档">5.2 查询文档</h4>
<pre><code class="language-json">GET /索引库名/_doc/文档ID
</code></pre>
<h4 id="53-删除文档">5.3 删除文档</h4>
<pre><code class="language-json">DELETE /索引库名/_doc/文档ID
</code></pre>
<h4 id="54-修改文档">5.4 修改文档</h4>
<h5 id="541-全量修改">5.4.1 全量修改</h5>
<ul>
<li>会删除旧文档，添加新文档</li>
</ul>
<pre><code class="language-json">PUT /索引库名/_doc/文档ID
{
	&quot;字段1&quot;:&quot;值1&quot;,
	&quot;字段2&quot;:&quot;值2&quot;
}
</code></pre>
<h5 id="542-增量修改">5.4.2 增量修改</h5>
<ul>
<li>只修改指定字段值</li>
</ul>
<pre><code class="language-json">POST /索引库名/_update/文档ID
{
    &quot;doc&quot;:{
        &quot;字段名&quot;:&quot;新值&quot;
    }
}
</code></pre>
<h3 id="6-restclient">6. RestClient</h3>
<blockquote>
<ol>
<li>ES中支持两种地理坐标类型：</li>
</ol>
<ul>
<li>geo_point：由纬度（latitude）和经度（longitude）确定的一个点</li>
<li>geo_shape：由多个geo_point组成的复杂几何图形</li>
</ul>
</blockquote>
<blockquote>
<ol start="2">
<li>ES中字段拷贝可以使用copy_to属性将当前字段拷贝到指定字段</li>
</ol>
<pre><code class="language-json">&quot;all&quot;:{
    &quot;type&quot;:&quot;text&quot;,
    &quot;analyzer&quot;:&quot;ik_max_word&quot;
},
&quot;brand&quot;:{
    &quot;type&quot;:&quot;keyword&quot;,
    &quot;copy_to&quot;:&quot;all&quot;
}
</code></pre>
<pre><code class="language-json">PUT /hotel
{
  &quot;mappings&quot;:{
    &quot;properties&quot;: {
      &quot;id&quot;:{
        &quot;type&quot;:&quot;keyword&quot;
      },
      &quot;name&quot;:{
        &quot;type&quot;:&quot;text&quot;,
        &quot;analyzer&quot;:&quot;ik_max_word&quot;,
        &quot;copy_to&quot;: &quot;all&quot;
      },
      &quot;address&quot;:{
        &quot;type&quot;:&quot;keyword&quot;,
        &quot;index&quot;:false
      },
      &quot;price&quot;:{
        &quot;type&quot;:&quot;integer&quot;
      },
      &quot;score&quot;:{
        &quot;type&quot;:&quot;integer&quot;
      },
      &quot;brand&quot;:{
        &quot;type&quot;:&quot;keyword&quot;
      },
      &quot;city&quot;:{
        &quot;type&quot;: &quot;keyword&quot;
      },
      &quot;starName&quot;:{
        &quot;type&quot;:&quot;keyword&quot;
      },
      &quot;business&quot;:{
        &quot;type&quot;:&quot;keyword&quot;,
        &quot;copy_to&quot;: &quot;all&quot;  
      },
      &quot;location&quot;:{
        &quot;type&quot;:&quot;geo_point&quot;
      },
      &quot;pic&quot;:{
        &quot;type&quot;:&quot;keyword&quot;,
        &quot;index&quot;:false
      },
      &quot;all&quot;:{
        &quot;type&quot;:&quot;text&quot;,
        &quot;analyzer&quot;: &quot;ik_max-word&quot;
      }
    }
  }
}
</code></pre>
</blockquote>
<ul>
<li>
<p>参不参与分词</p>
<ul>
<li><code>&quot;type&quot;:&quot;keyword&quot;</code>：不参与分词</li>
<li><code>&quot;type&quot;:&quot;text&quot;</code>：参与分词
<ul>
<li><code>&quot;analyzer&quot;</code>：指定分词器</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参不参与搜索：</p>
<ul>
<li><code>&quot;index&quot;:true</code>：参与搜索</li>
<li><code>&quot;index&quot;:false</code>：不参与搜索</li>
</ul>
</li>
<li>
<p>多个字段均参与搜索：</p>
<ul>
<li>
<p>添加一个新的字段，并将要参与搜索的字段copy_to新的字段</p>
<pre><code class="language-JSON">&quot;新字段&quot;:{
    &quot;type&quot;:&quot;text&quot;,
    &quot;analyzer&quot;:&quot;ik_max_word&quot;
},
&quot;city&quot;:{
    &quot;type&quot;:&quot;keyword&quot;,
    &quot;copy_to&quot;:&quot;新字段&quot;
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="61-初始化-javarestclient">6.1 初始化 JavaRestClient</h4>
<ul>
<li>
<p>引入依赖</p>
<pre><code class="language-xml">&lt;properties&gt;
	&lt;elasticsearch.version&gt;7.12.1&lt;/elasticsearch.version&gt;
&lt;/properties&gt;
</code></pre>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;
    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;
    &lt;version&gt;${elasticsearch.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>书写测试类</p>
<pre><code class="language-java">public class HotelIndexTest {
    private RestHighLevelClient client;

    @BeforeEach
    void setUp(){
        this.client = new RestHighLevelClient(RestClient.builder(
                HttpHost.create(&quot;http://192.168.174.130:9200&quot;)
        ));
    }

    @AfterEach
    void tearDown() throws IOException{
        this.client.close();
    }

    @Test
    public void testInit(){
        System.out.println(client);
    }
}
</code></pre>
</li>
</ul>
<h4 id="62-restclient实现索引库的crud">6.2 RestClient实现索引库的CRUD</h4>
<h5 id="621-创建索引库">6.2.1 创建索引库</h5>
<ul>
<li>将DSL语句创建为常量使用，内容如下，需要去掉请求方式和请求地址，变成正常的JSON格式</li>
</ul>
<pre><code class="language-json">{
  &quot;mappings&quot;:{
    &quot;properties&quot;: {
      &quot;id&quot;:{
        &quot;type&quot;:&quot;keyword&quot;
      },
      &quot;name&quot;:{
        &quot;type&quot;:&quot;text&quot;,
        &quot;analyzer&quot;:&quot;ik_max_word&quot;,
        &quot;copy_to&quot;: &quot;all&quot;
      },
      &quot;address&quot;:{
        &quot;type&quot;:&quot;keyword&quot;,
        &quot;index&quot;:false
      },
      &quot;price&quot;:{
        &quot;type&quot;:&quot;integer&quot;
      },
      &quot;score&quot;:{
        &quot;type&quot;:&quot;integer&quot;
      },
      &quot;brand&quot;:{
        &quot;type&quot;:&quot;keyword&quot;
      },
      &quot;city&quot;:{
        &quot;type&quot;: &quot;keyword&quot;
      },
      &quot;starName&quot;:{
        &quot;type&quot;:&quot;keyword&quot;
      },
      &quot;business&quot;:{
        &quot;type&quot;:&quot;keyword&quot;,
        &quot;copy_to&quot;: &quot;all&quot;
      },
      &quot;location&quot;:{
        &quot;type&quot;:&quot;geo_point&quot;
      },
      &quot;pic&quot;:{
        &quot;type&quot;:&quot;keyword&quot;,
        &quot;index&quot;:false
      },
      &quot;all&quot;:{
        &quot;type&quot;:&quot;text&quot;,
        &quot;analyzer&quot;: &quot;ik_max_word&quot;
      }
    }
  }
}
</code></pre>
<pre><code class="language-java">@Test
public void createHotelIndex() throws IOException {
    //创建提交创建索引库请求的对象
    CreateIndexRequest hotelRequest = new CreateIndexRequest(&quot;hotel&quot;);
    //为请求对象设置请求DSL语句及请求格式
    hotelRequest.source(HotelConstants.HOTEL_MAPPING_TEMPLATE, XContentType.JSON);
    //创建索引库
    client.indices().create(hotelRequest, RequestOptions.DEFAULT);
}
</code></pre>
<ul>
<li><code>indices()</code>：此方法返回的对象中包含所有有关索引库的操作方法</li>
</ul>
<h5 id="622-删除索引库">6.2.2 删除索引库</h5>
<pre><code class="language-java">@Test
public void deleteHotelIndex() throws IOException {
     //创建提交删除索引库请求的对象
    DeleteIndexRequest hotelRequest = new DeleteIndexRequest(&quot;hotel&quot;);
    client.indices().delete(hotelRequest,RequestOptions.DEFAULT);
}
</code></pre>
<h5 id="623-判断索引库是否存在">6.2.3 判断索引库是否存在</h5>
<pre><code class="language-java">@Test
public void existsHotelIndex() throws IOException {
     //创建提交查询索引库请求的对象
    GetIndexRequest hotelRequest = new GetIndexRequest(&quot;hotel&quot;);
    boolean exists = client.indices().exists(hotelRequest, RequestOptions.DEFAULT);
    System.out.println(exists?&quot;索引库已存在&quot;:&quot;索引库不存在&quot;);
}
</code></pre>
<h5 id="624-查询索引库">6.2.4 查询索引库</h5>
<pre><code class="language-java">@Test
public void getHotelIndex() throws IOException{
    //创建提交查询索引库请求的对象
    GetIndexRequest hotelRequest = new GetIndexRequest(&quot;hotel&quot;);
    GetIndexResponse hotelResponse = client.indices().get(hotelRequest, RequestOptions.DEFAULT);
    Map&lt;String, MappingMetadata&gt; mappings = hotelResponse.getMappings();
    ObjectMapper objectMapper = new ObjectMapper();
    String mappingsJSON = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(mappings);
    System.out.println(mappingsJSON);
}
</code></pre>
<h4 id="63-restclient实现文档的crud">6.3 RestClient实现文档的CRUD</h4>
<h5 id="631-创建文档">6.3.1 创建文档</h5>
<pre><code class="language-java">@Test
public void createDoc() throws IOException{
    Hotel hotel = hotelService.getById(39106L);
    IndexRequest indexRequest = new IndexRequest(&quot;hotel&quot;).id(hotel.getId().toString());
    HotelDoc hotelDoc = new HotelDoc(hotel);
    indexRequest.source(JSON.toJSONString(hotelDoc), XContentType.JSON);
    client.index(indexRequest, RequestOptions.DEFAULT);
}
</code></pre>
<h5 id="632-查询文档">6.3.2 查询文档</h5>
<pre><code class="language-java">@Test
public void getDoc() throws IOException{
    GetRequest getRequest = new GetRequest(&quot;hotel&quot;).id(&quot;39106&quot;);
    GetResponse response = client.get(getRequest, RequestOptions.DEFAULT);
    System.out.println(JSON.toJSONString(response.getSource(),SerializerFeature.PrettyFormat));
}
</code></pre>
<h5 id="633-删除文档">6.3.3 删除文档</h5>
<pre><code class="language-java">@Test
public void deleteDoc() throws IOException{
    DeleteRequest deleteRequest = new DeleteRequest(&quot;hotel&quot;).id(&quot;39106&quot;);
    client.delete(deleteRequest,RequestOptions.DEFAULT);
}
</code></pre>
<h5 id="634-修改文档">6.3.4 修改文档</h5>
<ul>
<li>全量更新与创建文档操作并无差别</li>
<li>增量更新</li>
</ul>
<pre><code class="language-java">@Test
public void modifyDoc() throws IOException{
    UpdateRequest updateRequest = new UpdateRequest(&quot;hotel&quot;,&quot;39106&quot;);
    updateRequest.doc(
        &quot;price&quot;,&quot;350&quot;,
        &quot;starName&quot;,&quot;五钻&quot;
    ).upsert(
        &quot;area&quot;,&quot;120&quot;
    );
    client.update(updateRequest,RequestOptions.DEFAULT);
}
</code></pre>
<h5 id="635-批量新增文档">6.3.5 批量新增文档</h5>
<pre><code class="language-java">@Test
public void testBulk() throws IOException{
    BulkRequest bulkRequest = new BulkRequest();
    List&lt;Hotel&gt; hotelList = hotelService.list();
    for (Hotel hotel : hotelList) {
        HotelDoc hotelDoc = new HotelDoc(hotel);
        bulkRequest.add(new IndexRequest(&quot;hotel&quot;)
                        .id(hotelDoc.getId().toString())
                        .source(JSON.toJSONString(hotelDoc),XContentType.JSON));

    }
    client.bulk(bulkRequest,RequestOptions.DEFAULT);
}
</code></pre>
<pre><code class="language-json">GET /hotel/_search
</code></pre>
<h3 id="7-dsl语法">7. DSL语法</h3>
<h4 id="71-查询所有">7.1 查询所有</h4>
<pre><code>match_all
</code></pre>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;[queryType]&quot;:{
            &quot;[queryCondition|field]&quot;:&quot;[conditionValue|value]&quot;
        }
    }
}
</code></pre>
<ul>
<li>实例</li>
</ul>
<pre><code class="language-json">//查询所有
GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;match_all&quot;:{}
    }
}
</code></pre>
<h4 id="72-全文检索">7.2 全文检索</h4>
<pre><code class="language-json">match_query
multi_match_query
</code></pre>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;match&quot;:{
            &quot;[fieldName]&quot;:&quot;[textValue]&quot;
        }
    }
}

GET /indexName/_search
{
  &quot;query&quot;: {
    &quot;multi_match&quot;: {
      &quot;query&quot;: &quot;[textValue]&quot;,
      &quot;fields&quot;: [&quot;field1&quot;,&quot;field2&quot;,&quot;field3&quot;...]
    }
  }
}
</code></pre>
<ul>
<li>实例</li>
</ul>
<pre><code class="language-json">GET /hotel/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;all&quot;: &quot;外滩&quot;
    }
  }
}

GET /hotel/_search
{
  &quot;query&quot;: {
    &quot;multi_match&quot;: {
      &quot;query&quot;: &quot;如家&quot;,
      &quot;fields&quot;: [&quot;brand&quot;,&quot;name&quot;,&quot;business&quot;]
    }
  }
}
</code></pre>
<h4 id="73-精确查询">7.3 精确查询</h4>
<pre><code class="language-json">ids
range:根据值的范围查询 gte：大于等于 lte：小于等于 gt：大于 lt：小于
term:根据词条精确值查询
</code></pre>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;term&quot;:{
            &quot;[fieldName]&quot;:{
                &quot;value&quot;:&quot;[value]&quot;
            }
        }
    }
}

GET /indexName/_search
{
	&quot;query&quot;:{
        &quot;range&quot;:{
            &quot;[fieldName]&quot;:{
                &quot;gte&quot;:[numValue],
                &quot;lte&quot;:[numValue]
            }
        }
    }    
}
</code></pre>
<ul>
<li>实例</li>
</ul>
<pre><code class="language-json">GET /hotel/_search
{
  &quot;query&quot;:{
    &quot;term&quot;: {
      &quot;city&quot;: {
        &quot;value&quot;: &quot;上海&quot;
      }
    }
  }
}

GET /hotel/_search
{
  &quot;query&quot;: {
    &quot;range&quot;: {
      &quot;price&quot;: {
        &quot;gte&quot;: 100,
        &quot;lte&quot;: 300
      }
    }
  }
}
</code></pre>
<h4 id="74-地理查询">7.4 地理查询</h4>
<pre><code class="language-json">geo_distance
geo_bounding_box
</code></pre>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;geo_distance&quot;:{
            &quot;distance&quot;:&quot;15km&quot;,
            &quot;[fieldName]&quot;:&quot;31.21,121.5&quot;
        }
    }
}
</code></pre>
<ul>
<li>实例</li>
</ul>
<pre><code class="language-json">GET /hotel/_search
{
  &quot;query&quot;: {
    &quot;geo_distance&quot;:{
      &quot;distance&quot;:&quot;15km&quot;,
      &quot;location&quot;:&quot;31.21,121.5&quot;
    }
  }
}
</code></pre>
<h4 id="75-复合查询">7.5 复合查询</h4>
<pre><code class="language-json">bool
function_score:算分函数查询，可以控制文档相关性算分，控制文档排名
</code></pre>
<h5 id="751-相关性算分查询">7.5.1 相关性算分查询</h5>
<figure data-type="image" tabindex="37"><img src="https://pic.zyblog.xyz/img/typora/image-20230510113953995.png?origin=typora" alt="image-20230510113953995" loading="lazy"></figure>
<ul>
<li>
<p><code>TF-IDF</code>：在elasticsearch5.0之前，会随着词频增加而越来越大</p>
</li>
<li>
<p><code>BM25</code>：在elasticsearch5.0之后，会随着词频增加而增大，蛋增长曲线趋于水平</p>
</li>
<li>
<p>示例</p>
</li>
</ul>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;function_score&quot;:{
            &quot;query&quot;:{
                &quot;match&quot;:{
                    &quot;all&quot;:&quot;外滩&quot;
                }
            },
            &quot;functions&quot;:[
                {
                    &quot;filter&quot;:{
                        &quot;term&quot;:{
                            &quot;id&quot;:&quot;1&quot;
                        }
                    },
                    &quot;weight&quot;:10
                }
            ],
            &quot;boost_mode&quot;:&quot;multiply&quot;
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="38"><img src="https://pic.zyblog.xyz/img/typora/image-20230510114817294.png?origin=typora" alt="image-20230510114817294" loading="lazy"></figure>
<ul>
<li>实例</li>
</ul>
<pre><code class="language-json">//让如家品牌酒店排名更靠前一些
GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;function_score&quot;:{
            &quot;query&quot;:{
                &quot;match&quot;:{
                    &quot;all&quot;:&quot;外滩&quot;
                }
            },
            &quot;functions&quot;:[
                {
                    &quot;filter&quot;:{
                        &quot;term&quot;:{
                            &quot;brand&quot;:&quot;如家&quot;
                        }
                    },
                    &quot;weight&quot;:2
                }
            ],
            &quot;boost_mode&quot;:&quot;sum&quot;        
        }
    }
}
</code></pre>
<h5 id="752-布尔查询">7.5.2 布尔查询</h5>
<ul>
<li>布尔查询是一个或多个查询字句的组合，子查询的组合方式有如下：
<ul>
<li>must：必须匹配每个子查询，参与算分，类似 <code>与</code></li>
<li>should：选择性匹配子查询，参与算分，类似 <code>或</code>，</li>
<li>must_not：必须不匹配，不参与算分，类似 <code>非</code></li>
<li>filter：必须匹配，不参与算分</li>
</ul>
</li>
<li>实例</li>
</ul>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;bool&quot;:{
            &quot;must&quot;:[
                {&quot;term&quot;:{&quot;city&quot;:&quot;上海&quot;}}
            ],
            &quot;should&quot;:[
                {&quot;term&quot;:{&quot;brand&quot;:&quot;皇冠假日&quot;}},
                {&quot;term&quot;:{&quot;brand&quot;:&quot;华美达&quot;}}
            ],
            &quot;must_not&quot;:[
            	{&quot;range&quot;:{&quot;price&quot;:{&quot;lte&quot;:500}}}
            ],
            &quot;filter&quot;:[
                {&quot;range&quot;:{&quot;score&quot;:{&quot;gte&quot;:45}}}
            ]
        }
    }
}
</code></pre>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;bool&quot;:{
            &quot;must&quot;:[
                {&quot;match&quot;:{&quot;name&quot;:&quot;如家&quot;}}
            ],
            &quot;must_not&quot;:[
                {&quot;range&quot;:{&quot;price&quot;:{&quot;gt&quot;:400}}}
            ],
            &quot;filter&quot;:[
                {&quot;geo_distance&quot;:{&quot;distance&quot;:&quot;10km&quot;,&quot;location&quot;:{&quot;lat&quot;:&quot;31.21&quot;,&quot;lon&quot;:&quot;121.5&quot;}}
            ]
        }
    }
}
</code></pre>
<h3 id="8-排序">8. 排序</h3>
<blockquote>
<p>elasticsearch支持对搜索结果排序，默认是根据相关度算分(_score)来排序，可排序的字段类型有：</p>
<ul>
<li>keyword</li>
<li>数值</li>
<li>地理坐标</li>
<li>日期类型</li>
</ul>
</blockquote>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;match_all&quot;:{}
    },
    &quot;sort&quot;:[
        {
            &quot;[fieldName]&quot;:&quot;[desc|asc]&quot;
        }
    ]
}
</code></pre>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;match_all&quot;:{}
    },
    &quot;sort&quot;:[
        {
            &quot;_geo_distance&quot;:{
                &quot;location&quot;:&quot;lat,lau&quot;,
                &quot;order&quot;:&quot;[desc|asc]&quot;,
                &quot;unit&quot;:&quot;km&quot;
            }
        }
    ]
}
</code></pre>
<h3 id="9-分页">9. 分页</h3>
<blockquote>
<p>elasticsearch默认情况下只返回top10的数据，而如果要查询更多的数据就需要修改分页参数</p>
<ul>
<li>from：分页开始的位置，默认为0</li>
<li>size：每页文档条数</li>
</ul>
</blockquote>
<pre><code class="language-json">GET /indexName/_search
{
    &quot;query&quot;:{
        &quot;match_all&quot;:{}
    },
    &quot;from&quot;:100,
    &quot;size&quot;:20,
    &quot;sort&quot;:[
        {&quot;price&quot;:&quot;asc&quot;}
    ]
}
</code></pre>
<h4 id="深度分页问题">深度分页问题</h4>
<figure data-type="image" tabindex="39"><img src="https://pic.zyblog.xyz/img/typora/image-20230510134615469.png?origin=typora" alt="image-20230510134615469" loading="lazy"></figure>
<blockquote>
<p>ES是分布式的，所以会面临深度分页问题</p>
<ol>
<li>首先在每个数据分片上都排序并查询前1000条文档</li>
<li>然后将所有节点的结果聚合，在内存中重新排序选出前1000条文档</li>
</ol>
<p>如果搜索页数过深，或者结果集（from+size）越大，对内存和CPU的消耗也越高，所以ES设定结果集查询上限是10000</p>
</blockquote>
<h5 id="解决方案">解决方案</h5>
<ul>
<li>search_after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据【官方推荐】</li>
<li>scroll：原理是将排序数据形成快照，保存在内存【官方不推荐】</li>
</ul>
<h3 id="10-高亮">10. 高亮</h3>
<blockquote>
<p>高亮就是在搜索结果中吧搜索关键字突出显示</p>
<p>高亮显示的原理</p>
<ul>
<li>后端将搜索结果中的关键字用指定标签标记出来</li>
<li>前端对指定标签添加高亮样式</li>
</ul>
<p>默认情况下，ES搜索字段必须与高亮字段一致，才会正常返回高亮字段内容，如果要改变默认情况，应该将<code>require_field_match</code>改为<code>false</code></p>
</blockquote>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;match&quot;:{
            &quot;[fieldName]&quot;:&quot;[textValue]&quot;
        }
    },
    &quot;highlight&quot;:{
        &quot;fields&quot;:{
            &quot;[fieldName]&quot;:{
            	&quot;pre_tags&quot;:&quot;&lt;em&gt;&quot;,
                &quot;post_tags&quot;:&quot;&lt;/em&gt;&quot;,
                &quot;require_field_match&quot;:false
        	}
        }
    }
}
</code></pre>
<h3 id="11-restclient查询文档">11. RestClient查询文档</h3>
<h4 id="111-查询所有">11.1 查询所有</h4>
<ul>
<li>
<p>代码</p>
<pre><code class="language-java">@Test
void testMatchAll() throws IOException {
    SearchRequest hotelRequest = new SearchRequest(&quot;hotel&quot;);
    hotelRequest.source().query(QueryBuilders.matchAllQuery());
    SearchResponse searchResponse = client.search(hotelRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}
</code></pre>
</li>
<li>
<p>DSL</p>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;match_all&quot;:{}
    }
}
</code></pre>
</li>
<li>
<p><code>RestAPI</code>中构建DSL都是通过<code>HighLevelRestClient</code>中的<code>source()</code>方法实现的</p>
</li>
</ul>
<h4 id="112-全文检索">11.2 全文检索</h4>
<ul>
<li>
<p>代码</p>
<pre><code class="language-java">@Test
void testMatch() throws IOException {
    SearchRequest hotelRequest = new SearchRequest(&quot;hotel&quot;);
    hotelRequest.source().query(QueryBuilders.matchQuery(&quot;all&quot;,&quot;如家&quot;));
    SearchResponse searchResponse = client.search(hotelRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}

@Test
void testMultiMatch() throws IOException{
    SearchRequest hotelRequest = new SearchRequest(&quot;hotel&quot;);
    hotelRequest.source().query(QueryBuilders.multiMatchQuery(&quot;如家&quot;,&quot;business&quot;,&quot;name&quot;));
    SearchResponse searchResponse = client.search(hotelRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}
</code></pre>
</li>
<li>
<p>DSL</p>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;match&quot;:{
            &quot;all&quot;:&quot;如家&quot;
        }
    }
}

GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;match&quot;:{
            &quot;query&quot;:&quot;如家&quot;,
            &quot;fields&quot;:[&quot;brand&quot;,&quot;name&quot;]
        }
    }
}
</code></pre>
</li>
</ul>
<h4 id="113-精确查询">11.3 精确查询</h4>
<ul>
<li>
<p>代码</p>
<pre><code class="language-java">@Test
void testTerm() throws IOException{
    SearchRequest hotelRequest = new SearchRequest(&quot;hotel&quot;);
    hotelRequest.source().query(QueryBuilders.termQuery(&quot;city&quot;,&quot;上海&quot;));
    SearchResponse searchResponse = client.search(hotelRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}

@Test
void testRange() throws IOException{
    SearchRequest hotelRequest = new SearchRequest(&quot;hotel&quot;);
    hotelRequest.source().query(QueryBuilders.rangeQuery(&quot;price&quot;).gte(150).lte(200));
    SearchResponse searchResponse = client.search(hotelRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}
</code></pre>
</li>
<li>
<p>DSL</p>
<pre><code class="language-json">GET /hotel._search
{
    &quot;query&quot;:{
        &quot;term&quot;:{
            &quot;city&quot;:&quot;上海&quot;
        }
    }
}

GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;range&quot;:{
            &quot;price&quot;:{
                &quot;gte&quot;:100,
                &quot;lte&quot;:150
            }
        }
    }
}
</code></pre>
</li>
</ul>
<h4 id="114-地理查询">11.4 地理查询</h4>
<ul>
<li>
<p>代码</p>
<pre><code class="language-java">@Test
void testGeoDistance() throws IOException{
    SearchRequest hotelRequest = new SearchRequest(&quot;hotel&quot;);
    hotelRequest.source().query(QueryBuilders.geoDistanceQuery(&quot;location&quot;).distance(&quot;15km&quot;).point(31.21,121.5));
    SearchResponse searchResponse = client.search(hotelRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}
</code></pre>
</li>
<li>
<p>DSL</p>
<pre><code class="language-json">GET /hotel/_search
{
  &quot;query&quot;: {
    &quot;geo_distance&quot;:{
      &quot;distance&quot;:&quot;15km&quot;,
      &quot;location&quot;:&quot;31.21,121.5&quot;
    }
  }
}
</code></pre>
</li>
</ul>
<h4 id="115-复合查询">11.5 复合查询</h4>
<ul>
<li>
<p>代码</p>
<pre><code class="language-java">@Test
void testBool() throws IOException{
    SearchRequest searchRequest = new SearchRequest(&quot;hotel&quot;);
    BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();
    boolQueryBuilder
        .must(QueryBuilders.termQuery(&quot;city&quot;,&quot;上海&quot;))
        .filter(QueryBuilders.rangeQuery(&quot;price&quot;).gte(150).lte(200));
    searchRequest.source().query(boolQueryBuilder);
    SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}
</code></pre>
</li>
<li>
<p>DSL</p>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;bool&quot;:{
            &quot;must&quot;:[
                {&quot;term&quot;:{&quot;city&quot;:&quot;上海&quot;}}
            ],
            &quot;should&quot;:[],
            &quot;must_not&quot;:[],
            &quot;filter&quot;:[
                {
                    &quot;range&quot;:{
                        &quot;price&quot;:{
                            &quot;gte&quot;:150,
                            &quot;lte&quot;:200
                        }
                    }
                }
            ]
        }
    }
}
</code></pre>
</li>
</ul>
<h4 id="116-排序分页">11.6 排序分页</h4>
<ul>
<li>
<p>代码</p>
<pre><code class="language-java">@Test
void testPageAndSort() throws IOException{
    SearchRequest searchRequest = new SearchRequest(&quot;hotel&quot;);
    searchRequest.source()
        .query(QueryBuilders.matchAllQuery())
        .from(0)
        .size(20)
        .sort(&quot;price&quot;, SortOrder.DESC);
    SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}
</code></pre>
</li>
<li>
<p>DSL</p>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;match_all&quot;:{}
    },
    &quot;from&quot;:0,
    &quot;size&quot;:20,
    &quot;sort&quot;:[
        {
            &quot;price&quot;:&quot;desc&quot;
        }
    ]
}
</code></pre>
</li>
</ul>
<h4 id="117-高亮文档">11.7 高亮文档</h4>
<ul>
<li>
<p>代码</p>
<pre><code class="language-java">@Test
void testHighlight() throws IOException{
    SearchRequest searchRequest = new SearchRequest(&quot;hotel&quot;);
    HighlightBuilder highlightBuilder = new HighlightBuilder();
    highlightBuilder.field(&quot;name&quot;)
        .requireFieldMatch(false)
        .preTags(&quot;&lt;keyword-highlight&gt;&quot;)
        .postTags(&quot;&lt;/keyword-highlight&gt;&quot;);
    searchRequest.source()
        .query(QueryBuilders.matchQuery(&quot;all&quot;,&quot;如家&quot;))
        .highlighter(highlightBuilder);
    SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);
    SearchHits searchHits = searchResponse.getHits();
    long total = searchHits.getTotalHits().value;
    System.out.println(&quot;共检索到&quot; + total + &quot;条数据&quot;);
    SearchHit[] hits = searchHits.getHits();
    for (SearchHit hit : hits) {
        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();
        if(highlightFields!=null &amp;&amp; highlightFields.size()&gt;0){
            HighlightField highlightField = highlightFields.get(&quot;name&quot;);
            System.out.println(highlightField.getFragments()[0].toString());
        }
        System.out.println(JSON.toJSONString(hit.getSourceAsMap(), SerializerFeature.PrettyFormat));
    }
}
</code></pre>
</li>
<li>
<p>DSL</p>
<pre><code class="language-json">GET /hotel/_search
{
    &quot;query&quot;:{
        &quot;match&quot;:{
            &quot;all&quot;:&quot;如家&quot;
        }
    },
    &quot;highlight&quot;:{
        &quot;fields&quot;:{
            &quot;name&quot;:{
                &quot;pre_tags&quot;:&quot;&lt;em&gt;&quot;,
                &quot;post_tags&quot;:&quot;&lt;/em&gt;&quot;,
                &quot;require_field_match&quot;:false
            }
        }
    }
}
</code></pre>
</li>
</ul>
<h3 id="12-数据聚合">12. 数据聚合</h3>
<h4 id="121-聚合的分类">12.1 聚合的分类</h4>
<h4 id="122-dsl实现聚合">12.2 DSL实现聚合</h4>
<h4 id="123-restapi实现聚合">12.3 RestAPI实现聚合</h4>
<h3 id="13-自动补全">13. 自动补全</h3>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/DZ1f24lyN/">https://zhiyuandnc.github.io/DZ1f24lyN/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker学习（一）]]></title>
        <id>https://zhiyuandnc.github.io/doBPQq_Z4/</id>
        <link href="https://zhiyuandnc.github.io/doBPQq_Z4/">
        </link>
        <updated>2022-03-25T04:09:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="容器化部署docker">容器化部署Docker</h2>
<blockquote>
<p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p>
<ul>
<li>Docker允许开发汇总将应用、依赖、函数库、配置一起打包，形成可以直接安装的镜像</li>
<li>Docker应用运行在容器中，使用沙箱机制，相互隔离</li>
</ul>
</blockquote>
<blockquote>
<p>Docker如何解决开发、测试、生产环境有差异的问题？</p>
<p>Docker镜像中包含完整的运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</p>
</blockquote>
<blockquote>
<p>Docker与虚拟机的区别：</p>
<p>虚拟机是使用Hypervisor技术在操作系统中模拟硬件设备，然后运行另一个操作系统，比如在Windows系统里面运行Ubuntu系统。</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Docker</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>性能较差</td>
</tr>
<tr>
<td>硬盘占用</td>
<td>一般为MB</td>
<td>一般为GB</td>
</tr>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="1-概念">1. 概念</h3>
<h4 id="11-镜像image">1.1 镜像（Image）</h4>
<ul>
<li>Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为<strong>镜像</strong></li>
</ul>
<h4 id="12-容器container">1.2 容器（Container）</h4>
<ul>
<li>镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器做隔离，对外不可见</li>
</ul>
<h4 id="13-dockerhub">1.3 DockerHub</h4>
<ul>
<li>DockerHub是一个Docker镜像的托管平台，这样的平台称为Docker Registry</li>
<li>国内也有类似于DockerHub的公开服务，比如网易云镜像服务、阿里云镜像库等</li>
</ul>
<h4 id="14-docker">1.4 Docker</h4>
<ul>
<li>
<p>Docker是一个CS架构的程序，由两部分组成</p>
<ul>
<li>服务端：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li>
<li>客户端：通过命令或RestAPI向Docker服务端发送指令，可以在本地或远程向服务端发送指令</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20220704170659232.png" alt="image-20220704170659232" loading="lazy"></figure>
</li>
</ul>
<h3 id="2-安装docker">2. 安装Docker</h3>
<h4 id="21-centos7安装docker">2.1 CentOS7安装Docker</h4>
<blockquote>
<p>CentOS7系统下载地址：</p>
<p>http://mirrors.163.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</p>
<p>迅雷下载镜像文件有奇效，IDM平时下载很快，下载镜像开8线程只能跑到1M/s，迅雷直接10M/s</p>
</blockquote>
<ul>
<li>
<h5 id="若之前安装过其他版本docker通过以下方式完成卸载">若之前安装过其他版本Docker，通过以下方式完成卸载：</h5>
<pre><code class="language-shell">yum remove docker \
                docker-client \
                docker-client-latest \
                docker-common \
                docker-lastest-logrotate \
                docker-logrotate \
                docker-selinux \
                docker-engine-selinux \
                docker-engine \
                docker-ce
</code></pre>
</li>
<li>
<h5 id="安装docker">安装Docker</h5>
<pre><code class="language-shell">yum install -y yum-utils device-mapper-persistent-data lvm2
</code></pre>
<ul>
<li>
<p>更新yum本地镜像源</p>
<pre><code class="language-shell"># 删除原有配置源目录
cd /etc
rm -rf yum.repos.d
# 新建配置源目录
mkdir yum.repos.d
# 下载阿里镜像源
cd yum.repos.d
wget https://mirrors.aliyun.com/repo/Centos-7.repo
# 更新yum缓存
yum makecache
</code></pre>
</li>
<li>
<p>更新软件源信息</p>
<blockquote>
<p>参考：https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.40491b11PUGxwo</p>
</blockquote>
<pre><code class="language-shell"># step 1: 安装必要的一些系统工具
yum install -y yum-utils device-mapper-persistent-data lvm2
# Step 2: 添加软件源信息
yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# Step 3
# Step 4: 更新并安装Docker-CE
yum makecache fast
yum -y install docker-ce
# Step 4: 开启Docker服务
service docker start
</code></pre>
</li>
<li>
<p>关闭防火墙（为了学习Docker，开发中应该开启指定端口）</p>
<pre><code class="language-shell"># 关闭防火墙应用
systemctl stop firewalld
# 禁止开机启动防火墙
systemctl disable firewalld
# 查看防火墙状态
systemctl status firewalld
</code></pre>
</li>
<li>
<p>配置Docker镜像源</p>
<pre><code class="language-shell">mkdir -p /etc/docker
tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://xm9ypajm.mirror.aliyuncs.com&quot;]
}
EOF
systemctl daemon-reload
systemctl restart docker
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="22-docker基本操作">2.2 Docker基本操作</h4>
<blockquote>
<p>镜像的命名规范：</p>
<ul>
<li>镜像名称一般由两部分组成：<code>[respository]:[tag]</code>
<ul>
<li>respository：镜像名称</li>
<li>tag：版本</li>
</ul>
</li>
<li>如果没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/image-20220705111817819.png" alt="DOCKER" loading="lazy"></figure>
<ul>
<li>
<h5 id="镜像相关指令">镜像相关指令</h5>
<ul>
<li><code>docker images</code>：查看当前所有镜像</li>
<li><code>docker pull [respository]:[tag]</code>：从镜像仓库中拉取指定镜像</li>
<li><code>docker save -o [Path/FileName.tar] [respository]:[tag]</code>：将指定镜像打包</li>
<li><code>docker load -i [Path/FileName.tar]</code>：将打包好的镜像加载到Docker中</li>
<li><code>docker rmi [respository]:[tag]</code>：移除指定镜像</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>示例：</strong></p>
<ul>
<li>
<p>从DockerHub中拉取一个nginx镜像并查看</p>
<p><code>docker pull nginx</code></p>
<p><code>docker images</code></p>
</li>
<li>
<p>将nginx镜像打包到本地</p>
<p><code>docker save -o ~/nginx.tar nginx:latest</code></p>
</li>
<li>
<p>将镜像文件从本地tar包加载</p>
<p><code>docker load -i ~/nginx.tar</code></p>
<p><code>docker images</code></p>
</li>
</ul>
</blockquote>
<ul>
<li>
<h5 id="容器相关命令">容器相关命令</h5>
<ul>
<li><code>docker run</code>：创建并运行一个容器</li>
<li><code>docker pause</code>：暂停运行</li>
<li><code>docker unpause</code>：继续运行</li>
<li><code>docker stop</code>：停止运行</li>
<li><code>docker start</code>：运行</li>
<li><code>docker ps</code>：查看所有运行容器及状态</li>
<li><code>docker logs</code>：查看容器运行日志</li>
<li><code>docker exec</code>：进入容器执行命令</li>
<li><code>docker rm</code>：删除指定容器</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>示例：</strong></p>
<ul>
<li>
<p>运行一个nginx容器</p>
<p><code>docker run --name mn -p 80:80 -d nginx</code></p>
<ul>
<li><code>--name</code>：指定容器名称</li>
<li><code>-p</code>：指定端口映射</li>
<li><code>-d</code>：后台运行</li>
</ul>
<p><code>docker ps</code></p>
</li>
<li>
<p>查看指定容器运行日志</p>
<p><code>docker logs mn</code></p>
<p>跟踪查看运行日志：<code>docker logs -f mn</code></p>
</li>
<li>
<p>进入容器执行命令</p>
<p><code>docker exec -it mv bash</code></p>
<p><code>exit</code>：退出容器</p>
</li>
<li>
<p>停止运行容器</p>
<p><code>docker stop mn</code></p>
</li>
<li>
<p>查看所有容器包括未运行的</p>
<p><code>docker ps -a</code></p>
</li>
<li>
<p>运行容器</p>
<p><code>docker start mn</code></p>
</li>
<li>
<p>删除容器</p>
<p><code>docker rm</code>：只能删除未运行的容器</p>
<p><code>docker rm -f mn</code>：强制删除容器，无论是否运行</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>示例：运行一个持久化存储的redis容器，并通过redis-cli设置num=666</p>
<ul>
<li>
<p>运行容器</p>
<p><code>docker run --name my-redis -p 6379:6379 -d redis redis-server --appendonly yes</code></p>
</li>
<li>
<p>进入容器</p>
<p><code>docker exec -it my-redis bash</code></p>
</li>
<li>
<p>启动redis-cli</p>
<p><code>redis-cli</code></p>
</li>
<li>
<p>设置num=666</p>
<p><code>set num 666</code></p>
</li>
<li>
<p>退出redis-cli，退出容器</p>
<p><code>exit</code></p>
<blockquote>
<p><code>docker exec -it my-redis redis-cli</code>：直接进入容器中启动redis-cli</p>
</blockquote>
</li>
</ul>
</blockquote>
<h4 id="23-数据卷操作">2.3 数据卷操作</h4>
<blockquote>
<p>数据卷的作用：将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/image-20220705192332218.png" alt="image-20220705192332218" loading="lazy"></figure>
<ul>
<li>
<p><strong>基本语法</strong>：<code>docker volume [COMMAND]</code></p>
<ul>
<li>COMMAND
<ul>
<li>create：创建一个volume</li>
<li>inspect：显示一个或多个volume的信息</li>
<li>ls：列出所有的volume</li>
<li>prune：删除未使用的volume</li>
<li>rm：删除一个或多个指定的volume</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>挂载数据卷</strong></p>
<ul>
<li>
<p>创建并运行容器时指定数据卷的挂载目录，若数据卷不存在，则自动创建数据卷</p>
<pre><code class="language-shell">docker run \
--name mn \
-p 80:80 \
-v html:/usr/share/nginx/html \
-d nginx
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>挂载目录</strong></p>
<ul>
<li>
<pre><code class="language-shell">docker run \
--name some-mysql \
-e MYSQL_ROOT_PASSWORD=root \
-p 3306:3306 \
-v /tmp/mysql/data:/var/lib/mysql \
-v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \
-d mysql:latest
</code></pre>
</li>
</ul>
<blockquote>
<p>数据卷挂载与目录挂载</p>
<ul>
<li>数据卷挂载耦合度低，有docker来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="3-镜像结构">3. 镜像结构</h3>
<blockquote>
<p>镜像就是将应用程序及其所需要的系统函数库、环境、配置、依赖打包而成的</p>
<ul>
<li>基础镜像（BaseImage）：应用依赖的系统函数库、环境变量、配置、文件系统等</li>
<li>入口（Entrypoint）：镜像运行入口，一般是程序启动的脚本和参数</li>
<li>层（Layer）：在BaseImage基础上添加安装包、依赖、配置等，每次操作形成新的一层</li>
</ul>
<p>镜像是分层结构，每一层称一个Layer</p>
</blockquote>
<h4 id="31-自定义镜像">3.1 自定义镜像</h4>
<blockquote>
<p>Dockerfile：一个文本文件，指令的合集，用指令来说明要执行什么操作来构建镜像，每一个指令都会形成一层Layer</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>FROM</td>
<td>指定BaseImage</td>
<td>FROM centos:6</td>
</tr>
<tr>
<td>ENV</td>
<td>设置环境变量，可在后面指令使用</td>
<td>ENV key value</td>
</tr>
<tr>
<td>COPY</td>
<td>拷贝本地文件到镜像的指定目录</td>
<td>COPY ./mysql-5.7.rpm /tmp</td>
</tr>
<tr>
<td>RUN</td>
<td>执行Linux的shell命令，一般是安装过程的命令</td>
<td>RUN yum install gcc</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>指定容器运行时监听的端口，是给镜像使用者看的</td>
<td>EXPOSE 8080</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>镜像中应用的启动命令，容器运行时调用</td>
<td>ENTRYPOINT java -jar xx.jar</td>
</tr>
</tbody>
</table>
</blockquote>
<pre><code class="language-shell"># 指定基础镜像
FROM ubuntu:16.04
# 配置环境变量，JDK的安装目录
ENV JAVA_DIR=/usr/local

# 拷贝jdk和java项目的包
COPY ./jdk8.tar.gz $JAVA_DIR/
COPY ./docker-demo.jar /tmp/app.jar

# 安装JDK
RUN cd $JAVA_DIR \
 &amp;&amp; tar -xf ./jdk8.tar.gz \
 &amp;&amp; mv ./jdk1.8.0_144 ./java8

# 配置环境变量
ENV JAVA_HOME=$JAVA_DIR/java8
ENV PATH=$PATH:$JAVA_HOME/bin

# 暴露端口
EXPOSE 8090
# 入口，java项目的启动命令
ENTRYPOINT java -jar /tmp/app.jar
</code></pre>
<ul>
<li>
<p><code>mkdir -p /tmp/docker-demo</code></p>
</li>
<li>
<p>将<code>docker-demo.jar</code> <code>jdk8.tar.gz</code> <code>Dockerfile</code>上传至<code>/tmp/docker-demo</code></p>
</li>
<li>
<p><code>docker build -t javaweb:1.0 .</code></p>
</li>
<li>
<p><code>docker images</code></p>
</li>
<li>
<p><code>docker run --name web -p 8090:8090 -d javaweb:1.0</code></p>
</li>
<li>
<p>访问<code>ip:8090/hello/count</code></p>
</li>
</ul>
<blockquote>
<p>我们发现在Dockerfile中构建jdk环境的操作是可复用的，我们应该把构建jdk环境的部分构建一个镜像，这样以后就可以直接使用了，而java:8-alpine帮我们做了这件事</p>
</blockquote>
<h4 id="32-dockercompose">3.2 DockerCompose</h4>
<blockquote>
<p>DockerCompose可以基于Compose文件帮我们快速部署分布式应用，而无需手动一个个创建和运行容器</p>
<p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行</p>
<pre><code class="language-yaml">version: &quot;3.9&quot;
services:
	mysql: #指定服务名称
		image: mysql:8.0.21 # 指定镜像文件
		environment: #设置环境变量
			MYSQL_ROOT_PASSWORD: 123456
		volumes: #数据卷挂载
			- /tmp/mysql/data:/var/lib/mysql
			- /tmp/mysql/conf/hym.cnf:/etc/mysql/conf.d/hym.cnf
	web: #指定服务名称
		build: . #从当前目录中构建镜像
		ports:   #设置端口号
			- &quot;8090:8090&quot;
</code></pre>
<blockquote>
<p>书写格式参考规范：</p>
<ul>
<li>https://docs.docker.com/compose/compose-file/compose-file-v3/</li>
<li>https://docs.docker.com/compose/compose-file/compose-file-v2/</li>
</ul>
</blockquote>
</blockquote>
<h5 id="321-安装dockercompose">3.2.1 安装DockerCompose</h5>
<blockquote>
<p>参考：https://docs.docker.com/compose/install/compose-plugin/#installing-compose-on-linux-systems</p>
</blockquote>
<pre><code class="language-shell"> curl -SL https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
</code></pre>
<ul>
<li>
<p><code>docker-compose</code>所在目录<code>/usr/local/bin/docker-compose</code></p>
</li>
<li>
<p>给<code>docker-compose</code>添加可执行权限<code>chmod +x docker-compose</code></p>
</li>
<li>
<p>Base自动补全命令</p>
<pre><code class="language-shell">curl \
    -L https://raw.githubusercontent.com/docker/compose/v2.6.1/contrib/completion/bash/docker-compose \
    -o /etc/bash_completion.d/docker-compose
</code></pre>
<blockquote>
<p>如果无法访问该地址，则修改本机hosts文件</p>
<p><code>echo &quot;185.199.108.133 raw.githubusercontent.com&quot; &gt;&gt; /etc/hosts</code></p>
</blockquote>
</li>
</ul>
<h5 id="322-部署微服务集群">3.2.2 部署微服务集群</h5>
<pre><code class="language-shell">docker run \
--name my-mysql8 \
-e MYSQL_ROOT_PASSWORD=root \
-p 3306:3306 \
-d mysql:latest \
--character-set-server=utf8mb4 \
--collation-server=utf8mb4_unicode_ci

</code></pre>
<blockquote>
<pre><code class="language-dockerfile">FROM java:8-alpine
COPY ./app.jar /tmp/app.jar
ENTRYPOINT java -jar /tmp/app.jar
</code></pre>
<pre><code class="language-yaml"># docker-comspose配置文件语法版本
version: 3.8
services:
	nacos:
		images: nacos/nacos-server
		environment: 
			MODE: standalone
		ports:
			- &quot;8848:8848&quot;
	mysql:
		images: mysql:8.0.31
		environment: 
			MYSQL_ROOT_PASSWORD: 996748
		volumes:
			- &quot;$PWD/mysql/data:/var/lib/mysql&quot;
			- &quot;$PWD/mysql/conf:/etc/mysql/conf.d&quot;
	user-service: 
		build: ./user-service
	order-service:
		build: ./order-service
	gateway:
		build: ./gateway
		ports: 
			- &quot;10010:10010&quot;
		
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://pic.zyblog.xyz/img/typora/image-20230505123711539.png?origin=typora" alt="image-20230505123711539" loading="lazy"></figure>
</blockquote>
<h3 id="4-docker镜像仓库">4. Docker镜像仓库</h3>
<h4 id="41-配置docker信任地址">4.1 配置Docker信任地址</h4>
<blockquote>
<p>我们的私服采用的是http协议，默认不被Docker信任</p>
</blockquote>
<pre><code class="language-shell"># 编辑Docker服务守护进程配置文件
vi /etc/docker/daemon.json
# 添加内容
&quot;insecure-registries&quot;:[&quot;http://192.168.96.130:8080&quot;]
# 重新加载Docker服务守护进程
systemctl daemon-reload
# 重启Docker
systemctl restart docker  
</code></pre>
<h4 id="42-使用docker部署带有图形界面的dockerregistry">4.2 使用Docker部署带有图形界面的DockerRegistry</h4>
<pre><code class="language-yaml">version: '3.0'
services:
	registry:
		image: registry
		volumes:
			- ./registry-data:/var/lib/registry
	ui:
		image: joxit/docker-registry-ui:1.5-static
		ports:
			- 8080:80
		environment:
			- REGISTRY_TITLE=絷缘私有仓库
			- REGISTRY_URL=http://registry:5000
		depends_on:
			- registry
</code></pre>
<pre><code class="language-shell">mkdir /tmp/docker-registry-ui
cd /tmp/docker-registry-ui
touch docker-compose.yml
vim docker-compose.yml
docker-compose up -d 
</code></pre>
<h4 id="43-在私有镜像仓库推送拉取镜像">4.3 在私有镜像仓库推送/拉取镜像</h4>
<pre><code class="language-shell"># 将现有镜像打包成为私有镜像
docker tag nginx:latest 192.168.96.130:8080/nginx:latest
# 将私有镜像推送到私有仓库
docker push 192.168.96.130:8080/nginx:latest
# 将私有镜像拉取到当前环境
docker pull 192.168.96.130:8080/nginx:latest
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/image-20220706180422059.png" alt="image-20220706180422059" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/doBPQq_Z4/">https://zhiyuandnc.github.io/doBPQq_Z4/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（十一）]]></title>
        <id>https://zhiyuandnc.github.io/HTHKqujWe/</id>
        <link href="https://zhiyuandnc.github.io/HTHKqujWe/">
        </link>
        <updated>2022-03-05T05:47:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-部署共享服务器">一、部署共享服务器</h2>
<h3 id="1-产生原因文件传输的服务器可以是主机之间传输文件变得简单但本质还是传输文件上传等功能一般不使用若需要在服务器上传或修改文件一般使用共享文件">1. 产生原因：文件传输的服务器可以是主机之间传输文件变得简单，但本质还是传输文件，上传等功能一般不使用，若需要在服务器上传或修改文件一般使用共享文件</h3>
<h3 id="2-samba共享服务程序">2. Samba共享服务程序</h3>
<h4 id="21-组成">2.1 组成</h4>
<ul>
<li>Samba：服务器端软件，提供服务器守护进程、共享程序文档等功能</li>
<li>samba-common：设置文件并提供语法校验功能</li>
<li>samba-client：客户端软件，提供访问时的指令</li>
</ul>
<h4 id="22-samba服务器配置文件">2.2 Samba服务器配置文件</h4>
<ul>
<li>存储路径：/etc/samba/smb.conf</li>
<li>常用的参数
<ul>
<li>[global]：全局性配置，不能省略
<ul>
<li>workgroup=：工作组名</li>
<li>server  string=：服务器信息介绍</li>
<li>log   file=：定义日志文件存储路径</li>
<li>max  log   size=：定义日志文件的最大容量（单位为KB）</li>
<li>sercurity=：验证方式</li>
<li>passdb   backend=：定义用户后台类型</li>
<li>load   printers=yes：设置是否共享打印机</li>
<li>cups   options=raw：设置打印机的选项</li>
</ul>
</li>
<li>[homes]：本地参数，homes可以修改为Windows显示的共享目录名
<ul>
<li>comment=：描述信息，可以省略</li>
<li>path=：共享目录的绝对路径，不能省略</li>
<li>public=no：关闭所有人可见</li>
<li>browsable=yse：定义是否在windows工作组下看的共享目录</li>
<li>writeable=yes：允许写入</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-部署共享服务">3. 部署共享服务</h3>
<ul>
<li>
<p>准备工作</p>
<ul>
<li>关闭SELinux：setenforce   0</li>
<li>关闭防火墙：systemctl  stop  firewalld</li>
<li>安装samba：yum   install   -y   samba</li>
<li>查看本机IP：ip   addr</li>
</ul>
</li>
<li>
<p>创建新账户</p>
<ul>
<li>useradd   smbtest</li>
<li>passwd   smbtest</li>
</ul>
</li>
<li>
<p>使用samba的pdbedit命令添加新账户</p>
<ul>
<li>格式：pdbedit   -a   -u   smbtest</li>
<li>注意：samba服务要求账户必须事先建立，为普通账户，密码为新密码，不能使用原有的账户登录密码</li>
</ul>
</li>
<li>
<p>创建共享目录</p>
<ul>
<li>mkdir   /smbdata</li>
</ul>
</li>
<li>
<p>修改共享目录权限：chown    -Rf    smbtest:smbtest    /smbdata</p>
</li>
<li>
<p>配置samba配置文件</p>
<ul>
<li>
<p>备份主配置文件：mv   smb.conf   smb.conf.back</p>
</li>
<li>
<p>新建主配置文件：vim   smb.conf</p>
</li>
<li>
<p>输入以下内容：</p>
<pre><code class="language-ini">[global]
        workgroup = SAMBA
        server string = Samba Server v%v 
        log file = /var/log/samba/log.%m 定义日志文件的存放位置与名称，参数%m为来访的主机名
        max log size = 50   定义日志文件的最大容量为50KB
        security = user     安全验证的方式，总共有4种
        load printers = yes 设置在Samba服务启动时是否共享打印机设备
        cups options = raw  打印机选项
[smbdata]
        path = /smbdata  共享目录位置
        public = no      等同于 guest ok = no  是否所有人可见，等同于&quot;public&quot;参数。
        browseable = yes 该选项设置共享目录在网上邻居中是否显示，设置为no时相当于隐藏共享目录，该选项是专门用于windows平台 
        writable = yes  定义是否可以执行写入操作，与“read only”相反
</code></pre>
<pre><code class="language-css">security所有参数：
	share：来访主机无需验证口令；比较方便，但安全性很差
	user：需验证来访主机提供的口令后才可以访问；提升了安全性
	server：使用独立的远程主机验证来访主机提供的口令（集中管理账户）
	domain：使用域控制器进行身份验证
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201018095907237.png?origin=typora" alt="image-20201018095907237" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>启动服务：systemctl   start  smb</p>
</li>
<li>
<p>开机启动：systemctl   enable   smb</p>
</li>
<li>
<p>测试：在Windows的运行输入：\\服务器IP，也可以在文件夹地址栏中输入</p>
</li>
</ul>
<h2 id="二-使用lnmp环境部署discuz论坛">二、 使用LNMP环境部署Discuz论坛</h2>
<h3 id="1-lnmplinuxnginxmysqlmariadbphp">1. LNMP：Linux+Nginx+MySQL（Mariadb）+PHP</h3>
<h3 id="2-准备工作">2. 准备工作</h3>
<h4 id="21-关闭selinuxsetenforce-0">2.1 关闭SELinux：setenforce  0</h4>
<h4 id="22-关闭防火墙systemctl-stop-firewalld">2.2 关闭防火墙：systemctl  stop  firewalld</h4>
<h4 id="23-查看本机ip地址ip-addr">2.3 查看本机IP地址：ip addr</h4>
<h3 id="3-安装必要软件">3. 安装必要软件</h3>
<h4 id="31-安装扩展源yum-install-y-epel-release">3.1  安装扩展源：yum install -y epel-release</h4>
<h4 id="32-安装编译器yum-install-y-gcc-gcc-c">3.2  安装编译器：yum install  -y  gcc   gcc-c++</h4>
<h4 id="33-安装解压缩软件yum-install-y-zlib">3.3  安装解压缩软件：yum   install  -y   zlib*</h4>
<h4 id="34-安装pcre软件yum-install-y-pcre">3.4 安装PCRE软件：yum  install  -y   pcre*</h4>
<h4 id="35-安装加密软件yum-install-y-openssl">3.5 安装加密软件：yum   install    -y    openssl*</h4>
<h4 id="36-安装phpyum-install-y-php">3.6 安装PHP：yum  install   -y   php</h4>
<h4 id="37-安装数据库yum-install-y-mariadb-server">3.7 安装数据库：yum   install   -y   mariadb-server</h4>
<h4 id="38-安装php支持软件yum-install-y-php-fpm-php-mysql">3.8 安装PHP支持软件：yum  install  -y  php-fpm   php-mysql</h4>
<h4 id="39-安装nginx">3.9 安装Nginx</h4>
<ul>
<li>下载源码包：wget   http://nginx.org/download/nginx-1.19.1.tar.gz</li>
<li>解压缩：tar xzvf  nginx-1.19.1.tar.gz</li>
<li>进入安装目录：cd  nginx-1.19.1</li>
<li>编译安装：./configure  &amp;&amp; make  &amp;&amp; make install</li>
</ul>
<h4 id="310-在window下载discuz论坛源码包必须为utf-8格式通过winscp上传到linux家目录中">3.10  在Window下载Discuz论坛源码包（必须为UTF-8格式），通过WinSCP上传到Linux家目录中</h4>
<h3 id="4-配置nginx">4. 配置Nginx</h3>
<h4 id="41-启动">4.1 启动</h4>
<ul>
<li>Nginx启动的程序默认路径：/usr/local/nginx/sbin</li>
<li>进入目录：cd /usr/local/nginx/sbin</li>
<li>测试：在浏览器中输入 http://服务器IP地址</li>
</ul>
<h4 id="42-将discuz论坛的源码文件中upload目录拷贝到nginx默认网页存储路径">4.2 将Discuz论坛的源码文件中upload目录拷贝到nginx默认网页存储路径</h4>
<ul>
<li>nginx默认网页存储路径：/usr/local/nginx/html</li>
<li>注意：该目录中的index.html就是测试网页的源文件</li>
<li>将Discuz论坛的upload目录拷贝到/usr/local/nginx/html中并赋予权限
<ul>
<li>cd  ~</li>
<li>ls</li>
<li>cd Discuz_X3.4_SC_UTF8_20191201/</li>
<li>ls</li>
<li>cp  -rf   upload  /usr/local/nginx/html</li>
<li>ls</li>
<li>chmod   -Rf    777 upload</li>
<li>rm  -f  index.html</li>
</ul>
</li>
</ul>
<h4 id="43-修改nginx配置文件">4.3 修改nginx配置文件</h4>
<ul>
<li>
<p>路径：/usr/local/nginx/conf/nginx.conf</p>
</li>
<li>
<p>编辑：vim /usr/local/nginx/conf/nginx.conf</p>
<ul>
<li>
<p>定位第36行，确认监听端口为80</p>
</li>
<li>
<p>定位第44行，将root后边的html删除，替换为：/usr/local/nginx/html/upload，该动作为设置默认网页目录路径</p>
</li>
<li>
<p>定位第45行，添加index.php，开启php文件识别</p>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/image-20201018113240330.png?origin=typora" alt="image-20201018113240330" loading="lazy"></figure>
</li>
<li>
<p>定位65-71行，删除前导#号，开启PHP支持，将66行的html修改为  <strong>/usr/local/nginx/html/upload</strong></p>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/image-20201018113438739.png?origin=typora" alt="image-20201018113438739" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://pic.zyblog.xyz/img/typora/image-20201018120314011.png?origin=typora" alt="image-20201018120314011" loading="lazy"></figure>
</li>
<li>
<p>定位第69行，将 /scripts 改为  $document_root</p>
</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/image-20201018113738353.png?origin=typora" alt="image-20201018113738353" loading="lazy"></figure>
<ul>
<li>保存退出，重启Nginx
<ul>
<li>cd /usr/local/nginx/sbin/</li>
<li>./nginx -s reload</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-配置mariadb数据库">5. 配置mariadb数据库</h3>
<h4 id="51-systemctl-start-mariadb">5.1 systemctl start mariadb</h4>
<h4 id="52-mariadb数据库初始化">5.2 mariadb数据库初始化</h4>
<ul>
<li>执行初始化的命令：mysql_secure_installation</li>
<li>进入初始化向导
<ul>
<li>Enter current password for root (enter for none)：是否为root账户设置密码，回车</li>
<li>Set root password? [Y/n] ：输入y回车，输入密码</li>
<li>Remove anonymous users? [Y/n] ：是否删除匿名账户，输入y回车</li>
<li>Disallow root login remotely? [Y/n] ：是否禁止root管理员从远程登录，输入y回车</li>
<li>Remove test database and access to it? [Y/n] ：是否删除test数据库并取消其访问权限，输入y回车</li>
<li>Reload privilege tables now? [Y/n] ：是否刷新授权列表，让初始化后的设定生效，输入y回车</li>
</ul>
</li>
<li>重启数据库： systemctl restart  mariadb</li>
</ul>
<h3 id="6-启动php-fpm服务systemctl-start-php-fpm">6. 启动php-fpm服务：systemctl  start  php-fpm</h3>
<h3 id="7-安装discuz论坛服务">7. 安装Discuz论坛服务</h3>
<h4 id="71-在windows的浏览器中数额如http服务器ip地址进入向导按提示操作">7.1 在Windows的浏览器中数额如http://服务器IP地址进入向导，按提示操作</h4>
<h4 id="72-注意如果出现红叉一般是权限问题或者软件未安装">7.2 注意：如果出现红叉×，一般是权限问题，或者软件未安装</h4>
<h4 id="73-安装数据库">7.3 安装数据库</h4>
<ul>
<li>设置密码：mariadb数据库初始化时设置的root密码</li>
<li>设置论坛管理员用户名及密码</li>
</ul>
<h3 id="8-测试windows打开浏览器输入服务器ip地址进行测试">8. 测试：Windows打开浏览器输入服务器IP地址进行测试</h3>
<h3 id="9-lnmp一键安装包部署论坛">9. LNMP一键安装包部署论坛</h3>
<h4 id="91-准备工作">9.1 准备工作</h4>
<ul>
<li>
<p>关闭SELinux</p>
</li>
<li>
<p>关闭防火墙</p>
</li>
<li>
<p>查看IP地址</p>
</li>
<li>
<p>使用winscp将windows中的LNMP一键安装包上传到Linux</p>
</li>
<li>
<p>检查yum源是否可用：yum  makecache</p>
</li>
<li>
<p>解压缩安装包：tar   xzvf    lnmp1.7-full.tar.gz</p>
</li>
</ul>
<h4 id="92-安装lnmp一键安装包">9.2 安装LNMP一键安装包：</h4>
<ul>
<li>
<p>cd  lnmp1.7-full</p>
</li>
<li>
<p>执行安装脚本   ./install.sh</p>
<ul>
<li>
<p>Enter your choice (1, 2, 3, 4, 5, 6, 7, 8, 9, 10 or 0)：选择安装数据库版本</p>
</li>
<li>
<p>Please setup root password of MySQL.</p>
<p>Please enter: 输入数据库管理员的密码</p>
</li>
<li>
<p>Do you want to enable or disable the InnoDB Storage Engine?</p>
<p>Default enable,Enter your choice [Y/n]: 是否启用MySQL数据库引擎</p>
</li>
<li>
<p>Enter your choice (1, 2, 3, 4, 5, 6, 7, 8, 9, 10): 选择php的版本，回车即可</p>
</li>
<li>
<p>Enter your choice (1, 2 or 3)：是否安装内存优化，不安装回车即可</p>
</li>
<li>
<p>按任意键开始安装</p>
</li>
</ul>
</li>
<li>
<p>配置Nginx</p>
<ul>
<li>注意：LNMP一键安装包的Nginx是经过优化配置的，与默认的Nginx配置文件内容有所不同</li>
<li>网站目录：/home/wwwroot/default</li>
<li>将Discuz的upload目录拷贝到/home/wwwroot/default目录中并赋予权限
<ul>
<li>chown www:www -R /home/wwwroot/default/upload</li>
</ul>
</li>
<li>修改Nginx.conf的配置文件
<ul>
<li>vim  /usr/local/nginx/conf/nginx.conf</li>
<li>定位第69行，修改为root  /home/wwwroot/default/upload</li>
</ul>
</li>
</ul>
</li>
<li>
<p>重启Nginx</p>
<ul>
<li>cd /usr/local/nginx/sbin</li>
<li>./nginx -s reload</li>
</ul>
</li>
<li>
<p>测试：地址栏输入服务器IP地址进行测试</p>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/HTHKqujWe/">https://zhiyuandnc.github.io/HTHKqujWe/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（十）]]></title>
        <id>https://zhiyuandnc.github.io/RptKbpSRd/</id>
        <link href="https://zhiyuandnc.github.io/RptKbpSRd/">
        </link>
        <updated>2022-03-02T05:44:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="部署文件服务器">部署文件服务器</h2>
<h3 id="1-文件服务器">1. 文件服务器</h3>
<ul>
<li>
<p>1.1 一般用于文件传输协议（FTP），用于FTP客户端与服务端的文件共享、上传下载</p>
</li>
<li>
<p>1.2 结构：客户机/服务器（C/S架构）</p>
</li>
<li>
<p>1.3 端口：</p>
<ul>
<li>20：用于数据传输</li>
<li>21：用于传输命令</li>
</ul>
</li>
<li>
<p>1.4 特点：FTP服务器普遍部署在内网，一般使用下载功能较多，容易搭建，方便管理</p>
</li>
<li>
<p>1.5 结构图：</p>
</li>
<li>
<p>1.6 FTP协议工作模式</p>
<ul>
<li>主动模式：FTP的服务器主动向客户机发出连接请求</li>
<li>被动模式：FTP服务器等待客户机发出连接请求（默认模式）</li>
</ul>
</li>
<li>
<p>1.7 vsftpd服务程序</p>
<ul>
<li>
<p>1.7.1 vsftpd：非常安全的FTP守护进程</p>
</li>
<li>
<p>1.7.2 vsftpd是一款运行在Linux系统上的FTP服务程序，具有完全开源、免费、高安全性、高可靠性、高传输速度、支持多种服务模式的FTP服务器端软件</p>
</li>
<li>
<p>1.7.3 工作模式：</p>
<ul>
<li>匿名开放模式：任何人都可以无需密码验证而直接登录FTP服务器，方便简单但极不安全</li>
<li>本地用户模式：通过Linux系统本地的普通账户和密码进行认证登录，相对安全，若本地系统账户信息泄露或被破解，则FTP服务器就可顺利登录，从而控制整个服务器</li>
<li>虚拟用户模式：单独的建立用户数据库文件，虚拟出账户及密码，用于验证登录，实际账户信息不存在，仅供FTP服务器进行认证使用，有效地降低了破坏范围</li>
</ul>
</li>
<li>
<p>1.7.4 访问方式</p>
<ul>
<li>服务器端：vsftp</li>
<li>客户机端：
<ul>
<li>命令行：ftp 或 lftp 命令访问</li>
<li>Windows：浏览器或目录界面</li>
</ul>
</li>
</ul>
</li>
<li>
<p>1.7.5 安装vsftpd</p>
<ul>
<li>服务端格式：yum   install   -y   vsftpd</li>
<li>客户端格式：yum   install   -y</li>
</ul>
</li>
<li>
<p>1.7.6 vsftpd服务软件的配置文件：/etc/vsftpd/vsftpd.conf</p>
</li>
<li>
<p>① <strong>部署匿名开放模式的服务器</strong></p>
<ul>
<li>
<p>准备工作</p>
<ul>
<li>
<p>关闭 SELINUX</p>
</li>
<li>
<p>关闭防火墙：systemctl stop  firewalld</p>
<p>（或加入防火墙白名单：firewall-cmd  --permanent --zone=public --add-service=ftp）</p>
</li>
<li>
<p>重启防火墙：firewall-cmd --reload</p>
</li>
</ul>
</li>
<li>
<p>编辑配置 vsftpd.conf 文件，实现匿名模式服务器</p>
<ul>
<li>
<p>编辑：vim   /etc/vsftpd/vsftpd.conf</p>
</li>
<li>
<p>匿名模式涉及的参数：</p>
<ul>
<li>anonymous_enable=YES（允许匿名访问）</li>
<li>write_enable=YES（设置可写权限）</li>
<li>anon_umask=022（需添加，设置匿名账户上传文件的umask值）</li>
<li>anon_upload_enable=YES（需去掉#，允许匿名账户上传文件）</li>
<li>anon_mkdir_write_enable=YES（需去掉#，允许匿名账户创建目录）</li>
<li>anon_other_write_enable=YES（需添加，允许匿名账户修改目录名或删除目录）</li>
</ul>
</li>
<li>
<p>设置vsftpd默认工作目录的权限</p>
<ul>
<li>默认目录：/var/ftp/pub</li>
<li>对该目录增加ftp账户对应的权限：chown  -Rf   ftp   /var/ftp/pub</li>
</ul>
</li>
<li>
<p>启动服务</p>
<ul>
<li>启动：systemctl  start  vsftpd</li>
<li>设置开机启动：systemctl   enable   vsftpd</li>
</ul>
</li>
<li>
<p>测试</p>
<ul>
<li>
<p>Windows：在目录界面或浏览器界面的地址栏输入ftp://ip地址</p>
</li>
<li>
<p>Linux：</p>
<ul>
<li>
<p>ftp软件：</p>
<ul>
<li>
<p>命令格式为： ftp 对方IP地址</p>
</li>
<li>
<p>输入用户名anonymous，密码回车，cd  pub后进行ls浏览和尝试mkdir创建目录，输入exit退出</p>
</li>
</ul>
</li>
<li>
<p>lftp软件：</p>
<ul>
<li>命令格式为：lftp  对方IP地址</li>
<li>cd pub后进行ls浏览和尝试mkdir创建目录，输入 “ get  文件名 ” 进行上传，输入exit退出</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>umask参数</p>
<ul>
<li>umask值是Unix系统的概念，决定目录及文件被创建时的初始权限</li>
<li>在vsftpd的服务器中的目录初始权限最高为777，文件由于不能设置为可执行，则最高权限为666</li>
<li>umask值本质是一种补码</li>
<li>目录实际权限计算方式：777-umask，例如umask=022，目录初始权限为777-022即755</li>
<li>文件实际权限计算方式：666-umask，例如umask=022，文件初始权限为666-022即644</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>② <strong>部署本地用户模式的ftp服务器</strong></p>
<ul>
<li>
<p>本地模式就是通过Linux的普通账户进行登录</p>
</li>
<li>
<p>准备工作：同匿名的准备工作</p>
<ul>
<li>
<p>关闭 SELINUX：setenforce  0</p>
</li>
<li>
<p>关闭防火墙：systemctl stop  firewalld</p>
<p>（或加入防火墙白名单：firewall-cmd  --permanent  --zone=public  --add-service=ftp）</p>
</li>
<li>
<p>重启防火墙：firewall-cmd  --reload</p>
</li>
</ul>
</li>
<li>
<p>配置vsftpd.conf文件实现本地模式</p>
<ul>
<li>打开文件：vim   /etc/vsftpd/vsftpd.conf</li>
<li>本地模式涉及的参数：
<ul>
<li>anonymous_enable=NO（关闭匿名模式）</li>
<li>local_enable=YES（开启本地模式）</li>
<li>write_enable=YES（设置可写权限）</li>
<li>local_umask=022（设置本地模式账户umask值）</li>
<li>userlist_enable=YES（启用 “ 禁止用户名单 ”）</li>
<li>userlist_deny=YES（需添加，启用用户作用名单）</li>
<li>注意：userlist_enable和userlist_deny都为YES时，/etc/vsftpd/user_list文件为 “黑名单”，即文件中的账户都不能登录</li>
<li>注意：userlist_enable=YES和userlist_deny=NO时，则/etc/vsftpd/user_list文件为 “白名单”，即只有该文件中的用户可以登录</li>
</ul>
</li>
</ul>
</li>
<li>
<p>启动服务：systemctl start vsftpd</p>
</li>
<li>
<p>设置开机启动：systemctl enable vsftpd</p>
</li>
<li>
<p>上传文件默认目录：/home/普通账户名/</p>
</li>
<li>
<p>测试</p>
<ul>
<li>
<p>Windows：</p>
<p>在目录界面或浏览器界面的地址栏输入ftp://ip地址，输入普通账户名及密码进行登录操作</p>
</li>
<li>
<p>Linux：</p>
<ul>
<li>
<p>ftp软件：</p>
<ul>
<li>
<p>命令格式为： ftp 对方IP地址</p>
</li>
<li>
<p>输入用户名ZHIYUAN，密码回车登录，cd  pub后进行ls浏览和尝试mkdir创建目录，输入exit退出</p>
</li>
</ul>
</li>
<li>
<p>lftp软件：</p>
<ul>
<li>命令格式为：lftp  对方IP地址  -u 普通用户名</li>
<li>输入对应用户的密码，回车登录，cd pub后进行ls浏览和尝试mkdir创建目录，输入exit退出</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>限制本地用户只能在本地家目录中访问</p>
<ul>
<li>一般用户登录后访问的默认目录为/home/账户名/，但通过切换目录可以访问提权到其上级目录，这是相当危险的行为，需要做如下限制</li>
<li>设置：
<ul>
<li>chroot_local_user=YES（去掉#，开启限制用户工作的目录）</li>
<li>allow_writeable_chroot=YES（需添加，设置为不可跳出主目录后允许登录，且主目录可写）</li>
<li>注意：设置完毕后必须重启vsftpd服务：systemctl   restart   vsftpd</li>
</ul>
</li>
<li>测试：
<ul>
<li>ftp 192.168.0.119</li>
<li>输入账户名及密码</li>
<li>尝试cd   /etc     cd  ..</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>③ <strong>部署虚拟用户模式的ftp服务器</strong></p>
<ul>
<li>
<p>准备工作</p>
<ul>
<li>
<p>关闭SELINUX ：setenforce  0</p>
</li>
<li>
<p>关闭防火墙：systemctl stop  firewalld</p>
<p>（或加入防火墙白名单：firewall-cmd  --permanent --zone=public --add-service=ftp）</p>
</li>
<li>
<p>若添加白名单请重启防火墙：firewall-cmd --reload</p>
</li>
<li>
<p>设置工作默认权限：chown  -Rf  ftp   /var/ftp/pub</p>
</li>
<li>
<p>安装必要软件：</p>
<ul>
<li>安装vsftpd ：yum   install   -y  vsftpd</li>
<li>安装yum扩展源：yum  install   -y   epel-release</li>
<li>安装db4数据库软件：yum   install  -y db4*</li>
</ul>
</li>
</ul>
</li>
<li>
<p>创建FTP认证的数据库软件</p>
<ul>
<li>
<p>作用：存储允许登录的账户名及密码</p>
</li>
<li>
<p>格式：奇数行为账户名，偶数行为密码</p>
</li>
<li>
<p>创建位置：/etc/vsftpd</p>
</li>
<li>
<blockquote>
<p>ftpuser1</p>
<p>123456</p>
<p>ftpuser2</p>
<p>654321</p>
</blockquote>
</li>
<li>
<p>过程</p>
</li>
</ul>
</li>
<li>
<p>vim  /etc/vsftpd/vuser.list</p>
<ul>
<li>
<p>输入账户及密码，注意：奇数行为账户名，偶数行为密码</p>
</li>
<li>
<p>由于vuser.list是明文，不安全，且不符合vsftpd程序加载文件的格式，需要使用db_load命令进行hash加密，并转为数据库文件，最后删除原始明文</p>
<ul>
<li>加密：db_load  -T  -t  hash  -f   /etc/vsftpd/vuser.list  /etc/vsftpd/vuser.db</li>
</ul>
</li>
<li>
<p>-T：将文本文件转译载入数据库</p>
<ul>
<li>-t  hash：使用hash算法加密</li>
<li>-f：指定包含用户名和密码的文本文件</li>
<li>设置权限：chmod  600 vuser.db</li>
<li>删除原始明文：rm  -f   vuser.list</li>
</ul>
</li>
</ul>
</li>
<li>
<p>创建虚拟账户映射的账户及家目录</p>
<ul>
<li>作用：虚拟账户是没有家目录的，权限也未知，则需要虚拟账户登录后映射到本地实际账户的家目录中，其权限也自动归属于该本地账户</li>
<li>过程：
<ul>
<li>useradd  -d /var/ftpuser  -s /sbin/nologin  vfox</li>
<li>设置家目录权限：chmod   -Rf  755   /var/ftpuser</li>
</ul>
</li>
</ul>
</li>
<li>
<p>创建PAM文件进行映射</p>
<ul>
<li>PAM：可拔插认证模块，是一种认证机制，系统管理员可以通过调整PAM就轻易修改对应的认证方式，从而不需要修改应用程序</li>
<li>过程：
<ul>
<li>vim  /etc/pam.d/vsftpd.vu</li>
<li>输入以下两行进行映射
<ul>
<li>auth		 required   pam_userdb.so db=/etc/vsftpd/vuser</li>
<li>account   required   pam_userdb.so db=/etc/vsftpd/vuser</li>
<li>（注意：vuser不需要加扩展名db）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>配置 vsftpd.conf 文件涉及参数</p>
<ul>
<li>anonymous_enable=NO（关闭匿名模式）</li>
<li>local_enable=YES（开启本地账户）</li>
<li>guest_enable=YES（需添加，开启虚拟账户模式）</li>
<li>guest_username=vfox（需添加指定映射的账户名）</li>
<li>pam_service_name=vsftpd.vu（指定pam文件）</li>
<li>allow_writeable_chroot=YES（需添加，设置为不可跳出主目录且允许登录可写）</li>
</ul>
</li>
<li>
<p>重启服务：systemctl restart vsftpd</p>
</li>
<li>
<p>例：设置ftpuser1可以上传、创建、修改、删除，ftpuser2只能查看</p>
<ul>
<li>
<p>原则：通过创建权限文件实现</p>
</li>
<li>
<p>过程：</p>
<ul>
<li>
<p>mkdir   -p   /etc/vsftpd/vsdir</p>
</li>
<li>
<p>cd   /etc/vsftpd/vsdir</p>
</li>
<li>
<p>vim  ftpuser1</p>
</li>
<li>
<p>输入以下自定义功能参数：</p>
<ul>
<li>anon_upload_enable=YES</li>
<li>anon_mkdir_write_enable=YES</li>
<li>anon_other_write_enable=YES</li>
</ul>
</li>
<li>
<p>在 vsftpd.conf 配置文件中设置账户访问权限配置文件的存储目录</p>
<ul>
<li>
<p>vim  /etc/vsftpd/vsftpd.conf</p>
</li>
<li>
<p>user_config_dir=/etc/vsftpd/vsdir</p>
</li>
</ul>
</li>
<li>
<p>重启服务：systemctl   restart   vsftpd</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/RptKbpSRd/">https://zhiyuandnc.github.io/RptKbpSRd/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（九）]]></title>
        <id>https://zhiyuandnc.github.io/7dxxE7ipp/</id>
        <link href="https://zhiyuandnc.github.io/7dxxE7ipp/">
        </link>
        <updated>2022-02-28T05:41:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="部署静态网站">部署静态网站</h2>
<h3 id="1-web网站组成">1. web网站组成</h3>
<ul>
<li>网站服务程序：Apache、Nginx、IIS7</li>
<li>服务器或云存储空间</li>
<li>Web页面</li>
</ul>
<h3 id="2-快速安装apache服务程序">2. 快速安装Apache服务程序</h3>
<ul>
<li>安装Apache：yum  install  -y   httpd</li>
<li>关闭SELinux：setenforce   0</li>
<li>关闭防火墙：systemctl   stop   firewalld（将httpd加入到防火墙白名单）</li>
<li>启动httpd服务：systemctl  start  httpd</li>
<li>设置开机启动：systemctl enable httpd</li>
</ul>
<h3 id="3-apache配置文件分析">3. Apache配置文件分析</h3>
<ul>
<li>位置：
<ul>
<li>配置文件路径：/etc/httpd/conf/httpd.conf</li>
<li>服务目录：/etc/httpd</li>
<li>默认访问网站的存储目录：/var/www/html</li>
<li>网站访问日志路径：/var/log/httpd/access_log</li>
<li>错误日志：/var/log/httpd/error.log</li>
</ul>
</li>
<li>主配置文件分析
<ul>
<li>分类：
<ul>
<li>注释内容</li>
<li>全局配置</li>
<li>区域配置</li>
</ul>
</li>
<li>需要关注的关键参数
<ul>
<li>ServerRoot：服务程序主目录</li>
<li>ServerAdmin：管理员邮箱</li>
<li>User：运行服务的用户</li>
<li>Group：运行服务的工作组</li>
<li>ServerName：网站域名</li>
<li>DocumentRoot：网站数据目录</li>
<li>Listen：监听IP地址与端口号</li>
<li>Include：需要加载的其他文件</li>
<li>Timeout：网页超时时间，单位毫秒ms</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-快速部署个人网站">4. 快速部署个人网站</h3>
<ul>
<li>安装配置服务
<ul>
<li>安装Apache：yum  install  -y   httpd</li>
<li>关闭SELinux：setenforce   0</li>
<li>关闭防火墙：systemctl   stop   firewalld（将httpd加入到防火墙白名单）</li>
<li>启动httpd服务：systemctl  start  httpd</li>
<li>设置开机启动：systemctl enable httpd</li>
</ul>
</li>
<li>创建存储网页的源文件的目录：mkdir   /web1</li>
<li>将网页源文件上传到该目录winscp
<ul>
<li>启动winscp</li>
<li>站点输入linux系统的IP地址</li>
<li>用户输入root及密码</li>
<li>保存站点并登录，第一次需要验证密钥，点击是即可</li>
<li>登录成功后左侧为Window，右侧为Linux</li>
<li>通过鼠标拖拽文件即可</li>
</ul>
</li>
<li>修改httpd配置文件
<ul>
<li>编辑主配置文件：vim   /etc/httpd/conf/httpd.conf
<ul>
<li>定位第119行将 /var/www/html 修改为 /web1/网页目录名</li>
<li>定位第124行将 /var/www 修改为 /web1/网页目录名</li>
<li>保存并退出</li>
</ul>
</li>
</ul>
</li>
<li>重启服务：systemctl   restart   httpd</li>
<li>测试：在Windows端打开浏览器输入Linux系统的IP地址</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/7dxxE7ipp/">https://zhiyuandnc.github.io/7dxxE7ipp/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（八）]]></title>
        <id>https://zhiyuandnc.github.io/m9qF680b6/</id>
        <link href="https://zhiyuandnc.github.io/m9qF680b6/">
        </link>
        <updated>2022-02-26T05:38:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="arch-linux安装部署知识小结">Arch-Linux安装部署（知识小结）</h2>
<h3 id="1-arch-linux系统">1. Arch-Linux系统：</h3>
<blockquote>
<p>基于X86_64位架构制作的一种特别发行版，系统全部由开源软件组成，帮助文档丰富，全部由社区进行管理和维护，其镜像只提供简单的系统组件，需要全程联网才可安装部署</p>
</blockquote>
<h3 id="2-创建arch-linux的虚拟机">2. 创建Arch-Linux的虚拟机</h3>
<blockquote>
<p>文件菜单 -&gt; 新建虚拟机 -&gt; 稍后安装系统 -&gt;选择版本为Linux、其他版本、Linux5.x或更高版本内核64位 -&gt; 命名为Arch-Linux  -&gt; 更改存储路径 -&gt; 磁盘容量8G ，单个文件 -&gt;自定义硬件（新CD/DVD中选择之前下载好的镜像文件）</p>
</blockquote>
<h3 id="3-启动虚拟机">3. 启动虚拟机</h3>
<blockquote>
<p>进入引导界面 -&gt; 选择第一项 -&gt; 自动进入命令行</p>
</blockquote>
<h3 id="4-部署系统">4. 部署系统</h3>
<blockquote>
<p>（1）检查网络连通性</p>
<p>​		获取地址：ip  addr</p>
<p>​		测试：ping www.baidu.com</p>
<p>（2）创建分区</p>
<p>​     	方法：fdisk  /dev/sda</p>
<p>​		 至少两个分区：</p>
<p>​					swap分区：512M</p>
<p>​					根分区：剩余所有</p>
<p>（3）启用swap分区</p>
<p>​		格式化swap分区：mkswap   /dev/sda1</p>
<p>​		启用：swapon   /dev/sda1</p>
<p>​		查看：free   -h</p>
<p>（4）格式化根分区：mkfs.ext4   /dev/sda2</p>
<p>（5）挂载根分区：mount   /dev/sda2   /mnt</p>
<p>（6）修改下载源，防止下载速度过慢</p>
<p>​		进入下载源配置目录：cd  /etc/pacman.d</p>
<p>​		将所有行注释掉</p>
<p>​		定位第一行增加阿里源的地址信息：Server = http://mirrors.aliyun.com/archlinux/<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>p</mi><mi>o</mi><mi mathvariant="normal">/</mi><mi>o</mi><mi>s</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">repo/os/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord">/</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord">/</span></span></span></span>arch</p>
<p>（7）下载必要软件：</p>
<p>​		pacstrap   /mnt  base</p>
<p>​		pacstrap   /mnt   linux</p>
<p>​		pacstrap   /mnt  linux-firmware</p>
<p>​		pacstrap   /mnt  dhcpcd</p>
<p>​		pacstrap   /mnt  vim</p>
<p>​		pacstrap   /mnt  openssh</p>
<p>​		pacstrap   /mnt  man</p>
<p>​		pacstrap   /mnt  net-tools</p>
<p>​		pacstrap   /mnt  pacman</p>
<p>（8）生成开机启动文件</p>
<p>​		写入开机启动内容：genfstab  -U   /mnt   &gt;&gt;  /mnt/etc/fstab</p>
<p>​		浏览：cat  /mnt/etc/fstab</p>
<p>（9）切换根目录：arch-chroot  /mnt</p>
<p>（10）设置root密码：passwd   root</p>
<p>（11）设置开机启动：systemctl   enable   dhcpcd</p>
<p>（12）安装并配置grub2引导文件：</p>
<p>​		安装：pacman   -S   grub</p>
<p>​		部署到硬盘：grub-install   /dev/sda</p>
<p>​		写入引导：grub-mkconfig   -o   /boot/grub/grub.cfg</p>
<p>​		退出当前系统：exit</p>
<p>​		重启：reboot</p>
<p>​		<em><strong>历经千辛万苦，终于成功启动</strong></em></p>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201014145256240.png?origin=typora" alt="image-20201014145256240" loading="lazy"></figure>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/m9qF680b6/">https://zhiyuandnc.github.io/m9qF680b6/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（七）]]></title>
        <id>https://zhiyuandnc.github.io/vLqK58UZf/</id>
        <link href="https://zhiyuandnc.github.io/vLqK58UZf/">
        </link>
        <updated>2022-02-25T05:36:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一">一、</h2>
<h3 id="1-软件下载及安装方式">1. 软件下载及安装方式</h3>
<ul>
<li>
<p>1.1 源码安装</p>
<ul>
<li>
<p>1.1.1 原理：将软件原始代码（C/C++）下载下来，将其编译后安装使用</p>
</li>
<li>
<p>1.1.2 源码文件：编写者使用C或C++等语言编写的原始代码文件</p>
</li>
<li>
<p>1.1.3 源码文件使用.tar.gz或.tar.bz2打包成压缩文件</p>
</li>
<li>
<p>1.1.4 源码安装过程：</p>
<ul>
<li>① 下载解压源码压缩包</li>
<li>② 分析软件安装环境</li>
<li>③ 编译软件</li>
<li>④ 安装软件</li>
</ul>
</li>
<li>
<p>1.1.5 源码安装特点：</p>
<ul>
<li>
<p>① 源码包可移植性好，与待安装软件的工作环境依赖性不大</p>
</li>
<li>
<p>② 由于有编译过程，其代码运行效率高，是对当前使用者工作环境的 “量体裁衣”</p>
</li>
<li>
<p>③ 安装功能可以定制，可以选择需要的功能进行安装使用</p>
</li>
<li>
<p>④ 卸载时，只需删除对应安装目录即可，没有Windows的注册表概念</p>
</li>
<li>
<p>⑤ 安装过程繁琐</p>
</li>
</ul>
</li>
<li>
<p>1.1.6 源码下载解压缩分析</p>
<ul>
<li>
<p>① 下载：wget   URL</p>
</li>
<li>
<p>② 解压缩</p>
<ul>
<li>
<p>.tar.gz格式：tar   xzvf   压缩包名称</p>
</li>
<li>
<p>.tar.bz2格式：tar     xjvf    压缩包名称</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>1.1.7   <em><strong>例1：下载安装Apache源码包</strong></em></p>
<ul>
<li>
<p>① 必须先安装编译器：yum   install    -y     gcc    gcc-c++</p>
</li>
<li>
<p>② 下载Apache源码包：</p>
<p>wget https://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.46.tar.gz</p>
</li>
<li>
<p>③ 解压缩：tar xzvf httpd-2.4.46.tar.gz</p>
</li>
<li>
<p>④ 进入安装目录：cd httpd-2.4.46</p>
</li>
<li>
<p>⑤ 源码包安装文件分析及安装环境分析</p>
<ul>
<li>意义：目录中有configure可执行文件，用于对安装环境进行测试、检测所需库文件、工具文件是否存在、检测依赖性关系、编译器和汇编器与连接器检查</li>
<li>执行方式：./configure</li>
</ul>
</li>
<li>
<p>⑥ 接上例：</p>
<ul>
<li>
<p>检查环境：./configure</p>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201013095105891.png?origin=typora" alt="image-20201013095105891" loading="lazy"></figure>
</li>
<li>
<p>提示缺少apr文件，则安装apr依赖文件：yum install -y apr*</p>
</li>
<li>
<p>重新检查：./configure</p>
</li>
<li>
<p>提示缺少pcre文件，在提供的网站下载</p>
<p>cd ~</p>
<p>wget https://ftp.pcre.org/pub/pcre/pcre-8.00.tar.gz</p>
</li>
<li>
<p>解压缩pcre后，检查pcre安装环境并安装</p>
<ul>
<li>解压缩：tar xzvf pcre-8.00.tar.gz</li>
<li>进入目录：cd pcre-8.00/</li>
<li>检查pcre安装环境：./configure</li>
<li>编译：make</li>
<li>安装：make   install</li>
</ul>
</li>
<li>
<p>返回上一级目录：cd  ..</p>
</li>
<li>
<p>进入apache目录：cd httpd-2.4.46/</p>
</li>
<li>
<p>再次检查apache安装环境：./configure</p>
</li>
<li>
<p>编译：make</p>
</li>
<li>
<p>安装：make   install</p>
</li>
</ul>
</li>
<li>
<p>⑦ 编译软件</p>
<ul>
<li>作用：对./configure命令生成的makefile文件记录的信息进行编译，生成二进制安装文件、</li>
<li>格式：make</li>
<li>注意：make过程中若报错，需要查看提示信息，根据信息修改，一般为缺少头文件等问题</li>
</ul>
</li>
<li>
<p>⑧ 安装软件</p>
<ul>
<li>根据make命令生成的二进制安装文件进行安装，默认安装目录：/user/local或/user/local/bin目录</li>
<li>方法：make install</li>
</ul>
</li>
<li>
<p>⑨ <em><strong>例2：源码安装python3编译器</strong></em></p>
<ul>
<li>wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz</li>
<li>解压缩：tar xzvf   Python-3.9.0.tgz</li>
<li>进入目录：cd Python-3.9.0</li>
<li>检查安装环境：./configure</li>
<li>安装：yum install  -y  zlib*</li>
<li>编译：make</li>
<li>安装：make  install</li>
</ul>
</li>
<li>
<p>⑩ 注意：</p>
<ul>
<li>可以使用 echo  $? 检查上一步动作是否正常返回，正常返回0</li>
<li>遇到yum进程被占用：kill 进程ID</li>
<li>源码包解压缩后一般会有README和INSTALL文件，一般记录安装注意事项及安装方式</li>
<li>检查安装环境时，可以指定安装目录，格式：./configure -prefilx=目录路径</li>
<li>检查环境与编译和安装可以使用 “并且运算符”（&amp;&amp;）进行连接，按顺序执行：./configure &amp;&amp; make &amp;&amp; make install</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-rpm安装">2. RPM安装</h3>
<ul>
<li>2.1 产生原因：软件制作者在其工作环境下将软件编译完毕后再发布，以此减少安装编译时间，但要求软件环境与编译时环境要相同</li>
<li>2.2 RPM：红冒软件管理器</li>
<li>2.3 RPM安装软件的流程
<ul>
<li>2.3.1 读取RPM软件包头部数据，进行软件依赖性检查</li>
<li>2.3.2 若满足条件则安装软件，否则失败要求</li>
</ul>
</li>
<li>2.4 要求
<ul>
<li>2.4.1 软件安装环境要与打包软件环境一致</li>
<li>2.4.2 必须满足软件依赖性</li>
<li>2.4.3 软件卸载时必须小心，最底层软件不能先卸载</li>
<li>2.4.4 RPM软件包名称解释：
<ul>
<li>例：zip-3.0-11.el7.x86_64.rpm
<ul>
<li>软件名 - 版本号  -  编译次数 - 适用平台</li>
<li>noarch：无平台限制</li>
<li>I386：32位运行平台</li>
<li>x86_64 及 AMD64：64位平台</li>
<li>el7：红帽版本</li>
</ul>
</li>
</ul>
</li>
<li>2.4.5 RPM软件安装方式
<ul>
<li>格式：rpm  -ivh   软件包名称.rpm</li>
<li>参数：
<ul>
<li>-i：安装软件</li>
<li>-v：查看安装信息</li>
<li>-h：查看安装进度</li>
<li>--nodeps：发生安装依赖时，进行强制安装，但安装后可能无法使用</li>
<li>--force：安装时提示已安装，则进行覆盖安装</li>
</ul>
</li>
<li>例1：适用RPM方式安装Nginx
<ul>
<li>下载：wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.8.0-1.el7.ngx.x86_64.rpm</li>
<li>安装：rpm -ivh nginx-1.8.0-1.el7.ngx.x86_64.rpm</li>
</ul>
</li>
<li>例2：手动安装gcc编译器
<ul>
<li>rpm  -e  gcc    rpm   -q   gcc</li>
</ul>
</li>
</ul>
</li>
<li>2.4.6 RPM查询及其他命令
<ul>
<li>rpm  -q  软件包全名：查询指定软件是否安装</li>
<li>rpm  -qa ：查询所有已安装软件</li>
<li>rpm  -qi   软件名：显示已安装软件的详细信息</li>
<li>rpm  -qc  软件名：显示软件的配置文件</li>
<li>rpm  -qd 软件名：显示软件帮助文件</li>
<li>rpm  -ql  软件名：列出软件所有文件与目录</li>
<li>rpm  -e  软件名：卸载软件（卸载时注意依赖性，从最上层软件开始卸载）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-yum软件安装方式">3. yum软件安装方式</h3>
<ul>
<li>
<p>3.1 机制：将编译好的软件放置在yum服务器中，并将这些软件的依赖性信息记录下来形成表格组成数据库，用户安装软件时会向网络中的yum服务器下载对应依赖数据库并与本机rpm数据库进行比较，最后一同下载全部软件进行安装，自动解决依赖性问题</p>
</li>
<li>
<p>3.2 yum软件仓库：记录软件依赖性信息的数据库</p>
</li>
<li>
<p>3.3 修改yum源</p>
<ul>
<li>作用：Centos系统默认的yum仓库网址服务器位于国外，下载速度过慢，应将其修改为国内的yum仓库地址</li>
<li>方法：
<ul>
<li>删除yum配置文件目录：rm  -rf  /etc/yum.repos.d</li>
<li>重新建立该目录：mkdir   /etc/yum.repos.d</li>
<li>进入目录：cd  /etc/yum.repos.d</li>
<li>下载网易开源镜像站配置文件：wget  http://mirrors.163.com/.help/CentOS7-Base-163.repo</li>
<li>清除yum缓存：yum clean all</li>
<li>重新建立yum缓存：yum makecache</li>
</ul>
</li>
</ul>
</li>
<li>
<p>3.4 安装软件：yum install -y  软件列表</p>
</li>
<li>
<p>3.5 升级软件：yum update -y  软件列表</p>
</li>
<li>
<p>3.6 卸载软件：yum  remove  软件名</p>
</li>
<li>
<p>3.7 例：yum install http tomcat  -y</p>
</li>
<li>
<p>3.8 安装带有URL的rpm包：</p>
<p>yum  install  https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/9662/wps-office-11.1.0.9662-1.x86_64.rpm</p>
</li>
<li>
<p>3.9 yum配置文件分析</p>
<ul>
<li>
<p>存储路径：/etc/yum.repos.d/CentOS-Base.repo</p>
</li>
<li>
<p>分析：</p>
<ul>
<li>[base]：表示yum软件仓库名，[]不能省略，内容可以自行设置</li>
<li>name：描述软件仓库的意义，可省略</li>
<li>baseurl：yum仓库服务器地址，非常重要</li>
<li>enabled=1：是否启用，1启用，0不启用</li>
<li>gpgcheck=1：检查数字签名，0不检查</li>
<li>gpgkey：检查数字签名的公钥，gpgcheck=0时可省略</li>
</ul>
</li>
<li>
<p>使用本地光盘制作yum仓库</p>
<ul>
<li>
<p>作用：当本地无网络时，安装软件可以使用本地DVD光盘作为软件源</p>
</li>
<li>
<p>步骤：</p>
<ul>
<li>
<p>挂载光盘：mount    /dev/sr0   /media</p>
<p>​					cd   /etc/yum.repos.d</p>
<p>​					mv  CentOS7-Base-163.repo   CentOS7-Base-163.repo.back</p>
</li>
<li>
<p>新建文件：vim   DVD.repo</p>
</li>
<li>
<p>输入以下内容</p>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/image-20201013154921520.png?origin=typora" alt="image-20201013154921520" loading="lazy"></figure>
</li>
<li>
<p>保存并退出</p>
</li>
<li>
<p>清除缓存：yum  clean  all</p>
</li>
<li>
<p>新建缓存：yum   makecache</p>
</li>
<li>
<p>查看是否启用：yum  repolist  all</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/vLqK58UZf/">https://zhiyuandnc.github.io/vLqK58UZf/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（六）]]></title>
        <id>https://zhiyuandnc.github.io/bjTsu6fKf/</id>
        <link href="https://zhiyuandnc.github.io/bjTsu6fKf/">
        </link>
        <updated>2022-02-23T05:31:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-vim编辑器的使用">一、vim编辑器的使用</h2>
<h3 id="1-vim是vi编辑器的升级版">1. vim是vi编辑器的升级版</h3>
<h3 id="2-vim的三种模式">2. vim的三种模式</h3>
<blockquote>
<p>2.1 命令模式：又称为浏览模式，可以控制光标移动、删除、复制、粘贴等工作</p>
</blockquote>
<blockquote>
<p>2.2 编辑模式：插入模式，可以进行正文编辑</p>
</blockquote>
<blockquote>
<p>2.3 末行模式：保存、退出、查询等工作</p>
</blockquote>
<h3 id="3-vim进入顺序及方法">3. vim进入顺序及方法</h3>
<blockquote>
<p>3.1 默认进入：命令模式</p>
</blockquote>
<blockquote>
<p>3.2 命令模式下点击键盘 “i” 键进入编辑模式，点击ESC键回到命令模式</p>
</blockquote>
<blockquote>
<p>3.3 命令模式下点击冒号进入末行模式，末行模式下点击ESC键回到命令模式</p>
</blockquote>
<blockquote>
<p>3.4 顺序图：</p>
</blockquote>
<blockquote>
<p>3.5 编辑模式和末行模式不可以相互进入</p>
</blockquote>
<h3 id="4-创建文件的三种方式">4. 创建文件的三种方式</h3>
<blockquote>
<p>touch  f1</p>
<p>vim      f2</p>
<p>echo  “China”   &gt;   f3</p>
</blockquote>
<h3 id="5-命令模式下快捷键">5. 命令模式下快捷键</h3>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">yy</td>
<td style="text-align:left">复制本行</td>
</tr>
<tr>
<td style="text-align:center">5yy</td>
<td style="text-align:left">复制从光标开始的下5行</td>
</tr>
<tr>
<td style="text-align:center">dd</td>
<td style="text-align:left">剪切（删除）本行</td>
</tr>
<tr>
<td style="text-align:center">3dd</td>
<td style="text-align:left">剪切（删除）从光标开始的下3行</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td style="text-align:left">将之前剪切或复制的内容进行粘贴</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">定位本行行首</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:left">定位本行行尾</td>
</tr>
<tr>
<td style="text-align:center">GG</td>
<td style="text-align:left">定位文本最后一行</td>
</tr>
<tr>
<td style="text-align:center">gg</td>
<td style="text-align:left">定位文本第一行</td>
</tr>
<tr>
<td style="text-align:center">（</td>
<td style="text-align:left">定位到段落首部</td>
</tr>
<tr>
<td style="text-align:center">）</td>
<td style="text-align:left">定位到段落尾部</td>
</tr>
<tr>
<td style="text-align:center">数字G</td>
<td style="text-align:left">定位第几行</td>
</tr>
<tr>
<td style="text-align:center">数字→</td>
<td style="text-align:left">定位第几列</td>
</tr>
<tr>
<td style="text-align:center">ZZ</td>
<td style="text-align:left">保存并退出</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:left">撤销上一步动作</td>
</tr>
</tbody>
</table>
<h3 id="6-末行模式下的快捷键">6. 末行模式下的快捷键</h3>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">作用</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:wq</td>
<td style="text-align:center">保存并退出</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:w  新文件存储路径</td>
<td style="text-align:center">另存为</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:q</td>
<td style="text-align:center">不保存退出</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:q!</td>
<td style="text-align:center">强制退出</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:e!</td>
<td style="text-align:center">将文件恢复到初始状态（撤销所有操作）</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:set nu</td>
<td style="text-align:center">显示行号</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:数字</td>
<td style="text-align:center">跳转到某行</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:/字符串</td>
<td style="text-align:center">检索字符串</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">检索后点击n</td>
<td style="text-align:center">依次定位所有检索关键字</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">:命令</td>
<td style="text-align:center">打开文件时执行其他命令</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="7-编辑系统主机名">7. 编辑系统主机名：</h3>
<blockquote>
<p>vim /etc/hostname</p>
</blockquote>
<h3 id="8-文本中所有行全部注释方法">8. 文本中所有行全部注释方法</h3>
<ul>
<li>开启大写状态</li>
<li>点击Ctrl+V</li>
<li>使用方向键由上到下选择所有行</li>
<li>点击 “ I ”（为大写I）</li>
<li>输入 “#”</li>
<li>点击ESC键</li>
</ul>
<h3 id="9-编辑网卡配置文件设置静态ip">9. 编辑网卡配置文件，设置静态IP</h3>
<ul>
<li>vim  /etc/sysconfig/network-scripts/ifcfg-ens33</li>
<li>将BOOTPROTO=dhcp修改为BOOTPROTO=static</li>
<li>增加以下几行</li>
<li>IPADDR=192.168.0.10（IP地址）</li>
<li>NETMASK=255.255.255.0（子网掩码）</li>
<li>GATEWAY=192.168.0.1（网关）</li>
<li>DNS1=114.114.114.114（域名解析服务器地址）</li>
<li>保存并退出</li>
<li>重启网卡：service   network   start</li>
<li>测试：ping  www.baidu.com</li>
</ul>
<h3 id="10-vim的异常处理">10. vim的异常处理</h3>
<ul>
<li>
<p>例：vim  test</p>
<p>​		点击 i 键输入 “china”</p>
<p>​		保存并退出</p>
<p>​		vim   test</p>
<p>​		点击 i 键输入 “china”</p>
<p>​		点击ESC键</p>
<p>​		按下Ctrl+Z键强制中断，再次打开vim会有异常报错</p>
</li>
<li>
<p>异常报错的原因：</p>
<ul>
<li>原因1：编辑过程中，异常中断（断电等）</li>
<li>原因2：编辑过程中，有他人或程序正在或尝试打开编辑文件</li>
</ul>
</li>
<li>
<p>解决方法：</p>
<ul>
<li>点击R键回车修复文件</li>
<li>继续编辑后保存并退出</li>
<li>删除缓存文件：
<ul>
<li>ls  -a</li>
<li>rm  -f   .test.swp</li>
</ul>
</li>
<li>再次打开无报错</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/bjTsu6fKf/">https://zhiyuandnc.github.io/bjTsu6fKf/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（五）]]></title>
        <id>https://zhiyuandnc.github.io/13bSfXXJ9/</id>
        <link href="https://zhiyuandnc.github.io/13bSfXXJ9/">
        </link>
        <updated>2022-02-20T05:17:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-raid与lvm">一、RAID与LVM</h2>
<h3 id="1-raid">1. RAID</h3>
<ul>
<li>
<p>作用：RAID独立磁盘冗余阵列，使用多块硬盘，组成大容量的硬盘组，将数据分成多个片段同时进行读写，以提高读写速度，并通过冗余备份实现数据安全性</p>
</li>
<li>
<p>RAID0</p>
<ul>
<li>原理：将至少两块硬盘通过硬件或软件方式 “串联” 起来，组成一个大的硬盘卷组，将数据一次写入各个硬盘中</li>
<li>图：</li>
<li>特点
<ul>
<li>优点：数据同步传输，读取/写入分开，性能提升较大</li>
<li>缺点：任意一块硬盘损坏，整个系统数据无法使用</li>
<li>硬盘使用率100%，至少2块硬盘才可组建</li>
</ul>
</li>
</ul>
</li>
<li>
<p>RAID1</p>
<ul>
<li>原理：把至少两块硬盘 “并联” 起来，写入数据时，数据同时写入到另一硬盘中</li>
<li>图：</li>
<li>特点
<ul>
<li>优点：使用硬盘镜像功能，提高数据安全性</li>
<li>缺点：硬盘利用率50%，使用两块硬盘，一块存储，一块备份，成本较大</li>
</ul>
</li>
</ul>
</li>
<li>
<p>RAID5</p>
<ul>
<li>产生原因：兼顾读写速度及数据安全，是一种折中方式</li>
<li>原理：至少使用三块硬盘，将数据分化存储到不同硬盘中，硬盘中必须存储其他硬盘的校验数据</li>
<li>图：</li>
<li>特点：
<ul>
<li>优点：兼顾性能，通过 “奇偶校验” 来替代 “镜像备份”</li>
<li>缺点：硬盘数据安全性较低，硬盘使用率（n-1）*n，硬盘数据出现问题会自动校验恢复</li>
</ul>
</li>
</ul>
</li>
<li>
<p>RAID10（主流）</p>
<ul>
<li>本质：RAID1+RAID0</li>
<li>原理：至少需要四块硬盘，先制作两两硬盘的RAID1阵列，以保证数据安全性，在两两制作RAID0以提高读写性能</li>
</ul>
</li>
<li>
<p>mdadm命令</p>
<ul>
<li>
<p>作用：管理系统中的RAID磁盘阵列</p>
</li>
<li>
<p>格式：mdadm  -模式参数    RAID设备文件名    -性能参数    磁盘成员文件名</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>-C：创建RAID</li>
<li>-D：查看RAID详细信息</li>
<li>-Q：查看摘要信息</li>
<li>-S：停止RAID工作</li>
<li>-a：检测设备名称，添加新硬盘</li>
<li>-n：指定硬盘数量</li>
<li>-l：指定RAID级别</li>
<li>-v：显示过程</li>
<li>-f：模拟设备损坏</li>
<li>-r：移除RAID中的硬盘设备</li>
</ul>
</li>
<li>
<p>例：创建RAID10</p>
<ul>
<li>
<p>mdadm  -Cv  /dev/md0   -a yes  -n  4   -l  10   /dev/sdb   /dev/sdc    /dev/sdd    /dev/sde</p>
</li>
<li>
<p>分析</p>
<p>-Cv：创建RAID并显示过程</p>
<p>/dev/md0：创建的RAID设备文件名</p>
<p>-a   yes：检测RAID设备名并确认</p>
<p>-n    4：参与制作的硬盘个数</p>
<p>-l     10：RAID级别为RAID10</p>
<p>最后为参与制作RAID10的硬盘文件名</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201011165519217.png?origin=typora" alt="image-20201011165519217" loading="lazy"></figure>
<ul>
<li>格式化：mkfs.xfs   /dev/md0</li>
<li>建立挂载点目录：mkdir   -p   /RAID</li>
<li>挂载RAID设备：mount /dev/md0 /RAID</li>
<li>查看RAID信息：mdadm   -D   /dev/md0</li>
<li>开机挂载：vim   /etc/fstab</li>
<li>添加新行：/dev/md0    /RAID    xfs      defaults     0      0</li>
<li>reboot重启</li>
<li>df -h查看信息</li>
</ul>
</li>
<li>
<p>RAID10 制作小结</p>
<ul>
<li>
<p>mdadm 命令制作</p>
<p>mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde</p>
</li>
<li>
<p>mkfs.xfs 格式化</p>
</li>
<li>
<p>建立挂载点目录</p>
</li>
<li>
<p>mount 挂载</p>
</li>
<li>
<p>vim  /etc/fstab 开机挂载</p>
</li>
<li>
<p>mdadm   -D   查看信息</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>解散当前RAID</p>
<ul>
<li>注意：在生产环境中若要取消RAID，必须先进行数据备份，否则已存在数据无法使用</li>
<li>第一步：备份数据</li>
<li>第二步：取消挂载状态 umount   /dev/md0</li>
<li>第三步：删除开机挂载信息</li>
<li>第四步：停止 RAID10 mdadm   -S   /dev/md0</li>
<li>第五步：重启 reboot</li>
</ul>
</li>
<li>
<p>RAID损坏修复功能</p>
<ul>
<li>模拟某个硬盘损坏：mdadm   /dev/md0   -f   /dev/sdb</li>
<li>查看信息：mdadm   -D   /dev/md0</li>
<li>卸载RAID：umount   /RAID</li>
<li>添加新硬盘：mdadm   /dev/md0  -a  /dev/sdf</li>
<li>查看信息：mdadm   -D   /dev/md0</li>
</ul>
</li>
<li>
<p>RAID备份技术</p>
<ul>
<li>
<p>原理：在RAID10中添加一块大容量硬盘，通过新硬盘进行备份数据，防止2块硬盘同时故障，若某块硬盘故障，备份盘会同步恢复，无需人工干预</p>
</li>
<li>
<p>例：创建RAID10+备份盘阵列系统</p>
<ul>
<li>
<p>创建RAID10+备份盘：</p>
<p>mdadm -Cv /dev/md1 -a yes -n 4 -l 10 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf</p>
<p>注意：-x  1表示备份盘  ，且为1块硬盘，一般命令的最后一个硬盘为备份盘</p>
</li>
<li>
<p>查看信息：mdadm -D /dev/md1</p>
</li>
<li>
<p>格式化：mkfs.ext4  /dev/md1</p>
</li>
<li>
<p>模拟硬盘损坏：mdadm /dev/md1  -f  /dev/sdb</p>
</li>
<li>
<p>注意：/dev/sdf会自动补上，并且自动同步数据</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-lvm逻辑卷管理器">2. LVM逻辑卷管理器</h3>
<ul>
<li>
<p>产生原因：硬盘分区及RAID部署后再修改空间大小时就十分不方便，甚至数据会丢失，用户需要动态灵活调整硬盘分区大小时，需要通过LVM技术实现</p>
</li>
<li>
<p>原理：LVM在磁盘分区与文件系统之间添加一个逻辑层，以提供一个抽象的卷组，使得管理者可以忽略底层磁盘布局，从而实现对分区的灵活调整</p>
</li>
<li>
<p>图：</p>
</li>
<li>
<p>分析</p>
<ul>
<li>PE：数据基本块，默认为4MB大小</li>
<li>PV：物理卷，由整个硬盘或分区组成</li>
<li>VG：卷组，由一个或多个物理卷组成</li>
<li>LV：逻辑卷，从卷组中切割出的空间，用于创建文件系统，供用户使用</li>
</ul>
</li>
<li>
<p>命令：</p>
<table>
    <tr>
        <th>功能/命令</th>
        <th>物理卷（PV）</th>
        <th>卷组（VG）</th>
        <th>逻辑卷（LV）</th>
    </tr>
    <tr>
    	<td>扫描</td>
        <td>pvscan</td>
        <td>vgscan</td>
        <td>lvscan</td>
    </tr>
    <tr>
    	<td>建立</td>
        <td>pvcreate</td>
        <td>vgcreate</td>
        <td>lvcreate</td>
    </tr>
    <tr>
    	<td>显示</td>
        <td>pvdisplay</td>
        <td>vgdisplay</td>
        <td>lvdisplay</td>
    </tr>
    <tr>
    	<td>删除</td>
        <td>pvremove</td>
        <td>vgremove</td>
        <td>lvremove</td>
    </tr>
    <tr>
    	<td>扩大</td>
        <td>无</td>
        <td>vgextend</td>
        <td>lvextend</td>
    </tr>
    <tr>
    	<td>缩小</td>
        <td>无</td>
        <td>vgreduce</td>
        <td>lvreduce</td>
    </tr>
</table>
</li>
<li>
<p>LV使用过程</p>
<ul>
<li>
<p>将硬盘设置为物理卷 -&gt; 创建卷组 -&gt; 将物理卷加入卷组 -&gt; 切割指定大小的逻辑卷 -&gt; 格式化逻辑卷 -&gt; 创建挂载目录 -&gt; 挂载逻辑卷 -&gt; 添加开机挂载项</p>
</li>
<li>
<p>例1：系统中添加两个硬盘，创建物理卷及卷组，划分150MB的逻辑卷并格式化挂载使用</p>
<ul>
<li>
<p>创建物理卷： pvcreate /dev/sdb /dev/sdc</p>
</li>
<li>
<p>创建卷组并将物理卷加入：vgcreate /dev/VG1 /dev/sdb /dev/sdc</p>
</li>
<li>
<p>显示卷组信息：vgdisplay /dev/VG1</p>
</li>
<li>
<p>切割150MB的逻辑卷：lvcreate -n  lv1  -L 150M /dev/VG1</p>
<blockquote>
<p><em><strong>注意：lv1逻辑卷默认路径为卷组目录，使用相对路径即可</strong></em></p>
</blockquote>
</li>
<li>
<p>查看逻辑卷信息：lvdisplay /dev/VG1/lv1</p>
</li>
<li>
<p>格式化逻辑卷：mkfs.xfs   /dev/VG1/lv1</p>
</li>
<li>
<p>创建挂载目录：mkdir -p /lvm1</p>
</li>
<li>
<p>挂载：mount  /dev/VG1/lv1   /lvm1</p>
</li>
<li>
<p>开机挂载：添加新行  /dev/VG1/lv1   /lvm1   xfs     defaults    0    0</p>
</li>
</ul>
</li>
<li>
<p>例2：基于上例，划分出200MB的逻辑卷使用</p>
<ul>
<li>
<p>划分200M的lv：lvcreate   -n   lv2   -l   50   /dev/VG1</p>
<blockquote>
<p><em><strong>注意：-n为新建参数，-l为PE（4MB）的个数，-L为实际容量</strong></em></p>
</blockquote>
</li>
<li>
<p>格式化：mkfs.xfs   /dev/VG1/lv2</p>
</li>
<li>
<p>建立挂载点目录：mkdir -p /lvm2</p>
</li>
<li>
<p>挂载：mount   /dev/VG1/lv2   /lvm2</p>
</li>
<li>
<p>开机挂载：/dev/VG1/lv2    /lvm2     xfs     defaults    0     0</p>
</li>
</ul>
</li>
<li>
<p>逻辑卷的扩容</p>
<ul>
<li>过程：
<ul>
<li>卸载设备 -&gt; 扩容到指定容量 -&gt; <strong>重新格式化</strong> -&gt; 重新挂载</li>
</ul>
</li>
<li>例：对lv1逻辑卷扩容到300M
<ul>
<li>查看lv1信息：lvdisplay /dev/VG1/lv1</li>
<li>卸载设备：umount   /dev/VG1/lv1</li>
<li>扩容：lvextend  -L   300M   /dev/VG1/lv1</li>
<li>格式化：mkfs.xfs    -f    /dev/VG1/lv1</li>
<li>重新挂载：mount   /dev/VG1/lv1   /lvm1</li>
<li>查看信息：lvdisplay   /dev/VG1/lv1</li>
</ul>
</li>
<li>注意：
<ul>
<li>扩容前必须先卸载设备</li>
<li>扩容时注意容量单位换算（-L与-l的区别）</li>
<li>扩容后未格式化，则容量不变</li>
</ul>
</li>
</ul>
</li>
<li>
<p>逻辑卷的缩容</p>
<ul>
<li>
<p>原则：相对扩容，逻辑卷缩容有风险，需提前备份，缩容前需对逻辑卷进行文件系统完整性检查，以保证数据安全</p>
</li>
<li>
<p>过程：</p>
<ul>
<li>卸载设备 -&gt; 文件完整性检查 -&gt; 缩容 -&gt; <strong>重新格式化</strong> -&gt; 重新挂载</li>
</ul>
</li>
<li>
<p>例：同上例，对lv2缩容到100MB</p>
<ul>
<li>卸载设备：umount   /dev/VG1/lv2</li>
<li>文件完整性检查：xfs_repair  -n  /dev/VG1/lv2</li>
<li>缩容：lvreduce -l 25 /dev/VG1/lv2（需要输入y确认，-l   25为物理块个数）</li>
<li>查看信息：lvdisplay /dev/VG1/lv2</li>
<li>重新强制格式化：mkfs.xfs -f /dev/VG1/lv2</li>
<li>挂载：mount  /dev/VG1/lv2   /lvm2</li>
<li>查看信息：lsblk</li>
</ul>
</li>
</ul>
</li>
<li>
<p>删除逻辑卷</p>
<ul>
<li>删除顺序：逻辑卷  -&gt;  卷组  -&gt;  物理卷（顺序不能错乱）</li>
<li>注意：
<ul>
<li>删除前必须备份数据</li>
<li>删除时需要输入“y”来确认</li>
</ul>
</li>
<li>过程：
<ul>
<li>卸载设备 -&gt; 清除fstab开机挂载中的对应数据 -&gt;  lvremove删除逻辑卷 -&gt; vgremove删除卷组 -&gt; pvremove删除物理卷</li>
<li>例：将上例所有的LVM数据删除
<ul>
<li>卸载：umount  /dev/VG1/lv1           umount   /dev/VG1/lv2</li>
<li>清除fstab对应信息：vim  /etc/fstab   删除对应行</li>
<li>删除逻辑卷：lvremove    /dev/VG1/lv1           lvremove   /dev/VG1/lv2（输入y确认）</li>
<li>删除卷组：vgremove   /dev/VG1</li>
<li>删除物理卷：pvremove   /dev/sdb    /dev/sdc（取消硬盘对物理卷技术的支持）</li>
<li>查看信息：lsblk</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/13bSfXXJ9/">https://zhiyuandnc.github.io/13bSfXXJ9/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（四）]]></title>
        <id>https://zhiyuandnc.github.io/iKIiXSumE/</id>
        <link href="https://zhiyuandnc.github.io/iKIiXSumE/">
        </link>
        <updated>2022-02-18T05:12:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-磁盘管理">一、 磁盘管理</h2>
<h3 id="1-硬盘命名规则">1. 硬盘命名规则</h3>
<ul>
<li>名称：
<ul>
<li>硬盘：/dev/sd[a-p]</li>
<li>光盘：/dev/sr0   /dev/cdrom</li>
<li>打印机：/dev/lp[0-15]</li>
</ul>
</li>
<li>硬盘命名分析
<ul>
<li>硬盘名称以sd开头</li>
<li>使用了a-p代表16块不同的硬盘</li>
<li>主分区编号为：1   2   3    4</li>
<li>逻辑分区：从5开始</li>
<li>例：/dev/sda5：表示第一块硬盘的第一个逻辑分区</li>
<li>例：/dev/sdb2：表示第二块硬盘的第二个主分区</li>
</ul>
</li>
</ul>
<h3 id="2-添加新硬盘">2. 添加新硬盘</h3>
<ul>
<li>关闭系统</li>
<li>编辑虚拟机设置</li>
<li>点击“添加”</li>
<li>选择硬盘类型</li>
<li>选择“SCSI”类型</li>
<li>创建新虚拟磁盘</li>
<li>设置容量（默认：20GB），将虚拟磁盘存储为单个文件</li>
<li>命名（默认）</li>
<li>完成</li>
</ul>
<h3 id="3-分区格式">3. 分区格式</h3>
<ul>
<li>
<p>MBR（主引导记录区）分区格式</p>
<ul>
<li>MBR数据存储于第0磁道第1扇区</li>
<li>作用：存储硬盘一系列分区参数及一段引导程序</li>
<li>组成：
<ul>
<li>原则：MBR所在扇区共512B
<ul>
<li>MBR信息：446B</li>
<li>DPT：硬盘分区表，64B</li>
<li>最后两个字节为结束标志</li>
<li>构成图：</li>
</ul>
</li>
</ul>
</li>
<li>MBR分区特点：
<ul>
<li>主分区（P）：不能超过4个</li>
<li>扩展分区（E）：只能有1个</li>
<li>P+E最多4个</li>
<li>逻辑分区（L）：由扩展分区进行划分</li>
<li>一般使用：PPP+E的结构</li>
</ul>
</li>
</ul>
</li>
<li>
<p>GPT（磁盘分区表）分区格式</p>
<ul>
<li>
<p>产生原因</p>
<ul>
<li>MBR分区模式最高支持磁盘容量为2.2TB</li>
<li>MBR分区表中没有备份机制，若分区表被删除，则硬盘数据相当于丢失</li>
<li>MBR存储相关信息只有446B，无法存储较多内容</li>
</ul>
</li>
<li>
<p>分区格式</p>
<ul>
<li>GPT分区使用LBA（逻辑区块）记录磁盘信息</li>
<li>LBA区块大小为512B-4K，支持68个LBA区块，其中前34个LBA区块记录分区信息，后34个LBA区块记录备份信息</li>
</ul>
</li>
<li>
<p>LBA区块作用</p>
<ul>
<li>LBA0：与MBR分区功能相同，并存储MBR分区标志或GPT分区标志</li>
<li>LBA1：存储GPT表头信息</li>
<li>LBA2-LBA33：记录分区信息，一个LBA区块可记录4个分区信息，共32个分区128个分区信息（32×4=128）</li>
</ul>
</li>
<li>
<p>GPT分区特点</p>
<ul>
<li>GPT不再区分主分区和扩展分区，所有分区都是主分区，理论上可以划分128个主分区</li>
<li>GPT分区理论上最大支持磁盘空间为8ZB（1ZB=2<sup>30</sup>TB）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-常见磁盘命令">4. 常见磁盘命令</h3>
<ul>
<li>
<p>df命令：</p>
<ul>
<li>作用：列出磁盘使用量</li>
<li>格式：df   -参数   目录名/文件名</li>
<li>参数
<ul>
<li>-a：列出所有文件系统</li>
<li>-h：以容易理解的方式列出信息（KB、MB、GB）</li>
</ul>
</li>
<li>常用：df    -ah</li>
<li>信息解释：
<ul>
<li>文件系统：文件系统名称及所在分区位置</li>
<li>已使用空间容量：不要超过90%的警戒线</li>
</ul>
</li>
</ul>
</li>
<li>
<p>du 命令：</p>
<ul>
<li>作用：查看文件或目录占用硬盘空间容量</li>
<li>格式：du   -参数   目录名/文件名</li>
<li>常用参数：du   -ah</li>
</ul>
</li>
<li>
<p>lsblk命令：</p>
<ul>
<li>
<p>作用：列出所有磁盘信息</p>
</li>
<li>
<p>格式：lsblk   -参数   设备文件名</p>
</li>
<li>
<p>信息解释</p>
<ul>
<li>NAME：设备名称</li>
</ul>
</li>
<li>
<p>MAJ:MIN：主要:次要设备代码</p>
<ul>
<li>RM：是否可卸载</li>
<li>SIZE：容量</li>
<li>RO：是否只读</li>
<li>TYPE：设备类型（disk磁盘，part分区等）</li>
<li>MOUNTPOINT：挂载点</li>
</ul>
</li>
</ul>
</li>
<li>
<p>blkid命令</p>
<ul>
<li>
<p>作用：显示设备的UUID值和文件系统名称</p>
</li>
<li>
<p>格式：blkid   设备名</p>
</li>
<li>
<p>UUID：全局单一标识符，系统给所有设备分配的唯一编号，以便于区别设备</p>
</li>
</ul>
</li>
</ul>
<h3 id="5-硬盘分区">5. 硬盘分区</h3>
<ul>
<li>parted 命令
<ul>
<li>作用：显示硬盘分区表及类型</li>
<li>格式：parted  设备名   print</li>
<li>注意：msdos表示MBR格式的分区模式</li>
<li>例：parted /dev/sda print</li>
</ul>
</li>
<li>fdisk命令
<ul>
<li>格式：fdisk   设备名</li>
<li>注意
<ul>
<li>fdisk命令只针对MBR分区格式进行分区</li>
<li>fdisk命令之后只能识别硬盘名不能书写分区数字</li>
</ul>
</li>
<li>例：使用fdisk命令对/dev/sdb硬盘分区，格式：P+P+P+E（L+L）
<ul>
<li>分区命令：n（新建）、p（浏览分区列表）、d（删除）、w（保存退出）、q（退出）</li>
<li>分区编号直接回车即可</li>
<li>起始扇区直接回车即可</li>
<li>last扇区：输入容量（+数字单位，如+5G）</li>
<li>若将剩余空间全部分配，则last扇区处直接回车</li>
</ul>
</li>
<li>例：fdisk  命令分区，格式：P+P+E（L+L+L）</li>
</ul>
</li>
<li>gdisk命令
<ul>
<li>注意：gdisk命令针对GPT分区格式，若在已存在的MBR分区格式下添加GPT新分区，则所有数据会全部丢失，切记一块硬盘中，fdisk与gdisk不能混用</li>
<li>格式：gdisk   设备名</li>
<li>例：使用gdisk对/dev/sdc进行分区，格式P+P+P
<ul>
<li>gdisk  /dev/sdc</li>
<li>输入n新建分区</li>
<li>回车，设置为默认的分区编号</li>
<li>起始扇区回车</li>
<li>终止扇区输入+4G</li>
<li>编号默认直接回车</li>
<li>重复上述过程</li>
<li>输入p查看分区列表</li>
<li>输入w回车输入y回车保存并退出</li>
<li>注意：实际工作中，硬盘分区应保留一定未分区自由空间，以备将来分区空间不足扩容时或添加新分区时使用</li>
</ul>
</li>
<li>例：使用gdisk分区，P+P+P+P
<ul>
<li>gdisk  /dev/sdc</li>
<li>输入n新建分区</li>
<li>回车设置为默认的分区编号</li>
<li>起始扇区回车</li>
<li>终止扇区输入+4G</li>
<li>重复上述过程</li>
<li>输入p查看分区列表</li>
<li>输入w回车输入y回车保存并退出</li>
<li>lsblk  /dev/sdc  查看分区信息</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-分区格式化">6. 分区格式化</h3>
<ul>
<li>作用：在硬盘分区上建立文件系统</li>
<li>格式化：若硬盘空间为一张白纸，分区是对其进行裁剪，对白纸进行方格绘制称为格式化</li>
<li>EXT2文件系统
<ul>
<li>组成：
<ul>
<li>超级块：又称为“硬盘地图”，记录文件系统的整体信息，如：数据块的总量、使用量等</li>
<li>索引块：记录文件属性，一个文件占用一个inode块，记录文件数据块的编号，默认占用128B，还存储文件的权限信息、账户信息、工作组信息、时间信息、地址信息等</li>
<li>数据块：存储文件真实数据的存储块，容量可划分为1K   2K   4K，一个文件会占用多个数据块。</li>
</ul>
</li>
<li>索引块与数据块的关系
<ul>
<li>索引块大小均为128B</li>
<li>每一个文件只占用一个索引块</li>
<li>文件系统创建的文件容量与索引块的容量有关</li>
<li>一个索引块记录一个数据块号需要4B</li>
</ul>
</li>
<li>当数据块为1K时，最大文件为16GB，文件系统总量为2TB；数据块为2K时，最大文件为256GB，文件系统总量为8TB；数据块为4K时，最大文件为2TB，文件系统总量为16TB</li>
</ul>
</li>
<li>日志文件系统
<ul>
<li>产生原因：文件在写入时由于不明原因出现中断此时会发生文件内容不一致的情况，此时ext2文件系统会进行全盘检查，耗时较长</li>
<li>解决方法：在文件系统中重新规划一个区域为日志区块，专门记录文件修改的信息，简化文件一致性检查，若文件出现问题只检查相应日志区块即可，只修复部分信息，减少耗时</li>
<li>常见日志文件系统：EXT3、EXT4，Centos7默认的文件系统为xfs</li>
</ul>
</li>
<li>Centos7支持的文件系统格式：输入mkfs点击两次tab可查看</li>
<li>xfs格式化命令
<ul>
<li>格式：mkfs.xfs   -参数   设备名</li>
<li>参数：
<ul>
<li>-f：强制格式化，对已存在的文件系统格式化时使用</li>
<li>-b：后跟上block容量，表示格式化时数据块的容量，范围是512B-64KB，但Linux限制为4KB</li>
</ul>
</li>
<li>例：mkfs.xfs   /dev/sdb1</li>
</ul>
</li>
</ul>
<h3 id="7-设备挂载与卸除">7. 设备挂载与卸除</h3>
<ul>
<li>
<p>挂载点：（mount point）：本只是一个目录，该目录是进入磁盘分区的入口</p>
</li>
<li>
<p>挂载：建立目录与分区之间的联系，通过目录进入分区空间并使用</p>
</li>
<li>
<p>注意：</p>
<ul>
<li>单一的文件系统不能被重复挂载到不同的挂载点</li>
<li>单一目录不能重复挂载多个文件系统</li>
<li>作为挂载点目录，应为空目录，若已存在文件，则原有数据会被隐藏</li>
</ul>
</li>
<li>
<p>mount命令</p>
<ul>
<li>格式：mount   -参数  设备名   挂载目录名</li>
<li>-a：依照配置文件（/etc/fstab）的数据将未挂载的设备全部挂载，主要用于测试</li>
<li>例：新建4个目录挂载/dev/sdb的四个分区
<ul>
<li>mkdir   -p    /data/sdb1   /data/sdb2   /data/sdb5   /data/sdb6</li>
<li>mount  /dev/sdb1  /data/sdb1</li>
<li>mount  /dev/sdb2  /data/sdb2</li>
<li>mount  /dev/sdb5  /data/sdb5</li>
<li>mount  /dev/sdb6  /data/sdb6</li>
<li>lsblk  /dev/sdb</li>
</ul>
</li>
<li>挂载光盘：mount   /dev/sr0   /media</li>
</ul>
</li>
<li>
<p>卸载命令</p>
<ul>
<li>
<p>格式：umount   -参数   设备名/挂载点名</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>-f：强制卸载</li>
<li>-l：立即卸载文件系统</li>
<li>-n：不更新/etc/mtab情况下卸载</li>
</ul>
</li>
<li>
<p>例：umount  /dev/sdb1</p>
<p>​        umount  /data/sdb2</p>
</li>
<li>
<p>注意：卸载时，当前目录不能是挂载点目录，必须退出后才可卸载，否则显示设备正忙</p>
</li>
</ul>
</li>
<li>
<p>开机挂载命令</p>
<ul>
<li>
<p>原因：由于手动挂载为临时挂载，系统重启后会自动卸载</p>
</li>
<li>
<p>开机挂载必须修改配置文件实现 /etc/fstab</p>
</li>
<li>
<p>开机挂载挂载原则</p>
<ul>
<li>根目录分区必须先挂载</li>
<li>其他挂载点必须为已建立目录，应遵守系统目录架构原则（FHS）</li>
<li>所有挂载点在同一时间内只能挂载一次</li>
<li>所有分区在同一时间内，只能被挂载一次</li>
</ul>
</li>
<li>
<p>fstab意义解释</p>
<ul>
<li>共6列</li>
<li>第一列：设备名称或UUID值</li>
<li>第二列：挂载点目录</li>
<li>第三列：文件系统</li>
<li>第四列：文件系统参数，默认defaults</li>
<li>第五列：0（不备份），是否备份</li>
<li>第六列：0，是否开机进行扇区检查，xfs文件系统不支持则为0</li>
</ul>
</li>
<li>
<p>例：将/dev/sdb  4个分区进行开机挂载</p>
<ul>
<li>vim  /etc/fstab</li>
<li>点击i键编辑，添加新行</li>
<li>/dev/sdb1    /data/sdb1     xfs     defaults    0       0</li>
<li>保存并退出</li>
<li>mount   -a   进行测试</li>
<li>reboot  重启</li>
<li>lsblk   /dev/sdb</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201011093918020.png?origin=typora" alt="image-20201011093918020" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/image-20201011094556784.png?origin=typora" alt="image-20201011094556784" loading="lazy"></figure>
</li>
<li>
<p>例：添加新硬盘sde，对sde进行如下操作</p>
<ul>
<li>
<p>硬盘进行gdisk分区：P+P+P（3G+5G+6G）</p>
</li>
<li>
<p>对硬盘进行格式化：sde1，sde2为xfs，sde3为ext4</p>
</li>
<li>
<p>新建挂载目录：/mnt/s1    /mnt/s2    /mnt/s3</p>
</li>
<li>
<p>进行开机挂载</p>
</li>
<li>
<p>查看信息</p>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/image-20201011095916866.png?origin=typora" alt="image-20201011095916866" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://pic.zyblog.xyz/img/typora/image-20201011095940249.png?origin=typora" alt="image-20201011095940249" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/image-20201011095957452.png?origin=typora" alt="image-20201011095957452" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://pic.zyblog.xyz/img/typora/image-20201011100348327.png?origin=typora" alt="image-20201011100348327" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="8-大文件挂载为分区">8. 大文件挂载为分区</h3>
<ul>
<li>当硬盘无自由空间，且需要增加新分区，可以将已存在分区的剩余空间中划出一个大容量文件，格式化后挂载为一个分区使用</li>
<li>例：在/dev/sdb1中制作1G大文件挂载为新分区
<ul>
<li>制作大文件：dd if=/dev/zero of=/data/sdb1/loopdev count=1 bs=1G</li>
<li>格式化文件：mkfs.xfs   -f   /data/sdb1/loopdev</li>
<li>建立挂载点目录：mkdir   /data/sdb1/loopdir</li>
<li>挂载大文件：mount   -o  loop   /data/sdb1/loopdev    /data/sdb1/loopdir</li>
<li>查看挂载情况：df  -h</li>
<li>注意：挂载大文件时，参数需增加  -o loop参数</li>
</ul>
</li>
</ul>
<h3 id="9-增加swap交换分区空间">9. 增加swap交换分区空间</h3>
<ul>
<li>
<p>swap：类似于windows的虚拟内存，将一块硬盘中的剩余空间虚拟成 “内存” 使用，从而解决内存不足的问题</p>
</li>
<li>
<p>swap空间大小：4-8GB</p>
</li>
<li>
<p>查看swap空间容量： free  -h</p>
</li>
<li>
<p>创建新分区制作swap空间</p>
<ul>
<li>
<p>使用 gdisk 对  /dev/sdc  创建4个分区，容量（2,3,4,2）</p>
</li>
<li>
<p>使用 gdisk 对  /dev/sdc  添加一个新分区sdc5（2G）</p>
</li>
<li>
<p>格式化分区：mkswap   /dev/sdc5</p>
</li>
<li>
<p>启用生效：swapon   /dev/sdc5</p>
</li>
<li>
<p>查看：free   -h</p>
</li>
<li>
<p>开机挂载swap：必须设置开机挂载，否则重启失效</p>
</li>
<li>
<p>vim   /etc/fstab</p>
</li>
<li>
<p>添加新行：/dev/sdc5   swap    swap    defaults   0      0</p>
</li>
<li>
<p>保存并退出</p>
</li>
<li>
<p>mount   -a 进行测试</p>
</li>
<li>
<p>reboot 重启</p>
</li>
<li>
<p>free   -h 查看是否生效<br>
<img src="https://pic.zyblog.xyz/img/typora/image-20201011111729024.png?origin=typora" alt="image-20201011111729024" loading="lazy"></p>
<figure data-type="image" tabindex="7"><img src="https://pic.zyblog.xyz/img/typora/image-20201011112334216.png?origin=typora" alt="image-20201011112334216" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://pic.zyblog.xyz/img/typora/image-20201011112448197.png?origin=typora" alt="image-20201011112448197" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>创建大文件制作swap空间</p>
<ul>
<li>
<p>原则：由于硬盘没有自由空间，无法添加新分区，则在某分区剩余空间制作大文件并创建成swap空间</p>
</li>
<li>
<p>例：在/dev/sdb5分区中制作2G大文件并生成swap空间</p>
<ul>
<li>
<p>制作大文件：dd   if=/dev/zero   of=/dev/sdb5/swapfile    count=2   bs=1G</p>
</li>
<li>
<p>cd  /data/sdb5</p>
</li>
<li>
<p>ls</p>
</li>
<li>
<p>格式化：mkswap    /data/sdb5/swapfile</p>
</li>
<li>
<p>启用生效：swapon  /data/sdb5/swapfile</p>
</li>
<li>
<p>查看：free  -h</p>
</li>
<li>
<p>配置开机挂载：vim   /etc/fstab</p>
</li>
<li>
<p>添加新行：/data/sdb5/swapfile   swap    swap   defaults   0    0</p>
</li>
<li>
<p>保存退出</p>
</li>
<li>
<p>测试：mount   -a</p>
</li>
<li>
<p>重启：reboot</p>
</li>
<li>
<p>查看：free   -h</p>
<figure data-type="image" tabindex="9"><img src="https://pic.zyblog.xyz/img/typora/image-20201011114145819.png?origin=typora" alt="image-20201011114145819" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>注意：fstab配置文件中，若添加的对象是大文件，则第一列不能使用UUID值</p>
</li>
</ul>
<h3 id="10-软硬链接方式">10. 软硬链接方式</h3>
<ul>
<li>
<p>硬盘文件存储原理：</p>
<ul>
<li>硬盘数据分为两类：用户数据（UserData）与 元数据（MetaData）</li>
<li>用户数据：文件的数据块，存储文件数据的实际空间</li>
<li>元数据：存储文件附加属性，如文件大小，创建时间、所有者等信息</li>
<li>Linux中元数据的inode号（索引节点号）是文件的唯一标识，而非文件名，系统或程序通过inode号寻找正确的文件数据块</li>
<li>图：</li>
</ul>
</li>
<li>
<p>硬链接</p>
<ul>
<li>原理：由于Linux系统允许多个文件指向同一个inode即允许一个文件有多个有效路径名</li>
<li>硬链接本质为指向原始文件的inode指针</li>
<li>查看硬链接方法：
<ul>
<li>ll 文件名</li>
<li>stat   文件名</li>
</ul>
</li>
</ul>
</li>
<li>
<p>建立硬链接方法：</p>
<ul>
<li>
<p>格式：ln   -参数   源文件   目标链接名</p>
</li>
<li>
<p>例：touch  t1.txt</p>
<p>​        echo &quot;Hello World&quot;   &gt;  t1.txt</p>
<p>​		stat  t1.txt</p>
<p>​		ln  t1.txt   t2.txt</p>
<p>​		ln  t1.txt   t3.txt</p>
<p>​		stat  t1.txt</p>
<p>​		cat  t2.txt</p>
<p>​		rm  -rf  t1.txt</p>
<p>​		cat  t3.txt</p>
</li>
<li>
<p>注意：</p>
<ul>
<li>新建文件的硬连接默认为1，即文件名指向数据块</li>
<li>创建多个硬链接后，删除源文件，数据依然可以访问</li>
<li>只有源文件删除且硬链接数为0时，数据相当于删除，不可访问</li>
<li>硬链接不能给目录建立</li>
<li>目录默认带有2个硬链接，实际为目录中的点（.）和点点(..)</li>
<li>硬链接不可以在不同的文件系统中建立，由于inode是当前文件在本文件系统的索引号，只针对本分区空间，所以硬链接不能跨越文件系统</li>
</ul>
</li>
</ul>
</li>
<li>
<p>软链接</p>
<ul>
<li>
<p>原理：是一种符号链接，类似于windows的快捷方式，仅包含所链接的路径名</p>
</li>
<li>
<p>格式：ln   -s   源文件   目标链接名称</p>
</li>
<li>
<p>例：<img src="https://pic.zyblog.xyz/img/typora/image-20201011140855496.png?origin=typora" alt="image-20201011140855496" loading="lazy"></p>
<figure data-type="image" tabindex="10"><img src="https://pic.zyblog.xyz/img/typora/image-20201011141019843.png?origin=typora" alt="image-20201011141019843" loading="lazy"></figure>
</li>
<li>
<p>例：创建软链接，减少访问文件时间</p>
<figure data-type="image" tabindex="11"><img src="https://pic.zyblog.xyz/img/typora/image-20201011141507111.png?origin=typora" alt="image-20201011141507111" loading="lazy"></figure>
</li>
<li>
<p>软硬链接区别</p>
<ul>
<li>
<p>硬链接中源文件与链接文件共用一个inode号，是同一个文件，软链接中源文件与链接文件拥有不同的inode号，是两个不同的文件</p>
</li>
<li>
<p>软链接可以查看链接路径，硬链接不可查看</p>
</li>
<li>
<p>硬链接可以增加链接数，软链接不变</p>
</li>
<li>
<p>文件大小不同，硬链接文件大小与源文件相同</p>
</li>
<li>
<p>软链接可以跨越文件系统或分区</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/iKIiXSumE/">https://zhiyuandnc.github.io/iKIiXSumE/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（三）]]></title>
        <id>https://zhiyuandnc.github.io/xc3aA90Gk/</id>
        <link href="https://zhiyuandnc.github.io/xc3aA90Gk/">
        </link>
        <updated>2022-02-15T04:36:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-文件系统命令">一、文件系统命令</h2>
<h3 id="1-fhs">1. FHS</h3>
<ul>
<li>1.1 FHS：文件系统层次化标准</li>
<li>1.2 拓扑：倒置的树形结构，一切都从根目录（/）开始</li>
<li>1.3 常见一级目录存储文件功能
<ul>
<li>/boot：存储开机所需文件，如：内核、镜像、菜单的配置文件</li>
<li>/dev：以文件的形式存储设备及接口，如：硬盘、光驱等</li>
<li>/bin：存储命令程序及配置文件</li>
<li>/lib：开机时用到的函数及数据</li>
<li>/root：root账户的家目录，相当于~</li>
<li>/var：存储系统产生的日志文件</li>
<li>/media：用于挂载设备（光驱）的目录</li>
<li>/user：存储应用程序的安装目录</li>
<li>/etc：配置文件存储目录</li>
</ul>
</li>
<li>1.4 注意：目录名称区分大小写，FHS意义在于按照功能进行分类存储文件</li>
</ul>
<h3 id="2-文件操作命令">2. 文件操作命令</h3>
<ul>
<li>
<p>2.1 新建目录命令</p>
<ul>
<li>
<p>格式：mkdir  -参数    目录名称</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>-p：创建递归目录（包含下级目录的多级目录）</li>
<li>-m：对新建的目录设置存取权限</li>
</ul>
</li>
<li>
<p>例：</p>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201006155715956.png?origin=typora" alt="image-20201006155715956" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>2.2 新建文件命令</p>
<ul>
<li>
<p>格式：touch   -参数   文件名</p>
</li>
<li>
<p>例1：touch    n{1,2,3,4,5,6,7,8}.txt</p>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/image-20201006160252021.png?origin=typora" alt="image-20201006160252021" loading="lazy"></figure>
</li>
<li>
<p>例2：</p>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/image-20201006162125240.png?origin=typora" alt="image-20201006162125240" loading="lazy"></figure>
</li>
<li>
<p>例3：</p>
<ul>
<li>
<p>touch test.c</p>
</li>
<li>
<p>vim test.c</p>
</li>
<li>
<pre><code class="language-c">#include&lt;stdio.h&gt;
int main(void){
    printf(&quot;Hello World&quot;);
    return 0;
}
</code></pre>
</li>
<li>
<p>gcc test.c</p>
</li>
<li>
<p>ls -a</p>
<figure data-type="image" tabindex="4"><img src="https://pic.zyblog.xyz/img/typora/image-20201006163827628.png?origin=typora" alt="image-20201006163827628" loading="lazy"></figure>
</li>
<li>
<p>./a.out</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.3 删除命令</p>
<ul>
<li>
<p>格式：rm   -参数  文件名</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>
<p>-r：删除目录</p>
</li>
<li>
<p>-f：强制删除，不确认</p>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/image-20201006162615901.png?origin=typora" alt="image-20201006162615901" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.4 pwd命令：显示绝对路径</p>
</li>
<li>
<p>2.5 cp拷贝命令</p>
<ul>
<li>格式：cp  -参数   源文件    目标文件</li>
<li>参数：
<ul>
<li>-r：拷贝目录</li>
<li>-p：保留原始文件属性</li>
<li>-d：若为链接文件，则保留链接文件属性</li>
</ul>
</li>
<li>注意：
<ul>
<li>若目标为目录，则拷贝到目录中</li>
<li>若目标为文件且不存在，则正常拷贝</li>
<li>若目标为文件且名称不同，则改名后拷贝</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.6 mv移动文件命令</p>
<ul>
<li>格式：mv   -参数  源文件   目标文件</li>
<li>注意：
<ul>
<li>若目标为目录，则剪切移动到目录中</li>
<li>若目标为文件，则修改名称（无同名目录）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.7 大容量文件生成命令</p>
<ul>
<li>
<p>格式：dd   if=数据来源  of=新文件名  count=数据块个数  bs=单个块容量</p>
</li>
<li>
<p>功能：按照指定容量制作大文件，数据来源一般为算法设备或光驱</p>
</li>
<li>
<p>if=/dev/zero：zero为可输出指定容量大小的数据0</p>
</li>
<li>
<p>if=/dev/sr0：光驱（cdrom）</p>
</li>
<li>
<p>例：</p>
<ul>
<li>制作400MB大文件：dd        if=/dev/zero         of=xin.txt        count=2       bs=200MB</li>
<li>制作光盘镜像：dd      if=/dev/sr0      of=centos7_x86_64.iso</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.8 file命令</p>
<ul>
<li>作用：查看文件类型</li>
<li>格式：file   文件名</li>
<li>文件类型
<ul>
<li>empty：空文件</li>
<li>ASCII   File：ASCII文件</li>
<li>character    special：字符设备文件</li>
<li>block special：块设备文件</li>
<li>directory：目录</li>
<li>link：链接文件</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.9 cat命令</p>
<ul>
<li>
<p>作用：输出文本内容</p>
</li>
<li>
<p>格式：cat   文件名</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>-n：显示行号</li>
<li>-b：排除空行，非空行显示行号，从1开始显示</li>
</ul>
</li>
<li>
<p>将文件显示内容输出到另一文件</p>
<ul>
<li>touch temp.txt</li>
<li>cat /etc/passwd   &gt;   temp.txt</li>
<li>cat temp.txt</li>
</ul>
</li>
<li>
<p>文档合并：</p>
<figure data-type="image" tabindex="6"><img src="https://pic.zyblog.xyz/img/typora/image-20201007165810521.png?origin=typora" alt="image-20201007165810521" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>2.10 tac命令</p>
<ul>
<li>
<p>作用：倒序查看文件内容</p>
</li>
<li>
<p>格式：tac  文件名</p>
<figure data-type="image" tabindex="7"><img src="https://pic.zyblog.xyz/img/typora/image-20201007170247545.png?origin=typora" alt="image-20201007170247545" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>2.11 more命令</p>
<ul>
<li>作用：翻页查看文件内容，适用于内容较多的文件</li>
<li>格式：more   文件名</li>
<li>参数
<ul>
<li>-s：将输出文件中的空行减少为1个空行</li>
<li>-p：先清屏后显示</li>
<li>-数字：如-10，表示1屏显示10行，包括空行</li>
</ul>
</li>
<li>例：
<ul>
<li>more  -sp  /etc/passwd</li>
<li>more  -5  /etc/passwd</li>
</ul>
</li>
<li>注意：
<ul>
<li>点击空格进行翻页浏览</li>
<li>点击回车进行换行浏览</li>
<li>点击q键退出浏览</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.12 less命令</p>
<ul>
<li>作用：同more，使用键盘上下键浏览</li>
</ul>
</li>
<li>
<p>2.13 head命令</p>
<ul>
<li>作用：显示文本文件的前n行</li>
<li>格式：head   -数字  文件名</li>
</ul>
</li>
<li>
<p>2.14 wc命令</p>
<ul>
<li>
<p>作用：统计文本文件内容的个数</p>
</li>
<li>
<p>格式：wc  -参数    文件名</p>
</li>
<li>
<p>参数</p>
<ul>
<li>-l：显示行数</li>
<li>-w：显示单词数</li>
<li>-c：显示字节数</li>
</ul>
</li>
<li>
<p>不加参数全显示</p>
</li>
<li>
<p>例：显示文件前十行后统计字节数</p>
<figure data-type="image" tabindex="8"><img src="https://pic.zyblog.xyz/img/typora/image-20201007171748647.png?origin=typora" alt="image-20201007171748647" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>2.15 stat命令</p>
<ul>
<li>作用：显示文件的存储信息</li>
<li>格式：stat 文件名</li>
</ul>
</li>
</ul>
<h3 id="3-文件查找命令">3. 文件查找命令</h3>
<ul>
<li>
<p>作用：按照条件查找文件</p>
</li>
<li>
<p>格式：find    查找路径   查找条件   操作</p>
</li>
<li>
<p>查找条件：</p>
<ul>
<li>
<p>文件名称</p>
<ul>
<li>
<p>-name：按照文件名检索，文件名最好加上双引号</p>
<ul>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201008091901205.png?origin=typora" alt="image-20201008091901205" loading="lazy"></li>
</ul>
</li>
<li>
<p>通配符：</p>
<ul>
<li>*：表示任意内容匹配任意次数</li>
<li>？：表示任意内容匹配一次</li>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201008092204622.png?origin=typora" alt="image-20201008092204622" loading="lazy"></li>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201008092255826.png?origin=typora" alt="image-20201008092255826" loading="lazy"></li>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201008092635098.png?origin=typora" alt="image-20201008092635098" loading="lazy"></li>
</ul>
</li>
<li>
<p>以扩展名查询文件</p>
<ul>
<li>
<p>find   /etc   -name   &quot;*.cfg&quot;</p>
<figure data-type="image" tabindex="13"><img src="https://pic.zyblog.xyz/img/typora/image-20201008093035974.png?origin=typora" alt="image-20201008093035974" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://pic.zyblog.xyz/img/typora/image-20201008093054674.png?origin=typora" alt="image-20201008093054674" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>文件属性</p>
<ul>
<li>
<p>-user：按照所有者进行匹配（root账户或普通账户）</p>
<ul>
<li>find   ~   -user   &quot;root&quot;</li>
</ul>
<figure data-type="image" tabindex="15"><img src="https://pic.zyblog.xyz/img/typora/image-20201008093426050.png?origin=typora" alt="image-20201008093426050" loading="lazy"></figure>
<ul>
<li>find   ~   -name   &quot;a*&quot;     -user    &quot;root&quot;（检索以a开头且归属于root账户的文件）</li>
</ul>
<figure data-type="image" tabindex="16"><img src="https://pic.zyblog.xyz/img/typora/image-20201008093547774.png?origin=typora" alt="image-20201008093547774" loading="lazy"></figure>
<ul>
<li>find   /   -name    &quot;*e&quot;   -o   -user   &quot;ZHIYUAN&quot;（检索以e结尾或归属于ZHIYUAN账户的文件）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>设备</p>
<ul>
<li>-type b/d/c/p/l/f：按照文件类型检索（块设备、目录、字符设备、管道设备、链接文件、文本文件）
<ul>
<li>find   /dev   -type   b   （检索块设备文件）</li>
<li>find  ~  -type  d （检索目录）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>权限</p>
<ul>
<li>-perm：按照权限检索</li>
<li>find  /dev  -perm  777</li>
</ul>
</li>
<li>
<p>时间</p>
<ul>
<li>-mtime：按照修改文件时间检索</li>
<li>-atime：按照访问文件时间检索</li>
<li>-ctime：按照修改权限时间检索</li>
<li>注意：-n表示n天以内，+n表示n天以前</li>
<li>例：find / -mtime -10 -empty（检索10以内未修改的空文件）</li>
</ul>
</li>
<li>
<p>容量</p>
<ul>
<li>-size：按照容量来检索（k、M、G）
<ul>
<li>find   /dev   -type   c    -size    -10k（检索/dev目录下的容量小于10k的字符设备文件）</li>
<li>find   /      -size    +100M（检索根目录下容量大于100M的文件）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-文件内容过滤命令">4. 文件内容过滤命令</h3>
<ul>
<li>
<p>作用：在一个文件中按照查找字段进行过滤内容</p>
</li>
<li>
<p>格式：grep   -参数   查找条件   文件名</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>-n：显示检索内容的行号</li>
<li>-i：忽略字母大小写</li>
<li>-v：根据检索关键字进行反向显示</li>
<li>-c：统计符合条件的行数</li>
<li>-A数字：如-A3，显示符合条件的当前行和以下3行，向下遍历（4行）</li>
<li>-B数字：如-B3，显示符合条件的当前行和以上3行，向上遍历（4行）</li>
<li>-C数字：如-C2，显示符合条件的当前行以及上下2行（5行）</li>
</ul>
</li>
<li>
<p>例：</p>
<ul>
<li>检索包含“root” 的行信息：grep  -n   &quot;root&quot;  /etc/passwd</li>
</ul>
<figure data-type="image" tabindex="17"><img src="https://pic.zyblog.xyz/img/typora/image-20201008105652649.png?origin=typora" alt="image-20201008105652649" loading="lazy"></figure>
<ul>
<li>
<p>检索passwd文件中不能登录的信息：grep    -n    “/sbin/nologin”    /etc/passwd</p>
<figure data-type="image" tabindex="18"><img src="https://pic.zyblog.xyz/img/typora/image-20201008110049784.png?origin=typora" alt="image-20201008110049784" loading="lazy"></figure>
</li>
<li>
<p>检索passwd文件中能登录的信息：grep   -n   -v  &quot;/sbin/nologin&quot;   /etc/passwd</p>
<figure data-type="image" tabindex="19"><img src="https://pic.zyblog.xyz/img/typora/image-20201008110252359.png?origin=typora" alt="image-20201008110252359" loading="lazy"></figure>
</li>
<li>
<p>检索包含“ssh”字段的行以及上5行：grep   -nB5  &quot;ssh&quot;   /etc/passwd</p>
<figure data-type="image" tabindex="20"><img src="https://pic.zyblog.xyz/img/typora/image-20201008110442342.png?origin=typora" alt="image-20201008110442342" loading="lazy"></figure>
</li>
<li>
<p>检索包含“ftp”的行及上下两行：grep   -nC2  &quot;ftp&quot;  /etc/passwd</p>
<figure data-type="image" tabindex="21"><img src="https://pic.zyblog.xyz/img/typora/image-20201008110607221.png?origin=typora" alt="image-20201008110607221" loading="lazy"></figure>
</li>
<li>
<p>检索不能登录账户的行数：grep   -c  &quot;/sbin/nologin&quot;  /etc/passwd</p>
<figure data-type="image" tabindex="22"><img src="https://pic.zyblog.xyz/img/typora/image-20201008110717180.png?origin=typora" alt="image-20201008110717180" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://pic.zyblog.xyz/img/typora/image-20201008110754636.png?origin=typora" alt="image-20201008110754636" loading="lazy"></figure>
</li>
<li>
<p>检索包含大小写字母d的信息：grep   -ni  &quot;d&quot;   /etc/passwd</p>
<figure data-type="image" tabindex="24"><img src="https://pic.zyblog.xyz/img/typora/image-20201008110931203.png?origin=typora" alt="image-20201008110931203" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>正则表达式</p>
<ul>
<li>
<p>概念：为了处理大量文本或字符串而定义的一套规则方法</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>通过定义特殊符号来描述模糊查找关键字，可以快速过滤、替换、输出字符串</li>
<li>检索时是按行为单位进行处理</li>
</ul>
</li>
<li>
<p>使用[ ]字符集表示</p>
<ul>
<li>
<p>[ab]：检索包含或者 b的行信息，[]中只能表示一个内容</p>
<p>例：检索包含字母d或者D的信息：grep</p>
<figure data-type="image" tabindex="25"><img src="https://pic.zyblog.xyz/img/typora/image-20201008111636544.png?origin=typora" alt="image-20201008111636544" loading="lazy"></figure>
<p>例：检索包含字母o的信息：grep   -n  [o]    /etc/passwd</p>
</li>
<li>
<p>[^]：根据关键字检索后反向显示（反向着色）</p>
<p>例：检索不包含字母o的信息：grep   -n  [ ^o ]     /etc/passwd</p>
<p>例：检索不以r开头且包含oot的信息：grep   -n   [ ^r ]oot    /etc/passwd</p>
<figure data-type="image" tabindex="26"><img src="https://pic.zyblog.xyz/img/typora/image-20201008112349265.png?origin=typora" alt="image-20201008112349265" loading="lazy"></figure>
</li>
<li>
<p>[-]：[0-9] 表示数字，[a-z] [A-Z]表示小写或大写字母，[a-zA-Z]表示字母</p>
<p>例：检索包含7-9的信息：grep  -n  [7-9]   /etc/passwd</p>
<figure data-type="image" tabindex="27"><img src="https://pic.zyblog.xyz/img/typora/image-20201008112559287.png?origin=typora" alt="image-20201008112559287" loading="lazy"></figure>
<p>例：检索包含大写字母：grep   -n   [A-Z]   /etc/passwd</p>
<figure data-type="image" tabindex="28"><img src="https://pic.zyblog.xyz/img/typora/image-20201008112701436.png?origin=typora" alt="image-20201008112701436" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>行首及行尾</p>
<ul>
<li>
<p>^：表示行首</p>
<p>例：检索以“root”开头的行信息：grep   -n  &quot;^root&quot;   /etc/passwd</p>
<figure data-type="image" tabindex="29"><img src="https://pic.zyblog.xyz/img/typora/image-20201008112905339.png?origin=typora" alt="image-20201008112905339" loading="lazy"></figure>
<p>例：检索以#开头的行信息：grep   -n   &quot;^#&quot;  /etc/sos.conf</p>
<figure data-type="image" tabindex="30"><img src="https://pic.zyblog.xyz/img/typora/image-20201008113112533.png?origin=typora" alt="image-20201008113112533" loading="lazy"></figure>
<p>例：检索以[开头的信息：grep   -n   &quot;^\[&quot;   /etc/sos.conf（注意：\转义）</p>
<figure data-type="image" tabindex="31"><img src="https://pic.zyblog.xyz/img/typora/image-20201008113553198.png?origin=typora" alt="image-20201008113553198" loading="lazy"></figure>
</li>
<li>
<p>$：表示行尾</p>
<p>例：检索以数字结尾的信息：grep   -n    [0-9]$  /etc/sos.conf</p>
<figure data-type="image" tabindex="32"><img src="https://pic.zyblog.xyz/img/typora/image-20201008113830879.png?origin=typora" alt="image-20201008113830879" loading="lazy"></figure>
<p>例：检索空白行：grep  -n   ^$  /etc/sos.conf</p>
<figure data-type="image" tabindex="33"><img src="https://pic.zyblog.xyz/img/typora/image-20201008114017543.png?origin=typora" alt="image-20201008114017543" loading="lazy"></figure>
<p>例：检索非空行：grep   -nv   ^$  /etc/sos.conf</p>
<figure data-type="image" tabindex="34"><img src="https://pic.zyblog.xyz/img/typora/image-20201008114138441.png?origin=typora" alt="image-20201008114138441" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>正则通配符</p>
<ul>
<li>
<p>点（.）：表示一个任意字符</p>
<p>例：检索以r开头，t结尾的中间2个字符的信息：grep   -n    &quot;r..t&quot;   /etc/passwd</p>
</li>
<li>
<p>星号（*）：重复前面字符 0次或多次</p>
<p>例：检索至少包含2个字母o的信息：grep   -n   &quot;ooo*&quot;  /etc/passwd</p>
<figure data-type="image" tabindex="35"><img src="https://pic.zyblog.xyz/img/typora/image-20201008115219639.png?origin=typora" alt="image-20201008115219639" loading="lazy"></figure>
</li>
<li>
<p>转义字符</p>
<ul>
<li>
<p>作用：由于某些字符有特殊作用，若使用该字符原来的功能，则需要使用\将其特殊功能去掉，称为转义</p>
<figure data-type="image" tabindex="36"><img src="https://pic.zyblog.xyz/img/typora/image-20201008115700465.png?origin=typora" alt="image-20201008115700465" loading="lazy"></figure>
</li>
<li>
<p>例：检索以点结尾的字符：grep  -n   &quot;\.$&quot;  tt.txt</p>
</li>
</ul>
</li>
<li>
<p>区间字符</p>
<ul>
<li>
<p>格式：\{n1,n2\}</p>
</li>
<li>
<p>分析：由于{}有特殊作用，需要使用\进行转义，n1==n2时，可以简写为\{n1\}，表示执行n1次</p>
</li>
<li>
<p>例：检索包含两个o的信息：grep   -n  &quot;o\{2\}&quot;   /etc/passwd</p>
<figure data-type="image" tabindex="37"><img src="https://pic.zyblog.xyz/img/typora/image-20201008120202158.png?origin=typora" alt="image-20201008120202158" loading="lazy"></figure>
<p>例：检索包含两个到五个o的信息：grep   -n   &quot;o\{2,5\}&quot;   /etc/passwd</p>
<figure data-type="image" tabindex="38"><img src="https://pic.zyblog.xyz/img/typora/image-20201008120403954.png?origin=typora" alt="image-20201008120403954" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-文档内容替换命令">5. 文档内容替换命令</h3>
<ul>
<li>
<p>作用：进行文本内容的批量替换</p>
</li>
<li>
<p>格式：tr   原字符    结果字符</p>
</li>
<li>
<p>例：将passwd文件中的小写字母改为大写：cat /etc/passwd | tr [a-z] [A-Z]</p>
<figure data-type="image" tabindex="39"><img src="https://pic.zyblog.xyz/img/typora/image-20201008140951688.png?origin=typora" alt="image-20201008140951688" loading="lazy"></figure>
</li>
<li>
<p>例：grep -n &quot;root&quot; ~/passwd | tr [a-z] [A-Z]</p>
<figure data-type="image" tabindex="40"><img src="https://pic.zyblog.xyz/img/typora/image-20201008141308276.png?origin=typora" alt="image-20201008141308276" loading="lazy"></figure>
</li>
</ul>
<h3 id="6-打包压缩命令">6. 打包压缩命令</h3>
<ul>
<li>
<p>作用：将文件或目录进行打包、压缩、解压缩</p>
</li>
<li>
<p>分类：</p>
<ul>
<li>*.gz：由gzip程序进行压缩、解压缩</li>
<li>*.bz2：由bz2程序压缩、解压缩</li>
<li>*.tar：只是打包文件</li>
<li>*.tar.gz：使用tar打包后进行gzip压缩</li>
<li>注意：*.tar.bz2 和 *.tar.xz  也是打包压缩文件</li>
</ul>
</li>
<li>
<p>tar命令</p>
<ul>
<li>
<p>格式：tar  -参数  文件名  目标及存储路径</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>-c：创建压缩文件</li>
<li>-x：解压缩文件</li>
<li>-v：显示时间进度</li>
<li>-f：目标文件名</li>
<li>-p：保留原始文件的属性及权限</li>
<li>-t：查看压缩包的内容</li>
<li>-P：使用绝对路径进行压缩</li>
<li>常用参数：
<ul>
<li>-cvf：压缩</li>
<li>-xvf：解压缩</li>
</ul>
</li>
</ul>
</li>
<li>
<p>例：tar  -cvf  rootfile.tar.gz   /root</p>
<p>​		tar  -xvf rootfile.tar.gz</p>
<ul>
<li>注意：参数c和参数x不能同时使用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="7-管道符与重定向符">7. 管道符与重定向符</h3>
<ul>
<li>
<p>重定向</p>
<ul>
<li>
<p>分类：</p>
<ul>
<li>
<p>输入重定向：默认来源于键盘</p>
</li>
<li>
<p>输出重定向：默认到屏幕</p>
</li>
</ul>
</li>
<li>
<p>符号：</p>
<ul>
<li>命令  &lt;  文件：将文件作为命令的标准输入</li>
<li>命令  &gt;  文件：将标准输出重定向为文件（覆盖清空原有内容）</li>
<li>注意 &gt;&gt; 表示追加，会保留原有内容</li>
</ul>
</li>
</ul>
</li>
<li>
<p>管道符</p>
<ul>
<li>符号：|</li>
<li>格式：命令1|命令2|命令3.......</li>
<li>作用：将前一个命令的输出结果作为下一个命令的标准输入</li>
</ul>
</li>
</ul>
<h3 id="8-环境变量">8. 环境变量</h3>
<ul>
<li>
<p>作用：用来定义系统运行环境的相关参数</p>
</li>
<li>
<p>一般使用大写英文字母</p>
</li>
<li>
<p>PATH环境变量</p>
<ul>
<li>作用：存储Linux系统命令解释器bash及程序的路径</li>
<li>查看：ehco   $PATH</li>
</ul>
</li>
<li>
<p>常见环境变量</p>
<ul>
<li>HOME：存储家目录的绝对路径</li>
<li>HISTSIZE：记录history命令的历史命令条数</li>
<li>LANG：记录语系</li>
<li>MAIL：邮箱文件</li>
</ul>
</li>
<li>
<p>执行命令过程</p>
<ul>
<li>第一步：判断是否以绝对路径或者相对路径来书写命令，若为绝对路径则立即执行</li>
<li>第二步：判断命令名是否为别名</li>
<li>第三步：使用bash解释器判断命令是外部命令还是内部命令</li>
<li>第四步：通过PATH查询路径执行</li>
<li>查看环境变量：$
<ul>
<li>格式：$ 变量名</li>
</ul>
</li>
</ul>
</li>
<li>
<p>全局变量：</p>
<ul>
<li>
<p>作用：所有账户都生效的变量，默认定义的为局部变量</p>
</li>
<li>
<p>格式：export  变量名</p>
</li>
<li>
<p>例：</p>
<p>在root账户下：</p>
<ul>
<li>export NIC=/etc/sysconfig/network-scripts/ifcfg-ens33</li>
<li>cat $NIC</li>
</ul>
<p>在普通账户下</p>
<ul>
<li>su ZHIYUAN</li>
<li>cat $NIC</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="二-用户账户及权限">二、 用户账户及权限</h2>
<h3 id="1-root账户">1. root账户</h3>
<ul>
<li>root账户为默认的系统管理员账户，拥有完整权限</li>
<li>使用原则：生产活动中尽量不使用root账户，应使用普通账户临时分配权限来使用</li>
</ul>
<h3 id="2-uid">2. UID</h3>
<ul>
<li>账户ID是管理账户的一种手段，相当于账户的“身份证编号”，具有唯一性</li>
<li>编号原则
<ul>
<li>系统使用无符号整数进行编号，范围：[0,4294967294]</li>
<li>UID分类
<ul>
<li>系统管理员账户：[0,999]，root账户UID为0</li>
<li>普通账户：从1000开始编号，连续编号，即使管理员编号未使用，普通账户也不可占用</li>
<li>查看：/etc/passwd</li>
</ul>
</li>
<li>id命令
<ul>
<li>作用：显示账户的UID值</li>
<li>格式：id  账户名</li>
</ul>
</li>
</ul>
</li>
<li>注意：UID不能相同</li>
</ul>
<h3 id="3-新建账户">3. 新建账户</h3>
<ul>
<li>格式： useradd   -参数   账户名</li>
<li>参数：
<ul>
<li>-d：指定账户家目录，默认普通账户家目录为：/home/账户名</li>
<li>-e：设置账户到期失效时间，时间格式：YYYY-MM-DD（如：2020-10-08）</li>
<li>-u：指定账户的UID值</li>
<li>-g：指定一个初始用户的工作组（工作组必须已存在）</li>
<li>-G：指定一个或多个扩展组</li>
<li>-N：不创建与账户同名的基本工作组</li>
</ul>
</li>
<li>例：useradd  test1</li>
</ul>
<h3 id="4-设置账户密码">4. 设置账户密码</h3>
<ul>
<li>
<p>格式：passwd   -参数   账户名</p>
</li>
<li>
<p>参数：</p>
<ul>
<li>-l：锁定账户，禁止登录</li>
<li>-u：解除锁定，允许登录</li>
<li>-d：允许用户可以用空格密码登录</li>
<li>-e：强制用户在在下次登录时修改密码</li>
</ul>
</li>
<li>
<p>注意：</p>
<ul>
<li>密码输入时不回显</li>
<li>密码应超过8字符</li>
<li>密码应使用数字、字母、符号组成</li>
<li>密码应定期更换</li>
</ul>
</li>
<li>
<p>例1：新建账户、设置密码、注销账户、重新登录</p>
<ul>
<li>useradd  test2</li>
<li>passwd  test2  （输入两次密码）</li>
<li>logout</li>
<li>登录test2账户</li>
</ul>
</li>
<li>
<p>例2：新建账户test3，UID=5555，工作组为test1，家目录为/home/tmp</p>
<ul>
<li>useradd  test3  -u 5555  -g  test1   -d  /home/tmp（/homt/tmp需要新建）</li>
<li>passwd test3（输入两次密码）</li>
<li>logout</li>
<li>登录test3账户</li>
<li>pwd</li>
<li>id  test3</li>
</ul>
</li>
<li>
<p>例3：设置账户为不可登录状态</p>
<ul>
<li>vim  /etc/passwd</li>
<li>定位倒数几行的普通账户，点击i键，将本行尾部的/bin/bash修改为/sbin/nologin</li>
<li>点击ESC键，冒号，wq保存并退出</li>
<li>logout</li>
<li>尝试登录被修改账户</li>
</ul>
</li>
<li>
<p>root账户密码的破解</p>
<ul>
<li>reboot重启系统</li>
<li>在内核选择界面点击键盘上下键，再点击e键</li>
<li>进入内核登录编辑界面，定位Linux16所在行，找到ro修改为rw  init=/sysroot/bin/bash</li>
<li>按下Ctrl+X</li>
<li>进入紧急救援模式后输入chroot  /sysroot</li>
<li>passwd修改密码（输入两次密码，方块为汉字不能显示）</li>
<li>设置selinux 使其密码修改生效：touch  /.autorelabel</li>
<li>按下Ctrl+D</li>
<li>reboot重启</li>
</ul>
</li>
</ul>
<h3 id="5-删除账户">5. 删除账户</h3>
<ul>
<li>格式：userdel   -参数    账户名</li>
<li>参数：
<ul>
<li>-f：强制删除</li>
<li>-r：同时删除账户及家目录</li>
</ul>
</li>
</ul>
<h3 id="6-工作组group">6. 工作组（group）</h3>
<ul>
<li>意义：将相同属性及权限的账户作为一组，组内账户属性等信息相同</li>
<li>Linux系统为了方便管理数据，引入了层级管理机制：公司（系统）-&gt;部门（工作组）-&gt;员工（账户）-&gt; 文件（权限）</li>
<li>分类
<ul>
<li>基本工作组：创建账户时一同创建同名的工作组</li>
<li>扩展组：可以将账户加入到其他工作组中</li>
<li>查看：more  /etc/group</li>
</ul>
</li>
<li>GID：工作组编号，规则同UID</li>
<li>创建工作组
<ul>
<li>格式：groupadd   -参数   工作组名</li>
<li>参数：-g  ，自定义工作组GID，默认从1000开始</li>
</ul>
</li>
<li>删除工作组
<ul>
<li>格式：groupdel   工作组名</li>
<li>注意：若工作组中已存在账户，必须先移除再删除工作组，否则无法删除工作组</li>
</ul>
</li>
</ul>
<h3 id="7-文件权限">7. 文件权限</h3>
<ul>
<li>
<p>文件归属者</p>
<ul>
<li>文件拥有者（账户）</li>
<li>所属组（工作组）</li>
<li>其它账户</li>
</ul>
</li>
<li>
<p>权限的意义</p>
<ul>
<li>
<p>限制用户操作，规范命令使用，将破坏性限制在一定范围</p>
</li>
<li>
<p>类别</p>
<ul>
<li>普通文件（-）
<ul>
<li>可读（r）：可以读取到文件中的内容</li>
<li>可写（w）：可以编辑修改删除文件内容</li>
<li>可执行（x）：可以运行一个脚本</li>
</ul>
</li>
<li>目录（d）
<ul>
<li>可读（r）：可以读取目录中的文件列表</li>
<li>可写（w）：可以读取目录内容，修改目录名称，增删目录中的文件</li>
<li>可执行（x）：可以进入该目录（cd命令）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>查看权限方法：</p>
<ul>
<li>
<p>ls  -l（ll同）：查看目录内的文件权限信息</p>
</li>
<li>
<p>ls  -ld：查看当前目录的权限信息</p>
</li>
<li>
<p>显示内容分析：</p>
<ul>
<li>第一列描述文件类别，-  表示普通文件，d为目录</li>
<li>rw-r--r--：三个一组，分别对应账户、工作组、其他账户对该文件拥有的权限，- 表示无权限</li>
<li>1：链接数</li>
<li>root  root：该文件对应的账户及所属工作组</li>
</ul>
</li>
</ul>
</li>
<li>
<p>权限数字表示法</p>
<ul>
<li>
<p>原则：</p>
<ul>
<li>r：4</li>
<li>w：2</li>
<li>w：1</li>
</ul>
</li>
<li>
<p>小结：</p>
<table>
	<tr align="center">
        <th>权限项</th>
        <th>读</th>
        <th>写</th>
        <th>执行</th>
        <th>读</th>
        <th>写</th>
        <th>执行</th>
        <th>读</th>
        <th>写</th>
        <th>执行</th>
	</tr>
    <tr align="center">
        <td>字符表示法</td>
    <td>r</td>
        <td>w</td>
        <td>x</td>
        <td>r</td>
        <td>w</td>
        <td>x</td>
        <td>r</td>
        <td>w</td>
        <td>x</td>
    </tr>
    <tr align="center">
        <td>数字表示法</td>
        <td>4</td>
        <td>2</td>
        <td>1</td>
        <td>4</td>
        <td>2</td>
        <td>1</td>
        <td>4</td>
        <td>2</td>
        <td>1</td>
    </tr>
    <tr align="center">
        <td>权限分配</td>
        <td colspan="3">文件所有者</td>
        <td colspan="3">文件所属组</td>
        <td colspan="3">其他账户</td>
    </tr>
</table>
</li>
<li>
<p>组合</p>
<ul>
<li>rwx：4+2+1-&gt;7（完整权限）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>rw-：4+2-&gt;6（可读可写不可执行）</p>
<ul>
<li>
<p>r-x：4+1-&gt;5（可读可执行不可写）</p>
</li>
<li>
<p>r--：4（可读不可写不可执行）</p>
</li>
<li>
<p>-wx：2+1-&gt;3（不可读可写可执行）</p>
</li>
<li>
<p>-w-：2（可写）</p>
</li>
<li>
<p>--x：1（可执行）</p>
</li>
<li>
<p>---：0（无权限）</p>
</li>
<li>
<p>例：764、642、153、731的字符描述</p>
<ul>
<li>rwxrw-r--</li>
<li>rw-r---w-</li>
<li>--xr-x-wx</li>
<li>rwx-wx--x</li>
</ul>
</li>
<li>
<p>例：rwxrw-r-- 、rw--w--wx  、rw-r--r--数字描述</p>
<ul>
<li>rwxrw-r--：764</li>
<li>rw--w--wx：623</li>
<li>rw-r--r--：644</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>修改文件权限命令chmod</p>
<ul>
<li>
<p>格式：chmod  -参数   权限   文件或目录名</p>
</li>
<li>
<p>例：touch  tmp.cfg（新建文件默认权限644）</p>
<p>​		chmod  777  tmp.cfg</p>
</li>
</ul>
</li>
<li>
<p>chown命令</p>
<ul>
<li>作用：设置文件所有者及工作组</li>
<li>格式：chown    -参数    账户名:工作组   文件或目录名</li>
<li>例： chown ZHIYUAN:ZHIYUAN tmp.cfg</li>
</ul>
</li>
<li>
<p>文件隐藏权限</p>
<ul>
<li>
<p>原则：文件一般包含默认权限和隐藏权限，隐藏权限默认状态下无法查看，若权限足够但无法删除，此时应考虑该文件是否有隐藏权限</p>
</li>
<li>
<p>lsattr命令</p>
<ul>
<li>作用：查看文件隐藏权限</li>
<li>格式：lsattr   文件或目录名</li>
</ul>
</li>
<li>
<p>chattr命令</p>
<ul>
<li>
<p>作用：设置文件隐藏权限</p>
</li>
<li>
<p>格式：chattr   参数    文件或目录名</p>
</li>
<li>
<p>参数</p>
<ul>
<li>i：表示文件无法修改（目录中不能新建和删除）</li>
<li>a：仅允许追加内容，不可以覆盖、删除</li>
<li>s：从硬盘中彻底删除，不可恢复，会使用0填充文件所在存储空间</li>
<li>S：文件变更后同步到磁盘</li>
</ul>
</li>
<li>
<p>注意：参数前若有加号（+）或减号（-），则表示增加或撤销功能</p>
</li>
<li>
<p>例：设置不可删除权限</p>
<figure data-type="image" tabindex="41"><img src="https://pic.zyblog.xyz/img/typora/image-20201009105520603.png?origin=typora" alt="image-20201009105520603" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="8-账户切换命令">8. 账户切换命令</h3>
<ul>
<li>格式：su   -参数   账户名</li>
<li>常用：su   -  账户名</li>
<li>注意：
<ul>
<li>减号（-）表示完全切换，重新建立系统环境变量，不保留原有环境参数</li>
<li>root账户切换到普通账户，不需要输入密码，反之需要重新验证密码</li>
</ul>
</li>
</ul>
<h3 id="9-sudo命令">9. sudo命令</h3>
<ul>
<li>
<p>作用： 给普通账户提供额外的权限完成原本root账户才能实现功能，将权限控制在某个命令或文件上，降低安全风险</p>
</li>
<li>
<p>sudo配置文件分析</p>
<ul>
<li>
<p>原则：必须在root账户下配置后才可使用</p>
</li>
<li>
<p>格式：visudo</p>
</li>
<li>
<p>方法：</p>
<ul>
<li>
<p>visudo</p>
</li>
<li>
<p>输入后定位第99行即：root   ALL=(ALL)   ALL</p>
</li>
<li>
<p>该参数意义为：账户名   允许使用的主机=（以谁的身份）  执行命令列表</p>
</li>
<li>
<p>点击i键输入：普通账户名   ALL=(ALL)  ALL</p>
</li>
<li>
<p>输入冒号，wq保存并退出</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>提权方法：</p>
<ul>
<li>
<p>格式： sudo  -参数   命令名称</p>
</li>
<li>
<p>例：新建账户访问  /etc/shadow</p>
<figure data-type="image" tabindex="42"><img src="https://pic.zyblog.xyz/img/typora/image-20201009112930327.png?origin=typora" alt="image-20201009112930327" loading="lazy"></figure>
<figure data-type="image" tabindex="43"><img src="https://pic.zyblog.xyz/img/typora/image-20201009112725500.png?origin=typora" alt="image-20201009112725500" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/xc3aA90Gk/">https://zhiyuandnc.github.io/xc3aA90Gk/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（二）]]></title>
        <id>https://zhiyuandnc.github.io/hNHvS29UU/</id>
        <link href="https://zhiyuandnc.github.io/hNHvS29UU/">
        </link>
        <updated>2022-02-12T04:33:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-常见的linux命令">一、 常见的Linux命令</h2>
<h3 id="1-shell的简介">1. Shell的简介</h3>
<ul>
<li>1.1 shell（壳）是一种强大的命令行工具，位于用户与系统内核之间，起到“翻译官”的作用，即识别解释用户输入的命令，并提供操作界面</li>
<li>1.2 结构</li>
<li>1.3 特点
<ul>
<li>1.3.1 系统默认提供了六个shell工具（五个命令行，一个GUI界面）</li>
<li>1.3.2 使用键盘“上下键↑↓”，可以查看输入的历史命令</li>
<li>1.3.3 GUI界面下的命令行可使用鼠标选定指定命令后按下鼠标中键复制进行粘贴</li>
<li>1.3.4 使用Tab键进行命令单词的补全</li>
<li>1.3.5 Linux系统中一切数据皆是文件</li>
</ul>
</li>
</ul>
<h3 id="2-命令提示符">2. 命令提示符</h3>
<ul>
<li>
<p>[root@localhost ~]#</p>
<ul>
<li>
<p>root：当前已经登录正在使用的账户</p>
</li>
<li>
<p>@：分隔符</p>
</li>
<li>
<p>localhost：主机名</p>
</li>
<li>
<p><sub>：表示当前工作目录，</sub> 表示 帐户家目录</p>
</li>
<li>
<p>#：如果是root用户，结尾标志是#，如果是普通账户，结尾标示是$</p>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201006094257706.png?origin=typora" alt="image-20201006094257706" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-命令格式">3. 命令格式</h3>
<ul>
<li>3.1 格式：
<ul>
<li>3.1.1 短格式： 命令名称   -参数     目标</li>
<li>3.1.2 长格式： 命令名称   --参数全称     目标</li>
</ul>
</li>
<li>3.2 命令目标的路径
<ul>
<li>3.2.1 相对路径：以当前工作目录起始，进行遍历</li>
<li>3.2.2 绝对路径：以根目录（/）起始，进行遍历</li>
</ul>
</li>
</ul>
<h3 id="4-目录切换命令">4. 目录切换命令</h3>
<ul>
<li>4.1 格式：cd    目录名</li>
<li>4.2 例：
<ul>
<li>cd ~     ：切换到管理员的家目录</li>
<li>cd /      ：返回根目录</li>
<li>cd ..     ：返回上一级目录</li>
</ul>
</li>
</ul>
<h3 id="5-目录浏览命令">5. 目录浏览命令</h3>
<ul>
<li>
<p>5.1 格式：ls   -参数   目录名</p>
</li>
<li>
<p>5.2 作用：查看目录内的文件数据</p>
</li>
<li>
<p>5.3 命令行终端模式下的目录颜色分类：</p>
<p>蓝色：目录文件（文件夹）      浅蓝色：链接文件（快捷方式）   黄色：设备文件     白色：普通文件</p>
<p>红色：压缩文件                         绿色：可执行文件</p>
</li>
<li>
<p>5.4 常用命令</p>
<ul>
<li>
<p>ls  -a：显示所有文件（包括隐藏文件）</p>
</li>
<li>
<p>ls  -l：查看文件目录内文件的详细信息</p>
<p>（文件权限+连接数+所属用户+所属用户组+大小+创建时间+文件名）</p>
</li>
<li>
<p>ls  -ld：查看当前目录的详细信息</p>
</li>
<li>
<p>ls    |    more：分页查看内容较多目录的信息（空格翻页，回车换行）</p>
</li>
<li>
<p>ll  ：相当于 ls  -l</p>
</li>
</ul>
</li>
</ul>
<h3 id="6-date命令">6. date命令</h3>
<ul>
<li>6.1 作用：查看设置日期时间</li>
<li>6.2 格式： date   -参数    +日期时间格式</li>
<li>6.3 参数：
<ul>
<li>-s：设置日期时间</li>
<li>-d：显示描述的日期时间</li>
</ul>
</li>
<li>6.4 日期时间格式
<ul>
<li>%Y：完整的年份</li>
<li>%m：月份（01-12）</li>
<li>%d：日（01-31）</li>
<li>%j：一年中的第几天（001-366）</li>
<li>%H：小时（00-23）</li>
<li>%M：分钟（00-59）</li>
<li>%S：秒（00-59）</li>
<li>%X：相当于      %H:%M:%S</li>
<li>%A：显示星期几（Sunday-Saturday）</li>
<li>%Z：显示时区</li>
</ul>
</li>
<li>6.5 例：<img src="https://pic.zyblog.xyz/img/typora/image-20201006105140656.png?origin=typora" alt="image-20201006105140656" loading="lazy">
<ul>
<li>date +%Y%m%d</li>
<li>date +%Y-%m-%d</li>
<li>date +%H:%M:%S</li>
<li>date &quot;+%Y-%m-%d  %H:%M:%S&quot;</li>
<li>date +%Y-%m-%d%t%H:%M:%S</li>
<li>date +%Y-%m-%d%t%H:%M:%S%A%t%Z%t%j</li>
<li>date &quot;+%Y-%m-%d  %H:%M:%S  %A  %Z  %j&quot;</li>
<li>参数中有空格必须加双引号，或者将空格替换为%t</li>
</ul>
</li>
<li>6.6 注意：%j参数表示一年中第几天，一般用于文件备份时加入此参数，数字越小文件越旧，数字越大，文件越新</li>
<li>6.7 设置日期时间：date -s &quot;2020-10-6 10:58:30&quot;</li>
<li>6.8 显示指定日期时间：date -d &quot;+2 day&quot; +%d         08</li>
</ul>
<h3 id="7-显示日历">7. 显示日历</h3>
<ul>
<li>
<p>格式：cal   月份    年份       cal   05   2020</p>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/image-20201006110211957.png?origin=typora" alt="image-20201006110211957" loading="lazy"></figure>
</li>
</ul>
<h3 id="8-系统状态检测命令ps">8. 系统状态检测命令PS</h3>
<ul>
<li>
<p>8.1 作用：查看进程状态，一般用于获取进程ID</p>
</li>
<li>
<p>8.2 格式：ps  -参数</p>
</li>
<li>
<p>8.3 常用命令</p>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/image-20201006112240656.png?origin=typora" alt="image-20201006112240656" loading="lazy"></figure>
<ul>
<li>ps</li>
<li>ps -u：描述所有用户进程的详细信息
<ul>
<li>有用的信息：
<ul>
<li>%CPU：CPU占用率</li>
<li>%MEM：内存使用率</li>
<li>VSZ：虚拟内存使用率</li>
<li>stat：进程状态
<ul>
<li>R：运行状态</li>
<li>S：休眠状态</li>
<li>D：中断状态</li>
<li>Z：僵死状态</li>
<li>T：停滞状态</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-top命令">9. Top命令</h3>
<ul>
<li>作用：动态显示进程及进程状态，是一种强化版的任务管理器</li>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201006112950769.png?origin=typora" alt="image-20201006112950769" loading="lazy">
<ul>
<li>第一行：系统时间、运行时间、登录终端数、系统负载（1分钟平均值、5分钟平均值、15分钟平均值）</li>
<li>第二行：进程数、运行数、睡眠数、停止数、僵死数</li>
<li>第三行：CPU用户占用百分比、系统内核占用资源百分比、改变过优先级进程占用资源百分比、空闲资源百分比</li>
<li>第四行：内存总量（单位：KB）、空闲量、使用量、作为内核缓存的内存量</li>
<li>第五行：swap总量（单位：KB）、空闲量、使用量、提前加载的使用量</li>
<li>注意：使用q键退出查看</li>
</ul>
</li>
</ul>
<h3 id="10-进程终止命令kill">10. 进程终止命令kill</h3>
<ul>
<li>kill  进程名/PID进程编号</li>
<li>killall   进程名/PID进程编号</li>
</ul>
<h3 id="11-查看网卡信息命令">11. 查看网卡信息命令</h3>
<ul>
<li>格式：ifconfig</li>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201006114608025.png?origin=typora" alt="image-20201006114608025" loading="lazy">
<ul>
<li>mtu：网络传输最大数据包容量</li>
<li>inet：IP地址</li>
<li>netmask：子网掩码</li>
<li>broadcast：广播地址</li>
<li>RX：发送数据包容量，单位：KB</li>
<li>TX：接收数据包容量，单位：KB</li>
</ul>
</li>
</ul>
<h3 id="12-查看本机信息命令">12. 查看本机信息命令</h3>
<ul>
<li>
<p>格式：uname  -a</p>
<figure data-type="image" tabindex="6"><img src="https://pic.zyblog.xyz/img/typora/image-20201006140321799.png?origin=typora" alt="image-20201006140321799" loading="lazy"></figure>
</li>
</ul>
<h3 id="13-查看内存信息-free">13. 查看内存信息： free</h3>
<figure data-type="image" tabindex="7"><img src="https://pic.zyblog.xyz/img/typora/image-20201006140346166.png?origin=typora" alt="image-20201006140346166" loading="lazy"></figure>
<ul>
<li>free  -h    以具体单位查看内存信息</li>
<li>free  -g    以GB单位查看内存信息</li>
<li>free  -m   以MB单位查看内存信息</li>
<li>free  -k     以KB单位查看内存信息</li>
<li>free  -b     以Byte单位查看内存信息</li>
<li>free  -s  时间（单位：秒） 以一定时间间隔连续查看内存使用信息</li>
</ul>
<h3 id="14-who命令与last命令">14. who命令与last命令</h3>
<ul>
<li>
<p>作用：显示当前登录用户及终端信息</p>
<figure data-type="image" tabindex="8"><img src="https://pic.zyblog.xyz/img/typora/image-20201006140627817.png?origin=typora" alt="image-20201006140627817" loading="lazy"></figure>
</li>
</ul>
<figure data-type="image" tabindex="9"><img src="https://pic.zyblog.xyz/img/typora/image-20201006140651284.png?origin=typora" alt="image-20201006140651284" loading="lazy"></figure>
<ul>
<li>终端标志
<ul>
<li>：0    表示GUI可视化终端</li>
<li>pts/0 表示远程登录方式</li>
<li>tty2：命令行终端</li>
</ul>
</li>
</ul>
<h3 id="15-uptime">15. uptime</h3>
<ul>
<li>
<p>作用：显示系统平均负载</p>
<figure data-type="image" tabindex="10"><img src="https://pic.zyblog.xyz/img/typora/image-20201006140945571.png?origin=typora" alt="image-20201006140945571" loading="lazy"></figure>
</li>
</ul>
<h3 id="16-history">16. history</h3>
<ul>
<li>作用：查看历史命令记录</li>
<li>修改命令历史记录条数
<ul>
<li>文件路径：/etc/profile</li>
<li>修改变量：HISTSIZE=1000之后的数字即可</li>
<li>过程：
<ul>
<li>vim /etc/profile</li>
<li>点击i键后定位在HISTSIZE=1000所在行</li>
<li>修改数字后点击ESC键</li>
<li>点击shift+：输入wq保存并退出</li>
<li>reboot重启</li>
</ul>
</li>
</ul>
</li>
<li>注意：HISTSIZE=0，表示不记录历史命令</li>
<li>常用命令：
<ul>
<li>-c：清空当前历史命令</li>
</ul>
</li>
</ul>
<h3 id="17-echo命令">17. echo命令</h3>
<ul>
<li>
<p>作用：将字符串显示到屏幕上或输出变量的值</p>
</li>
<li>
<p>例：echo  “HelloWorld”          echo    $SHELL</p>
<ul>
<li>
<figure data-type="image" tabindex="11"><img src="https://pic.zyblog.xyz/img/typora/image-20201006143955888.png?origin=typora" alt="image-20201006143955888" loading="lazy"></figure>
</li>
<li>
<figure data-type="image" tabindex="12"><img src="https://pic.zyblog.xyz/img/typora/image-20201006144043323.png?origin=typora" alt="image-20201006144043323" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>常用命令</p>
<ul>
<li>-e：激活转义字符</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/hNHvS29UU/">https://zhiyuandnc.github.io/hNHvS29UU/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令学习（一）]]></title>
        <id>https://zhiyuandnc.github.io/BdIGGzKkE/</id>
        <link href="https://zhiyuandnc.github.io/BdIGGzKkE/">
        </link>
        <updated>2022-02-10T04:26:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-linux操作系统初识">一、Linux操作系统初识</h2>
<ol>
<li>
<p>Linux操作系统 = 内核（kernel）+操作界面+第三方应用程序</p>
</li>
<li>
<p>版本介绍：</p>
<ul>
<li>2.1 RedHat：红帽企业软件系统，企业常用</li>
<li>2.2 Centos：社区企业操作系统，学习/企业首选，与RedHat功能完全一致</li>
<li>2.3 Ubuntu：乌班图，面向消费级平台，日常使用首选</li>
</ul>
</li>
</ol>
<h2 id="二-开发环境的搭建">二、开发环境的搭建</h2>
<h3 id="1-虚拟机vmware的安装">1. 虚拟机VMware的安装</h3>
<ul>
<li>
<p>增强型键盘驱动（必须打钩）：识别不同硬盘设备</p>
</li>
<li>
<p>输入序列号</p>
</li>
</ul>
<h3 id="2-centos7系统版本选择">2. Centos7系统版本选择</h3>
<ul>
<li>
<p>阿里巴巴开源镜像站：https://developer.aliyun.com/mirror</p>
</li>
<li>
<p>网易开源镜像站：https://mirrors.163.com</p>
</li>
<li>
<figure data-type="image" tabindex="1"><img src="https://pic.zyblog.xyz/img/typora/image-20201005112522574.png?origin=typora" alt="image-20201005112522574" loading="lazy"></figure>
</li>
<li>
<figure data-type="image" tabindex="2"><img src="https://pic.zyblog.xyz/img/typora/image-20201005112853958.png?origin=typora" alt="image-20201005112853958" loading="lazy"></figure>
</li>
<li>
<p>Centos DVD 版本：使用原软件DVD制作的镜像，功能全面（常用基本都有），推荐使用（4.5G左右）</p>
</li>
<li>
<p>Centos Everthing 版本：完整版本（10G左右），不推荐使用</p>
</li>
<li>
<p>Centos NetInstall 版本：网络安装及救援使用（500M左右）</p>
</li>
<li>
<p>Centos Minimal 版本：最小功能安装包（1G左右）</p>
</li>
<li>
<p>Centos LiveGNOME 版本：GNOME桌面版本</p>
</li>
<li>
<p>Centos LiveKDE 版本：KDE桌面版本</p>
</li>
<li>
<p>注：x86_64及amd64都表示64位系统</p>
<p>I386：32位系统          desktop：桌面版            server：服务器</p>
</li>
</ul>
<h3 id="3-centos7系统的安装">3. Centos7系统的安装</h3>
<ul>
<li>
<h4 id="31-创建新的虚拟机典型">3.1 创建新的虚拟机：典型</h4>
</li>
<li>
<p>注：<img src="https://pic.zyblog.xyz/img/typora/image-20201005114036836.png?origin=typora" alt="image-20201005114036836" loading="lazy"></p>
</li>
<li>
<h4 id="32-需要自定义配置否则是最小化安装选择稍后安装系统">3.2 需要自定义配置，否则是最小化安装，选择稍后安装系统</h4>
</li>
<li>
<h4 id="33-选择客户机操作系统linux-centos7-64位">3.3 选择客户机操作系统：Linux-&gt;Centos7 64位</h4>
</li>
<li>
<h4 id="34-命名虚拟机">3.4 命名虚拟机</h4>
<ul>
<li>按照功能命名</li>
<li>存储在非C盘的目录下</li>
</ul>
</li>
<li>
<figure data-type="image" tabindex="3"><img src="https://pic.zyblog.xyz/img/typora/image-20201005114925641.png?origin=typora" alt="image-20201005114925641" loading="lazy"></figure>
<ul>
<li>容量20GB，动态分配，此容量为最大值</li>
<li>单个文件：存取效率高，但不方便数据迁移</li>
<li>多个文件：存取效率低，但是方便数据迁移</li>
</ul>
</li>
<li>
<figure data-type="image" tabindex="4"><img src="https://pic.zyblog.xyz/img/typora/image-20201005115612435.png?origin=typora" alt="：" loading="lazy"></figure>
</li>
<li>
<h4 id="35-自定义硬件">3.5 自定义硬件</h4>
<ul>
<li>内存：推荐2GB</li>
<li>CPU：1颗，核心数以实际物理机为标准</li>
<li>新CD/DVD：设置系统启动文件，选择“使用ISO镜像文件”选项，后点击“浏览”选择之前已经下载好的iso镜像文件</li>
<li>网络适配器：选择NAT模式
<ul>
<li>桥接模式：适用于网络固定不变的环境中</li>
<li>NAT模式：适用于网络环境经常发生变化的环境中</li>
</ul>
</li>
<li>仅主机模式：表示Linux系统只能与本机物理机通信无法连接互联网</li>
</ul>
</li>
<li>
<figure data-type="image" tabindex="5"><img src="https://pic.zyblog.xyz/img/typora/image-20201005121216115.png?origin=typora" alt="image-20201005121216115" loading="lazy"></figure>
</li>
<li>
<h4 id="36-安装系统">3.6 安装系统</h4>
<ul>
<li>
<p>软件选择：带有GUI的服务器</p>
</li>
<li>
<p>安装位置（硬盘分区）</p>
<ul>
<li>概念：
<ul>
<li>挂载点：（windows的分区）</li>
<li>手动分区
<ul>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201005142151232.png?origin=typora" alt="image-20201005142151232" loading="lazy">系统启动引导分区：400MB    /boot</li>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201005142516290.png?origin=typora" alt="image-20201005142516290" loading="lazy">交换分区（虚拟内存分区)：4GB       swap</li>
<li><img src="https://pic.zyblog.xyz/img/typora/image-20201005142531111.png?origin=typora" alt="image-20201005142531111" loading="lazy">根分区，剩余空间（容量不填) /</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>KDUMP：内核崩溃转储机制，生产环境中开启</p>
</li>
<li>
<p>设置root用户密码，创建一个新用户</p>
</li>
</ul>
</li>
<li>
<h4 id="37-centos系统功能的基本配置">3.7 Centos系统功能的基本配置</h4>
<ul>
<li>登录系统</li>
<li>终端切换（Ctrl+Alt+F1/F2/F3/F4/F5/F6）</li>
</ul>
</li>
<li>
<p>共提供6个终端界面，5个命令行界面，1个GUI界面，使用Ctrl+Alt+F1~F6进行切换</p>
</li>
<li>
<p>网卡配置</p>
<ul>
<li>cd  /etc/sysconfig/network-scripts/</li>
<li>vim ifcfg-ens33</li>
<li>此时处于浏览状态，按i进入编辑状态</li>
<li>ONBOOT=no 改为 ONBOOT=yes</li>
<li>ESC退出编辑状态，进入浏览状态</li>
<li>输入冒号进入命令状态，输入wq，保存并退出</li>
<li>重启网卡服务： service network restart</li>
<li>测试网络：ping www.baidu.com，Ctrl+C终止</li>
</ul>
</li>
<li>
<p>yum源替换</p>
<ul>
<li>
<pre><code>[base]
name=CentOS-$releasever - Base
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
</code></pre>
</li>
</ul>
<blockquote>
<p>下载地址：https://mirrors.aliyun.com/repo/Centos-7.repo</p>
</blockquote>
<ul>
<li>
<p>原因：由于系统自带yum源位于国外，下载软件过慢，则需要更改yum配置文件为国内常用的开源镜像网站（阿里，华为，网易）</p>
</li>
<li>
<p>过程</p>
<ul>
<li>
<p>① 删除原有yum配置文件目录</p>
<p>cd /etc</p>
<p>rm -rf 	yum.repos.d</p>
</li>
<li>
<p>② 新建该目录</p>
<p>mkdir 	yum.repos.d</p>
</li>
<li>
<p>③ 下载阿里开源镜像站的centosyum源配置文件</p>
<p>cd 	yum.repos.d</p>
<p>wget 	https://mirrors.aliyun.com/repo/Centos-7.repo</p>
<p>ls</p>
</li>
<li>
<p>④ 建立新的yum缓存并生效：yum	makecache</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>更新软件</p>
<ul>
<li>内核：yum update kernel</li>
<li>软件：yum update 软件名</li>
<li>注：yum update 表示更新所有已安装软件</li>
<li>reboot重启系统</li>
</ul>
</li>
<li>
<p>制作快照：虚拟机-&gt;快照-&gt;拍摄快照-&gt;命名-&gt;拍摄快照</p>
</li>
<li>
<p>Putty远程登录软件</p>
<ul>
<li>
<p>作用：使用putty远程登录到服务器进行操作控制</p>
</li>
<li>
<p>方法：</p>
<ul>
<li>
<p>① 在Linux系统中查看本机IP地址：ip addr</p>
<ul>
<li>② Putty软件中点击：Hosts Name（or IP address）输入之前查看的IP地址</li>
<li>③ Save Sessions：命名并点击右侧save按钮保存</li>
<li>④ 点击open按钮打开</li>
<li>⑤ 点击yes</li>
<li>⑥ login as：输入用户名</li>
</ul>
</li>
<li>
<p>⑦ 输入密码</p>
</li>
</ul>
</li>
<li>
<p>字号的更改：</p>
<p>右键单击标题栏-&gt;Change Settings-&gt;Window-&gt;Appearance-&gt;Change按钮-&gt;设置字体属性-&gt;Apply应用</p>
</li>
</ul>
</li>
<li>
<p>常用快捷键：</p>
<ul>
<li>Ctrl+C：终止命令</li>
<li>Ctrl+L：清屏命令</li>
<li>Ctrl+D：结束当前终端</li>
<li>Ctrl+Z：终止进程</li>
<li>reboot：重启</li>
<li>shutdown now：关机</li>
</ul>
</li>
<li>
<p>例：下载安装一个屏保软件</p>
<ul>
<li>
<p>下载屏保软件：</p>
<p>cd	~</p>
<p>wget	http://archive.ubuntu.com/ubuntu/pool/universe/c/cmatrix/cmatrix_1.2a.orig.tar.gz</p>
</li>
<li>
<p>解压文件</p>
<p>tar xvf cmatrix_1.2a.orig.tar.gz</p>
</li>
<li>
<p>进入安装目录</p>
<p>cd 	cmatrix-1.2a</p>
</li>
<li>
<p>安装调用库及编译器</p>
<p>yum install -y ncurses-devel</p>
<p>yum install -y gcc</p>
</li>
<li>
<p>编译安装软件：</p>
<p>./configure &amp;&amp; make &amp;&amp; make install</p>
</li>
<li>
<p>运行软件：</p>
<p>cmatrix</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/BdIGGzKkE/">https://zhiyuandnc.github.io/BdIGGzKkE/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring+SpringMVC+MyBatis学习]]></title>
        <id>https://zhiyuandnc.github.io/pILxU31oU/</id>
        <link href="https://zhiyuandnc.github.io/pILxU31oU/">
        </link>
        <updated>2021-04-16T14:33:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ssm">SSM</h1>
<ul>
<li>传统Servlet的不足
<ul>
<li>同一个类型的业务要进行多个Servlet的编写，单个Servlet功能单一</li>
<li>对象管理不方便，每次操作业务，都会产生很多对象</li>
</ul>
</li>
</ul>
<h1 id="java中的主流框架技术">Java中的主流框架技术</h1>
<ul>
<li>Struts</li>
<li>Hibernate</li>
<li>Spring</li>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>MyBatis</li>
</ul>
<h1 id="学习框架的思路">学习框架的思路</h1>
<ul>
<li>框架的规范</li>
<li>框架的底层实现</li>
</ul>
<h1 id="struts2框架的介绍">Struts2框架的介绍</h1>
<ul>
<li>是一个基于mvc设计思想的web应用框架，它本质就是一个Servlet，在mvc设计思想中，Struts2充当的是一个Controller的角色</li>
</ul>
<h1 id="hibernate框架的介绍">Hibernate框架的介绍</h1>
<ul>
<li>开源的对象关系映射框架（ORM）框架</li>
<li>底层就是对JDBC的封装</li>
</ul>
<h1 id="java企业级开发的演化">Java企业级开发的演化</h1>
<ul>
<li><code>Servlet+JavaBean</code></li>
<li><code>Servlet+JSP+JavaBean</code></li>
<li><code>Struts2+Spring+Hibernate:SSH</code></li>
<li><code>Spring+SpringMVC+MyBatis:SSM</code></li>
<li><code>SpringBoot(Spring全家桶开发)</code></li>
</ul>
<h2 id="一-spring">一、Spring</h2>
<blockquote>
<p><code>Spring</code> 是分层的JavaSE/EE应用 <code>full-stack</code> 轻量级开源框架，以 <code> IoC（Inverse Of Control：反转控制）</code> 和 <code>AOP（Aspect Oriented Programming：面向切面编程）</code> 为内核</p>
<p>提供了展现层 <code>Spring MVC</code> 和持久层 <code>Spring JDBCTemplate</code> 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的JavaEE企业应用开源框架</p>
<p>官网：https://spring.io/</p>
<p><code>Spring</code> 的核心</p>
<ul>
<li><code>IOC</code>：把对象的创建权交给Spring，让Spring帮我们创建并且管理对象</li>
<li><code>DI</code>：给对象的属性注入值</li>
<li><code>AOP</code>：解决了一些面向对象编程不方便解决的问题</li>
</ul>
<p><code>Spring</code> 的优点</p>
<ul>
<li>方便解耦，简化开发，把对象的创建权全部交给了Spring管理</li>
<li>支持AOP编程</li>
<li>声明式事务</li>
<li>Spring很方便继承各种优秀的框架</li>
<li>Spring还对比较难用的api提供了封装，方便我们使用</li>
</ul>
</blockquote>
<h3 id="1-spring-程序开发步骤">1. Spring 程序开发步骤</h3>
<ul>
<li>导入Spring开发的基本包坐标（Maven依赖）</li>
</ul>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>编写Dao接口和实现类（Bean）</li>
</ul>
<pre><code class="language-java">public interface UserDao {
    public abstract void save();
}

public class UserDaoImpl implements UserDao {
    @Override
    public void save() {
        System.out.println(&quot;save方法&quot;);
    }
}
</code></pre>
<ul>
<li>创建Spring核心配置文件（applicationContext.xml）</li>
<li>在Spring配置文件中配置（bean）</li>
</ul>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<ul>
<li>使用Spring的API获得Bean实例（ new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;)）</li>
</ul>
<pre><code class="language-java">public class UserDaoDemo {
    public static void main(String[] args) {
        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        UserDao userDao = (UserDao) app.getBean(&quot;userDao&quot;);
        userDao.save();
    }
}
</code></pre>
<h3 id="2-spring-配置文件">2. Spring 配置文件</h3>
<h4 id="1-基本属性">①. 基本属性</h4>
<ul>
<li><code>id</code>：Bean实例在Spring容器的唯一标识</li>
<li><code>class</code>：Bean的全限定名称</li>
</ul>
<h4 id="2-范围配置">②. 范围配置</h4>
<ul>
<li><code>scope</code>：对象的作用范围
<ul>
<li><code>singleton</code>：默认值，单例的</li>
<li><code>prototype</code>：多例的</li>
<li><code>request</code>：Web项目中，Spring创建一个Bean对象，将对象存入到request域中</li>
<li><code>session</code>：Web项目中，Spring创建一个Bean对象，将对象存入session域中</li>
<li><code>global session</code>：Web项目中，应用在Portlet环境，如果没有Portlet环境，那么globalSession相当于session</li>
</ul>
</li>
<li>当scope的取值为singleton时
<ul>
<li>Bean的实例化个数：1个</li>
<li>Bean的实例化时机：当Spring核心配置文件被加载时，实例化配置的Bean实例</li>
<li>Bean的生命周期
<ul>
<li>对象创建：当应用加载，创建容器时，对象就被创建了</li>
<li>对象运行：只要容器在，对象一直活着</li>
<li>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</li>
</ul>
</li>
</ul>
</li>
<li>当scope的取值为prototype时
<ul>
<li>Bean的实例化个数：多个</li>
<li>Bean的实例化时机：当调用getBean()方法时实例化Bean
<ul>
<li>对象创建：当使用对象时，创建新的对象实例</li>
<li>对象运行：只要对象在使用中，就一直活着</li>
<li>对象销毁：当对象长时间不用时，被Java的垃圾回收器回收了</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="3-生命周期配置">③. 生命周期配置</h4>
<ul>
<li><code>init-method</code>：指定类中的初始化方法名称</li>
<li><code>destory-method</code>：指定类中销毁方法名称</li>
</ul>
<h4 id="4-bean实例化三种方式">④. Bean实例化三种方式</h4>
<ul>
<li>
<p>无参构造方法实例化</p>
<ul>
<li>
<pre><code class="language-xml">&lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;
</code></pre>
</li>
</ul>
</li>
<li>
<p>工厂静态方法实例化</p>
<ul>
<li>
<pre><code class="language-xml">&lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.factory.StaticFactory&quot; factory-method=&quot;getUserDao&quot;&gt;&lt;/bean&gt;
</code></pre>
</li>
</ul>
</li>
<li>
<p>工厂实例方法实例化</p>
<ul>
<li>
<pre><code class="language-xml">&lt;bean id=&quot;factory&quot; class=&quot;com.zhiyuan.factory.DynamicFactory&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;userDao&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getUserDao&quot;&gt;&lt;/bean&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="5-bean的依赖注入">⑤. Bean的依赖注入</h4>
<ul>
<li>程序最终使用的是UserService，而UserService和UserDao都在Spring容器中，所以可以在Spring容器中，将UserDao设置到UserService的内部，这就叫UserService需要UserDao的依赖注入</li>
<li>依赖注入：Dependency Injection（IOC的具体实现）</li>
</ul>
<h5 id="1-set方法注入">1. set方法注入</h5>
<pre><code class="language-java">public class UserServiceImpl implements UserService {
  private UserDao userDao;
  public void setUserDao(UserDao userDao){
      this.userDao = userDao;
  }
  public void save(){
      userDao.save();
  }
}
</code></pre>
<pre><code class="language-xml">&lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;userService&quot; class=&quot;com.zhiyuan.service.impl.UserServiceImpl&quot;&gt;
&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<ul>
<li>
<p>简化set方法注入</p>
<ul>
<li>引入命名空间</li>
</ul>
<pre><code class="language-xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
</code></pre>
<ul>
<li>进行依赖注入</li>
</ul>
<pre><code class="language-xml">&lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;userService&quot; class=&quot;com.zhiyuan.service.impl.UserServiceImpl&quot; p:userDao-ref=&quot;userDao&quot;&gt;&lt;/bean&gt;
</code></pre>
</li>
</ul>
<h5 id="2-构造方法注入">2. 构造方法注入</h5>
<pre><code class="language-java">public class UserServiceImpl implements UserService {
    private UserDao userDao;

    public UserServiceImpl(UserDao userDao) {
        this.userDao = userDao;
    }
    public UserServiceImpl() {}
    public void save(){
        userDao.save();
    }
}
</code></pre>
<pre><code class="language-xml">&lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;userService&quot; class=&quot;com.zhiyuan.service.impl.UserServiceImpl&quot;&gt;
    &lt;constructor-arg name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;
</code></pre>
<h5 id="3-普通数据类型注入">3. 普通数据类型注入</h5>
<pre><code class="language-java">public class UserDaoImpl implements UserDao {
    private String username;
    private int age;
    @Override
    public void save() {
        System.out.println(&quot;save方法&quot;);
        System.out.println(username+&quot;-&quot;+age);
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
</code></pre>
<pre><code class="language-xml">&lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;
    &lt;property name=&quot;age&quot; value=&quot;69&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<h5 id="4-集合数据类型注入">4. 集合数据类型注入</h5>
<pre><code class="language-xml">&lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;
    &lt;property name=&quot;age&quot; value=&quot;69&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;scoreMap&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;k1&quot; value=&quot;v1&quot;&gt;&lt;/entry&gt;
            &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;
    &lt;property name=&quot;list&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;v1&lt;/value&gt;
            &lt;value&gt;v2&lt;/value&gt;
            &lt;ref bean=&quot;beanName&quot;&gt;&lt;/ref&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<h4 id="6-引入其他配置文件">⑥. 引入其他配置文件</h4>
<ul>
<li>
<p>在实际开发中，Spring的配置内容非常多，这就导致Spring配置文件很繁杂体积很大，所以Spring配置文件支持通过import标签引入外部其他的配置文件</p>
<pre><code class="language-xml">&lt;import resource=&quot;applicationContext-xxx.xml&quot; /&gt;
</code></pre>
</li>
</ul>
<h3 id="3-applicationcontext继承体系">3. ApplicationContext继承体系</h3>
<figure data-type="image" tabindex="1"><img src="http://pic.zyblog.xyz/img/typora/20210201124651.png" alt="img" loading="lazy"></figure>
<h4 id="1-applicationcontext">①. ApplicationContext</h4>
<ul>
<li>
<p>接口类型，代表应用上下文，可以通过其实例获得Spring容器中的Bean对象</p>
</li>
<li>
<p>实现类</p>
<ul>
<li>
<p>ClassPathXmlApplicationContext</p>
<ul>
<li>从类的根路径下加载配置文件（推荐）</li>
</ul>
</li>
<li>
<p>FileSystemXmlApplicationContext</p>
<ul>
<li>从磁盘路径中加载配置文件，配置文件可以在任意位置</li>
</ul>
</li>
<li>
<p>AnnotationConfigApplicationContext</p>
<ul>
<li>当使用注解配置容器对象时，需要使用此类来创建Spring容器，它用来读取注解</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-常用-api">4. 常用 API</h3>
<h4 id="1-getbean方法">①. getBean()方法</h4>
<ul>
<li><code>getBean(String name)</code>：获取指定类名称的Bean对象</li>
<li><code>getBean(Class&lt;T&gt; requiredType)</code>：获取指定类类型的Bean对象</li>
</ul>
<h3 id="5-spring配置数据源">5. Spring配置数据源</h3>
<h4 id="1-数据源数据库连接池datasource">①. 数据源（数据库连接池：DataSource）</h4>
<ul>
<li><code>DBCP</code> <code>C3P0</code> <code>Druid</code></li>
</ul>
<h4 id="2-数据库连接池的配置">②. 数据库连接池的配置</h4>
<ul>
<li>导入数据库相关依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid&lt;/artifactId&gt;
    &lt;version&gt;1.2.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.mchange&lt;/groupId&gt;
    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
    &lt;version&gt;0.9.5.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>Spring配置数据库连接池</li>
</ul>
<pre><code class="language-xml">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<ul>
<li>代码实现</li>
</ul>
<pre><code class="language-java">public class DataSourceDemo1 {
    public static void main(String[] args) throws Exception {
        // ComboPooledDataSource ds = new ComboPooledDataSource();
        // Connection conn = ds.getConnection();
        // String sql  = &quot;select * from user&quot;;
        // PreparedStatement pstat = conn.prepareStatement(sql);
        // ResultSet rs = pstat.executeQuery();
        // while(rs.next()){
        //     System.out.println(rs.getInt(&quot;id&quot;));
        // }
        // ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        // DataSource ds = (DataSource)app.getBean(&quot;dataSource&quot;);
        // Connection conn = ds.getConnection();
        // String sql = &quot;select * from user&quot;;
        // PreparedStatement pstat = conn.prepareStatement(sql);
        // ResultSet rs = pstat.executeQuery();
        // while(rs.next()){
        //     System.out.println(rs.getInt(&quot;id&quot;));
        // }
        // DruidDataSource ds = new DruidDataSource();
        // ds.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);
        // ds.setUrl(&quot;jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&quot;);
        // ds.setUsername(&quot;root&quot;);
        // ds.setPassword(&quot;123456&quot;);
        // DruidPooledConnection conn = ds.getConnection();
        // String sql = &quot;select * from user&quot;;
        // PreparedStatement pstat = conn.prepareStatement(sql);
        // ResultSet rs = pstat.executeQuery();
        // while(rs.next()){
        //     System.out.println(rs.getInt(&quot;id&quot;));
        // }
        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        DataSource ds = (DataSource)app.getBean(&quot;dataSource&quot;);
        Connection conn = ds.getConnection();
        String sql = &quot;select * from user&quot;;
        PreparedStatement pstat = conn.prepareStatement(sql);
        ResultSet rs = pstat.executeQuery();
        while(rs.next()){
            System.out.println(rs.getInt(&quot;id&quot;));
        }
    }
}
public class DataSourceDemo1 {
    public static void main(String[] args) throws Exception {
        // ComboPooledDataSource ds = new ComboPooledDataSource();
        // Connection conn = ds.getConnection();
        // String sql  = &quot;select * from user&quot;;
        // PreparedStatement pstat = conn.prepareStatement(sql);
        // ResultSet rs = pstat.executeQuery();
        // while(rs.next()){
        //     System.out.println(rs.getInt(&quot;id&quot;));
        // }
        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        DataSource ds = (DataSource)app.getBean(&quot;dataSource&quot;);
        Connection conn = ds.getConnection();
        String sql = &quot;select * from user&quot;;
        PreparedStatement pstat = conn.prepareStatement(sql);
        ResultSet rs = pstat.executeQuery();
        while(rs.next()){
            System.out.println(rs.getInt(&quot;id&quot;));
        }
    }
}
</code></pre>
<h4 id="3-数据库连接池抽取配置文件">③. 数据库连接池抽取配置文件</h4>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;context:property-placeholder location=&quot;classpath:druid.properties&quot;/&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot;  value=&quot;${driverClassName}&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;
        &lt;property name=&quot;initialSize&quot; value=&quot;${initialSize}&quot;/&gt;
        &lt;property name=&quot;maxActive&quot; value=&quot;${maxActive}&quot;/&gt;
        &lt;property name=&quot;maxWait&quot; value=&quot;${maxWait}&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<pre><code class="language-java">DataSource dataSource = (DataSource)app.getBean(&quot;dataSource&quot;);
try {
    Connection conn = dataSource.getConnection();
    System.out.println(conn);
} catch (SQLException throwables) {
    throwables.printStackTrace();
}
</code></pre>
<blockquote>
<p>这里会产生一个严重错误，产生原因是，在applicationContext.xml中，直接使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><mi mathvariant="normal">引</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">户</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">并</mi><mi mathvariant="normal">非</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">配</mi><mi mathvariant="normal">置</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">户</mi><mi mathvariant="normal">名</mi><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">排</mi><mi mathvariant="normal">查</mi><mi mathvariant="normal">发</mi><mi mathvariant="normal">现</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">直</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">给</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">户</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">以</mi><mi mathvariant="normal">正</mi><mi mathvariant="normal">常</mi><mi mathvariant="normal">工</mi><mi mathvariant="normal">作</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">但</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">使</mi><mi mathvariant="normal">用</mi></mrow><annotation encoding="application/x-tex">{username}引入的用户名，并非是我们配置文件中的用户名username，排查发现当我们直接给用户名可以正常工作，但是使用</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">户</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">非</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">置</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">户</span><span class="mord cjk_fallback">名</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">排</span><span class="mord cjk_fallback">查</span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">现</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">给</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">户</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">正</span><span class="mord cjk_fallback">常</span><span class="mord cjk_fallback">工</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span></span></span></span>{}引入变量就会造成错误，所以得出一个结论，我们使用${username}调用配置文件的值时，spring会先从默认系统变量中寻找，找到了直接使用默认的，不会继续寻找配置文件中的，被劫糊了，而系统环境变量与实际的数据库username，而两者编码和内容都不一致，导致连接数据库失败</p>
<p>解决办法，不要在配置文件中适用username属性，虽然druid连接池默认应该是username，但是这里使用spring加载，为了避免spring的混乱，所以还是修改一下druid配置文件中username的名字，改成dbusername或者其他，然后在spring配置文件中引入${dbusername}即可</p>
</blockquote>
<pre><code class="language-properties">driverClassName=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai
dbusername=root
# 将username改为dbusername
password=123456
initialSize=5
maxActive=10
maxWait=3000
</code></pre>
<h3 id="6-spring注解开发">6. Spring注解开发</h3>
<ul>
<li>好处：类比web3.0之前的web开发（配置文件形式的）和web3.0及以后的web开发（注解形式的）</li>
<li>原因：Spring是轻代码重配置的框架，我们需要写的代码其实并不是很多，配置的文件那才是相当的多，配置繁多，影响开发效率，所以注解开发是一种简化开发的解决方案，注解代替xml配置文件即可以简化配置，又可以提高开发效率，何乐而不为</li>
</ul>
<h4 id="1-spring原始注解">①. Spring原始注解</h4>
<table>
<thead>
<tr>
<th>注解名称</th>
<th>适用范围</th>
<th>注解说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@Component</code></td>
<td>用在所有类上</td>
<td>实例化JavaBean</td>
</tr>
<tr>
<td><code>@Controller</code></td>
<td>用在<code>web</code>层类上</td>
<td>实例化JavaBean（语义化web层）</td>
</tr>
<tr>
<td><code>@Service</code></td>
<td>用在<code>service</code>层类上</td>
<td>实例化JavaBean（语义化service层）</td>
</tr>
<tr>
<td><code>@Repository</code></td>
<td>用在<code>dao</code>层类上</td>
<td>实例化JavaBean（语义化dao层）</td>
</tr>
<tr>
<td><code>@Autowired</code></td>
<td>用在字段上</td>
<td>根据类型进行依赖注入</td>
</tr>
<tr>
<td><code>@Qualifier</code></td>
<td>结合<code>@Autowired</code>，用在字段上</td>
<td>根据名称进行依赖注入</td>
</tr>
<tr>
<td><code>@Resource</code></td>
<td>等同于<code>@Autowired+@Qualifier</code>，用在字段上</td>
<td>按照名称进行依赖注入</td>
</tr>
<tr>
<td><code>@Value</code></td>
<td>用在字段上，一般用在使用<code>${}</code>引入数据库配置文件相关属性上</td>
<td>注入普通属性值</td>
</tr>
<tr>
<td><code>@Scope</code></td>
<td>用在类上，指定实例化模式是 多例 或 单例，<code>prototype</code> 或 <code>singleton</code></td>
<td>标注JavaBean作用范围</td>
</tr>
<tr>
<td><code>@PostConstruct</code></td>
<td>用在方法上，指定JavaBean对象的初始化方法<code>init-method</code></td>
<td>标注JavaBean的初始化方法</td>
</tr>
<tr>
<td><code>@PreDestory</code></td>
<td>用在方法上，指定JavaBean对象的销毁方法<code>destory-method</code></td>
<td>标注JavaBean的销毁方法</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：使用注解开发时，需要在applicationContext.xml中配置组件扫描</p>
<p>作用：指定哪个包及其子包下的JavaBean需要进行扫描，需要扫描的注解对应的类，字段和方法</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
  xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
&lt;context:component-scan base-package=&quot;com.zhiyuan&quot;/&gt;
&lt;/beans&gt;
</code></pre>
</blockquote>
<h4 id="2-spring新注解">②. Spring新注解</h4>
<blockquote>
<p>虽然原始注解解决了原来很多问题，但依然有些配置问题无法解决，于是Spring新注解出现了，它采用了一种使用类来描述配置文件的方法来提升我们的工作效率，配置文件烦杂，并不意味着我们不再需要配置文件，所以引入了用类来表示配置文件的解决方案</p>
</blockquote>
<table>
<thead>
<tr>
<th>注解名称</th>
<th>适用范围</th>
<th>注解说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Configuration</td>
<td>用在类上</td>
<td>指定当前类为Spring配置类，当创建容器时会从该类上加载注释</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>用在类上</td>
<td>指定Spring在初始化容器时扫描的包，作用等同于<code>&lt;context:component-scan base-package=&quot;com.zhiyuan&quot;/&gt;</code></td>
</tr>
<tr>
<td>@Bean</td>
<td>用在方法上</td>
<td>标注将该方法的返回值存储到Spring容器中</td>
</tr>
<tr>
<td>@PropertySource</td>
<td></td>
<td>用于加载 <code>.properties</code>配置文件中的配置信息</td>
</tr>
<tr>
<td>@Import</td>
<td></td>
<td>用于导入其他配置类</td>
</tr>
</tbody>
</table>
<blockquote>
<pre><code class="language-java">//标志本类为Spring的核心配置类
@Configuration
//设置组件扫描路径（JavaBean的扫描路径），作用等同于&lt;context:component-scan base-package=&quot;com.zhiyuan&quot;/&gt;
@ComponentScan(&quot;com.zhiyuan&quot;)
//引入配置文件
@PropertySource(&quot;classpath:druid.properties&quot;)
public class DruidConfig {
 @Value(&quot;${driverClassName}&quot;)
 private String driver;
 @Value(&quot;${url}&quot;)
 private String url;
 @Value(&quot;${dbusername}&quot;)
 private String username;
 @Value(&quot;${password}&quot;)
 private String password;
 @Value(&quot;${initialSize}&quot;)
 private int initialSize;
 @Value(&quot;${maxActive}&quot;)
 private int maxActive;
 @Value(&quot;${maxWait}&quot;)
 private int maxWait;
 @Bean(&quot;dataSource&quot;)
 public DataSource getDataSource(){
     Properties pros = new Properties();
     DataSource ds = null;
     try {
         pros.setProperty(&quot;driverClassName&quot;,driver);
         pros.setProperty(&quot;url&quot;,url);
         pros.setProperty(&quot;username&quot;,username);
         pros.setProperty(&quot;password&quot;,password);
         pros.setProperty(&quot;initialSize&quot;,String.valueOf(initialSize));
         pros.setProperty(&quot;maxActive&quot;, String.valueOf(maxActive));
         pros.setProperty(&quot;maxWait&quot;, String.valueOf(maxWait));
         ds = DruidDataSourceFactory.createDataSource(pros);
     } catch (Exception e) {
         e.printStackTrace();
     }
     return ds;
 }
}
</code></pre>
<pre><code class="language-java">//标志本类为Spring的核心配置类
@Configuration
//设置组件扫描路径（JavaBean的扫描路径），作用等同于&lt;context:component-scan base-package=&quot;com.zhiyuan&quot;/&gt;
@ComponentScan(&quot;com.zhiyuan&quot;)
//引入配置文件
@PropertySource(&quot;classpath:druid.properties&quot;)
//加入其它配置文件，作用等同于&lt;import resource=&quot;applicationContext-xxx.xml&quot; /&gt;
@Import(DruidConfig.class)
public class SpringConfiguration {

}
</code></pre>
<pre><code class="language-java">public class ConfigTest {
 @Test
 public void test1(){
     ApplicationContext app = new AnnotationConfigApplicationContext(SpringConfiguration.class);
     DataSource dataSource = (DataSource) app.getBean(&quot;dataSource&quot;);
     try {
         Connection conn = dataSource.getConnection();
         System.out.println(conn);
     } catch (SQLException throwables) {
         throwables.printStackTrace();
     }
 }
}
</code></pre>
<p>正常输出对象的hash地址值</p>
</blockquote>
<h4 id="3-spring集成jnuit">③. Spring集成Jnuit</h4>
<ul>
<li>导入SpringTest的依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>使用注解 <code>@RunWith(SpringJUnit4ClassRunner.class)</code> 替换运来的运行期</li>
<li>使用 <code>@ContextConfiguration(classes = {SpringConfiguration.class})</code> 指定配置文件或配置类</li>
<li>使用 <code>@Autowired</code> 注入需要测试的对象</li>
<li>创建测试方法进行测试</li>
</ul>
<h5 id="代码实现">代码实现</h5>
<pre><code class="language-java">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {SpringConfiguration.class})
public class SpringJunitTest {
    @Autowired
    private DataSource dataSource;
    @Test
    public void test1(){
        try {
            Connection conn = dataSource.getConnection();
            System.out.println(conn);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }
}
</code></pre>
<h3 id="7-aop">7. AOP</h3>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cglib&lt;/groupId&gt;
    &lt;artifactId&gt;cglib&lt;/artifactId&gt;
    &lt;version&gt;3.3.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
    &lt;version&gt;1.9.6&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="1-概述">①. 概述</h4>
<blockquote>
<p>AOP是Aspect Oriented Programming的缩写，意思是面向切面编程，是通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术</p>
</blockquote>
<h4 id="2-作用">②. 作用</h4>
<blockquote>
<p>AOP是OOP的延续，是Spring框架中一个重要内容，是函数式编程的一种衍生，利用AOP可以对业务逻辑各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可用性，同时提高了开发效率</p>
</blockquote>
<ul>
<li>在不修改源码的情况下对方法的功能进行增强</li>
<li>优点：减少重复代码，提高开发效率，便于维护</li>
</ul>
<h4 id="3-aop底层实现">③. AOP底层实现</h4>
<ul>
<li>
<p>动态代理技术</p>
<ul>
<li>
<p>JDK代理：基于接口的动态代理对象</p>
<figure data-type="image" tabindex="2"><img src="http://pic.zyblog.xyz/img/typora/20210215125048.png" alt="image-20210215125040875" loading="lazy"></figure>
</li>
<li>
<p>CGLIB代理：基于父类的动态代理技术</p>
<figure data-type="image" tabindex="3"><img src="http://pic.zyblog.xyz/img/typora/20210215125109.png" alt="image-20210215125109151" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
<h4 id="4-相关概念">④. 相关概念</h4>
<ul>
<li><code>Target（目标对象）</code>：代理的目标对象</li>
<li><code>Proxy（代理）</code>：一个类被AOP增强后，就产生一个结果代理类</li>
<li><code>Joinpoint（连接点）</code>：被拦截到的点，在spring中指的是方法，因为spring只支持方法类型的连接点</li>
<li><code>Pointcut（切入点）</code>：指我们要对哪些Joinpoint进行拦截定义</li>
<li><code> Advice（通知/增强）</code>：指拦截到Joinpoint之后所要做的增强</li>
<li><code>Aspect（切面）</code>：是切入点和增强的结合</li>
<li><code>Weaving（织入）</code>：切入点和增强结合的过程</li>
</ul>
<blockquote>
<p>概念性的东西着重归纳出自己的见解，而不是死记硬背，像这种恶心的概念，也只有记笔记的时候，才会出现</p>
</blockquote>
<h4 id="5-xml配置aop详解">⑤. XML配置AOP详解</h4>
<ul>
<li>
<p>切点表达式</p>
<ul>
<li>语法：<code>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</code></li>
<li>访问修饰符可以省略</li>
<li>返回值类型，包名，类名，方法名可以使用 <code>*</code> 代表任意</li>
<li>包名与类名之间一个点 <code>.</code> 代表当前包下的类，两个点 <code>..</code>表示当前包及其子包下的类</li>
<li>参数列表可以使用两个点 <code>..</code> 表示任意个数，任意类型的参数列表</li>
</ul>
</li>
<li>
<p>增强类型</p>
<ul>
<li>语法：<code>&lt;aop:增强类型 method=&quot;切面类中方法名&quot; pointcut=&quot;切点表达式&quot; /&gt;</code></li>
<li>增强类型
<ul>
<li>前置增强：<code>&lt;aop:before&gt;</code>：在切点方法执行之前执行</li>
<li>后置增强：<code>&lt;aop:after-returning&gt;</code>：在切点方法执行之后执行</li>
<li>环绕增强：<code>&lt;aop:around&gt;</code>：在切点方法之前之后均执行</li>
<li>异常抛出增强：<code>&lt;aop:throwing&gt;</code>：当增强方法出现异常时执行</li>
<li>最终增强：<code>&lt;aop:after&gt;</code>：在所有增强方法执行完毕时执行</li>
</ul>
</li>
</ul>
</li>
<li>
<p>代码实现</p>
<ul>
<li>
<pre><code class="language-java">public class Target {
    public void show(){
        System.out.println(&quot;show方法&quot;);
    }
}

public class MyAspect {
    public void before(){
        System.out.println(&quot;前置增强方法&quot;);
    }
    public void afterReturning(){
        System.out.println(&quot;后置增强方法&quot;);
    }
    public Object around(ProceedingJoinPoint pjp) throws Throwable {
        System.out.println(&quot;前置增强方法&quot;);
        Object proceed = pjp.proceed();
        System.out.println(&quot;后置增强方法&quot;);
        return proceed;
    }
    public void afterThrowing(){
        System.out.println(&quot;增强方法出现异常&quot;);
    }
    public void after(){
        System.out.println(&quot;最终增强&quot;);
    }
}
</code></pre>
<pre><code class="language-xml">&lt;bean id=&quot;target&quot; class=&quot;com.zhiyuan.proxy.aop.Target&quot;/&gt;
&lt;bean id=&quot;aspect&quot; class=&quot;com.zhiyuan.proxy.aop.MyAspect&quot;/&gt;
&lt;aop:config&gt;
&lt;aop:aspect ref=&quot;aspect&quot;&gt;
    &lt;aop:before method=&quot;before&quot; pointcut=&quot;execution(* com.zhiyuan.proxy.aop.*.*(..))&quot;/&gt;
    &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut=&quot;execution(* com.zhiyuan.proxy.aop.*.*(..))&quot;/&gt;
    &lt;aop:around method=&quot;around&quot; pointcut=&quot;execution(* com.zhiyuan.proxy.aop.*.*(..))&quot;/&gt;
    &lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut=&quot;execution(* com.zhiyuan.proxy.aop.*.*(..))&quot;/&gt;
    &lt;aop:after method=&quot;after&quot; pointcut=&quot;execution(* com.zhiyuan.proxy.aop.*.*(..))&quot;/&gt;
&lt;/aop:aspect&gt;
&lt;/aop:config&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="6-切点表达式抽取">⑥. 切点表达式抽取</h4>
<ul>
<li>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 <code>pointcut-ref</code> 属性替代 <code>pointcut</code> 属性来引用抽取后的切点表达式</li>
</ul>
<pre><code class="language-xml">&lt;bean id=&quot;target&quot; class=&quot;com.zhiyuan.proxy.aop.Target&quot;/&gt;
&lt;bean id=&quot;aspect&quot; class=&quot;com.zhiyuan.proxy.aop.MyAspect&quot;/&gt;
&lt;aop:config&gt;
    &lt;aop:aspect ref=&quot;aspect&quot;&gt;
        &lt;aop:pointcut id=&quot;myPointcut&quot; expression=&quot;execution(* com.zhiyuan.proxy.aop.*.*(..))&quot;/&gt;
        &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;
        &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;
        &lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;
        &lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;
        &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;
    &lt;/aop:aspect&gt;
&lt;/aop:config&gt;
</code></pre>
<h4 id="7-注解配置aop">⑦. 注解配置AOP</h4>
<ul>
<li>
<p>配置步骤</p>
<ul>
<li>使用 <code>@Aspect</code> 标注切面类</li>
<li>使用 <code>@增强类型</code> 标注增强方法</li>
<li>在配置文件中配置aop自动代理 <code>&lt;aop:aspectj-autoproxy/&gt;</code></li>
</ul>
</li>
<li>
<p>注解增强类型</p>
<ul>
<li><code>@Before</code>：用于配置前置增强，指定增强的方法在切入点之前执行</li>
<li><code>@AfterReturning</code>：用于配置后置增强，指定增强的方法在切入点方法之后执行</li>
<li><code>@Around</code>：用于配置环绕增强，指定增强的方法在出现异常时执行</li>
<li><code>@AfterThrowing</code>：用于配置异常抛出通知，指定增强的方法在出现异常时执行</li>
<li><code>@After</code>：用于配置最终通知，无论增强方法执行是否有异常都会执行</li>
</ul>
</li>
<li>
<p>代码实现</p>
</li>
</ul>
<pre><code class="language-java">public interface TargetInterface {
    public abstract void show();
}
</code></pre>
<pre><code class="language-java">@Component(&quot;target&quot;)
public class Target implements TargetInterface{
    @Override
    public void show(){
        System.out.println(&quot;show方法&quot;);
    }
}
</code></pre>
<pre><code class="language-java">@Component(&quot;myAspect&quot;)
@Aspect
public class MyAspect {
    @Before(&quot;execution(* com.zhiyuan.proxy.anno.*.*(..))&quot;)
    public void before(){
        System.out.println(&quot;前置增强方法&quot;);
    }
    @AfterReturning(&quot;execution(* com.zhiyuan.proxy.anno.*.*(..))&quot;)
    public void afterReturning(){
        System.out.println(&quot;后置增强方法&quot;);
    }
    @Around(&quot;execution(* com.zhiyuan.proxy.anno.*.*(..))&quot;)
    public Object around(ProceedingJoinPoint pjp) throws Throwable {
        System.out.println(&quot;前置增强方法&quot;);
        Object proceed = pjp.proceed();
        System.out.println(&quot;后置增强方法&quot;);
        return proceed;
    }
    @AfterThrowing(&quot;execution(* com.zhiyuan.proxy.anno.*.*(..))&quot;)
    public void afterThrowing(){
        System.out.println(&quot;增强方法出现异常&quot;);
    }
    @After(&quot;execution(* com.zhiyuan.proxy.anno.*.*(..))&quot;)
    public void after(){
        System.out.println(&quot;最终增强&quot;);
    }
}
</code></pre>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
    &lt;!--开启组件扫描--&gt;
    &lt;context:component-scan base-package=&quot;com.zhiyuan.proxy.anno&quot;/&gt;
    &lt;!--设置AOP自动代理--&gt;
    &lt;aop:aspectj-autoproxy/&gt;
&lt;/beans&gt;
</code></pre>
<pre><code class="language-java">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(&quot;classpath:applicationContext-anno.xml&quot;)

public class AnnoTest {
    @Autowired
    private TargetInterface target;
    @Test
    public void test1(){
        target.show();
    }
}
</code></pre>
<pre><code class="language-shell">前置增强方法
前置增强方法
show方法
后置增强方法
最终增强
后置增强方法
</code></pre>
<ul>
<li>抽取切点表达式
<ul>
<li>在切面内定义方法，在该方法上使用 <code>@Pointcut</code> 注解定义切点表达式，然后在增强注解中进行引用</li>
</ul>
</li>
<li>代码实现</li>
</ul>
<pre><code class="language-java">@Component(&quot;myAspect&quot;)
@Aspect
public class MyAspect {
    @Before(&quot;MyAspect.pointcut()&quot;)
    public void before(){
        System.out.println(&quot;前置增强方法&quot;);
    }
    @AfterReturning(&quot;pointcut()&quot;)
    public void afterReturning(){
        System.out.println(&quot;后置增强方法&quot;);
    }
    @Around(&quot;pointcut()&quot;)
    public Object around(ProceedingJoinPoint pjp) throws Throwable {
        System.out.println(&quot;前置增强方法&quot;);
        Object proceed = pjp.proceed();
        System.out.println(&quot;后置增强方法&quot;);
        return proceed;
    }
    @AfterThrowing(&quot;pointcut()&quot;)
    public void afterThrowing(){
        System.out.println(&quot;增强方法出现异常&quot;);
    }
    @After(&quot;pointcut()&quot;)
    public void after(){
        System.out.println(&quot;最终增强&quot;);
    }
    @Pointcut(&quot;execution(* com.zhiyuan.proxy.anno.*.*(..))&quot;)
    public void pointcut(){}
}
</code></pre>
<h3 id="8-springjdbctemplate">8. SpringJdbcTemplate</h3>
<h4 id="1-导入依赖">①. 导入依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="2-xml配置">②. xml配置</h4>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd &quot;&gt;
    &lt;!--加载配置文件--&gt;
    &lt;context:property-placeholder location=&quot;classpath:druid.properties&quot;/&gt;
    &lt;!--配置DataSource--&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;${driverClassName}&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;${dbusername}&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--配置JdbcTemplate--&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<pre><code class="language-java">public class JdbcTemplateTest {
    @Test
    public void test1(){
        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        JdbcTemplate jdbcTemplate = (JdbcTemplate)app.getBean(&quot;jdbcTemplate&quot;);
        List&lt;User&gt; list = jdbcTemplate.query(&quot;select * from user&quot;, new BeanPropertyRowMapper&lt;User&gt;(User.class));
        for (User user : list) {
            System.out.println(user);
        }
    }
}
</code></pre>
<h3 id="9-spring的事务控制">9. Spring的事务控制</h3>
<h4 id="1-编程式事务控制">①. 编程式事务控制</h4>
<ul>
<li><code>PlatformTransactionManager</code> ：Spring的事务管理器
<ul>
<li><code>TransactionStatus getTransaction(TransactionDefination defination)</code>：获取事务状态信息</li>
<li><code>void commit(TransactionStatus status)</code>：提交事务</li>
<li><code>void rollback(TransactionStatus status)</code>：回滚事务</li>
</ul>
</li>
<li><code>TransactionDefination</code>：事务信息对象
<ul>
<li><code>int getIsolationLevel()</code>：获取事务的隔离级别</li>
<li><code>int getPropogationBehavior</code>：获取事务的传播行为</li>
<li><code>int getTimeout()</code>：获取超时时间</li>
<li><code>boolean isReadOnly()</code>：是否只读</li>
</ul>
</li>
<li>事务隔离级别
<ul>
<li><code>ISOLATION_DEFAULT</code>：默认</li>
<li><code>ISOLATION_READ_UNCOMMITTED</code>：读未提交</li>
<li><code>ISOLATION_READ_COMMITTED</code>：读已提交</li>
<li><code>ISOLATION_REPEATABLE_READ</code>：可重复读</li>
<li><code>ISOLATION_SERIALIZABLE</code>：串行化</li>
</ul>
</li>
<li>事务传播行为
<ul>
<li><code>REQUIRED</code>：如果当时没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，一般选择这一项（默认值）</li>
<li><code>SUPPORTS</code>：支持当前事务，如果当前没有事务，就以非事务方式执行</li>
<li><code>MANDATORY</code>：使用当前的事务，如果当前没有事务，就抛出异常</li>
<li><code>REQUES_NEW</code>：新建事务，如果当前在事务中，就把当前事务挂起</li>
<li><code>NOT_SUPPORTED</code>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li>
<li><code>NEVER</code>：以非事务方式运行，如果当前存在事务，抛出异常</li>
<li><code>NESTED</code>：如果当前存在事务，则在嵌套事务内执行，如果当前没有实物，则执行 <code>REQUIRED</code> 类似的操作</li>
<li>超时时间：默认值为-1，没有超时限制，单位为秒可设置超时时间</li>
<li>是否只读：建议查询时设置为只读</li>
</ul>
</li>
<li><code>TransactionStatus</code>：事务状态信息
<ul>
<li><code>boolean hasSavepoint()</code>：是否存储回滚点</li>
<li><code>boolean isCompleted()</code>：事务是否完成</li>
<li><code>boolean isNewTransaction()</code>：是否是新事务</li>
<li><code>boolean isRollbackOnly()</code>：事务是否回滚</li>
</ul>
</li>
</ul>
<h4 id="2-声明式事务控制">②. 声明式事务控制</h4>
<ul>
<li>
<p>Spring声明式事务控制底层就是AOP</p>
</li>
<li>
<p>基于xml配置实现</p>
<ul>
<li>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;
    &lt;!--加载配置文件--&gt;
    &lt;context:property-placeholder location=&quot;classpath:druid.properties&quot;/&gt;
    &lt;!--配置DataSource--&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;${driverClassName}&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;${dbusername}&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--配置JdbcTemplate--&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;userDao&quot; class=&quot;com.zhiyuan.dao.impl.UserDaoImpl&quot;&gt;
        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;userService&quot; class=&quot;com.zhiyuan.service.impl.UserServiceImpl&quot;&gt;
        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--配置平台事务管理对象--&gt;
    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--增强事务--&gt;
    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;
        &lt;tx:attributes&gt;
            &lt;tx:method name=&quot;transfer&quot; isolation=&quot;REPEATABLE_READ&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;false&quot;/&gt;
            &lt;tx:method name=&quot;*&quot; isolation=&quot;DEFAULT&quot; propagation=&quot;REQUIRED&quot; timeout=&quot;-1&quot; read-only=&quot;false&quot;/&gt;
        &lt;/tx:attributes&gt;
    &lt;/tx:advice&gt;
    &lt;!--配置事务的织入--&gt;
    &lt;aop:config&gt;
        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com.zhiyuan.service.impl.*.*(..))&quot;/&gt;
    &lt;/aop:config&gt;
&lt;/beans&gt;
</code></pre>
</li>
</ul>
</li>
<li>
<p>基于注解配置实现</p>
<ul>
<li>使用 <code>@Transactional</code> 在需要进行事务控制的类或是方法上修饰，注解可用的属性同xml的配置方式</li>
<li>注解使用在类上，那么该类下所有方法都是用同一套注解参数配置</li>
<li>使用在方法上，不同的方法可以采用不同的事务参数配置</li>
<li>xml配置文件中要开启事务的注解驱动 <code>&lt;tx:annotation-driven&gt;</code></li>
<li>事务控制配置建议使用xml配置</li>
</ul>
</li>
</ul>
<h3 id="10-spring与web环境的集成">10. Spring与web环境的集成</h3>
<h4 id="1-applicationcontext的获取">①. ApplicationContext的获取</h4>
<ul>
<li>
<p>使用 <code>ServletContextListener</code> 监听web应用的启动，在 <code>ServletContext</code> 被创建时，创建 <code>ApplicationContext</code> 对象并存储到 <code>ServletContext</code> 域中，这样就可以在当前项目的任意位置获取到Spring容器</p>
</li>
<li>
<p>Spring提供了一个监听器 <code>ContextLoaderListener</code> 就是对上述功能的封装，该监听器内部加载Spring配置文件，创建了Spring容器对象，并存储到ServletContext域中，提供一个工具类供使用者获得Spring容器对象</p>
</li>
<li>
<p>使用步骤</p>
<ul>
<li>导入 <code>spring-web</code> 坐标</li>
<li>在 <code>web.xml</code> 中配置 <code>ContextLoaderListener</code> 监听器</li>
<li>使用 <code>WebApplicationContextUtils</code> 获得应用上下文对象 <code>ApplicationContext</code></li>
</ul>
</li>
<li>
<p>代码实现</p>
<ul>
<li>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;
         version=&quot;4.0&quot;&gt;
    &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
    &lt;/context-param&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;
&lt;/web-app&gt;
</code></pre>
</li>
<li>
<pre><code class="language-java">ServletContext servletContext = this.getServletContext();
ApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="二-springmvc">二、SpringMVC</h2>
<ul>
<li>SpringMVC是一种基于Java实现MVC设计模式的请求驱动类型的轻量级web框架，属于SpringFrameWork的后续产品，已经融合在 SpringWebFlow 中</li>
<li>它通过一套注解，让一个简单的Java类成为处理请求的控制器，而无序实现任何接口，同时它还支持RESTful 编程风格的请求</li>
</ul>
<blockquote>
<p>RestFul请求规范：</p>
<p>get：查询数据</p>
<p>post：添加数据</p>
<p>put：修改数据</p>
<p>delete：删除数据</p>
</blockquote>
<h3 id="1-开发步骤">1. 开发步骤</h3>
<h4 id="1-导入springmvc的依赖">①. 导入SpringMVC的依赖</h4>
<h4 id="2-配置springmvc核心控制器dispatcherservlet">②. 配置SpringMVC核心控制器DispatcherServlet</h4>
<h4 id="3-编写controller业务和view页面">③. 编写Controller业务和View页面</h4>
<h4 id="4-将controller使用注解配置到spring容器中">④. 将Controller使用注解配置到Spring容器中</h4>
<h4 id="5-配置spring-mvcxml文件配置组件扫描">⑤. 配置spring-mvc.xml文件（配置组件扫描）</h4>
<h4 id="6-客户端发起请求测试">⑥. 客户端发起请求测试</h4>
<h3 id="2-代码实现">2. 代码实现</h3>
<ul>
<li>导入SpringMVC依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>配置Servlet</li>
</ul>
<pre><code class="language-xml">&lt;!--配置SpringMVC的前端控制器--&gt;
&lt;servlet&gt;
    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>
<ul>
<li>编写Controller</li>
</ul>
<pre><code class="language-java">@Controller
public class UserController extends HttpServlet {
    @RequestMapping(&quot;/show&quot;)
    public String show(){
        System.out.println(&quot;show地址映射&quot;);
        return &quot;new.jsp&quot;;
    }
}
</code></pre>
<ul>
<li>配置SpringMVC配置文件组件扫描</li>
</ul>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
    &lt;context:component-scan base-package=&quot;com.zhiyuan.controller&quot;/&gt;
&lt;/beans&gt;
</code></pre>
<h3 id="3-流程图示">3. 流程图示</h3>
<figure data-type="image" tabindex="4"><img src="http://pic.zyblog.xyz/img/typora/20210222094947.png" alt="image-20210222094937825" loading="lazy"></figure>
<h3 id="4-执行流程">4. 执行流程</h3>
<figure data-type="image" tabindex="5"><img src="http://pic.zyblog.xyz/img/typora/20210303095152.png" alt="image-20210303095145331" loading="lazy"></figure>
<h4 id="1-用户发送请求到前端控制器dispatcherservlet">①. 用户发送请求到前端控制器DispatcherServlet</h4>
<h4 id="2-dispatcherservlet收到请求调用handlermapping处理器映射器">②. DispatcherServlet收到请求调用HandlerMapping处理器映射器</h4>
<h4 id="3-处理器映射器找到具体的处理器可以根据xml或者注解进行查找生成处理器对象及处理器拦截器如果有则生成一并返回给dispatcherservlet">③. 处理器映射器找到具体的处理器（可以根据xml或者注解进行查找），生成处理器对象及处理器拦截器（如果有则生成）一并返回给DispatcherServlet</h4>
<h4 id="4-disptcherservlet调用handleradaptor处理器适配器">④. DisptcherServlet调用HandlerAdaptor处理器适配器</h4>
<h4 id="5-handleradaptor经过适配器调用具体的处理器controller也叫后端控制器">⑤. HandlerAdaptor经过适配器调用具体的处理器（Controller，也叫后端控制器）</h4>
<h4 id="6-controller执行完成返回modelandview">⑥. Controller执行完成返回ModelAndView</h4>
<h4 id="7-handleradaptor将controller执行结modelandview返回给dispatcherservlet">⑦. HandlerAdaptor将controller执行结ModelAndView返回给DispatcherServlet</h4>
<h4 id="8-dispatcherservlet将modelandview传给viewreslover视图解析器">⑧. DispatcherServlet将ModelAndView传给ViewReslover视图解析器</h4>
<h4 id="9-viewreslover解析后返回具体view">⑨. ViewReslover解析后返回具体View</h4>
<h4 id="10-dispatcherservlet根据view进行渲染视图将模型数据填充至视图中由dispatcherservlet响应用户">⑩. DispatcherServlet根据View进行渲染视图（将模型数据填充至视图中），由DispatcherServlet响应用户</h4>
<h3 id="5-springmvc注解解析">5. SpringMVC注解解析</h3>
<h4 id="1-requestmapping">①. <code>@RequestMapping</code></h4>
<ul>
<li>用在类上
<ul>
<li>映射模块路径：请求URL的一级访问目录，如果类上不加，默认为根目录</li>
</ul>
</li>
<li>用在方法上
<ul>
<li>映射方法路径：请求URL的二级访问目录，与类上的目录组合完成指定方法的访问</li>
</ul>
</li>
<li>属性
<ul>
<li>value：用于指定请求的URL</li>
<li>method：用于指定请求的方式 <code>值建议使用RequestMethod枚举类型</code></li>
<li>params：用于指定限制请求参数的条件，它支持简单的表达式，要求请求参数的key和value必须和配置的一模一样</li>
</ul>
</li>
</ul>
<h3 id="6-springmvc的xml配置">6. SpringMVC的xml配置</h3>
<pre><code class="language-xml">&lt;!--开启Controller注解扫描--&gt;
&lt;context:component-scan base-package=&quot;com.zhiyuan.controller&quot;&gt;
    &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;
&lt;/context:component-scan&gt;
&lt;!--注册处理器映射器--&gt;
&lt;bean id=&quot;handlerMapping&quot; class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;
&lt;!--注册处理器适配器--&gt;
&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;
    &lt;property name=&quot;messageConverters&quot;&gt;
        &lt;list&gt;
            &lt;bean id=&quot;stringConverter&quot; class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;
                &lt;property name=&quot;supportedMediaTypes&quot;&gt;
                    &lt;list&gt;
                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;
                    &lt;/list&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
            &lt;bean id=&quot;jsonConverter&quot; class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;
                &lt;property name=&quot;supportedMediaTypes&quot;&gt;
                    &lt;list&gt;
                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;
                    &lt;/list&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;!--注册内部视图解析器--&gt;
&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
    &lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot;/&gt;
    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<h3 id="7-springmvc的相关组件">7. SpringMVC的相关组件</h3>
<ul>
<li>前端控制器：DisptcherServlet（SpringMVC提供的分发请求的Servlet，需要我们在web.xml中配置）</li>
<li>处理器映射器：HandlerMapping（SpringMVC提供的映射容器）</li>
<li>处理器适配器：HandlerAdapter（SpringMVC提供的处理器适配器）</li>
<li>处理器：Handler（需要我们写的Controller）</li>
<li>视图解析器：ViewResolver（SpringMVC提供的资源视图解析器）</li>
<li>视图：View</li>
</ul>
<h3 id="8-springmvc数据响应方式">8. SpringMVC数据响应方式</h3>
<h4 id="1-页面跳转">①. 页面跳转</h4>
<ul>
<li>
<p>直接返回字符串：这种方式会将返回的字符串与视图解析器的前后缀拼接后跳转</p>
<pre><code class="language-java">@RequestMapping(&quot;/test&quot;)
public String test(){
    return &quot;index.jsp&quot;;
}
</code></pre>
</li>
<li>
<p>通过ModelAndView对象返回</p>
<pre><code class="language-java">@RequestMapping(&quot;/test&quot;)
public ModelAndView test(){
    ModelAndView modelAndView = new ModelAndView();
    modelAndView.setViewName(&quot;new&quot;);
    modelAndView.addObject(&quot;username&quot;,&quot;zhiyuan&quot;);
    return modelAndView;
}

@RequestMapping(&quot;/test2&quot;)
public ModelAndView test2(ModelAndView modelAndView){
	modelAndView.setViewName(&quot;new&quot;);
    modelAndView.addObject(&quot;username&quot;,&quot;zhiyuan&quot;);
    return modelAndView;
}

@RequestMapping(&quot;/test3&quot;)
public Model test3(Model model){
    model.addAttribute(&quot;username&quot;,&quot;张三&quot;);
    return model;
}

@RequestMapping(&quot;/test4&quot;)
public String test4(HttpServletRequest request,HttpServletResponse response){
    request.setAttribute(&quot;username&quot;,&quot;张三&quot;);
    return &quot;index.jsp&quot;;
} 
</code></pre>
</li>
</ul>
<h4 id="2-回写数据">②. 回写数据</h4>
<ul>
<li>
<p>直接返回字符串</p>
<pre><code class="language-java">@RequestMapping(&quot;/test3&quot;)
@ResponseBody
public String test3(HttpServletResponse response){
    response.setContentType(&quot;text/html;charset=utf-8&quot;);
    return &quot;直接回写字符串&quot;;
}
</code></pre>
</li>
<li>
<p>返回对象或集合</p>
<pre><code class="language-xml">&lt;!--配置处理器映射器--&gt;
&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;
    &lt;property name=&quot;messageConverters&quot;&gt;
        &lt;list&gt;
            &lt;bean id=&quot;stringConverter&quot; class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;
                &lt;property name=&quot;supportedMediaTypes&quot;&gt;
                    &lt;list&gt;
                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;
                    &lt;/list&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
            &lt;bean id=&quot;jsonConverter&quot; class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;
                &lt;property name=&quot;supportedMediaTypes&quot;&gt;
                    &lt;list&gt;
                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;
                        &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;
                    &lt;/list&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;!--开启扫描注解驱动--&gt;
&lt;mvc:annotation-driven/&gt;
</code></pre>
<pre><code class="language-java">@RequestMapping(&quot;/test&quot;)
@ResponseBody
public Person test(){
    Person person = new Person(); 
    person.setAge(25);
    person.setGender(&quot;male&quot;);
    person.setName(&quot;张三&quot;);
    return person;
}
</code></pre>
</li>
</ul>
<h3 id="9-springmvc获得请求数据">9. SpringMVC获得请求数据</h3>
<h4 id="1-获得请求参数">①. 获得请求参数</h4>
<ul>
<li>基本类型参数</li>
<li>POJO类型参数（JavaBean）</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h4 id="2-获得一个基本类型参数">②. 获得一个基本类型参数</h4>
<pre><code class="language-java">@RequestMapping(&quot;/test&quot;)
@ResponseBody
public void test(String username,String age,String gender){
    System.out.println(username + &quot;\t&quot; + age + &quot;\t&quot; + gender);
}
</code></pre>
<figure data-type="image" tabindex="6"><img src="http://pic.zyblog.xyz/img/typora/20210304155111.png" alt="image-20210304155103994" loading="lazy"></figure>
<pre><code class="language-shell">张三	26	male
</code></pre>
<h4 id="3-获得一个pojo类型参数">③. 获得一个POJO类型参数</h4>
<pre><code class="language-java">@RequestMapping(&quot;/test4&quot;)
@ResponseBody
public void test4(User user){
    System.out.println(user);
}
</code></pre>
<figure data-type="image" tabindex="7"><img src="http://pic.zyblog.xyz/img/typora/20210304160053.png" alt="image-20210304160053808" loading="lazy"></figure>
<pre><code class="language-shell">User{username='张三', gender='male', age=26}
</code></pre>
<pre><code class="language-java">@RequestMapping(&quot;/test4&quot;)
@ResponseBody
public void test4(@RequestBody User user){
    System.out.println(user);
}
</code></pre>
<pre><code class="language-json">{
	&quot;username&quot;:&quot;zhiyuan&quot;,
	&quot;gender&quot;:&quot;male&quot;,
	&quot;age&quot;:26
}
</code></pre>
<pre><code class="language-java">User{username='zhiyuan', gender='male', age=26}
</code></pre>
<h4 id="4-获得一个数组类型参数">④. 获得一个数组类型参数</h4>
<pre><code class="language-java">@RequestMapping(&quot;/test5&quot;)
@ResponseBody
public void test5(String[] id){
    System.out.println(Arrays.asList(id));
}
</code></pre>
<figure data-type="image" tabindex="8"><img src="http://pic.zyblog.xyz/img/typora/20210304162014.png" alt="image-20210304162014425" loading="lazy"></figure>
<pre><code class="language-shell">[111, 222]
</code></pre>
<h4 id="5-获得一个集合类型参数一">⑤. 获得一个集合类型参数(一)</h4>
<pre><code class="language-java">package com.zhiyuan.domain;
import java.util.List;
public class VO {
    private List&lt;User&gt; userList;

    public List&lt;User&gt; getUserList() {
        return userList;
    }

    public void setUserList(List&lt;User&gt; userList) {
        this.userList = userList;
    }

    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer(&quot;VO{&quot;);
        sb.append(&quot;userList=&quot;).append(userList);
        sb.append('}');
        return sb.toString();
    }
}

@RequestMapping(&quot;/test6&quot;)
@ResponseBody
public void test6(VO vo){
    System.out.println(vo);
}
</code></pre>
<figure data-type="image" tabindex="9"><img src="http://pic.zyblog.xyz/img/typora/20210304165235.png" alt="image-20210304165235811" loading="lazy"></figure>
<pre><code class="language-shell">VO{userList=[User{username='??????', gender='male', age=26}, User{username='??????', gender='female', age=22}]}
</code></pre>
<h4 id="6-获得一个集合类型参数二">⑥. 获得一个集合类型参数(二)</h4>
<pre><code class="language-jsp">&lt;%@ page contentType=&quot;text/html;charset=utf-8&quot; language=&quot;java&quot;%&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Ajax请求&lt;/title&gt;
    &lt;script src=&quot;${pageContext.request.contextPath}/js/jquery-3.1.1.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;script&gt;
    var userList = new Array();
    userList.push({username:&quot;zhangsan&quot;,age:26});
    userList.push({username:&quot;lisi&quot;,age:28});
    $.ajax({
        type:&quot;POST&quot;,
        url:&quot;${pageContext.request.contextPath}/test7&quot;,
        data:JSON.stringify(userList),
        contentType:&quot;application/json;charset=utf-8&quot;
    });
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-java">@RequestMapping(&quot;/test7&quot;)
@ResponseBody
public void test7(@RequestBody List&lt;User&gt; userList){
    System.out.println(userList);
}
</code></pre>
<h4 id="7-开启静态资源访问">⑦. 开启静态资源访问</h4>
<pre><code class="language-xml">&lt;!--静态资源的访问--&gt;
&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot;&gt;
&lt;mvc:resources mapping=&quot;/img/**&quot; location=&quot;/img/&quot;&gt;
&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/css/&quot;&gt;    
&lt;!--交由tomcat去寻找对应静态资源--&gt;    
&lt;mvc:default-servlet-handler/&gt;    
</code></pre>
<h4 id="8-配置全局乱码过滤器">⑧. 配置全局乱码过滤器</h4>
<pre><code class="language-xml">&lt;!--配置全局编码过滤器--&gt;
&lt;filter&gt;
    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;encoding&lt;/param-name&gt;
        &lt;param-value&gt;UTF-8&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre>
<h4 id="9-参数绑定注解">⑨. 参数绑定注解</h4>
<pre><code class="language-java">@RequestMapping(&quot;/test5&quot;)
@ResponseBody
public void test5(@RequestParam(&quot;id&quot;) String[] ids){
    System.out.println(Arrays.asList(ids));
}
</code></pre>
<ul>
<li><code>@RequestParam</code>
<ul>
<li><code>value</code>：与请求参数名称进行绑定</li>
<li><code>required</code>：请求参数是否必须携带，默认为true，不携带参数请求URL会报错</li>
<li><code>defaultValue</code>：请求参数未写时默认的值</li>
</ul>
</li>
</ul>
<h3 id="10-restful风格">10. Restful风格</h3>
<blockquote>
<p>Restful风格的请求是使用 <code>URL+请求方式</code> 表示一次请求目的，HTTP协议里四个表示操作方式的动词如下</p>
<ul>
<li>GET：用于获取数据</li>
<li>POST：用户添加数据</li>
<li>PUT：用于修改数据</li>
<li>DELETE：用于删除数据</li>
</ul>
</blockquote>
<h4 id="1-restful风格请求参数的获取">①. Restful风格请求参数的获取</h4>
<pre><code class="language-java">@RequestMapping(&quot;/test8/{username}&quot;)
@ResponseBody
public void test8(@PathVariable(&quot;username&quot;) String username, HttpServletRequest request){
    System.out.println(request.getMethod()+&quot;:&quot;+username);
}
</code></pre>
<pre><code class="language-shell">GET:zhangsan
POST:zhangsan
PUT:zhangsan
DELETE:zhangsan
</code></pre>
<blockquote>
<p>因为每个方法都需要添加 <code>@ResponseBody</code></p>
<p>所以Spring为我们提供了一个解决方案 <code>@RestController</code></p>
<p>通过源码可知 <code>@RestController = @Controller + @ResponseBody</code></p>
</blockquote>
<h3 id="11-springmvc自定义类型转换器">11. SpringMVC自定义类型转换器</h3>
<blockquote>
<p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置</p>
<p>但是并不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，来如：日期类型的数据就需要自定义转换器</p>
</blockquote>
<h4 id="步骤">步骤</h4>
<ul>
<li>定义转换器类实现 <code>Converter</code> 接口</li>
<li>在配置文件中声明转换器</li>
<li>在 <code>&lt;annotation-driven&gt;</code> 中引用转换器</li>
</ul>
<pre><code class="language-java">public class DateConverter implements Converter&lt;String,Date&gt;{
    public Date convert(String source) {
        System.out.println(source);
        Date date = null;
        try {
            date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(source);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return date;
    }
}
</code></pre>
<pre><code class="language-xml">&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;
&lt;!--声明转换器--&gt;
&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;
    &lt;property name=&quot;converters&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;com.zhiyuan.controller.DateConverter&quot;/&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<pre><code class="language-java">@RequestMapping(&quot;/test9&quot;)
@ResponseBody
public void test9(Date date){
    System.out.println(date);
}
</code></pre>
<h3 id="12-springmvc获取请求头数据">12. SpringMVC获取请求头数据</h3>
<h4 id="1-requestheader">①. <code>@RequestHeader</code></h4>
<ul>
<li>使用 <code>@RequestHeader</code> 获取请求头信息，相当于web阶段学习的 <code>request.getHeader(name)</code></li>
<li><code>value</code>：请求头名称</li>
<li><code>required</code>：是否必须携带某请求头</li>
</ul>
<pre><code class="language-java">@RequestMapping(&quot;/test10&quot;)
@ResponseBody
public void test10(@RequestHeader(value = &quot;User-Agent&quot;,required = true) String userAgent){
    System.out.println(userAgent);
}
</code></pre>
<h4 id="2-cookievalue">②. <code>@CookieValue</code></h4>
<ul>
<li>使用 <code>@CookieValue</code> 可以获取指定Cookie的值</li>
<li><code>value</code>：指定cookie的名称</li>
<li><code>required</code>：是否必须携带某cookie</li>
</ul>
<pre><code class="language-java">@RequestMapping(&quot;/test11&quot;)
@ResponseBody
public void test11(@CookieValue(value = &quot;JSESSIONID&quot;,required = true) String sessionId){
    System.out.println(sessionId);
}
</code></pre>
<h3 id="13-springmvc文件上传">13. SpringMVC文件上传</h3>
<h4 id="1-简单上传表单">①. 简单上传表单</h4>
<pre><code class="language-html">&lt;form action=&quot;/test12&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br&gt;
    头像：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<h4 id="2-导入依赖">②. 导入依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;commons-io&lt;/groupId&gt;
    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
    &lt;version&gt;2.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
    &lt;version&gt;1.2.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="3-配置文件上传解析器">③. 配置文件上传解析器</h4>
<pre><code class="language-xml">&lt;!--配置文件上传解析器--&gt;
&lt;!--此id必须为multipartResolver，是固定写法，不一样就是错--&gt;
&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;
    &lt;!--上传文件编码类型--&gt;
    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;
    &lt;!--上传单个文件大小--&gt;
    &lt;property name=&quot;maxUploadSizePerFile&quot; value=&quot;5242880&quot;/&gt;
    &lt;!--上传文件总大小--&gt;
    &lt;property name=&quot;maxUploadSize&quot; value=&quot;5242880&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<h4 id="4-编写文件上传处理代码">④. 编写文件上传处理代码</h4>
<pre><code class="language-java">@RequestMapping(value = &quot;/test12&quot;,method = RequestMethod.POST)
@ResponseBody
public void test12(@RequestParam(value = &quot;username&quot;,required = false) String username,@RequestParam(value=&quot;upload&quot;,required=false) MultipartFile upload){
    System.out.println(username);
    System.out.println(upload);
    String originalFilename = upload.getOriginalFilename();
    upload.transferTo(new File(&quot;F:\\upload\\&quot;+ MyUtils.getUUID() + originalFilename));
}
</code></pre>
<h3 id="14-springmvc多文件上传">14. SpringMVC多文件上传</h3>
<h4 id="1-简单上传表单-2">①. 简单上传表单</h4>
<pre><code class="language-html">&lt;form action=&quot;/test13&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br&gt;
    头像：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;
    头像：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;
    头像：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;
    头像：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<h4 id="2-编写文件上传处理代码">②. 编写文件上传处理代码</h4>
<pre><code class="language-java">@RequestMapping(&quot;/test13&quot;)
@ResponseBody
public void test13(@RequestParam(value = &quot;username&quot;,required = false) String username,@RequestParam(value = &quot;upload&quot;,required = false) MultipartFile [] uploads) throws IOException {
    System.out.println(username);
    for (MultipartFile upload : uploads) {
        String originalFilename = upload.getOriginalFilename();
        upload.transferTo(new File(&quot;F:\\upload\\&quot; + MyUtils.getUUID() + originalFilename));
    }
}
</code></pre>
<h3 id="15-springmvc拦截器">15. SpringMVC拦截器</h3>
<blockquote>
<p>拦截器Interceptor相当于web阶段的过滤器Filter</p>
</blockquote>
<table>
<thead>
<tr>
<th>区别</th>
<th>过滤器</th>
<th>拦截器</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用范围</td>
<td>servlet规范中的一部分，任何Web工程都可以使用</td>
<td>SpringMVC自己的部分，需要使用SpringMVC框架才能使用</td>
</tr>
<tr>
<td>拦截范围</td>
<td>在web.xml中配偶之url-pattern映射为/*时，可以拦截所有资源</td>
<td>只拦截控制器方法，对静态资源不进行拦截</td>
</tr>
</tbody>
</table>
<h4 id="1-自定义拦截器">①. 自定义拦截器</h4>
<ul>
<li>
<p>创建拦截器类实现 <code>HandlerInterceptor</code></p>
</li>
<li>
<p>配置拦截器</p>
</li>
<li>
<p>代码实现</p>
<pre><code class="language-java">public class MyInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        System.out.println(&quot;被拦截的方法执行之前执行preHandle方法&quot;);
        //放行请求
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        System.out.println(&quot;被拦截方法执行之后，视图返回之前执行postHandle方法&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        System.out.println(&quot;所有流程执行完毕，执行afterCompletion方法&quot;);
    }
}
</code></pre>
<pre><code class="language-xml">&lt;mvc:interceptors&gt;
    &lt;mvc:interceptor&gt;
        &lt;mvc:mapping path=&quot;/**&quot;/&gt;
        &lt;bean class=&quot;com.zhiyuan.interceptor.MyInterceptor&quot;/&gt;
    &lt;/mvc:interceptor&gt;
&lt;/mvc:interceptors&gt;
</code></pre>
</li>
</ul>
<h4 id="2-拦截器方法">②. 拦截器方法</h4>
<ul>
<li><code>preHandle()</code>：在请求映射的方法被调用之前，调用该方法，方法返回值为布尔型，用于控制请求是否放行，为 <code>true</code> 放行，为 <code>false</code> 不放行</li>
<li><code>postHandle()</code>：在请求映射方法执行之后，<code>DispatcherServlet</code>视图渲染之前被调用，可以在方法中操作修改<code>ModelAndView</code>对象</li>
<li><code>afterCompletion()</code>：在整个请求结束后被调用，也就是在<code>DispatcherServlet</code>渲染视图之后执行</li>
</ul>
<h3 id="16-springmvc异常处理">16. SpringMVC异常处理</h3>
<ul>
<li>
<p>编译时异常和运行时异常：前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试来减少运行时异常的发生</p>
</li>
<li>
<p>异常处理思路</p>
<ul>
<li>通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行处理，如下图：</li>
</ul>
<figure data-type="image" tabindex="10"><img src="http://pic.zyblog.xyz/img/typora/20210310131408.png" alt="image-20210310131401638" loading="lazy"></figure>
</li>
<li>
<p>异常处理两种方式</p>
<ul>
<li>使用SpringMVC提供的简单异常处理器 <code>SimpleMappingExceptionResolver</code></li>
<li>实现Spring的异常处理接口 <code>HandlerExceptionResolver</code> 自定义异常处理器</li>
</ul>
</li>
</ul>
<h4 id="1-简单异常处理器">①. 简单异常处理器</h4>
<ul>
<li>配置简单异常处理器</li>
</ul>
<pre><code class="language-xml">&lt;!--配置异常处理器--&gt;
&lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;
    &lt;property name=&quot;defaultErrorView&quot; value=&quot;error&quot;/&gt;
    &lt;property name=&quot;exceptionMappings&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;java.lang.ClassCastException&quot; value=&quot;error&quot;/&gt;
            &lt;entry key=&quot;java.lang.NullPointerException&quot; value=&quot;error&quot;/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<h4 id="2-自定义异常处理器">②. 自定义异常处理器</h4>
<pre><code class="language-java">public class MyException extends Exception{}
</code></pre>
<pre><code class="language-java">public class MyExceptionResolver implements HandlerExceptionResolver {
    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {
        ModelAndView modelAndView = new ModelAndView();
        if(ex instanceof MyException){
            modelAndView.addObject(&quot;info&quot;,&quot;自定义异常&quot;);
        }else if (ex instanceof ClassCastException){
            modelAndView.addObject(&quot;info&quot;,&quot;类型转换异常&quot;);
        }else{
            modelAndView.addObject(&quot;info&quot;,&quot;其他异常&quot;);
        }
        return modelAndView;
    }
}
</code></pre>
<pre><code class="language-xml">&lt;!--配置自定义异常处理器--&gt;
&lt;bean class=&quot;com.zhiyuan.resolver.MyExceptionResolver&quot;/&gt; 
</code></pre>
<h2 id="三-案例练习">三、案例练习</h2>
<h3 id="1-spring环境搭建">1. Spring环境搭建</h3>
<h4 id="1-配置-applicationcontextxml">①. 配置 applicationContext.xml</h4>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
    &lt;!--1. 配置组件扫描--&gt;
    &lt;context:component-scan base-package=&quot;com.zhiyuan&quot;/&gt;
    &lt;!--2. 加载数据库配置文件--&gt;
    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;
    &lt;!--3. 配置数据库连接池对象--&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
        &lt;property name=&quot;driverClass&quot; value=&quot;${c3p0.driverClass}&quot;/&gt;
        &lt;property name=&quot;jdbcUrl&quot; value=&quot;${c3p0.jdbcUrl}&quot;/&gt;
        &lt;property name=&quot;user&quot; value=&quot;${c3p0.user}&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;${c3p0.password}&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--4. 配置JdbcTemplate对象--&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<h4 id="2-配置-spring-mvcxml">②. 配置 spring-mvc.xml</h4>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;

    &lt;!--1. 配置mvc注解驱动--&gt;
    &lt;mvc:annotation-driven/&gt;
    &lt;!--2. 交给tomcat去寻找静态资源--&gt;
    &lt;mvc:default-servlet-handler/&gt;
    &lt;!--3. 配置内部视图解析器--&gt;
    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/pages/&quot;/&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--配置文件上传解析器--&gt;
    &lt;!--此id必须为multipartResolver，是固定写法，不一样就是错--&gt;
    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;
        &lt;!--上传文件编码类型--&gt;
        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;
        &lt;!--上传单个文件大小--&gt;
        &lt;property name=&quot;maxUploadSizePerFile&quot; value=&quot;5242880&quot;/&gt;
        &lt;!--上传文件总大小--&gt;
        &lt;property name=&quot;maxUploadSize&quot; value=&quot;5242880&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<h4 id="3-配置-webxml">③. 配置 web.xml</h4>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; version=&quot;4.0&quot;&gt;
  &lt;!--配置全局编码过滤器--&gt;
  &lt;filter&gt;
    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;encoding&lt;/param-name&gt;
      &lt;param-value&gt;UTF-8&lt;/param-value&gt;
    &lt;/init-param&gt;
  &lt;/filter&gt;
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
  &lt;!--配置Spring容器--&gt;
  &lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
  &lt;/context-param&gt;
  &lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
  &lt;/listener&gt;
  &lt;!--配置SpringMVC的前端控制器--&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
      &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</code></pre>
<h4 id="4-配置-jdbcproperties">④. 配置 jdbc.properties</h4>
<pre><code class="language-properties">c3p0.driverClass=com.mysql.cj.jdbc.Driver
c3p0.jdbcUrl=jdbc:mysql://localhost:3306/test?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong
c3p0.user=root
c3p0.password=123456
c3p0.initialPoolSize=10
c3p0.maxPoolSize=100
c3p0.checkoutTimeout=3000
</code></pre>
<h4 id="5-配置-pomxml">⑤. 配置 pom.xml</h4>
<pre><code class="language-xml">&lt;dependencies&gt;
&lt;dependency&gt;
  &lt;groupId&gt;mysql&lt;/groupId&gt;
  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
  &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;c3p0&lt;/groupId&gt;
  &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
  &lt;version&gt;0.9.1.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
  &lt;artifactId&gt;druid&lt;/artifactId&gt;
  &lt;version&gt;1.1.10&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;junit&lt;/groupId&gt;
  &lt;artifactId&gt;junit&lt;/artifactId&gt;
  &lt;version&gt;4.12&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
  &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
  &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
  &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
  &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
  &lt;version&gt;3.0.1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;
  &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;
  &lt;version&gt;2.2.1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
  &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;
  &lt;version&gt;2.9.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
  &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
  &lt;version&gt;2.9.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
  &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;
  &lt;version&gt;2.9.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
  &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
  &lt;version&gt;1.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;commons-io&lt;/groupId&gt;
  &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
  &lt;version&gt;2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;commons-logging&lt;/groupId&gt;
  &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
  &lt;version&gt;1.7.7&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;log4j&lt;/groupId&gt;
  &lt;artifactId&gt;log4j&lt;/artifactId&gt;
  &lt;version&gt;1.2.17&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
  &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
  &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;
  &lt;artifactId&gt;jstl-api&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h3 id="2-业务代码">2. 业务代码</h3>
<h2 id="四-mybatis">四、 MyBatis</h2>
<h3 id="1-mybatis简介">1. MyBatis简介</h3>
<ul>
<li>MyBatis是一个优秀的基于Java的持久层框架，它内部封装了JDBC，是开发者只需要关住 SQL语句本身，而不需要花费精力器处理加载驱动、创建Connection连接对象、创建Statement对象等繁杂的过程</li>
<li>MyBatis通过XML和注解的方式将要执行的各种Statement对象配置起来，并通过Java对象和Statement中SQL语句的动态参数进行映射最终生成可执行的SQL语句</li>
<li>最后MyBatis框架执行SQL并将结果映射为Java对象并返回，采用ORM思想解决了实体和数据库的映射问题，对JDBC进行了封装，屏蔽了JDBC的API底层访问细节，使我们不用与JDBC的API打交道就可以完成对数据库的持久化操作</li>
</ul>
<h3 id="2-mybatis开发步骤">2. MyBatis开发步骤</h3>
<h4 id="1-添加mybatis的坐标">①. 添加MyBatis的坐标</h4>
<h4 id="2-创建user数据表">②. 创建user数据表</h4>
<h4 id="3-编写user实体类">③. 编写User实体类</h4>
<h4 id="4-编写映射文件usermapperxml">④. 编写映射文件UserMapper.xml</h4>
<h4 id="5-编写核心文件sqlmapconfigxml">⑤. 编写核心文件SqlMapConfig.xml</h4>
<h4 id="6-编写持久层代码">⑥. 编写持久层代码</h4>
<h3 id="3-mybatis查询数据">3. MyBatis查询数据</h3>
<blockquote>
<p>只有一个参数时建议使用 <code>${value}</code> ，用在like模糊查询</p>
</blockquote>
<pre><code class="language-xml">&lt;!--UserMapper.xml--&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;userMapper&quot;&gt;
    &lt;select id=&quot;findAll&quot; resultType=&quot;com.zhiyuan.mybatis.entity.User&quot;&gt;
        select * from user
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="language-xml">&lt;!--SqlMapConfig.xml--&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost/test?serverTimezone=Asia/Shanghai&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=true&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/zhiyuan/mapper/UserMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<pre><code class="language-java">@Test
public void test1() throws IOException {
    //读取核心配置文件
    InputStream resourceAsStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
    //创建会话工厂
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
    //创建会话对象
    SqlSession sqlSession = sqlSessionFactory.openSession();
    //执行sql返回结果
    List&lt;User&gt; userList = sqlSession.selectList(&quot;userMapper.findAll&quot;);
    //输出结果
    System.out.println(userList);
    //释放资源
    sqlSession.close();
}
</code></pre>
<h3 id="4-mybatis插入数据">4. MyBatis插入数据</h3>
<blockquote>
<p>MyBatis默认事务不提交，增删改操作无效，需要使用 <code>sqlSession.commit();</code> 提交事务</p>
</blockquote>
<pre><code class="language-xml">&lt;insert id=&quot;save&quot; parameterType=&quot;com.zhiyuan.mybatis.entity.User&quot;&gt;
    insert into user values (#{id},#{name},#{age},#{gender})
&lt;/insert&gt;
</code></pre>
<pre><code class="language-java">@Test
public void test2() throws IOException {
    //读取核心配置文件
    InputStream resourceAsStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
    //创建会话工厂
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
    //创建会话对象
    SqlSession sqlSession = sqlSessionFactory.openSession();
    //执行sql返回结果
    int insert = sqlSession.insert(&quot;userMapper.save&quot;, new User(8, &quot;zhiyuan008&quot;, 26, &quot;male&quot;));
    sqlSession.commit();
    System.out.println(&quot;受影响的行数为&quot;+insert);
    //释放资源
    sqlSession.close();
}
</code></pre>
<h3 id="5-mybatis修改数据">5. Mybatis修改数据</h3>
<pre><code class="language-xml">&lt;update id=&quot;change&quot; parameterType=&quot;com.zhiyuan.mybatis.entity.User&quot;&gt;
    update user set name=#{name}, gender=#{gender} where id=#{id}
&lt;/update&gt;
</code></pre>
<pre><code class="language-java">@Test
public void test3() throws IOException {
    //读取核心配置文件
    InputStream resourceAsStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
    //创建会话工厂
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
    //创建会话对象
    SqlSession sqlSession = sqlSessionFactory.openSession();
    //执行sql返回结果
    int update = sqlSession.update(&quot;userMapper.change&quot;, new User(8, &quot;lisi&quot;, 99, &quot;female&quot;));
    sqlSession.commit();
    System.out.println(&quot;受影响的行数为&quot;+update);
    //释放资源
    sqlSession.close();
}
</code></pre>
<h3 id="6-mybatis删除数据">6. MyBatis删除数据</h3>
<pre><code class="language-xml">&lt;delete id=&quot;delete&quot; parameterType=&quot;java.lang.Integer&quot;&gt;
    delete from user where id=#{id}
&lt;/delete&gt;
</code></pre>
<pre><code class="language-java">@Test
public void test4() throws IOException {
    //读取核心配置文件
    InputStream resourceAsStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
    //创建会话工厂
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
    //创建会话对象
    SqlSession sqlSession = sqlSessionFactory.openSession();
    //执行sql返回结果
    int delete = sqlSession.delete(&quot;userMapper.delete&quot;, 8);
    sqlSession.commit();
    System.out.println(&quot;受影响的行数为&quot;+delete);
    //释放资源
    sqlSession.close();
}
</code></pre>
<h3 id="7-mybatis核心配置文件">7. MyBatis核心配置文件</h3>
<h4 id="1-environments-标签">①. <code>environments</code> 标签</h4>
<ul>
<li>数据库环境的配置，支持多配置</li>
</ul>
<pre><code class="language-xml">&lt;!--指定默认的环境名称--&gt;
&lt;environments default=&quot;development&quot;&gt;
    &lt;!--指定当前环境的名称--&gt;
    &lt;environment id=&quot;development&quot;&gt;
        &lt;!--指定事务管理类型为JDBC--&gt;
        &lt;transactionManager type=&quot;JDBC&quot;/&gt;
        &lt;!--指定当前数据源类型为连接池--&gt;
        &lt;dataSource type=&quot;POOLED&quot;&gt;
            &lt;!--数据源配置的基本参数--&gt;
            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost/test?serverTimezone=Asia/Shanghai&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=true&quot;/&gt;
            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
            &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
        &lt;/dataSource&gt;
    &lt;/environment&gt;
&lt;/environments&gt;
</code></pre>
<ul>
<li>
<p>事务管理器</p>
<ul>
<li>JDBC</li>
<li>MANAGED</li>
</ul>
</li>
<li>
<p>数据源</p>
<ul>
<li>UNPOOLED：每次被请求时打开连接</li>
<li>POOLED：每次请求时从连接池中获取连接</li>
<li>JNDI：应用容器使用</li>
</ul>
</li>
</ul>
<h4 id="2-mappers-标签">②. <code>mappers</code> 标签</h4>
<ul>
<li>加载映射</li>
</ul>
<pre><code class="language-xml">&lt;mappers&gt;
    &lt;mapper resource=&quot;com/zhiyuan/mapper/UserMapper.xml&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<ul>
<li>使用相对于类路径的资源引用： <code>&lt;mapper resource=&quot;com/zhiyuan/mapper/UserMapper.xml&quot;&gt;</code></li>
<li>使用完全限定资源定位符：<code>&lt;mapper url=&quot;file:///var/mapper/UserMapper.xml&quot;&gt;</code></li>
<li>使用映射器接口实现类的完全限定类名：<code>&lt;mapper class=&quot;com.zhiyuan.builder.UserMapper&quot;&gt;</code></li>
<li>将包内的映射器接口实现全部注册为映射器：<code>&lt;package name=&quot;com.zhiyuan.builder&quot;&gt;</code></li>
</ul>
<h4 id="3-properties-标签">③. <code>properties</code> 标签</h4>
<ul>
<li>加载外部properties配置文件</li>
</ul>
<pre><code class="language-xml">&lt;properties resource=&quot;jdbc.properties&quot;/&gt;
&lt;!--指定默认的环境名称--&gt;
&lt;environments default=&quot;development&quot;&gt;
    &lt;!--指定当前环境的名称--&gt;
    &lt;environment id=&quot;development&quot;&gt;
        &lt;!--指定事务管理类型为JDBC--&gt;
        &lt;transactionManager type=&quot;JDBC&quot;/&gt;
        &lt;!--指定当前数据源类型为连接池--&gt;
        &lt;dataSource type=&quot;POOLED&quot;&gt;
            &lt;!--数据源配置的基本参数--&gt;
            &lt;property name=&quot;driver&quot; value=&quot;${driverClassName}&quot;/&gt;
            &lt;property name=&quot;url&quot; value=&quot;${jdbcUrl}&quot;/&gt;
            &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;
            &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;
        &lt;/dataSource&gt;
    &lt;/environment&gt;
&lt;/environments&gt;
</code></pre>
<h4 id="4-typealiases-标签">④. <code>typeAliases</code> 标签</h4>
<ul>
<li>为指定类型设置别名，方便映射配置</li>
</ul>
<pre><code class="language-xml">&lt;typeAliases&gt;
	&lt;typeAlias type=&quot;com.zhiyuan.mybatis.entity.User&quot; alias=&quot;user&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre>
<ul>
<li>必须按照规定的顺序配置typeAliases标签，否则会报错</li>
</ul>
<blockquote>
<p><code>The content of element type &quot;configuration&quot; must match &quot;(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)&quot;.</code></p>
</blockquote>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;userMapper&quot;&gt;
    &lt;select id=&quot;findAll&quot; resultType=&quot;user&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;insert id=&quot;save&quot; parameterType=&quot;user&quot;&gt;
        insert into user values (#{id},#{name},#{age},#{gender})
    &lt;/insert&gt;
    &lt;update id=&quot;change&quot; parameterType=&quot;user&quot;&gt;
        update user set name=#{name}, gender=#{gender} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
&lt;/mapper&gt;
</code></pre>
<h3 id="8-mybatis的api">8. MyBatis的API</h3>
<ul>
<li>
<p><code>Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;)</code></p>
<p>读取核心配置文件到IO流</p>
</li>
<li>
<p><code>new SqlSessionFactoryBuilder().build(InputStream is)</code></p>
<p>通过加载核心配置文件创建SqlSessionFactory对象</p>
</li>
<li>
<p><code>SqlSessionFactory.openSession(boolean autoCommit)</code></p>
<p>获取SqlSession对象，给定参数设定是否自动提交事务，不给参数默认不自动提交</p>
</li>
<li>
<p><code>SqlSession对象方法</code></p>
<ul>
<li><code>SqlSession.selectOne(String statement,Object parameter)</code></li>
<li><code>SqlSession.selectList(String statement,Object parameter)</code></li>
<li><code>SqlSession.insert(String statement,Object parameter)</code></li>
<li><code>SqlSession.update(String statement,Object parameter)</code></li>
<li><code>SqlSession.delete(String statement,Object parameter)</code></li>
<li><code>SqlSession.commit()</code></li>
<li><code>SqlSession.rollback()</code></li>
</ul>
</li>
</ul>
<h3 id="9-mybatis的代理开发方式">9. MyBatis的代理开发方式</h3>
<h4 id="1-开发规范">①. 开发规范</h4>
<ul>
<li>Mapper.xml文件中的namespace应该与Mapper接口的全限定名相同</li>
<li>Mapper接口方法名应该和Mapper.xml中定义的每个statement的id相同</li>
<li>Mapper接口方法的输入参数类型应该和Mapper.xml中定义的每个sql的parameterType相同</li>
<li>Mapper接口方法的输出参数类型应该和Mapper.xml中定义的每个sql的resultType相同</li>
</ul>
<h4 id="2-代码实现-2">②. 代码实现</h4>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.zhiyuan.mybatis.dao.UserDao&quot;&gt;
    &lt;select id=&quot;findAll&quot; resultType=&quot;user&quot;&gt;
        select * from user
    &lt;/select&gt;
&lt;/mapper&gt;    
</code></pre>
<pre><code class="language-java">public interface UserDao {
    public abstract List&lt;User&gt; findAll();
}
</code></pre>
<pre><code class="language-java">public class ServiceDemo {
    public static void main(String[] args) throws IOException {
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;));
        SqlSession sqlSession = sqlSessionFactory.openSession(true);
        UserDao userDao = sqlSession.getMapper(UserDao.class);
        List&lt;User&gt; userList = userDao.findAll();
        System.out.println(userList);
    }
}
</code></pre>
<h3 id="10-mybatis映射文件深入">10. MyBatis映射文件深入</h3>
<h4 id="1-动态sql">①. 动态SQL</h4>
<pre><code class="language-java">public interface UserDao {
    public abstract List&lt;User&gt; findAll();
    public abstract List&lt;User&gt; findByIds(List&lt;Integer&gt; list);
    public abstract List&lt;User&gt; findByCondition(User user);
}
</code></pre>
<pre><code class="language-xml">&lt;select id=&quot;findByIds&quot; parameterType=&quot;list&quot; resultType=&quot;user&quot;&gt;
    select * from user
    &lt;where&gt;
        &lt;foreach collection=&quot;list&quot; open=&quot;id in(&quot; close=&quot;)&quot; item=&quot;id&quot; separator=&quot;,&quot;&gt;
            #{id}
        &lt;/foreach&gt;
    &lt;/where&gt;
&lt;/select&gt;
&lt;select id=&quot;findByCondition&quot; parameterType=&quot;user&quot; resultType=&quot;user&quot;&gt;
    select * from user
    &lt;where&gt;
        &lt;if test=&quot;id!=0&quot;&gt;
            and id=#{id}
        &lt;/if&gt;
        &lt;if test=&quot;name!=null&quot;&gt;
            and name=#{name}
        &lt;/if&gt;
        &lt;if test=&quot;age!=0&quot;&gt;
            and age=#{age}
        &lt;/if&gt;
        &lt;if test=&quot;gender!=null&quot;&gt;
            and gender=#{gender}
        &lt;/if&gt;
    &lt;/where&gt;
&lt;/select&gt;
</code></pre>
<h4 id="2-sql语句的抽取">②. SQL语句的抽取</h4>
<pre><code class="language-xml">&lt;sql id=&quot;selectUser&quot;&gt;select * from user&lt;/sql&gt;
&lt;select id=&quot;findAll&quot; resultType=&quot;user&quot;&gt;
    &lt;include refid=&quot;selectUser&quot;/&gt;
&lt;/select&gt;
</code></pre>
<h4 id="3-小结">③. 小结</h4>
<ul>
<li><code>&lt;select&gt;</code>：查询数据</li>
<li><code>&lt;insert&gt;</code>：插入数据</li>
<li><code>&lt;update&gt;</code>：修改数据</li>
<li><code>&lt;delete&gt;</code>：删除数据</li>
<li><code>&lt;where&gt;</code>：条件</li>
<li><code>&lt;if&gt;</code>：判断</li>
<li><code>&lt;foreach&gt;</code>：循环</li>
<li><code>&lt;sql&gt;</code>：sql抽取</li>
</ul>
<h3 id="11-mybatis核心文件深入">11. MyBatis核心文件深入</h3>
<h4 id="1-typehandlers-标签">①. <code>typeHandlers</code> 标签</h4>
<blockquote>
<p>将结果集中的值转换成指定Java类型</p>
<ul>
<li><code>BooleanTypeHandler </code></li>
<li><code>ByteTypeHandler</code></li>
<li><code>ShortTypeHandler</code></li>
<li><code>IntegerTypeHandler</code></li>
<li><code>LongTypeHandler</code></li>
</ul>
</blockquote>
<ul>
<li>开发步骤
<ul>
<li>定义转换类继承自 <code>BaseTypeHandler&lt;T&gt;</code></li>
<li>实现方法，其中 <code>setNonNullParameter</code> 是java程序设置数据到数据库的回调方法，<code>getNullableResult</code>是查询时mysql字符串类型转为Java的Type类型的方法</li>
<li>在MyBatis核心配置文件中进行注册</li>
<li>测试转换是否正确</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public class DateTypeHandler extends BaseTypeHandler&lt;Date&gt; {
    @Override
    public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType) throws SQLException {
        long time = parameter.getTime();
        ps.setLong(i,time);
    }

    @Override
    public Date getNullableResult(ResultSet rs, String columnName) throws SQLException {
        return new Date(rs.getLong(columnName));
    }

    @Override
    public Date getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
        return new Date(rs.getLong(columnIndex));
    }

    @Override
    public Date getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
        return new Date(cs.getLong(columnIndex));
    }
}
</code></pre>
<pre><code class="language-xml">&lt;typeHandlers&gt;
    &lt;typeHandler handler=&quot;com.zhiyuan.mybatis.handler.DateTypeHandler&quot;/&gt;
&lt;/typeHandlers&gt;
</code></pre>
<h4 id="2-plugins-标签">②. <code>plugins</code> 标签</h4>
<ul>
<li>MyBatis可以使用第三方插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据</li>
<li>开发步骤：
<ul>
<li>导入通用PageHelper的坐标</li>
<li>在MyBatis核心配置文件中配置PageHelper</li>
<li>测试分页数据获取</li>
</ul>
</li>
<li>导入依赖</li>
</ul>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;
  &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;
  &lt;version&gt;5.2.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- https://mvnrepository.com/artifact/com.github.jsqlparser/jsqlparser --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;
  &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;
  &lt;version&gt;3.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>注册分页插件</li>
</ul>
<pre><code class="language-xml">&lt;!--注册分页插件--&gt;
&lt;plugins&gt;
    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;
        &lt;!--pagehelper4.0之后不需要配置此项，否则会出错--&gt;
        &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>
<ul>
<li>代码实现</li>
</ul>
<pre><code class="language-java">@Test
public void test5() throws IOException {
    //读取核心配置文件
    InputStream resourceAsStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
    //创建会话工厂
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
    //创建会话对象
    SqlSession sqlSession = sqlSessionFactory.openSession();
    UserDao userDao = sqlSession.getMapper(UserDao.class);
    PageHelper.startPage(1,3);
    List&lt;User&gt; userList = userDao.findAll();
    System.out.println(userList);
    PageInfo&lt;User&gt; userPageInfo = new PageInfo&lt;&gt;(userList);
    System.out.println(&quot;当前页：&quot; + userPageInfo.getPageNum());
    System.out.println(&quot;每页显示条数：&quot; + userPageInfo.getPageSize());
    System.out.println(&quot;总条数：&quot; + userPageInfo.getTotal());
    System.out.println(&quot;总页数：&quot; + userPageInfo.getPages());
    System.out.println(&quot;上一页：&quot; + userPageInfo.getPrePage());
    System.out.println(&quot;下一页：&quot; + userPageInfo.getNextPage());
    System.out.println(&quot;是否是首页：&quot; + userPageInfo.isIsFirstPage());
    System.out.println(&quot;是否是尾页：&quot; + userPageInfo.isIsLastPage());
    sqlSession.close();
}
</code></pre>
<h3 id="12-mybatis的多表操作">12. MyBatis的多表操作</h3>
<h4 id="1-一对一查询模型">①. 一对一查询模型</h4>
<ul>
<li>根据指定订单号查询订单和用户信息</li>
</ul>
<h5 id="创建订单order对象">创建订单Order对象</h5>
<ul>
<li>
<pre><code class="language-java">package com.zhiyuan.mybatis.entity;

import java.util.Date;

public class Order {
    private int id;
    private String ordertime;
    private double total;
    private User user;

    public Order() {}

    public Order(int id, String ordertime, double total, User user) {
        this.id = id;
        this.ordertime = ordertime;
        this.total = total;
        this.user = user;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getOrdertime() {
        return ordertime;
    }

    public void setOrdertime(String ordertime) {
        this.ordertime = ordertime;
    }

    public double getTotal() {
        return total;
    }

    public void setTotal(double total) {
        this.total = total;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer(&quot;Order{&quot;);
        sb.append(&quot;id=&quot;).append(id);
        sb.append(&quot;, ordertime=&quot;).append(ordertime);
        sb.append(&quot;, total=&quot;).append(total);
        sb.append(&quot;, user=&quot;).append(user);
        sb.append('}');
        return sb.toString();
    }
}
</code></pre>
</li>
</ul>
<h5 id="配置映射文件">配置映射文件</h5>
<ul>
<li>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.zhiyuan.mybatis.dao.OrderDao&quot;&gt;
    &lt;resultMap id=&quot;orderMap&quot; type=&quot;order&quot;&gt;
        &lt;id column=&quot;oid&quot; property=&quot;id&quot;/&gt;
        &lt;result column=&quot;ordertime&quot; property=&quot;ordertime&quot;/&gt;
        &lt;result column=&quot;total&quot; property=&quot;total&quot;/&gt;
        &lt;result column=&quot;uid&quot; property=&quot;user.id&quot;/&gt;
        &lt;result column=&quot;name&quot; property=&quot;user.name&quot;/&gt;
        &lt;result column=&quot;age&quot; property=&quot;user.age&quot;/&gt;
        &lt;result column=&quot;gender&quot; property=&quot;user.gender&quot;/&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;findAll&quot; resultMap=&quot;orderMap&quot;&gt;
        select o.id oid,u.id uid,ordertime,total,name,age,gender from orders o,user u where o.uid=u.id
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
</li>
</ul>
<h5 id="优化配置文件">优化配置文件</h5>
<ul>
<li>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.zhiyuan.mybatis.dao.OrderDao&quot;&gt;
    &lt;resultMap id=&quot;orderMap&quot; type=&quot;order&quot;&gt;
        &lt;id column=&quot;oid&quot; property=&quot;id&quot;/&gt;
        &lt;result column=&quot;ordertime&quot; property=&quot;ordertime&quot;/&gt;
        &lt;result column=&quot;total&quot; property=&quot;total&quot;/&gt;
        &lt;association property=&quot;user&quot; javaType=&quot;user&quot;&gt;
            &lt;id column=&quot;uid&quot; property=&quot;id&quot;/&gt;
            &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;
            &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;
            &lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;
        &lt;/association&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;findAll&quot; resultMap=&quot;orderMap&quot;&gt;
        select o.id oid,u.id uid,ordertime,total,name,age,gender from orders o,user u where o.uid=u.id
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
</li>
</ul>
<h4 id="2-一对多查询模型">②. 一对多查询模型</h4>
<ul>
<li>根据用户id获取用户所有订单信息</li>
</ul>
<h5 id="创建用户user对象">创建用户User对象</h5>
<pre><code class="language-java">package com.zhiyuan.mybatis.entity;

import java.util.List;
public class User {
    private int id;
    private String name;
    private int age;
    private String gender;

    private List&lt;Order&gt; orderList;

    public User() {}

    public User(int id, String name, int age, String gender) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    public List&lt;Order&gt; getOrderList() {
        return orderList;
    }

    public void setOrderList(List&lt;Order&gt; orderList) {
        this.orderList = orderList;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer(&quot;User{&quot;);
        sb.append(&quot;id=&quot;).append(id);
        sb.append(&quot;, name='&quot;).append(name).append('\'');
        sb.append(&quot;, age=&quot;).append(age);
        sb.append(&quot;, gender='&quot;).append(gender).append('\'');
        sb.append(&quot;, orderList=&quot;).append(orderList);
        sb.append('}');
        return sb.toString();
    }
}
</code></pre>
<h5 id="配置usermapperxml">配置UserMapper.xml</h5>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.zhiyuan.mybatis.dao.UserDao&quot;&gt;
    &lt;sql id=&quot;selectUser&quot;&gt;select * from user&lt;/sql&gt;
    &lt;resultMap id=&quot;userMap&quot; type=&quot;user&quot;&gt;
        &lt;id column=&quot;uid&quot; property=&quot;id&quot;/&gt;
        &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;
        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;
        &lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;
        &lt;collection property=&quot;orderList&quot; ofType=&quot;order&quot;&gt;
            &lt;id column=&quot;oid&quot; property=&quot;id&quot;/&gt;
            &lt;result column=&quot;ordertime&quot; property=&quot;ordertime&quot;/&gt;
            &lt;result column=&quot;total&quot; property=&quot;total&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;findAllOrder&quot; resultMap=&quot;userMap&quot;&gt;
        select o.id oid,u.id uid,ordertime,total,name,age,gender from orders o,user u where o.uid=u.id
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<h5 id="测试结果">测试结果</h5>
<pre><code class="language-java">@Test
public void test7() throws IOException {
    //读取核心配置文件
    InputStream resourceAsStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
    //创建会话工厂
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
    //创建会话对象
    SqlSession sqlSession = sqlSessionFactory.openSession();
    UserDao userDao = sqlSession.getMapper(UserDao.class);
    List&lt;Order&gt; allOrder = userDao.findAllOrder();
    System.out.println(allOrder);
}
</code></pre>
<h4 id="3-多对多查询模型">③. 多对多查询模型</h4>
<ul>
<li>查询一个用户对应的多个角色</li>
</ul>
<h4 id="4-小结">④. 小结</h4>
<ul>
<li>MyBatis多表配置方式
<ul>
<li>一对一配置：使用 <code>&lt;resultMap&gt;</code> 做配置</li>
<li>一对多配置：使用 <code>&lt;resultMap&gt;+&lt;collection&gt;</code> 做配置</li>
<li>多对多配置：使用 <code>&lt;resultMap&gt;+&lt;collection&gt;</code> 做配置</li>
</ul>
</li>
</ul>
<h3 id="13-mybatis的注解开发">13. MyBatis的注解开发</h3>
<h4 id="1-insert-实现插入">①. <code>@Insert</code> 实现插入</h4>
<h4 id="2-update-实现更新">②. <code>@Update</code> 实现更新</h4>
<h4 id="3-delete-实现删除">③. <code>@Delete</code> 实现删除</h4>
<h4 id="4-select-实现查询">④. <code>@Select</code> 实现查询</h4>
<h4 id="5-result-实现结果集封装">⑤. <code>@Result</code> 实现结果集封装</h4>
<h4 id="6-results-可以与-result-一起使用封装多个结果集">⑥. <code>@Results</code> 可以与 <code>@Result</code> 一起使用，封装多个结果集</h4>
<h4 id="7-one-实现一对一结果集封装">⑦. <code>@One</code> 实现一对一结果集封装</h4>
<h4 id="8-many-实现一对多结果集封装">⑧. <code>@Many</code> 实现一对多结果集封装</h4>
<h3 id="14-导出资源失败问题">14. 导出资源失败问题</h3>
<pre><code class="language-xml">&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;false&lt;/filtering&gt;
        &lt;/resource&gt;

        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;false&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<h3 id="15-数据库和实体类映射业内共识">15. 数据库和实体类映射业内共识</h3>
<ul>
<li>表名小写：<code>User.java</code> --- <code>user</code>         <code>EduUser</code> --- <code>edu_user</code></li>
<li>《阿里Java开发规范》中的约定
<ul>
<li>不得使用大写字母，不得连写两个单词；</li>
<li>表必备三字段：id, gmt_create, gmt_modified；
<ul>
<li>其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1；分表时改为从TDDL Sequence 取值，确保分表之间的全局唯一。gmt_create, gmt_modified 的类型均为date_time 类型；</li>
</ul>
</li>
<li>用尽量少的存储空间来存 数一个字段的数据；
<ul>
<li>能用int的就不用char或者varchar；</li>
<li>能用tinyint的就不用int；</li>
<li>能用varchar(20)的就不用varchar(255)；</li>
<li>时间戳字段尽量用int型，如gmt_create:表示从 ‘1970-01-01 08:00:00’ 开始的int秒数，采用英文单词的过去式；gmtCreated:表示datetime类型的时间，即形如 '1980-01-01 00:00:00’的时间串，Java中对应的类型为Timestamp</li>
</ul>
</li>
<li>不得使用外键与级联，一切外键概念必须在应用层解决。
<ul>
<li>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，则为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</li>
</ul>
</li>
<li>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</li>
</ul>
</li>
</ul>
<h3 id="16-mybatis的逆向创建pojo">16. MyBatis的逆向创建POJO</h3>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;
    &lt;version&gt;1.3.7&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>几乎没人用了</p>
<h2 id="五-ssm框架整合">五、SSM框架整合</h2>
<h3 id="1-原始整合方式">1. 原始整合方式</h3>
<h4 id="1-导入pomxml依赖">①. 导入pom.xml依赖</h4>
<pre><code class="language-xml">&lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;4.11&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
      &lt;version&gt;5.2.1.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
      &lt;version&gt;5.2.1.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
      &lt;version&gt;3.4.6&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
      &lt;version&gt;2.0.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
      &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
      &lt;version&gt;1.9.6&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.mchange&lt;/groupId&gt;
      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
      &lt;version&gt;0.9.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
      &lt;version&gt;5.2.1.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
      &lt;version&gt;5.2.1.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
      &lt;version&gt;5.2.1.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
      &lt;version&gt;4.0.1&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;
      &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;
      &lt;version&gt;2.3.3&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;mysql&lt;/groupId&gt;
      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
      &lt;version&gt;8.0.21&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;
      &lt;artifactId&gt;javax.servlet.jsp.jstl-api&lt;/artifactId&gt;
      &lt;version&gt;1.2.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;standard&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.17&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;commons-logging&lt;/groupId&gt;
      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
      &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;commons-io&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;2.6&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
      &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
      &lt;version&gt;1.3.1&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
</code></pre>
<h4 id="2-创建实体类accountjava">②. 创建实体类Account.java</h4>
<h4 id="3-编写accountmapperjava">③. 编写AccountMapper.java</h4>
<pre><code class="language-java">public interface AccountMapper {
    public abstract void add(Account account);
    public abstract List&lt;Account&gt; findAll();
}
</code></pre>
<h4 id="4-编写accountservicejava">④. 编写AccountService.java</h4>
<pre><code class="language-java">public interface AccountService {
    public abstract void add(Account account);
    public abstract List&lt;Account&gt; findAll();
}
</code></pre>
<h4 id="5-编写accountserviceimpljava">⑤. 编写AccountServiceImpl.java</h4>
<pre><code class="language-java">@Service(&quot;accountService&quot;)
public class AccountServiceImpl implements AccountService {
    private static AccountMapper accountMapper = MyUtils.getSqlSession().getMapper(AccountMapper.class);
    @Override
    public void add(Account account) {
        accountMapper.add(account);
    }

    @Override
    public List&lt;Account&gt; findAll() {
        return accountMapper.findAll();
    }
}
</code></pre>
<h4 id="6-编写工具类myutilsjava">⑥. 编写工具类MyUtils.java</h4>
<pre><code class="language-java">public class MyUtils {
    private static SqlSession sqlSession;
    private MyUtils(){}
    static{
        InputStream resourceAsStream = null;
        try {
            resourceAsStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
            sqlSession = new SqlSessionFactoryBuilder().build(resourceAsStream).openSession(true);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static SqlSession getSqlSession(){
        return sqlSession;
    }
}
</code></pre>
<h4 id="7-编写accountcontrollerjava">⑦. 编写AccountController.java</h4>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/account&quot;)
public class AccountController {
    @Autowired
    private AccountService accountService;
    @PostMapping(value = &quot;/add&quot;,produces = &quot;text/html;charset=utf-8&quot;)
    @ResponseBody
    public String add(Account account){
        accountService.add(account);
        return &quot;保存成功&quot;;
    }

    @RequestMapping(&quot;/findAll&quot;)
    public ModelAndView findAll(){
        List&lt;Account&gt; accountList = accountService.findAll();
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.addObject(&quot;accountList&quot;,accountList);
        modelAndView.setViewName(&quot;accountlist&quot;);
        return modelAndView;
    }
}
</code></pre>
<h4 id="8-配置springspringmvcmybatis">⑧. 配置Spring+SpringMVC+MyBatis</h4>
<blockquote>
<h5 id="springapplicationcontextxml">Spring：applicationContext.xml</h5>
</blockquote>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       &quot;&gt;
    &lt;!--配置组件扫描--&gt;
    &lt;context:component-scan base-package=&quot;com.zhiyuan.ssm&quot;&gt;
        &lt;!--取消对Controller注解的扫描，交由SpringMVC来管理--&gt;
        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;
    &lt;/context:component-scan&gt;
&lt;/beans&gt;
</code></pre>
<blockquote>
<h5 id="springmvcspring-mvcxml">SpringMVC：spring-mvc.xml</h5>
</blockquote>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       &quot;&gt;
    &lt;!--配置组件扫描，主要扫描Controller--&gt;
    &lt;context:component-scan base-package=&quot;com.zhiyuan.ssm.controller&quot;/&gt;
    &lt;!--配置mvc注解驱动--&gt;
    &lt;mvc:annotation-driven/&gt;
    &lt;!--交由tomcat寻找静态资源--&gt;
    &lt;mvc:default-servlet-handler/&gt;
    &lt;!--配置内部资源视图解析器--&gt;
    &lt;bean id=&quot;resourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/pages/&quot;/&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<blockquote>
<h5 id="mybatisaccountmapperxml-sqlmapconfigxml">MyBatis：AccountMapper.xml + SqlMapConfig.xml</h5>
</blockquote>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.zhiyuan.ssm.mapper.AccountMapper&quot;&gt;
    &lt;insert id=&quot;add&quot; parameterType=&quot;account&quot;&gt;
        insert into account (name,balance) values (#{name},#{balance})
    &lt;/insert&gt;
    &lt;select id=&quot;findAll&quot; resultType=&quot;account&quot;&gt;
        select * from account
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--引入数据库配置文件--&gt;
    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;
    &lt;!--定义别名--&gt;
    &lt;typeAliases&gt;
        &lt;!--&lt;typeAlias type=&quot;com.zhiyuan.ssm.entity.Account&quot; alias=&quot;account&quot;/&gt;--&gt;
        &lt;package name=&quot;com.zhiyuan.ssm.entity&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--配置环境--&gt;
    &lt;environments default=&quot;developement&quot;&gt;
        &lt;environment id=&quot;developement&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${driverClassName}&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;${jdbcUrl}&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;${dbusername}&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;${dbpassword}&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--加载映射--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com\zhiyuan\ssm\mapper\AccountMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h3 id="2-优化整合方式">2. 优化整合方式</h3>
<h4 id="1-导入pomxml依赖-2">①. 导入pom.xml依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
  &lt;version&gt;5.2.1.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
      &lt;groupId&gt;com.mchange&lt;/groupId&gt;
      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
      &lt;version&gt;0.9.5.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
      &lt;version&gt;2.0.5&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="2-将sqlsessionfactory配置到spring容器中">②. 将SqlSessionFactory配置到Spring容器中</h4>
<pre><code class="language-xml">&lt;!--加载配置文件--&gt;
&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;
&lt;!--配置数据库连接池信息--&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;${driverClassName}&quot;/&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbcUrl}&quot;/&gt;
    &lt;property name=&quot;user&quot; value=&quot;${dbusername}&quot;/&gt;
    &lt;property name=&quot;password&quot; value=&quot;${dbpassword}&quot;/&gt;
&lt;/bean&gt;
&lt;!--配置SqlSessionFactory--&gt;
&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;!--引入其他配置信息--&gt;
    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:SqlMapConfig-Spring.xml&quot;/&gt;
&lt;/bean&gt;
&lt;!--扫描所有mapper创建对象--&gt;
&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
    &lt;property name=&quot;basePackage&quot; value=&quot;com.zhiyuan.ssm.mapper&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--引入数据库配置文件--&gt;
    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;
    &lt;!--定义别名--&gt;
    &lt;typeAliases&gt;
        &lt;!--&lt;typeAlias type=&quot;com.zhiyuan.ssm.entity.Account&quot; alias=&quot;account&quot;/&gt;--&gt;
        &lt;package name=&quot;com.zhiyuan.ssm.entity&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--加载映射--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com\zhiyuan\ssm\mapper\AccountMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4 id="3-书写accountcontrollerjava">③. 书写AccountController.java</h4>
<pre><code class="language-java">@Service(&quot;accountService&quot;)
public class AccountServiceImpl implements AccountService {
    @Autowired
    private AccountMapper accountMapper;
    @Override
    public void add(Account account) {
        accountMapper.add(account);
    }

    @Override
    public List&lt;Account&gt; findAll() {
        return accountMapper.findAll();
    }
}
</code></pre>
<h4 id="4-声明式事务控制">④. 声明式事务控制</h4>
<pre><code class="language-xml">&lt;!--配置平台事务管理对象--&gt;
&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
&lt;!--配置事务增强--&gt;
&lt;tx:advice id=&quot;txAdvice&quot;&gt;
    &lt;tx:attributes&gt;
        &lt;tx:method name=&quot;*&quot;/&gt;
    &lt;/tx:attributes&gt;
&lt;/tx:advice&gt;
&lt;!--事务的织入--&gt;
&lt;aop:config&gt;
    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com.zhiyuan.ssm.service.impl.*.*(..))&quot;/&gt;
&lt;/aop:config&gt;
</code></pre>
<h2 id="六-分布式框架">六、分布式框架</h2>
<blockquote>
<p>软件架构的发展过程：<code>单体架构</code> --- <code>垂直架构</code> --- <code>SOA架构</code> --- <code>微服务架构</code></p>
<h4 id="单体架构">单体架构</h4>
<ul>
<li>特点：全部功能几种在一个项目内（All in one）</li>
<li>优点：架构简单，前期开发成本低，开发周期短，适合小型项目</li>
<li>缺点：
<ul>
<li>全部功能集成在一个工程中，对于代行项目不宜开发、扩展和维护</li>
<li>技术栈受限，只能用一种语言开发</li>
<li>系统性能扩展只能通过扩展集群节点，成本高</li>
</ul>
</li>
</ul>
<h4 id="垂直架构">垂直架构</h4>
<ul>
<li>特点：按照业务进行分割，形成小的单体项目</li>
<li>优点：技术栈可扩展</li>
<li>缺点：
<ul>
<li>功能集中在一个项目中，不利于开发、扩展和维护</li>
<li>系统扩张只能通过集群方式</li>
<li>项目之间功能冗杂、数据冗余、耦合性强</li>
</ul>
</li>
</ul>
<h4 id="soa架构">SOA架构</h4>
<ul>
<li>特点：将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁</li>
<li>优点：
<ul>
<li>重复功能或模块抽取为服务，提高开发效率</li>
<li>可重用性高，可维护性高</li>
</ul>
</li>
<li>缺点：
<ul>
<li>各系统之间有义务不同，很难确认功能或模块是重复的</li>
<li>抽取服务的粒度大</li>
<li>系统和服务之间耦合度高</li>
</ul>
</li>
</ul>
<h4 id="微服务架构">微服务架构</h4>
<ul>
<li>特点：将系统服务层完全独立出来，抽取为一个个的微服务，抽取的粒度更细，遵循单一原则，采用轻量级框架协议传输</li>
<li>优点：
<ul>
<li>服务拆分粒度更细，有利于提高开发效率</li>
<li>可以针对不同服务指定对应的优化方案</li>
<li>适用于互联网时代，产品迭代周期更短</li>
</ul>
</li>
<li>缺点：
<ul>
<li>粒度太大导致服务太多，维护成本高</li>
<li>分布式系统开发的技术成本高，对团队的挑战大</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="1-apache-dubbo">1. Apache Dubbo</h3>
<blockquote>
<p>Apache Dubbo是一款高性能的Java RPC框架，其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p>
<p>RPC：remote procedure call（远程过程调用）</p>
<p>官网：https://dubbo.apache.org/zh/</p>
<p>Apache Dubbo提供了三大核心能力：</p>
<ul>
<li>面向接口的远程方法调用</li>
<li>智能容错和负载均衡</li>
<li>服务自动注册和发现</li>
</ul>
</blockquote>
<h2 id="七-vue学习">七、Vue学习</h2>
<h3 id="1-简介">1. 简介</h3>
<blockquote>
<p><code>Vue</code> 读音与View类似，是一套用于构建用户界面的 <code>渐进式框架</code> ，与其他框架不同的是，Vue被设计为可以自定向上逐层应用，Vue的和辛苦只关注视图层，不仅易上手，还便于与第三方库或既有项目整合，另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue也完全能够为复杂的单页应用提供驱动</p>
<ul>
<li>渐进式：可以选择性的使用该框架中的一个或一些组件，这些组件的使用也不需要将框架全部组件都应用，而且用了这些组件也不要求你的系统全部都使用该框架</li>
<li>前端主流框架
<ul>
<li>Vue.js</li>
<li>React.js</li>
<li>AngularJS</li>
</ul>
</li>
<li>官网：https://cn.vuejs.org/</li>
</ul>
</blockquote>
<h3 id="2-搭建示例工程">2. 搭建示例工程</h3>
<ul>
<li>Vue的使用方式
<ul>
<li>可以引用在线的Vue.js</li>
<li>可以离线下载Vue.js</li>
<li>npm包资源管理器，可以下载Vue.js</li>
</ul>
</li>
<li>步骤
<ul>
<li><code>npm init -y</code>：初始化</li>
<li><code>npm install vue --save </code>：局部安装vue模块</li>
</ul>
</li>
</ul>
<h3 id="3-演示双向绑定与事件处理">3. 演示双向绑定与事件处理</h3>
<h4 id="1-插值引用-key">①. 插值引用 <code>{{key}}</code></h4>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;第一课&lt;/title&gt;
    &lt;script src=&quot;node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;h2&gt;{{name}}学Vue&lt;/h2&gt;
    &lt;/div&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var app = new Vue({
           el:&quot;#app&quot;,
           data:{
               name:&quot;絷缘&quot;
           }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="2-双向绑定-v-model">②. 双向绑定 <code>v-model</code></h4>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;第一课&lt;/title&gt;
    &lt;script src=&quot;node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;day&quot;/&gt;
        &lt;h2&gt;{{name}}学Vue，学了{{day}}天&lt;/h2&gt;
    &lt;/div&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var app = new Vue({
           el:&quot;#app&quot;,
           data:{
               name:&quot;絷缘&quot;,
               day:20
           }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="3-事件处理-v-on事件">③. 事件处理 <code>v-on:事件</code></h4>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;第一课&lt;/title&gt;
    &lt;script src=&quot;node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;day&quot;/&gt;
        &lt;button v-on:click=&quot;day++&quot;&gt;点我加一&lt;/button&gt;
        &lt;h2&gt;{{name}}学Vue，学了{{day}}天&lt;/h2&gt;
    &lt;/div&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var app = new Vue({
           el:&quot;#app&quot;,
           data:{
               name:&quot;絷缘&quot;,
               day:20
           }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="4-vue的生命周期以及钩子函数">4. Vue的生命周期以及钩子函数</h3>
<h4 id="1-生命周期">①. 生命周期</h4>
<ul>
<li>创建实例：每个Vue应用都是通过Vue函数创建一个新的Vue实例开始的</li>
</ul>
<pre><code class="language-js">var app = new Vue({
	//在构造函数中传入一个对象，并在对象中声明各种Vue所需数据和方法	
});
</code></pre>
<ul>
<li>装载模板：每个Vue实例都需要关联一段html，Vue会基于当前模板进行视图渲染，关联模板通过 <code>el</code> 实现</li>
</ul>
<pre><code class="language-js">var app = new Vue({
    //这样Vue就与id为app的元素关联上了，Vue就可以基于id为app的元素进行渲染数据了
   el:&quot;#app&quot; 
});
</code></pre>
<ul>
<li>渲染模板：当Vue实例被创建时，它会尝试获取在data中定义的所有属性，用于视图的数据渲染，并且监视data中属性的变化，当data发生变化，所有与之绑定的视图都将重新渲染，这就是响应式系统</li>
</ul>
<h4 id="2-钩子函数">②. 钩子函数</h4>
<ul>
<li>Vue为生命周期中的每个状态都设置了钩子函数（监听函数），每当Vue实例处于不同的生命周期时，对应的函数就会被触发调用</li>
</ul>
<figure data-type="image" tabindex="11"><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期" loading="lazy"></figure>
<ul>
<li><code>beforeCreate()</code>：Vue实例创建之前执行代码</li>
<li><code>created()</code>：Vue实例被创建后执行代码，常用于初始化数据</li>
<li><code>beforeMount</code></li>
<li><code>mounted</code></li>
<li><code>updated</code></li>
<li><code>beforeUpdate</code></li>
<li><code>destroyed</code></li>
<li><code>beforeDestroy</code></li>
</ul>
<blockquote>
<p>钩子函数不要使用箭头函数的方式编写</p>
<p>因为箭头函数并没有 <code>this</code>，<code>this</code> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致</p>
<p><code>Uncaught TypeError: Cannot read property of undefined</code>  或</p>
<p><code>Uncaught TypeError: this.myMethod is not a function</code>  之类的错误。</p>
</blockquote>
<h3 id="5-插值">5. 插值 <code>{{}}</code></h3>
<ul>
<li>
<p>指令：是指带有<code>v-</code> 前缀的特殊属性，例如 <code>v-model</code></p>
</li>
<li>
<p>插值表达式：<code>{{key}}</code></p>
</li>
<li>
<p>用于替换插值表达式：<code>v-text</code> <code>v-html</code></p>
<ul>
<li><code>v-text</code>：将数据输出到元素内部，如果输出的数据有HTML代码，作为普通文本输出</li>
<li><code>v-html</code>：将数据输出到元素的内部，如果输出的数据有HTML代码，会被渲染到页面上</li>
</ul>
</li>
</ul>
<h3 id="6-双向绑定-v-model">6. 双向绑定 <code>v-model</code></h3>
<ul>
<li>因为是双向绑定，意味着数据的改变会影响到视图的渲染，而视图的改变同样会影响到数据的改变，这就要求视图中的元素具备可修改数据的功能，所以可以双向绑定的元素是固定有限的
<ul>
<li><code>input</code></li>
<li><code>select</code></li>
<li><code>textarea</code></li>
<li><code>checkbox</code></li>
<li><code>radio</code></li>
<li><code>components</code></li>
</ul>
</li>
</ul>
<h3 id="7-事件绑定-v-on">7. 事件绑定 <code>v-on</code></h3>
<ul>
<li>
<p>格式：<code>v-on:click=&quot;num++&quot;</code></p>
</li>
<li>
<p>简写为：<code>@click=&quot;num++&quot;</code></p>
</li>
<li>
<p>实例代码：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;第一课&lt;/title&gt;
    &lt;script src=&quot;node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;day&quot;/&gt;
        &lt;button v-on:click=&quot;day++&quot;&gt;点我加一&lt;/button&gt;
        &lt;h2&gt;{{name}}学Vue，学了{{day}}天&lt;/h2&gt;
        &lt;button @click=&quot;decrement&quot;&gt;点我减一{{num}}&lt;/button&gt;
    &lt;/div&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var app = new Vue({
           el:&quot;#app&quot;,
           data:{
               name:&quot;絷缘&quot;,
               day:20,
               num:0
           },
           created() {
               this.num = 100;
           },
           methods:{
               decrement(){
                   this.num--;
               }
           }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>事件修饰符</p>
<ul>
<li><code>.stop</code>：阻止事件冒泡</li>
<li><code>.prevent</code>：阻止默认事件发生</li>
<li><code>.capture</code>：使用事件捕获模式</li>
<li><code>.self</code>：只有元素自身触发事件才执行（冒泡或捕获的都不执行）</li>
<li><code>.once</code>：只执行一次</li>
</ul>
</li>
<li>
<p>事件冒泡测试</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;事件冒泡测试&lt;/title&gt;
    &lt;script src=&quot;./node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;div style=&quot;width: 100px;height: 100px;background-color: #666666;&quot; @click=&quot;print('div被点击')&quot;&gt;
            &lt;button @click.stop=&quot;print('按钮被点击')&quot;&gt;事件冒泡&lt;/button&gt;
            &lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot; @click.prevent=&quot;print('a被点击')&quot;&gt;前往百度&lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var app = new Vue({
           el:&quot;#app&quot;,
           data:{
             name:&quot;絷缘&quot;
           },
           methods:{
               print(str){
                   console.log(str);
               }
           }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="8-数组-对象遍历">8. 数组、对象遍历</h3>
<ul>
<li>
<p>指令：<code>v-for</code></p>
</li>
<li>
<p>实例代码：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;集合数据遍历渲染&lt;/title&gt;
    &lt;script src=&quot;./node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;table width=&quot;500&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
            &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;序号&lt;/th&gt;
                &lt;th&gt;userId&lt;/th&gt;
                &lt;th&gt;userName&lt;/th&gt;
                &lt;th&gt;userAge&lt;/th&gt;
                &lt;th&gt;userGender&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;tr v-for=&quot;(user,index) in users&quot;&gt;
                &lt;th&gt;{{index}}&lt;/th&gt;
                &lt;th&gt;{{user.userId}}&lt;/th&gt;
                &lt;th&gt;{{user.userName}}&lt;/th&gt;
                &lt;th&gt;{{user.userAge}}&lt;/th&gt;
                &lt;th&gt;{{user.userGender}}&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var app = new Vue({
            el:&quot;#app&quot;,
            data:{
                users:[
                    {&quot;userId&quot;:1,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:2,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:3,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:4,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:5,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:6,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:7,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:8,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:9,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                    {&quot;userId&quot;:10,&quot;userName&quot;:&quot;絷缘&quot;,&quot;userAge&quot;:23,&quot;userGender&quot;:&quot;male&quot;},
                ]
            }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="12"><img src="http://pic.zyblog.xyz/img/typora/20210313121405.png" alt="image-20210313121405486" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>为消除数据被增删时对视图渲染产生的影响，我们需要使用一个特殊的语法 <code>:key=&quot;&quot;</code>，通过key与集合元素中单个元素的唯一属性进行绑定，保证数据的唯一性，从 而使数据增删时，视图渲染不受影响</p>
</li>
<li>
<p><code>:key=&quot;&quot;</code> 是 <code>v-bind:key=&quot;&quot;</code> 的简写</p>
</li>
</ul>
<h3 id="8-指令-v-if-v-show">8. 指令 <code>v-if</code> <code>v-show</code></h3>
<h4 id="1-v-if-v-else-if-v-else">①. <code>v-if</code> <code>v-else-if</code> <code>v-else</code></h4>
<ul>
<li>DOM动态渲染，对元素进行动态添加或删除</li>
</ul>
<h4 id="2-v-show">②. <code>v-show</code></h4>
<ul>
<li>通过元素的css <code>display:none</code> 对元素做显示或隐藏</li>
</ul>
<h3 id="9-指令-v-bind">9. 指令 <code>v-bind</code></h3>
<h2 id="八-springboot">八、SpringBoot</h2>
<h3 id="1-什么是springboot">1. 什么是SpringBoot</h3>
<h4 id="1-概述-2">①. 概述</h4>
<ul>
<li>SpringBoot称为搭建程序的脚手架，或者说是便捷搭建基于Spring工程的脚手架</li>
</ul>
<h4 id="2-作用-2">②. 作用</h4>
<ul>
<li>帮助开发人员快速地构建庞大的Spring项目，并且尽可能地减少一切xml文件的配置，做到开箱即用，让开发人员将注意力放在业务上而不是配置上</li>
</ul>
<h4 id="3-解决的问题">③. 解决的问题</h4>
<ul>
<li>繁杂的配置文件</li>
<li>混乱的依赖管理</li>
</ul>
<h4 id="4-主要特点">④. 主要特点</h4>
<ul>
<li>创建独立的Spring应用，为所有Spring开发者提供一个非常快速地、广泛接受的入门体验</li>
<li>直接嵌入应用服务器，如tomcat、jetty、undertow等，不需要去部署war包</li>
<li>提供固定的启动器依赖去简化组件配置，实现开箱即用</li>
<li>自动地配置Spring和其他有需要的第三方依赖</li>
<li>提供了一些代行项目中常见的非功能性特性，如内嵌服务器、安全、指标、健康检测、外部配置等</li>
<li>绝对没有代码生成，也无需xml配置</li>
</ul>
<h3 id="2-springboot配置文件">2. SpringBoot配置文件</h3>
<h4 id="1-配置文件类型">①. 配置文件类型</h4>
<ul>
<li>properties</li>
<li>yml / yaml</li>
</ul>
<h4 id="2-yaml以数据为核心的配置文件">②. yaml：以数据为核心的配置文件</h4>
<ul>
<li>
<p>基本语法</p>
<ul>
<li>大小写敏感</li>
<li>数据值前必须由空格分隔</li>
<li>使用空格缩进表示层级关系，相同缩进表示同一级</li>
</ul>
</li>
<li>
<p>数据格式</p>
<ul>
<li>
<p>对象</p>
<ul>
<li>
<pre><code class="language-yaml">server:
	port: 8080
</code></pre>
</li>
<li>
<pre><code class="language-yaml">server: {port: 8080}
</code></pre>
</li>
</ul>
</li>
<li>
<p>数组</p>
<ul>
<li>
<pre><code class="language-yaml">language:
	- zh-cn
	- en
	- jp
</code></pre>
</li>
<li>
<pre><code class="language-yaml">language: [zh-cn,en,jp]
</code></pre>
</li>
</ul>
</li>
<li>
<p>纯量</p>
<ul>
<li>
<pre><code class="language-yaml">username: 'zhiyuan\n' #单引号内原样输出
username: &quot;zhiyuan\n&quot; #双引号内可以识别转义字符
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参数引用</p>
<ul>
<li>
<p>通过$符号可以引用已经存在于yaml配置文件中的纯量参数</p>
<pre><code class="language-yaml">url: &quot;jdbc:mysql://localhost:3306/test?serverTimeZone=HongKong&quot;

jdbc:
	url: ${url}
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="3-springboot内部配置加载顺序">③. SpringBoot内部配置加载顺序</h4>
<ul>
<li>file:<code>./config/</code>：从当前项目路径中的config目录中加载配置文件</li>
<li>file:<code>./</code>：从当前项目的根目录中加载配置文件</li>
<li>classpath:<code>/config/</code>：classpath的config目录中加载配置文件</li>
<li>classpath:<code>/</code>：classpath的根目录中加载配置文件</li>
</ul>
<h3 id="3-springboot入门">3. SpringBoot入门</h3>
<h4 id="1-步骤">①. 步骤</h4>
<ul>
<li>
<p>创建maven项目</p>
</li>
<li>
<p>添加SpringBoot父级依赖</p>
<pre><code class="language-xml">&lt;parent&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;version&gt;2.4.2&lt;/version&gt;
&lt;/parent&gt;
</code></pre>
</li>
<li>
<p>添加SpringBoot启动器依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>设置JDK版本信息</p>
<pre><code class="language-xml">&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
&lt;/properties&gt;
</code></pre>
</li>
<li>
<p>编写启动引导类</p>
<pre><code class="language-java">/**
 * Spring Boot工程都有一个启动引导类，这是工程的入口，并在引导类上添加 @SpringBootApplication 注解
 */
@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class,args);
    }
}
</code></pre>
</li>
<li>
<p>编写简单Controller</p>
<pre><code class="language-java">@RestController
public class TestController {

    @GetMapping(&quot;/hello&quot;)
    public String hello(){
        return &quot;Hello!SpringBoot!&quot;;
    }
}
</code></pre>
</li>
<li>
<p>成功访问</p>
<figure data-type="image" tabindex="13"><img src="http://pic.zyblog.xyz/img/typora/20210313144218.png" alt="image-20210313144218537" loading="lazy"></figure>
</li>
</ul>
<h4 id="2-java代码方式配置">②. Java代码方式配置</h4>
<ul>
<li>
<p>Java配置主要靠Java类和一些注解，比较常用的注解有</p>
<ul>
<li><code>@Configuration</code>：声明一个类作为配置类，代替xml文件</li>
<li><code>@Bean</code>：声明在方法上，将方法返回值加入Bean容器，代替bean标签</li>
<li><code>@Value</code>：属性注入</li>
<li><code>@PropertySource</code>：指定外部属性文件</li>
</ul>
</li>
<li>
<p>实现配置数据库连接池</p>
<ul>
<li>导入依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid&lt;/artifactId&gt;
    &lt;version&gt;1.2.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>创建配置文件</li>
</ul>
<pre><code class="language-properties">jdbc.driverClassName=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/springbootdb?serverTimezone=Asia/Shanghai
jdbc.username=root
jdbc.password=123456
</code></pre>
<ul>
<li>创建配置类</li>
</ul>
<pre><code class="language-java">@Configuration
@PropertySource(&quot;classpath:jdbc.properties&quot;)
public class JdbcConfig {
    @Value(&quot;${jdbc.driverClassName}&quot;)
    String driverClassName;
    @Value(&quot;${jdbc.url}&quot;)
    String url;
    @Value(&quot;${jdbc.username}&quot;)
    String username;
    @Value(&quot;${jdbc.password}&quot;)
    String password;

    @Bean
    public DataSource getDataSource(){
        DruidDataSource druidDataSource = new DruidDataSource();
        druidDataSource.setDriverClassName(this.driverClassName);
        druidDataSource.setUrl(this.url);
        druidDataSource.setUsername(this.username);
        druidDataSource.setPassword(this.password);
        return druidDataSource;
    }
}
</code></pre>
<ul>
<li>根据类型注入属性</li>
</ul>
<pre><code class="language-java">@RestController
public class TestController {

    @Autowired
    private DataSource ds;

    @GetMapping(&quot;/hello&quot;)
    public String hello(){
        System.out.println(ds);
        return &quot;Hello!SpringBoot!&quot;;
    }
}
</code></pre>
<ul>
<li>控制台打印</li>
</ul>
<pre><code class="language-json">{
	CreateTime:&quot;2021-03-13 15:02:01&quot;,
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

</code></pre>
</li>
</ul>
<h4 id="3-springboot属性注入方式">③. SpringBoot属性注入方式</h4>
<ul>
<li>
<p><code>@ConfigurationProperties</code></p>
<ul>
<li>该注解可以将SpringBoot中的配置文件（application.properties、application.yml）中的配置项读取到一个对象中</li>
</ul>
</li>
<li>
<p>步骤</p>
<ul>
<li>创建名为application的properties文件</li>
</ul>
<pre><code class="language-properties">jdbc.driverClassName=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/springbootdb?serverTimezone=Asia/Shanghai
jdbc.username=root
jdbc.password=123456
</code></pre>
<ul>
<li>创建JdbcProperties配置类</li>
</ul>
<pre><code class="language-java">@ConfigurationProperties(prefix = &quot;jdbc&quot;)
public class JdbcProperties {
    private String driverClassName;
    private String url;
    private String username;
    private String password;

    public String getDriverClassName() {
        return driverClassName;
    }

    public void setDriverClassName(String driverClassName) {
        this.driverClassName = driverClassName;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
</code></pre>
<ul>
<li>导入依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
    &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>创建JdbcConfig配置类</li>
</ul>
<pre><code class="language-java">@Configuration
@EnableConfigurationProperties(JdbcProperties.class)
public class JdbcConfig {
    @Bean
    public DataSource getDataSource(JdbcProperties jdbcProperties){
        DruidDataSource druidDataSource = new DruidDataSource();
        druidDataSource.setDriverClassName(jdbcProperties.getDriverClassName());
        druidDataSource.setUrl(jdbcProperties.getUrl());
        druidDataSource.setUsername(jdbcProperties.getUsername());
        druidDataSource.setPassword(jdbcProperties.getPassword());
        return druidDataSource;
    }
}
</code></pre>
</li>
<li>
<p>优化</p>
<ul>
<li>移除 <code>JdbcProperties</code> 配置类</li>
<li>直接在 <code>JdbcConfig</code> 的方法上加注解</li>
</ul>
<pre><code class="language-java">@Configuration
public class JdbcConfig {

    @Bean
    @ConfigurationProperties(prefix = &quot;jdbc&quot;)
    public DataSource getDataSource(){
        return new DruidDataSource();
    }
}
</code></pre>
</li>
</ul>
<h4 id="4-多个yml文件配置多个properties文件配置">④. 多个yml文件配置（多个properties文件配置）</h4>
<ul>
<li>
<p>单个yaml文件中的多个yaml配置</p>
<ul>
<li>
<p>单个yaml文件可以使用 <code>---</code> 对多个配置进行分类</p>
<ul>
<li>
<pre><code class="language-yaml">---
# 开发环境配置信息
server:
	port: 8080
spring:
	profiles: dev
---
# 测试环境配置信息
server:
	port: 8080
spring:
	profiles: test
---
# 生产环境配置信息
server:
	port: 8080
spring:
	profiles: pro
</code></pre>
</li>
</ul>
</li>
<li>
<pre><code class="language-yaml"># 激活对应配置信息
spring:
	profiles:
		actice: pro
</code></pre>
</li>
</ul>
</li>
<li>
<p>多个yml文件的配置 / 多个properties文件配置</p>
<ul>
<li>
<p>SpringBoot中允许多个 yml / properties 配置文件，这些配置文件的名称必须为 <code>application-***.yml</code> <code>application-***.properties</code>并且这些配置文件必须要在 <code>application.yml</code>  <code>application.properties</code>中激活之后才可以使用</p>
</li>
<li>
<p>如果properties和yml配置文件同时存在SpringBoot项目中，那么这两种文件都有效，在两个配置文件中如果存在同名的配置项，以properties文件为主</p>
</li>
<li>
<p>激活其他配置文件的方式</p>
<ul>
<li>
<pre><code class="language-yaml"># yaml激活写法
spring:
  profiles:
    active: dev
</code></pre>
</li>
<li>
<pre><code class="language-properties"># properties文件激活写法
spring.profiles.active=pro
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>以上都是使用profile的配置方式激活对应配置文件，profile的激活方式共有以下几种：</p>
<ul>
<li>配置文件</li>
<li>虚拟机参数 <code>-Dspring.profile.active=pro</code></li>
<li>命令行参数 <code>--spring.profile.active=pro</code>
<ul>
<li><code>java -jar 项目打包后的文件名 --spring.profile.active=pro </code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="5-lombok应用">⑤. lombok应用</h4>
<blockquote>
<p>lombok是一个插件工具类包，提供了一些注解 <code>@Data</code> <code>@Getter</code> <code>@Setter</code> 等这些注解去简化实体类中的构造方法、get/set等方法的编写</p>
</blockquote>
<ul>
<li>步骤</li>
</ul>
<ol>
<li>在IDEA中安装lombok插件</li>
<li>添加lombok对应的依赖</li>
<li>使用lombok的注解改造实体类</li>
</ol>
<ul>
<li>
<p>注解</p>
<ul>
<li><code>@Data</code>：自动提供getter、setter、hashCode、equals、toString方法</li>
<li><code>@Getter</code>：自动提供getter方法</li>
<li><code>@Setter</code>：自动提供setter方法</li>
<li><code>@Slf4j</code>：自动在bean中提供log变量</li>
</ul>
</li>
<li>
<p>实现</p>
<ul>
<li>导入依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;1.18.16&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>创建实体类</li>
</ul>
<pre><code class="language-java">@Data
@Slf4j
public class User {
    private int id;
    private String username;
    private String password;
    private Date jointime;
}
</code></pre>
</li>
</ul>
<h4 id="6-修改springmvc端口和静态资源">⑥. 修改SpringMVC端口和静态资源</h4>
<ul>
<li>
<p>修改Tomcat端口</p>
<pre><code class="language-yaml">server:
  port: 80
  servlet:
  	context-path: /hello
</code></pre>
</li>
<li>
<p>访问项目中的静态资源</p>
<ul>
<li><code>classpath:/META-INF/resources/</code></li>
<li><code>classpath:/resources/</code></li>
<li><code>classpath:/static/</code></li>
<li><code>classpath:/public/</code></li>
</ul>
</li>
</ul>
<h4 id="7-springmvc拦截器配置">⑦. SpringMVC拦截器配置</h4>
<ul>
<li>日志记录级别</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
  com.dnc: debug
  org.springframework: info
</code></pre>
<ul>
<li>编写自定义拦截器</li>
</ul>
<pre><code class="language-java">@Slf4j
public class MyInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        log.debug(&quot;MyInterceptor的preHandle方法&quot;);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        log.debug(&quot;MyInterceptor的postHandle方法&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        log.debug(&quot;MyInterceptor的afterCompletion方法&quot;);
    }
}
</code></pre>
<ul>
<li>编写拦截器配置类，重写方法添加拦截器功能</li>
</ul>
<pre><code class="language-java">@Configuration
public class MvcConfig implements WebMvcConfigurer {

    @Bean
    public MyInterceptor myInterceptor(){
        return new MyInterceptor();
    }

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        //添加拦截器，拦截所有请求
        registry.addInterceptor(myInterceptor()).addPathPatterns(&quot;/*&quot;);
    }
}
</code></pre>
<h4 id="8-事务和连接池">⑧. 事务和连接池</h4>
<ul>
<li>
<p>事务配置</p>
<ul>
<li>添加事务相关依赖，mysql相关依赖</li>
<li>编写业务UserService使用事务注解 <code>@Transactional</code></li>
</ul>
</li>
<li>
<p>数据库连接池 <code>hikari</code> 配置</p>
</li>
<li>
<p>SpringBoot集成的默认数据库连接池，只需要我们配置就好了，据说效率比druid高</p>
</li>
<li>
<p>步骤</p>
<ul>
<li>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>数据库连接池默认使用hikari，在配置文件中配置如下就可以了</p>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/springbootdb?serverTimezone=Asia/Shanghai
    username: root
    password: 123456
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="9-springboot整合mybatis">⑨. SpringBoot整合MyBatis</h4>
<ul>
<li>
<p>添加启动器依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;2.1.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>配置MyBatis：实体类别名包，日志，映射文件等</p>
<pre><code class="language-yaml">mybatis:
  #配置实体类别名包路径
  type-aliases-package: com.dnc.entity
  #配置映射文件路径
  mapper-locations: classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
</code></pre>
</li>
<li>
<p>配置MapperScan</p>
<pre><code class="language-java">@SpringBootApplication
@MapperScan(&quot;com.dnc.mapper&quot;)
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class,args);
    }
}
</code></pre>
</li>
</ul>
<h4 id="10-springboot通用mapper">⑩. SpringBoot通用Mapper</h4>
<ul>
<li>
<p>添加启动器依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;2.1.5&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>改造UserMapper继承 Mapper <User></p>
</li>
<li>
<p>修改启动引导类Application中的Mapper扫描注解</p>
</li>
<li>
<p>修改User实体类添加JPA注解</p>
</li>
<li>
<p>改造UserService实现业务功能</p>
</li>
</ul>
<blockquote>
<p>此处注意一个问题，实体类中所有成员属性的类型必须为引用类型，基本类型会导致SQL无法执行</p>
</blockquote>
<h3 id="3-springboot整合测试">3. SpringBoot整合测试</h3>
<blockquote>
<p>http://localhost/user/1</p>
<pre><code class="language-json">{
  &quot;id&quot;: 1,
  &quot;username&quot;: &quot;絷缘&quot;,
  &quot;password&quot;: &quot;123456&quot;,
  &quot;jointime&quot;: &quot;2021-03-13 23:31:23&quot;
}
</code></pre>
</blockquote>
<h3 id="4-springboot整合junit">4. SpringBoot整合Junit</h3>
<h4 id="1-添加启动器依赖-spring-boot-starter-test">①. 添加启动器依赖 <code>spring-boot-starter-test</code></h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="2-编写测试代码">②. 编写测试代码</h4>
<pre><code class="language-java">@RunWith(SpringRunner.class)
@SpringBootTest(classes=Application.class)
public class UserServiceTest {

    @Autowired
    private UserService userService;
    @Test
    public void queryById() {
        User user = userService.queryById(1);
        System.out.println(user);
    }
}

//输出结果
User(id=1, username=絷缘, password=123456, jointime=Sat Mar 13 23:31:23 CST 2021)
</code></pre>
<h3 id="5-springboot整合redis">5. SpringBoot整合Redis</h3>
<h4 id="1-添加启动器依赖-spring-boot-starter-data-redis">①. 添加启动器依赖 <code>spring-boot-starter-data-redis</code></h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="2-配置applicationyml中修改redis的连接参数">②. 配置application.yml中修改redis的连接参数</h4>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/springbootdb?serverTimezone=Asia/Shanghai
    username: root
    password: 123456
  redis:
    host: localhost
    port: 6379
</code></pre>
<h4 id="3-编写测试类引用redistemplate操作redis中的五种数据类型">③. 编写测试类引用RedisTemplate操作redis中的五种数据类型</h4>
<ul>
<li>string</li>
<li>hash</li>
<li>list</li>
<li>set</li>
<li>sorted set</li>
</ul>
<pre><code class="language-java">@RunWith(SpringRunner.class)
@SpringBootTest
public class RedisTest {

    @Autowired
    private RedisTemplate redisTemplate;
    @Test
    public void test(){
        //操作string类型
        redisTemplate.opsForValue().set(&quot;username&quot;,&quot;絷缘&quot;);
        redisTemplate.boundValueOps(&quot;name&quot;).set(&quot;絷缘&quot;);
        System.out.println(&quot;username=&quot; + redisTemplate.opsForValue().get(&quot;username&quot;));
        System.out.println(&quot;name=&quot; + redisTemplate.opsForValue().get(&quot;name&quot;));
        //操作hash散列
        redisTemplate.boundHashOps(&quot;user&quot;).put(&quot;username&quot;,&quot;zhiyuan&quot;);
        redisTemplate.boundHashOps(&quot;user&quot;).put(&quot;nickname&quot;,&quot;絷缘&quot;);
        redisTemplate.boundHashOps(&quot;user&quot;).put(&quot;password&quot;,&quot;123456&quot;);
        System.out.println(&quot;username=&quot; + redisTemplate.opsForHash().get(&quot;user&quot;,&quot;username&quot;));
        System.out.println(&quot;nickname=&quot; + redisTemplate.opsForHash().get(&quot;user&quot;,&quot;nickname&quot;));
        System.out.println(&quot;password=&quot; + redisTemplate.opsForHash().get(&quot;user&quot;,&quot;password&quot;));
        Set userkeys = redisTemplate.boundHashOps(&quot;user&quot;).keys();
        System.out.println(&quot;userkeys=&quot; + userkeys);
        List uservalues = redisTemplate.boundHashOps(&quot;user&quot;).values();
        System.out.println(&quot;uservalues=&quot; + uservalues);
        //操作list集合
        redisTemplate.boundListOps(&quot;person&quot;).leftPush(&quot;personA&quot;);
        redisTemplate.boundListOps(&quot;person&quot;).leftPush(&quot;personB&quot;);
        redisTemplate.boundListOps(&quot;person&quot;).leftPush(&quot;personC&quot;);
        List person = redisTemplate.boundListOps(&quot;person&quot;).range(0, -1);
        System.out.println(&quot;person=&quot; + person);
        //操作set集合
        redisTemplate.boundSetOps(&quot;animals&quot;).add(&quot;dog&quot;,&quot;cat&quot;,&quot;pig&quot;,&quot;horse&quot;);
        Set animals = redisTemplate.boundSetOps(&quot;animals&quot;).members();
        System.out.println(&quot;animals=&quot; + animals);
        //操作sortedset集合
        redisTemplate.boundZSetOps(&quot;student&quot;).add(&quot;studentA&quot;,22);
        redisTemplate.boundZSetOps(&quot;student&quot;).add(&quot;studentB&quot;,25);
        redisTemplate.boundZSetOps(&quot;student&quot;).add(&quot;studentC&quot;,21);
        redisTemplate.boundZSetOps(&quot;student&quot;).add(&quot;studentD&quot;,26);
        Set student = redisTemplate.boundZSetOps(&quot;student&quot;).range(0, -1);
        System.out.println(&quot;student=&quot; + student);
    }
}
//输出结果
username=絷缘
name=絷缘
username=zhiyuan
nickname=絷缘
password=123456
userkeys=[username, nickname, password]
uservalues=[zhiyuan, 絷缘, 123456]
person=[personC, personB, personA, personC, personB, personA, personC, personB, personA]
animals=[dog, pig, cat, horse]
student=[studentC, studentA, studentB, studentD]
</code></pre>
<h3 id="6-springboot项目部署">6. SpringBoot项目部署</h3>
<blockquote>
<p>目标：将SpringBoot项目使用maven指令打成jar包并运行测试</p>
</blockquote>
<ol>
<li>将项目中的资源、配置、依赖包打到一个jar包中：使用 <code>maven</code>  的 <code>package</code> 命令</li>
<li>部署jar包：<code>java -jar 包名</code></li>
</ol>
<pre><code class="language-xml">&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
                &lt;mainClass&gt;com.xzy.youpin.Application&lt;/mainClass&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<ol start="3">
<li>安装插件 <code>JBLSpringBootAppGen</code>，可以自动创建 <code>Application.java</code> 和 <code>application.yml</code></li>
</ol>
<h2 id="九-thymeleaf">九、thymeleaf</h2>
<h2 id="十-springsecurity">十、 SpringSecurity</h2>
<blockquote>
<p>RBAC（Role-Based-Access-Control）：基于角色的权限管理</p>
<p>认证 + 授权</p>
</blockquote>
<h3 id="1-步骤-2">1. 步骤</h3>
<h4 id="1-httpbasic模式的认证">①. HttpBasic模式的认证</h4>
<h4 id="2-formlogin模式的认证">②. FormLogin模式的认证</h4>
<ul>
<li>编写login.html文件</li>
<li>创建配置类继承 <code>WebSecurityConfigurerAdapter</code></li>
<li>重写 <code>configure(HttpSecurity http)</code> 配置登录验证逻辑</li>
<li>重写 <code>configure(AuthenticationManagerBuilder auth)</code> 实现内存身份验证</li>
<li>运行验证</li>
</ul>
<h4 id="3-前后端分离架构的认证">③. 前后端分离架构的认证</h4>
<h2 id="十一-mybatis-plus">十一、MyBatis-Plus</h2>
<h3 id="1-导包">1. 导包</h3>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;
    &lt;version&gt;mybatis-plus-latest-version&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid&lt;/artifactId&gt;
    &lt;version&gt;1.2.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;1.18.12&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
    &lt;version&gt;1.7.25&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="2-配置log4j">2. 配置log4j</h3>
<pre><code class="language-properties">log4j.rootLogger=DEBUG,A1

log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.Layout.ConversionPattern=[%t] [%c]-[%p] %m%n
</code></pre>
<h3 id="3-springboot整合mybatis-plus">3. SpringBoot整合Mybatis-Plus</h3>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;Latest Version&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<blockquote>
<p>queryWrapper.lt（）——小于<br>
queryWrapper.le（）——小于等于<br>
queryWrapper.gt（）——大于<br>
queryWrapper.ge（）——大于等于<br>
queryWrapper.eq（）——等于<br>
queryWrapper.ne（）——不等于<br>
queryWrapper.betweeen（“age”,10,20）——age在值10到20之间<br>
queryWrapper.notBetweeen（“age”,10,20）——age不在值10到20之间<br>
queryWrapper.like（“属性”,“值”）——模糊查询匹配值‘%值%’<br>
queryWrapper.notLike（“属性”,“值”）——模糊查询不匹配值‘%值%’<br>
queryWrapper.likeLeft（“属性”,“值”）——模糊查询匹配最后一位值‘%值’<br>
queryWrapper.likeRight（“属性”,“值”）——模糊查询匹配第一位值‘值%’<br>
queryWrapper.isNull（）——值为空或null<br>
queryWrapper.isNotNull（）——值不为空或null<br>
queryWrapper.in（“属性”，条件，条件 ）——符合多个条件的值<br>
queryWrapper.notIn(“属性”，条件，条件 )——不符合多个条件的值<br>
queryWrapper.or（）——或者<br>
queryWrapper.and（）——和<br>
queryWrapper.orderByAsc(“属性”)——根据属性升序排序<br>
queryWrapper.orderByDesc(“属性”)——根据属性降序排序<br>
queryWrapper.inSql(“sql语句”)——符合sql语句的值<br>
queryWrapper.notSql(“sql语句”)——不符合SQL语句的值<br>
queryWrapper.esists（“SQL语句”）——查询符合SQL语句的值<br>
queryWrapper.notEsists（“SQL语句”）——查询不符合SQL语句的值</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/pILxU31oU/">https://zhiyuandnc.github.io/pILxU31oU/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaSE学习]]></title>
        <id>https://zhiyuandnc.github.io/3pOEFSCc4/</id>
        <link href="https://zhiyuandnc.github.io/3pOEFSCc4/">
        </link>
        <updated>2021-03-18T14:47:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-关键字">1. 关键字</h2>
<h3 id="a理解-java中事先定义的含有特别意义的标识符">A.理解： Java中事先定义的，含有特别意义的标识符</h3>
<table>
<thead>
<tr>
<th>private</th>
<th>一种访问控制方式：私有模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>protected</td>
<td>一种访问控制方式：保护模式</td>
</tr>
<tr>
<td>public</td>
<td>一种访问控制方式：公有模式</td>
</tr>
<tr>
<td>abstract</td>
<td>表明类或者成员方法具有抽象属性</td>
</tr>
<tr>
<td>class</td>
<td>类</td>
</tr>
<tr>
<td>extends</td>
<td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td>
</tr>
<tr>
<td>final</td>
<td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变</td>
</tr>
<tr>
<td>implements</td>
<td>表明一个类实现了给定的接口</td>
</tr>
<tr>
<td>interface</td>
<td>接口</td>
</tr>
<tr>
<td>native</td>
<td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td>
</tr>
<tr>
<td>new</td>
<td>用来创建新实例对象</td>
</tr>
<tr>
<td>static</td>
<td>表明具有静态属性</td>
</tr>
<tr>
<td>strictfp</td>
<td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</td>
</tr>
<tr>
<td>synchronized</td>
<td>表明一段代码需要同步执行</td>
</tr>
<tr>
<td>transient</td>
<td>声明不用序列化的成员域</td>
</tr>
<tr>
<td>volatile</td>
<td>表明两个或者多个变量必须同步地发生变化</td>
</tr>
<tr>
<td>break</td>
<td>提前跳出一个块</td>
</tr>
<tr>
<td>continue</td>
<td>回到一个块的开始处</td>
</tr>
<tr>
<td>return</td>
<td>从成员方法中返回数据</td>
</tr>
<tr>
<td>do</td>
<td>用在do-while循环结构中</td>
</tr>
<tr>
<td>while</td>
<td>用在循环结构中</td>
</tr>
<tr>
<td>if</td>
<td>条件语句的引导词</td>
</tr>
<tr>
<td>else</td>
<td>用在条件语句中，表明当条件不成立时的分支</td>
</tr>
<tr>
<td>for</td>
<td>一种循环结构的引导词</td>
</tr>
<tr>
<td>instanceof</td>
<td>用来测试一个对象是否是指定类型的实例对象</td>
</tr>
<tr>
<td>switch</td>
<td>分支语句结构的引导词</td>
</tr>
<tr>
<td>case</td>
<td>用在switch语句之中，表示其中的一个分支</td>
</tr>
<tr>
<td>default</td>
<td>默认，例如，用在switch语句中，表明一个默认的分支</td>
</tr>
<tr>
<td>try</td>
<td>尝试一个可能抛出异常的程序块</td>
</tr>
<tr>
<td>catch</td>
<td>用在异常处理中，用来捕捉异常</td>
</tr>
<tr>
<td>throw</td>
<td>抛出一个异常</td>
</tr>
<tr>
<td>throws</td>
<td>声明在当前定义的成员方法中所有需要抛出的异常</td>
</tr>
<tr>
<td>import</td>
<td>表明要访问指定的类或包</td>
</tr>
<tr>
<td>package</td>
<td>包</td>
</tr>
<tr>
<td>boolean</td>
<td>基本数据类型之一，布尔类型</td>
</tr>
<tr>
<td>byte</td>
<td>基本数据类型之一，字节类型</td>
</tr>
<tr>
<td>char</td>
<td>基本数据类型之一，字符类型</td>
</tr>
<tr>
<td>double</td>
<td>基本数据类型之一，双精度浮点数类型</td>
</tr>
<tr>
<td>float</td>
<td>基本数据类型之一，单精度浮点数类型</td>
</tr>
<tr>
<td>int</td>
<td>基本数据类型之一，整数类型</td>
</tr>
<tr>
<td>long</td>
<td>基本数据类型之一，长整数类型</td>
</tr>
<tr>
<td>short</td>
<td>基本数据类型之一,短整数类型</td>
</tr>
<tr>
<td>null</td>
<td>空</td>
</tr>
<tr>
<td>true</td>
<td>正确</td>
</tr>
<tr>
<td>false</td>
<td>错误</td>
</tr>
<tr>
<td>super</td>
<td>表明当前对象的父类型的引用或者父类型的构造方法</td>
</tr>
<tr>
<td>this</td>
<td>指向当前实例对象的引用</td>
</tr>
<tr>
<td>void</td>
<td>声明当前成员方法没有返回值</td>
</tr>
<tr>
<td>goto</td>
<td>保留关键字，没有具体含义</td>
</tr>
<tr>
<td>const</td>
<td>保留关键字，没有具体含义</td>
</tr>
</tbody>
</table>
<h2 id="2-保留字">2. 保留字</h2>
<h3 id="a-理解java中事先定义的以后的版本可能被使用的标识符">A. 理解：Java中事先定义的以后的版本可能被使用的标识符</h3>
<p><strong>goto 和 const</strong></p>
<h2 id="3-标识符">3. 标识符</h2>
<h3 id="a-理解用来表示类名变量名方法名类型名数组名文件名的有效字符序列称为标识符通俗讲自己起的名字">A. 理解：用来表示类名，变量名，方法名，类型名，数组名，文件名的有效字符序列称为标识符（通俗讲：自己起的名字）</h3>
<p>组成：</p>
<ul>
<li>数字0-9</li>
<li>字母A-Za-z</li>
<li>下划线_</li>
<li>美元符$</li>
</ul>
<p>注意事项：</p>
<ul>
<li>不能以数字开头，阿里巴巴手册中规定不能以下划线或$开头</li>
<li>命名遵守驼峰命名法
<ul>
<li>大驼峰：类名</li>
<li>小驼峰：方法名，变量名</li>
</ul>
</li>
<li>Java中严格区分大小写</li>
<li>结尾必须以分号结束</li>
<li>写代码时注意缩进，等号前后加空格</li>
</ul>
<h2 id="4-注释">4. 注释</h2>
<h3 id="a-理解用于解释说明程序的文字信息">A. 理解：用于解释说明程序的文字信息</h3>
<h3 id="b-类别">B. 类别：</h3>
<ul>
<li>单行注释：//</li>
<li>多行注释：/**/</li>
<li>文档注释：/***/</li>
</ul>
<h2 id="5-进制转换">5. 进制转换</h2>
<h3 id="a-二进制">A. 二进制</h3>
<ul>
<li>由0，1组成。以0b开头</li>
<li>int num = 0b11011;</li>
</ul>
<h3 id="b-八进制">B. 八进制</h3>
<ul>
<li>由0,1,...7组成。以0开头</li>
<li>int num = 01011;</li>
</ul>
<h3 id="c-十六进制">C. 十六进制</h3>
<ul>
<li>由0,1,...9,a,b,c,d,e,f(大小写均可)组成，以0x开头</li>
<li>int num = 0xac34b;</li>
</ul>
<h3 id="d-十进制">D. 十进制</h3>
<ul>
<li>由0,1,...9组成，默认整数是十进制</li>
<li>int num = 110;</li>
</ul>
<h2 id="6-变量">6. 变量</h2>
<h3 id="a-理解内存中的一块拥有名称可以存储数据的存储区域">A. 理解：内存中的一块拥有名称可以存储数据的存储区域</h3>
<ul>
<li>内存中的一个存储区域</li>
<li>该区域有自己的名称（变量名）、类型（数据类型）、值</li>
<li>Java中每个变量必须先声明，再赋值，然后才能使用</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
<li>Java 中的变量有四个基本属性：变量名，数据类型，存储单元和变量值</li>
</ul>
<h3 id="b-变量的声明数据类型-变量名-变量值">B. 变量的声明：数据类型   变量名   =    变量值</h3>
<h3 id="c-变量必须初始化才能使用初始化就是给一个初始值">C. 变量必须初始化才能使用，初始化就是给一个初始值</h3>
<h2 id="7-常量">7. 常量</h2>
<h3 id="a-理解在程序中固定不变的值是不能改变的数据">A. 理解：在程序中固定不变的值，是不能改变的数据。</h3>
<h3 id="b-字面常量值不会变化的量">B. 字面常量：（值不会变化的量）</h3>
<ul>
<li>整型常量（int）</li>
<li>浮点数常量（float double） ：2e3f      3.6d      0f      3.84d      5.022e+23f</li>
<li>布尔常量（boolean）：true  false</li>
<li>字符常量（char）：'a'     '1'      '&amp;'      '\r'      '\u0000'</li>
<li>字符串常量（String）：&quot;HelloWorld&quot;       &quot;123&quot;      &quot;We come \n XXX&quot;</li>
<li>null常量（null）：null</li>
</ul>
<h3 id="c-自定义常量">C. 自定义常量：</h3>
<h2 id="8-数据类型">8. 数据类型</h2>
<h3 id="a-基本数据类型">A. 基本数据类型</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>型别</th>
<th>字节</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>整型</td>
<td>1byte（8位）</td>
<td>-2<sup>7</sup> ~ 2<sup>7</sup>-1（-128~127，默认值0）1000 0000固定为-128</td>
</tr>
<tr>
<td>short</td>
<td>整型</td>
<td>2byte（16位）</td>
<td>-2<sup>15</sup> ~ 2<sup>15</sup>-1（-32768~32717，默认值0）1000 0000 0000 0000固定为-32768</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
<td>4byte（32位）</td>
<td>-2<sup>31</sup> ~ 2<sup>31</sup>-1（-2147483648~2147483647，默认值0）</td>
</tr>
<tr>
<td>long</td>
<td>整型</td>
<td>8byte（64位）</td>
<td>-2<sup>63</sup> ~ 2<sup>63</sup>-1（默认值0L）赋值时要以L结尾</td>
</tr>
<tr>
<td>float</td>
<td>浮点型</td>
<td>4byte（32位）</td>
<td>+3.402823e+38 ~ 1.401298e-45（默认值0）赋值时要以F结尾</td>
</tr>
<tr>
<td>double</td>
<td>浮点型</td>
<td>8byte（64位）</td>
<td>1.797693e+308~ 4.9000000e-324（默认值0）以D结尾，java中浮点型默认为Double，所以不用加D</td>
</tr>
<tr>
<td>char</td>
<td>文本型</td>
<td>2byte（16位）</td>
<td>0 ~ 2<sup>16</sup>-1（取值范围0~65535，默认值为空）</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔型</td>
<td>1byte（8位）</td>
<td>true/false</td>
</tr>
</tbody>
</table>
<h3 id="b-引用数据类型">B. 引用数据类型</h3>
<ul>
<li>字符串</li>
<li>数组</li>
<li>类</li>
<li>接口</li>
<li>Lambda</li>
</ul>
<h3 id="c-注意在数据做为参数传递的时候基本数据类型是值传递引用数据类型是引用传递地址传递">C. 注意：在数据做为参数传递的时候，基本数据类型是值传递，引用数据类型是引用传递（地址传递）</h3>
<h3 id="d-数据类型转换">D. 数据类型转换</h3>
<ul>
<li>
<p><em><strong>默认转换（小转大，小的数据类型的值，赋给大的数据类型的变量）</strong></em></p>
<p>从低精度向高精度转换</p>
<figure data-type="image" tabindex="1"><img src="http://pic.zyblog.xyz/img/typora/20201026163154.png" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://pic.zyblog.xyz/img/typora/20201031083512.png" alt="img" loading="lazy"></figure>
<blockquote>
<p>long-&gt;float的自动转型参考：https://blog.csdn.net/writing_happy/article/details/78880606</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>浮点数在内存中的存储形式参考：https://blog.csdn.net/u014470361/article/details/79820892</p>
</blockquote>
<pre><code class="language-java">public class DataTypeDemo{
    public static void main(String [] args){
        System.out.println(1024); //这是一个整数，整数有byte、short、int、long四种，java中默认为int
        System.out.println(3.14); //这是一个浮点数，浮点数有float、double两种，java中默认为double
        long num1 = 1024L;   //加了L，为long类型
        System.out.println(num1);
        
        long num2 = 1024;	//未加L，默认为int类型，依然可以正常输出，中间发生了自动转换，int到long
        System.out.println(num2);
        
        double num3 = 2.5F;	//加了F，为float类型，发生自动转换，float到double
        System.out.println(num3);
        
        double num4 = 2.5;	//未加F，默认为double类型
        System.out.println(num4);
        
        float num5 = 30L;	//加了L，为long类型，依然可以正常输出，中间发生了自动转换，long到float
        System.out.println(num5);
        
        byte num6 = 25;
        int num7 = num6;
        System.out.println(num7); //可以正常输出，发生了自动类型的转换，byte到int
        
        byte num8 = 35;
        short num9 = num8;
        System.out.println(num9); //可以正常输出，发生了自动类型转换，byte到short
        
        short num10 = 100;
        int num11 = num10;
        System.out.println(num11); //可以正常输出，发生了自动类型转换，short到int
    }
}
</code></pre>
<ul>
<li><em><strong>强制转换的格式：大数据类型 变量名称 = (大数据类型)(小数据类型)</strong></em></li>
<li>注意：强制转换的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。数据经过转型运算后，精度会丢失
<ul>
<li>char不能转换为short和byte</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public static void main(String[] args){
    int num = 127;
    byte by = 122;
    by = (byte)num;
}
</code></pre>
<ul>
<li>byte/short/char 默认都可以发生数学运算，在运算的时候会被提升为int类型计算</li>
</ul>
<pre><code class="language-java">public static void main(String [] args){
    char c = 'A'; 				// A的ASCII码为65
    System.out.println(c + 1); 	// 66
}
</code></pre>
<pre><code class="language-java">byte b1 = 20;
byte b2 = 22;
int b = b1 + b2;   	//byte被提升为int型并进行了数学运算，计算结果也是int

short s1 = 34;
short s2 = 32;
int s = s1 + s2;	//short被提升为int型并进行了数学运算，计算结果也是int
</code></pre>
<ul>
<li>布尔类型不能发生数据类型转换</li>
</ul>
<blockquote>
<p>在ASCII码表中，48表示字符0，65表示大写A，97表示小写a</p>
</blockquote>
<blockquote>
<p>JDK9新特性：“ 编译器常量优化 ”：当两个常量运算时，如果运算结果数值没有超过左侧变量类型的范围，则正常输出，右侧一旦出现变量，就无法参与这项优化</p>
</blockquote>
<h2 id="9-字符集和字符编码">9. 字符集和字符编码</h2>
<h3 id="a-为了实现计算机认识字母-符号-图形">A. 为了实现计算机认识字母、符号、图形</h3>
<h3 id="b-字符集就是字母数字指定的二进制编码">B. 字符集就是字母数字指定的二进制编码</h3>
<h3 id="c-字符集制成的表示字符编码表">C. 字符集制成的表示字符编码表</h3>
<ul>
<li>
<p>ASCII</p>
</li>
<li>
<p>GBK</p>
</li>
<li>
<p>GB2312</p>
</li>
<li>
<p>w3c出面制成统一码表：unicode码表</p>
<ul>
<li>
<p>按照进制制成新的码表</p>
</li>
<li>
<p>utf-8</p>
</li>
<li>
<p>utf-16</p>
</li>
<li>
<p>utf-32</p>
</li>
</ul>
</li>
</ul>
<h2 id="10-运算符">10. 运算符</h2>
<h3 id="a-算数运算符">A. 算数运算符</h3>
<ul>
<li>
<ul>
<li></li>
</ul>
</li>
<li>
<ul>
<li></li>
</ul>
</li>
<li>
<ul>
<li></li>
</ul>
</li>
<li>/</li>
<li>%</li>
<li>++
<ul>
<li>前++：先运算再赋值</li>
<li>后++：先赋值再运算</li>
</ul>
</li>
<li>--
<ul>
<li>前--：先运算再赋值</li>
<li>后--：先赋值再运算</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public static void main(String [] args){
    int num = 999;
    int num1 = 300;
    System.out.println(num+num1);
    System.out.println(num-num1);
    System.out.println(num*num1);
    System.out.println(num/num1);
    System.out.println(num%num1);
    System.out.println(num1%num);//小的数取模于大的数，得到的是本身（小的数）
    int num2 = 3;
    num2++;
    num2--;
}
</code></pre>
<h3 id="b-赋值运算符">B. 赋值运算符</h3>
<ul>
<li>=</li>
<li>+=</li>
<li>-=</li>
<li>*=</li>
<li>/=</li>
<li>%=</li>
</ul>
<blockquote>
<p>补充：b+=4不等于b=b+4，扩展的赋值运算符都隐含了强制类型转换 ，等价于b=(b的数据类型)b+4；</p>
</blockquote>
<blockquote>
<p>instanceof：判断是否是类的对象 &quot;String&quot; instanceof  String</p>
</blockquote>
<pre><code class="language-java">public static void main(String [] args){
    String name = &quot;zhiyuan&quot;;
    int sum = 666;
    sum = sum + 20;
    sum += 20; //上边的简写形式
}
</code></pre>
<h3 id="c-比较关系运算符">C. 比较（关系）运算符</h3>
<ul>
<li>
<p>&gt;</p>
</li>
<li>
<p>&lt;</p>
</li>
<li>
<p>&gt;=</p>
</li>
<li>
<p>&lt;=</p>
</li>
<li>
<p>!=</p>
</li>
<li>
<p>==</p>
<ul>
<li>基本数据类型，比较值是否相等</li>
<li>引用数据类型，比较地址值是否相等</li>
<li>和equals的区别</li>
</ul>
</li>
<li>
<p>运算结果为boolean值</p>
<pre><code class="language-java">public static void main(String [] args){
    System.out.println(100 &gt; 20);
    System.out.println(100 &lt; 200);
    System.out.println(100 &gt;= 200);
    System.out.println(100 &lt;= 200);
    System.out.println(100 != 200);
    System.out.println(100 == 200);
}
</code></pre>
</li>
</ul>
<h3 id="d-逻辑运算符左右两侧均为布尔表达式">D. 逻辑运算符（左右两侧均为布尔表达式）</h3>
<ul>
<li>
<p>&amp;：逻辑与</p>
</li>
<li>
<p>|：逻辑或</p>
</li>
<li>
<p>&amp;&amp;：左右两侧都成立，结果成立（全真为真，有假为假）（短路与）</p>
</li>
<li>
<p>||  ：左右两侧有一个成立，结果成立（有真为真，全假为假），前面成立，后面无需看结果（短路或）</p>
</li>
<li>
<p>！：取反</p>
</li>
</ul>
<pre><code class="language-java">public static void main(String [] args){
    System.out.println(100 &gt; 20 &amp;&amp; 200 &gt; 300);
    System.out.println(100 &lt; 200 &amp;&amp; 200 &lt; 100);
    
    System.out.println(100 &gt; 20 || 200 &gt; 300);
    System.out.println(100 &lt; 200 || 200 &lt; 100);
    
    System.out.println(!(100 &gt; 20));
}
</code></pre>
<h3 id="e-位运算符位运算是最快的">E. 位运算符（位运算是最快的）</h3>
<ul>
<li>
<p>&amp;：（二进制补码按位与）</p>
</li>
<li>
<p>|  ：（二进制补码按位或）</p>
</li>
<li>
<p>^：（二进制补码按位异或）一个数对另外一个数按位异或两遍，还是它本身</p>
</li>
<li>
<p>&lt;&lt;：（二进制按位左移）次方运算直接左移（次方-1）位</p>
<blockquote>
<p>12 &lt;&lt; 2      12*2^2 = 48</p>
</blockquote>
</li>
<li>
<p>&gt;&gt;：（二进制按位右移）</p>
<blockquote>
<p>12 &gt;&gt; 2      12/2^2 = 3</p>
</blockquote>
</li>
<li>
<p>~</p>
</li>
<li>
<p>&gt;&gt;&gt;：无符号右移规则和右移运算是一样的，只是填充时不管左边的数字是正是负都用0来填充，无符号右移运算只针对负数计算，因为对于正数来说这种运算没有意义</p>
</li>
</ul>
<pre><code class="language-java">public static void main(String [] args){
    System.out.println(8 &amp; 3);
    System.out.println(8 | 3);
    System.out.println(8 ^ 3);
    System.out.println(8 &lt;&lt; 3);
    System.out.println(8 &gt;&gt; 3);
}
</code></pre>
<h3 id="f-三元三目运算符">F. 三元（三目）运算符</h3>
<ul>
<li>表达式 ? 成立结果 : 不成立结果</li>
</ul>
<pre><code class="language-java">public static void main(String [] args){
    System.out.println(8 &gt; 3 ? true : false);   
}    
</code></pre>
<h3 id="g-instanceof运算符">G. instanceof运算符</h3>
<ul>
<li>java中，instanceof运算符的前一个操作符是一个引用变量，后一个操作数通常是一个类（可以是接口），用于判断前面的对象是否是后面的类，或者其子类、实现类的实例。如果是返回true，否则返回false。</li>
</ul>
<h2 id="11-转义字符">11. 转义字符</h2>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\b</td>
<td>退格符</td>
</tr>
<tr>
<td>\'</td>
<td>单引号字符</td>
</tr>
<tr>
<td>\''</td>
<td>双引号字符</td>
</tr>
<tr>
<td>\\</td>
<td>反斜杠字符</td>
</tr>
</tbody>
</table>
<h2 id="12-流程控制语句">12. 流程控制语句</h2>
<h3 id="a-顺序语句代码执行的时候是从上到下从左到右的">A. 顺序语句：代码执行的时候是从上到下，从左到右的</h3>
<h3 id="b-分支语句">B. 分支语句：</h3>
<ul>
<li>
<p>if语句</p>
<pre><code class="language-java">public class ControlDemo {
    public static void main(String[] args) {
        int num = 10;
        if(num &gt; 5){
            System.out.println(num + &quot; &gt; 5&quot;);
        }
    }
}
</code></pre>
</li>
<li>
<p>if-else语句</p>
<pre><code class="language-java">public class ControlDemo {
    public static void main(String[] args) {
        int num = 3;
        if(num &gt; 5){
            System.out.println(num + &quot; &gt; 5&quot;);
        }else{
            System.out.println(num + &quot; &lt; 5&quot;);
        }
    }
}
</code></pre>
</li>
<li>
<p>if-else-if-else语句</p>
</li>
</ul>
<pre><code class="language-java">// if else if else语句
public class ControlDemo {
    public static void main(String[] args) {
        int age = 20;
        double height = 120.0;
        if(age &gt; 10){
            System.out.println(age + &quot; &gt; 10&quot;);
        }else if(height &lt; 120){
            System.out.println(height + &quot; &lt; 120&quot;);
        }else{
            System.out.println(age + &quot; &lt; 10&quot; + height + &quot; &gt; 120&quot;);
        }
    }
}        
</code></pre>
<pre><code class="language-java">import java.util.Scanner;

public class ScannerDemo {
    public static void main(String[] args) {
        // 根据用户输入的成绩，判断是哪一个等级
        Scanner sc = new Scanner(System.in);//System.in系统的标准输入
        // String str = sc.next();
        //String str = sc.nextLine();
        int score = sc.nextInt();
        System.out.println(score);
        if (score &gt; 90) {
            System.out.println(&quot;优&quot;);
        }else if(score &gt; 80){
            System.out.println(&quot;甲&quot;);
        }else if(score &gt; 70){
            System.out.println(&quot;乙&quot;);
        }else if(score &gt; 60){
            System.out.println(&quot;丙&quot;);
        }else {
            System.out.println(&quot;丁&quot;);
        }
    }
}
</code></pre>
<ul>
<li>switch语句（break不可省略）</li>
</ul>
<pre><code class="language-java">import java.util.Scanner;

public class ControlDemo {
    public static void main(String[] args) {        
	//switch语句（int、char、byte、short、String【JDK1.7新增】）
        Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        switch(i){
            case 1:
                System.out.println(&quot;星期一&quot;);break;
            case 2:
                System.out.println(&quot;星期二&quot;);break;
            case 3:
                System.out.println(&quot;星期三&quot;);break;
            case 4:
                System.out.println(&quot;星期四&quot;);break;
            case 5:
                System.out.println(&quot;星期五&quot;);break;
            case 6:
                System.out.println(&quot;星期六&quot;);break;
            case 7:
                System.out.println(&quot;星期日&quot;);break;
            default:
                System.out.println(&quot;没有&quot;);break;
        }
    }
}
</code></pre>
<h3 id="c-循环语句">C. 循环语句：</h3>
<blockquote>
<p>注意：如果出现死循环，程序不能及时停止，会出现值栈溢出Stack Overflow（内存溢出）</p>
<p>所以在使用while循环的时候，我们要在适当的时侯终止循环，结合if else使用break终止循环，直接退出循环最外层，不再执行循环</p>
</blockquote>
<blockquote>
<p>break是直接终止循环</p>
<p>continue是终止本次循环，进行下次循环，直到循环执行结束</p>
</blockquote>
<ul>
<li><strong>while（布尔表达式）{循环体}</strong></li>
</ul>
<pre><code class="language-java">public class WhileDemo {
    public static void main(String[] args) {
        //while循环 控制循环条件的变量值，固定循环次数
        int flag = 10;
        while(flag &gt; 0){
            System.out.println(&quot;循环正常执行&quot;);
            flag --;
        }
    }
}    
</code></pre>
<ul>
<li><strong>do {循环体} while（布尔表达式）</strong></li>
</ul>
<pre><code class="language-java">public class DoWhileDemo {
    public static void main(String[] args) {
        public class DoWhileDemo {
    public static void main(String[] args) {
        //do while 循环 即使条件不成立，也会执行一次
        int num = 10;
        do{
            System.out.println(&quot;循环正常执行&quot; + num);
            num --;
        }while(num &gt; 0);
    }
}
</code></pre>
<ul>
<li><strong>for（初始化语句；循环条件；迭代体）{循环体}</strong></li>
</ul>
<pre><code class="language-java">public class ForDemo {
    public static void main(String[] args) {
        //for循环 循环次数是初始变量值和循环条件计算得出的
        //i++和++i在for循环中没有区别
        for (int i = 0;i &lt;= 10;i++){
            System.out.println(i);
        }
    }
} 
</code></pre>
<ul>
<li><strong>死循环</strong></li>
</ul>
<pre><code class="language-java">for(;;){}

while(true){}

do{}while(true);
</code></pre>
<blockquote>
<p>print 和 println的区别</p>
<p>print：直接输出      println：换行输出</p>
</blockquote>
<h3 id="d-循环嵌套">D. 循环嵌套：</h3>
<blockquote>
<p>我们可以使用循环去做很多事情</p>
<p>打印九九乘法表</p>
<pre><code class="language-java">public class CombineForDemo {
  public static void main(String[] args) {
    //九九乘法表
    //外层循环控制行
      for(int i = 1;i &lt;= 9;i++){
         //内层循环控制列
         for(int k = 1;k &lt;= i;k++){
           System.out.print(k+&quot;×&quot;+i+&quot;=&quot;+i*k+&quot;\t&quot;);
         }
         System.out.println(&quot;&quot;);
      }
  }
}
</code></pre>
<pre><code class="language-java">1×1=1	
1×2=2	2×2=4	
1×3=3	2×3=6	3×3=9	
1×4=4	2×4=8	3×4=12	4×4=16	
1×5=5	2×5=10	3×5=15	4×5=20	5×5=25	
1×6=6	2×6=12	3×6=18	4×6=24	5×6=30	6×6=36	
1×7=7	2×7=14	3×7=21	4×7=28	5×7=35	6×7=42	7×7=49	
1×8=8	2×8=16	3×8=24	4×8=32	5×8=40	6×8=48	7×8=56	8×8=64	
1×9=9	2×9=18	3×9=27	4×9=36	5×9=45	6×9=54	7×9=63	8×9=72	9×9=81
</code></pre>
<p>输出菱形</p>
<pre><code class="language-java">public class DiamondDemo {
  public static void main(String[] args) {
    //菱形
    for (int i = 1;i &lt;= 5;i++){
        for (int k = 5 - i;k &gt;= 0;k--){
             System.out.print(&quot; &quot;);
         }
        for (int j = 1;j &lt;= 2*i-1;j++){
              System.out.print(&quot;*&quot;);
          }
          System.out.println(&quot;&quot;);
      }
      for (int i = 4;i &gt;= 1;i--){
          for (int k = 1; k &lt;= 6-i;k++){
              System.out.print(&quot; &quot;);
          }
          for (int j = 1;j &lt;= 2*i-1;j++){
              System.out.print(&quot;*&quot;);
          }
          System.out.println(&quot;&quot;);
      }
  }
}
</code></pre>
<p>输出等腰三角形</p>
<pre><code class="language-java">public class IsoscelesTriangleDemo {
  public static void main(String[] args) {
    //等腰三角形
    int num = 6;
    for(int i = 0;i &lt;= num;i++){
       //打印空格占位
       //前半边占位的空格和行数的关系，是总的行数-1
        for(int k = num - i;k &gt;= 0;k--){
              System.out.print(&quot; &quot;);
          }
          //打印后半部分星号
          for(int j = 1;j &lt;= 2*i-1;j++){
              System.out.print(&quot;*&quot;);
          }
          //负责换行
          System.out.println(&quot;&quot;);
      }
  }
}
</code></pre>
<p>求1000以内的水仙花数</p>
<pre><code class="language-java">public class DaffodilsNumDemo {
  public static void main(String[] args) {
  //水仙花数
    for(int i = 100;i &lt; 1000;i++){
        int onesplace = i % 10; //个位
         int hundredsplace = i / 100; //百位
         int tenplace = i / 10 % 10; //十位
         int newvalue = onesplace*onesplace*onesplace + tenplace*tenplace*tenplace + hundredsplace*hundredsplace*hundredsplace;
         if(newvalue == i){
              System.out.println(&quot;水仙花数：&quot; + i);
          }
      }
  }
}
</code></pre>
<p>求1000以内的素数</p>
<pre><code class="language-java">public class PrimeNumberDemo {
  public static void main(String[] args) {
    for(int i = 2;i &lt; 1000;i++){
       for(int j = 2;j &lt; i;j++){
          if(i % j == 0){
               break;
           }else{
                System.out.println(i+&quot;为素数&quot;);
                  break;
              }
          }
      }
  }
}
</code></pre>
<p>求100以内的7的倍数</p>
<pre><code class="language-java">public class SevenTimesDemo {
  public static void main(String[] args) {
    for(int i = 0;i &lt; 100;i++){
      if(i % 7 == 0){
           System.out.println(i+&quot;是7的倍数&quot;);
         }
    }
  }
}
</code></pre>
<p>今有雉兔同笼，上有三十五头，下有九十四足，问雉兔各几何？</p>
<pre><code class="language-java">public class ChickenRabbitCageDemo {
  public static void main(String[] args) {
    int count = 35;
    int foot = 94;
    int chickencount;
    int rabbitcount;
    for(chickencount = 1;chickencount &lt;= 35;chickencount++){
       	rabbitcount = count - chickencount;
         if (chickencount*2+rabbitcount*4 == 94) {
           System.out.println(&quot;鸡有&quot;+chickencount+&quot;只&quot;);
           System.out.println(&quot;兔有&quot;+rabbitcount+&quot;只&quot;);
           break;
         }
      }
  }
}
</code></pre>
<p>有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问一年后的兔子总数为多少？（斐波那契数列）</p>
<p>1   1   2    3    5    8    13    21</p>
<pre><code class="language-java">int month = 12;
int first = 1;
int second = 1;
int count = 0;
for(int i = 3;i &lt;= month;i++){
	count = first + second;
	first = second;
	second = count;
	System.out.println(i+&quot;月份生的兔子的总数是：&quot;+count*2); //288
}
</code></pre>
<p>3	3	3	3	3</p>
<p>3	2	2	2	3</p>
<p>3	2	1	2	3</p>
<p>3	2	2	2	3</p>
<p>3	3	3	3	3</p>
<pre><code class="language-java">for(int i = 0;i &lt; 7;i++){
  if(i==0 &amp;&amp; i == 13){
   System.out.println(&quot;7&quot;);
  }
}
</code></pre>
</blockquote>
<h3 id="e-debug调试工具">E. Debug调试工具</h3>
<figure data-type="image" tabindex="3"><img src="http://pic.zyblog.xyz/img/typora/20201021161002.png" alt="image-20201021161002815" loading="lazy"></figure>
<h3 id="f-指定跳转的位置java的标签">F. 指定跳转的位置（java的标签）</h3>
<blockquote>
<p>结合循环的break使用，指定程序中断跳出到循环外的位置</p>
</blockquote>
<ul>
<li>break</li>
</ul>
<pre><code class="language-java">wc:for(int i = 0;i &lt; 4;i++){
    nc:for(int j = 0;j &lt; 5;j++){
        if(j == 3){
            //break;
            //break nc;
            break wc;
        }
        System.out.println(&quot;*&quot;);
    }
    System.out.println();
}

//输出结果
***
</code></pre>
<ul>
<li>continue</li>
</ul>
<pre><code class="language-java">wc:for(int i = 0;i &lt; 4;i++){
    nc:for(int j = 0;j &lt; 5;j++){
        if(j == 3){
            //continue;
            //continue nc;
            continue wc;
        }
        System.out.println(&quot;*&quot;);
    }
    System.out.println();
}

//输出结果
************
</code></pre>
<ul>
<li>return也可以结束循环，不过本质是结束方法</li>
</ul>
<h2 id="13-数组">13. 数组</h2>
<h3 id="a-数组只能保存一种类型的数据">A. 数组只能保存一种类型的数据</h3>
<h3 id="b-数组只要声明了那么数组的长度在程序运行过程中就是固定不可变化的即使移除数组的值">B. 数组只要声明了，那么数组的长度在程序运行过程中就是固定不可变化的，即使移除数组的值</h3>
<h3 id="c-数组的声明">C. 数组的声明</h3>
<ul>
<li>静态声明：在声明数组的时候，给数组将值添加进去，然后由系统计算数组的长度</li>
</ul>
<pre><code class="language-java">int [] arr = new int[]{0,1,2,3,4,5,6,7,8,9};
</code></pre>
<ul>
<li>动态声明：在声明数组的时候，固定数组的长度，然后由系统添加数组中的初始值</li>
</ul>
<pre><code class="language-java">int [] arr = new int[10];
</code></pre>
<ul>
<li>基本类型各自初始化值
<ul>
<li>int类型，默认初始值为0</li>
<li>long类型，默认初始值为0</li>
<li>short类型，默认初始值为0</li>
<li>byte类型，默认初始值为0</li>
<li>char类型，默认初始值为\u0000（unicode字符，不可见）</li>
<li>float类型，默认初始值为0.0</li>
<li>double类型，默认初始值0.0</li>
<li>boolean类型，默认值false</li>
<li>引用数据类型，默认初始值为null（空常量）</li>
</ul>
</li>
<li>数组是引用数据类型</li>
</ul>
<h3 id="d-一维数组">D. 一维数组</h3>
<blockquote>
<ul>
<li>数组的声明
<ul>
<li>静态声明：数据类型 []  变量名称   =    new   数据类型[] {值1，值2，值3}</li>
<li>动态声明：数据类型   []   变量名称   =   new   数据类型[数组的长度]；</li>
<li>数组声明的简写形式：数据类型   []   变量名称  =  {值1，值2，值3}</li>
</ul>
</li>
<li>length表示数组的长度</li>
</ul>
</blockquote>
<h3 id="e-数组的遍历">E. 数组的遍历</h3>
<pre><code class="language-java">public class ArrayListDemo {
    public static void main(String[] args) { 
        int [] arr = new int[]{10,12,13,14,15,16};
        System.out.println(arr[0]);
        for (int i = 0; i &lt; arr.length; i++) {
            System.out.println(&quot;arr[&quot; + i + &quot;]=&quot; + arr[i]);
        }
        //增强for循环（foreach）
        //for（数组中元素的数据类型 i代表的是下表位的元素的值 ：数组或者集合）
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
</code></pre>
<pre><code class="language-java">//运行结果
10
arr[0]=10
arr[1]=12
arr[2]=13
arr[3]=14
arr[4]=15
arr[5]=16
10
12
13
14
15
16
</code></pre>
<blockquote>
<p>练习：int  [] arr = new int [] {21,3,41,45,67,2,78,6};中的最大值与最小值</p>
<pre><code class="language-java">public static void main(String [] args){
   for (int i = 0; i &lt; arr.length ; i++) {
       for(int k = i+1; j &lt;= arr.length;j++) {
           if(arr[i] &gt; arr[j]){
               int temp = arr[i];
               arr[i] = arr[j];
               arr[j] = temp;
           }
       }
   }
   for(int k : arr){
       System.out.println(i);
   }
}
</code></pre>
<pre><code class="language-java">最大值为：78
最小值为：2
</code></pre>
<pre><code class="language-java">public class ArrayMaxMinDemo {
 public static void main(String[] args) {
     int [] arr = new int []{21,3,41,45,67,2,78,6};
     //从数组中拿任意一个数
     //进行数组中其他元素比较，按照比较的结果进行换位
     int num = arr[0];
     for (int i = 0; i &lt; arr.length; i++) {
         if(num &gt; arr[0]){
             num = arr[0];
         }
     }
     System.out.println(&quot;最小值为：&quot;+num);
 }
}
</code></pre>
</blockquote>
<h3 id="f-二维数组">F. 二维数组</h3>
<ul>
<li>一维数组的下标位依然是一个一维数组，这种数组就是二维数组</li>
<li>二维数组的声明
<ul>
<li>数据类型 [] [] 变量名称  =  new  int  [] []{};</li>
<li>数据类型 [] [] 变量名称  =  new  int  [3] [4];</li>
</ul>
</li>
</ul>
<blockquote>
<pre><code class="language-java">public class SecondArrayDemo {
 public static void main(String[] args) {
     int [][] arr = new int[][]{{2,3,4},{5,6,7},{8,9,10}};
     int [][] arr1 = new int[3][4];
     //获取值
//        System.out.println(arr[0][0]);
//        System.out.println(arr[0][1]);
//        System.out.println(arr[0][2]);
//
//        System.out.println(arr[1][0]);
//        System.out.println(arr[1][1]);
//        System.out.println(arr[1][2]);
//
//        System.out.println(arr[2][0]);
//        System.out.println(arr[2][1]);
//        System.out.println(arr[2][2]);

     arr1[0][0] = 11;
     arr1[0][1] = 12;
     arr1[0][2] = 13;
     arr1[0][3] = 14;

     arr1[1][0] = 24;
     arr1[1][1] = 23;
     arr1[1][2] = 22;
     arr1[1][3] = 21;

     arr1[2][0] = 51;
     arr1[2][1] = 52;
     arr1[2][2] = 53;
     arr1[2][3] = 54;

//        System.out.println(arr1[0][0]);
//        System.out.println(arr1[0][1]);
//        System.out.println(arr1[0][2]);
//        System.out.println(arr1[0][3]);
//
//        System.out.println(arr1[1][0]);
//        System.out.println(arr1[1][1]);
//        System.out.println(arr1[1][2]);
//        System.out.println(arr1[1][3]);
//
//        System.out.println(arr1[2][0]);
//        System.out.println(arr1[2][1]);
//        System.out.println(arr1[2][2]);
//        System.out.println(arr1[2][3]);


     for (int i = 0 ; i &lt; arr.length ; i++){
         for(int j = 0 ; j &lt; arr[i].length ; j++){
             System.out.println(&quot;arr[&quot;+i+&quot;][&quot;+j+&quot;]=&quot;+arr[i][j]);
         }
     }
 }
}
</code></pre>
</blockquote>
<h3 id="g-数组的排序">G. 数组的排序</h3>
<blockquote>
<ul>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
<li>快速排序</li>
<li>希尔排序</li>
<li>归并排序</li>
<li>折中排序</li>
<li>桶排序</li>
</ul>
<h2 id="选择排序">选择排序</h2>
<pre><code class="language-java">public class ArraySelectorSortDemo {
 public static void main(String[] args) {
     int [] arr = new int []{21,3,41,45,67,2,78,6};
     //选择排序
     for (int i = 0; i &lt; arr.length-1; i++) {
         for (int j = i+1; j &lt; arr.length; j++) {
             if(arr[i] &gt; arr[j]){
                 int temp = arr[i];
                 arr[i] = arr[j];
                 arr[j] = temp;
             }
         }
     }
     for (int i : arr) {
         System.out.println(i);
     }

 }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="http://pic.zyblog.xyz/img/typora/20201023103112.gif" alt="img" loading="lazy"></figure>
<h2 id="冒泡排序">冒泡排序</h2>
<pre><code class="language-java">public class ArrayBubbleSortDemo {
    public static void main(String[] args) {
        //冒泡排序：数组间两两之间进行比较，按照排序规则进行换位
        int [] arr = new int []{21,3,41,45,67,2,78,6};
        for (int i = 0; i &lt; arr.length; i++) {
            for (int j = 0; j &lt; arr.length - i - 1; j++) {
                if(arr[j] &gt; arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
        for (int i : arr) {
            System.out.println(i);
        }
    }
}

</code></pre>
<figure data-type="image" tabindex="5"><img src="http://pic.zyblog.xyz/img/typora/20201022113603.gif" alt="选择排序" loading="lazy"></figure>
<h2 id="插入排序">插入排序</h2>
<pre><code class="language-java">public static void main(String[] args) {
        int [] arr = new int [] {21,3,41,45,67,2,78,6};

        for(int i = 0;i &lt; arr.length-1;i++){
            //当前准备比较的值
            int temp  = arr[i+1];
             int num = i;
           //当前位置的值和前面所有的值比较进行换位
           while(num &gt;= 0 &amp;&amp; temp &lt; arr[num] ){
               arr[num + 1] = arr[num ];
                num --;
           }
           arr[num + 1] = temp;
        }
        for (int k : arr) {
            System.out.println(k);
        }
    }

</code></pre>
<pre><code class="language-java">public class ArrayInsertSortDemo {
    public static void main(String[] args) {
        int [] arr = new int []{21,3,41,45,67,2,78,6};
        int temp;
        int i;
        int j;
        for(i = 1;i &lt; arr.length;i++){
            for (j = i;j &gt; 0;j--){
                if(arr[j] &lt; arr[j-1]){
                    swap(arr,j,j-1);
                }
            }
        }
        for (int k : arr) {
            System.out.println(k);
        }
    }
    public static void swap(int [] arr,int i,int j){
        int temp = arr[j];
        arr[j] = arr[i];
        arr[i] = temp;
    }
}

</code></pre>
<figure data-type="image" tabindex="6"><img src="http://pic.zyblog.xyz/img/typora/20201023102920.webp" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="http://pic.zyblog.xyz/img/typora/20201023102943.gif" alt="img" loading="lazy"></figure>
<h2 id="快速排序">快速排序</h2>
<figure data-type="image" tabindex="8"><img src="http://pic.zyblog.xyz/img/typora/20201116130933.gif" alt="img" loading="lazy"></figure>
</blockquote>
<h3 id="h-元素的查找">H. 元素的查找</h3>
<ul>
<li>
<p>二分查找（折半查找）</p>
<ul>
<li>要求数组本身有序，不能对数组排序后使用二分查找，因为会改变元素本身位置</li>
</ul>
<pre><code class="language-java">public static int getIndex(int [] array,int value){
    int left = 0;
    int right = array.length - 1;
    while(left &lt;= right){
        int mid = (left + right) / 2;
        if (array[mid] &gt;= key) {
            right = mid - 1;
        }else {
            left = mid + 1;
        }
    }
    if(left &lt; arrat.length-1 &amp;&amp; array[left] == key){
        return left;
    }
    return -1;
}
</code></pre>
</li>
<li>
<p>基本查找（数组元素无序）</p>
</li>
</ul>
<h2 id="14-java的内存模型">14. java的内存模型</h2>
<blockquote>
<p>java内存模型(Java Memory Model，JMM)是java虚拟机规范定义的，用来屏蔽掉java程序在各种不同的硬件和操作系统对内存的访问的差异，这样就可以实现java程序在各种不同的平台上都能达到内存访问的一致性。可以避免像c++等直接使用物理硬件和操作系统的内存模型在不同操作系统和硬件平台下表现不同，比如有些c/c++程序可能在windows平台运行正常，而在linux平台却运行有问题。</p>
</blockquote>
<figure data-type="image" tabindex="9"><img src="http://pic.zyblog.xyz/img/typora/20201031151932.png" alt="img" loading="lazy"></figure>
<ul>
<li>JDK8之前的JVM内存布局</li>
</ul>
<figure data-type="image" tabindex="10"><img src="http://pic.zyblog.xyz/img/typora/20201031182849.png" alt="img" loading="lazy"></figure>
<ul>
<li>JDK8以后的JVM内存布局</li>
</ul>
<figure data-type="image" tabindex="11"><img src="http://pic.zyblog.xyz/img/typora/20201031182721.png" alt="图摘自《码出高效》" loading="lazy"></figure>
<blockquote>
<p>栈内存是先进后出</p>
<p>栈内存只能保存基本数据类型的变量和值</p>
<p>栈内存保存对象的变量，引用到堆内存中的地址值</p>
<p>只要使用了new关键字就会在堆内存中开辟空间，new使用一次开辟一次</p>
</blockquote>
<ul>
<li>本地方法区</li>
<li>栈内存：int  num  =  10；基本数据类型声明变量</li>
<li>堆内存：new  引用数据类型  栈内存对象的变量引用堆内存的十六进制地址值</li>
</ul>
<h2 id="15-方法">15. 方法</h2>
<h3 id="a-理解对一段代码的封装">A. 理解：对一段代码的封装</h3>
<blockquote>
<p>访问修饰符   修饰符   返回值类型   方法名（形参列表）{</p>
<p>​			方法体；</p>
<p>}</p>
<p>public  static  void  main（String [] args）{</p>
<p>​			System.out.println(&quot;Hello&quot;)；</p>
<p>}</p>
</blockquote>
<blockquote>
<p>方法的分类：</p>
<ul>
<li>返回值
<ul>
<li>有返回值：</li>
<li>无返回值：</li>
</ul>
</li>
<li>参数
<ul>
<li>有参数</li>
<li>无参数</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>访问权限修饰符：
<ul>
<li>作用：用来修饰成员变量和成员方法，从而实现对方法和变量的使用权限控制</li>
<li>分类：
<ul>
<li>public：公开的</li>
<li>private：私有的</li>
<li>protected：受保护的</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="16-变量作用域">16. 变量作用域</h2>
<blockquote>
<p>定义变量的位置不同</p>
<ul>
<li>全局变量：就是类中的所有方法都可以使用，当前类当前类不在使用的时候 由GC(垃圾回收器)回收
<ul>
<li>全部变量一般定义在类 开始，属性定义的位置</li>
</ul>
</li>
<li>局部变量：只能在当前的方法中使用 方法执行完毕 变量从内存中释放</li>
</ul>
</blockquote>
<h2 id="17-代码块">17. 代码块</h2>
<ul>
<li>在java中，用{}括起来的代码就被称为代码块
<ul>
<li>局部代码块</li>
<li>构造代码块</li>
<li>静态代码块</li>
<li>同步代码块</li>
</ul>
</li>
</ul>
<h3 id="1-局部代码块">1. 局部代码块</h3>
<ul>
<li>
<p>在方法中出现，限定变量的作用范围（生命周期），让变量尽早释放，提高内存使用率</p>
</li>
<li>
<pre><code class="language-java">public class CodeBlockDemo{
    public static void main(String [] args){
        //局部代码块
        {  
            int a = 5;
            System.out.println(a);
        }   
        //System.out.println(a);//无法使用a变量
    }    
}
</code></pre>
</li>
</ul>
<h3 id="2-构造代码块">2. 构造代码块</h3>
<ul>
<li>
<p>在类中方法外出现，多个构造方法中相同的代码存放到一起，每次调用构造方法都会执行，而且在构造方法执行时一同执行，即每次创建对象都执行</p>
</li>
<li>
<pre><code class="language-java">public class CodeBlockDemo{
    private int a;
    private String s;
    //构造代码块
    {
        System.out.println(&quot;构造代码块&quot;);
    }
    //构造方法
    public CodeBlockDemo(){
        System.out.println(&quot;无参构造方法&quot;);
    }
    public CodeBlockDemo(int a,String s){
        this.a = a;
        this.s = s;
    }
}
</code></pre>
</li>
</ul>
<h3 id="3-静态代码块">3. 静态代码块</h3>
<ul>
<li>
<p>在类中方法外出现，被static修饰，用来给类进行初始化，在类被加载时执行，只执行一次</p>
</li>
<li>
<pre><code class="language-java">public class CodeBlockDemo{
    private int a;
    private String s;
    //静态代码块
    static{
        System.out.println(&quot;静态代码块&quot;);
    }
    //构造方法
    public CodeBlockDemo(){
        System.out.println(&quot;无参构造方法&quot;);
    }
    public CodeBlockDemo(int a,String s){
        this.a = a;
        this.s = s;
    }
}
</code></pre>
</li>
</ul>
<h3 id="4-同步代码块">4. 同步代码块</h3>
<ul>
<li>Synchronize{}：解决线程安全问题</li>
</ul>
<h3 id="5-静态代码块-构造代码块构造方法的执行顺序和次数">5. 静态代码块、构造代码块，构造方法的执行顺序和次数</h3>
<ul>
<li>静态代码块 ：在类被加载进内存时执行，只执行一次</li>
<li>构造代码块：在构造方法被调用之前执行，每次调用都会被执行</li>
<li>构造方法：对象被创建时执行，每次调用都会被执行</li>
</ul>
<h2 id="18-方法的重载">18. 方法的重载</h2>
<blockquote>
<p>方法的重载</p>
<ul>
<li>参数的数据类型不同</li>
<li>参数的顺序不同</li>
<li>参数的个数不同</li>
<li>与方法的返回值无关</li>
</ul>
<p>@OverLoad，早期方法重载声明，在jdk1.7以后更新不需要写了</p>
</blockquote>
<pre><code class="language-java">public static int sum(int i , int j){
    return i+j;
}
public static int sum(String i,int j){
    return i+j;
}
@OverLoad
public static int sum(String i ,int j,int k){
    return i+j+k;
}
public static int sum(int j,int k,String i ){
    return i+j+k;
}

</code></pre>
<pre><code class="language-java">public static void main (String [] args){
    int c = num(1,1);
    System.out.println(c);
}
public static int num (int a,int b ){
    int c = a+b;
    return c;
}
</code></pre>
<h2 id="19-面向对象">19. 面向对象</h2>
<blockquote>
<p>面向对象是基于面向过程的</p>
</blockquote>
<h3 id="1-封装encapsulation">1. 封装（<strong>Encapsulation</strong>）</h3>
<ul>
<li>
<p>概述：封装(encapsulation)又叫隐藏实现(Hiding the implementation)，就是只公开代码单元的对外接口，而隐藏其具体实现。</p>
</li>
<li>
<p>详述：</p>
<ul>
<li>将类的某些信息隐藏在类的内部，不允许外部程序进行直接的访问调用。</li>
<li>通过该类提供的方法来实现对隐藏信息的操作和访问。</li>
<li>隐藏对象的信息。</li>
<li>留出访问的对外接口。</li>
</ul>
</li>
<li>
<p>特点：</p>
<ul>
<li>提高了代码的安全性、复用性。</li>
<li>对成员变量实行更准确的控制。</li>
<li>封装可以隐藏内部程序实现的细节。</li>
<li>良好的封装能够减少代码之间的耦合度。</li>
<li>外部成员无法修改已封装好的程序代码。</li>
<li>方便数据检查，有利于保护对象信息的完整性，同时也提高程序的安全性。</li>
<li>便于修改，提高代码的可维护性。</li>
</ul>
</li>
<li>
<p>封装原则：</p>
<ul>
<li>把不需要对外提供的内容隐藏起来，提供对应的公共访问方式</li>
</ul>
</li>
<li>
<p>封装性在Java中的体现</p>
<ul>
<li>方法就是一种封装</li>
<li>关键字private也是一种封装</li>
</ul>
</li>
</ul>
<h3 id="2-继承inheritance">2. 继承（<strong>Inheritance</strong>）</h3>
<ul>
<li>概述：继承，Inheritance，是一种看起来很神奇的代码重用方式。 继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。当然，如果在父类中拥有私有属性(private修饰)，则子类是不能被继承的。</li>
<li>特点：
<ul>
<li>提高代码复用性。</li>
<li>提高了代码的维护性</li>
<li>类与类之间产生联系（多态构成的前提）</li>
<li>类的耦合度增加了</li>
<li>父类的属性方法可以用于子类。</li>
<li>可以轻松的定义子类。</li>
<li>使设计应用程序变得简单</li>
</ul>
</li>
<li>Java只能单继承，不能多继承，一个类只能有一个父类，不能有多个父类，但是可以多层继承</li>
<li>注意事项：
<ul>
<li>不要为了部分功能而用继承</li>
<li>子类只能继承父类所有非私有的成员（成员变量和成员方法）</li>
<li>子类不能继承父类的构造方法，但是可以通过super关键字访问父类构造方法</li>
</ul>
</li>
<li>什么时候用使用继承：
<ul>
<li>继承体现的是一种关系：A is B（例如：<img src="https://pic.zyblog.xyz/img/typora/20201103102915.png" alt="img" loading="lazy">是水果，<img src="https://pic.zyblog.xyz/img/typora/20201103102944.png" alt="img" loading="lazy">是水果）</li>
</ul>
</li>
</ul>
<h3 id="3-多态polymorphism">3. 多态（<strong>Polymorphism</strong>）</h3>
<ul>
<li>父类引用指向子类对象</li>
</ul>
<blockquote>
<h3 id="开发原则低耦合高内聚">开发原则：低耦合，高内聚</h3>
</blockquote>
<h2 id="20-类">20. 类</h2>
<blockquote>
<p>一类相同事物的抽象</p>
</blockquote>
<ul>
<li>
<p>类的组成</p>
<ul>
<li>成员变量：事物的属性（在类中方法外定义）</li>
<li>成员方法：事物的功能</li>
<li>构造方法：初始化对象（无参，有参，可被重载）</li>
</ul>
</li>
<li>
<p>类的定义</p>
<ul>
<li>
<pre><code class="language-java">class Student{
    public int sid;
    public String sname;
    public Student(){}
    public Student(int id,String name){
        this.sid = id;
        this.name = sname;
    }
    public void study(){
        System.out.println(&quot;学习&quot;);
    }
    public void eat(){
        System.out.println(&quot;吃饭&quot;);
    }        
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="21-对象">21. 对象</h2>
<blockquote>
<p>某个事物的抽象</p>
</blockquote>
<ul>
<li>
<p>创建对象的格式：</p>
<pre><code class="language-java">类名   对象名   =   new   类名/构造方法(参数列表);
Student stu = new Studnet();
</code></pre>
</li>
<li>
<p>为成员变量赋值</p>
<pre><code class="language-java">stu.sid = 174350;
stu.sname = &quot;zhiyuan&quot;;
</code></pre>
</li>
</ul>
<blockquote>
<p>注：堆内存中的变量（引用类型）会被初始化，栈内存中的变量（基本类型）未初始化不可使用</p>
</blockquote>
<h2 id="22-成员变量和局部变量的区别">22. 成员变量和局部变量的区别</h2>
<ul>
<li>在类中的位置不同
<ul>
<li>成员变量：类中方法外</li>
<li>局部变量：方法声明上或方法内</li>
</ul>
</li>
<li>在内存中的位置不同
<ul>
<li>成员变量：在堆中</li>
<li>局部变量：在栈中</li>
</ul>
</li>
<li>生命周期不同
<ul>
<li>成员变量：随着对象的的存在而存在，随着对象的消失而消失</li>
<li>局部变量：随着方法的调用而存在，随着方法的调用完成而消失</li>
</ul>
</li>
<li>初始化不同
<ul>
<li>成员变量：有默认值</li>
<li>局部变量：无默认值</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意事项：局部变量的名字可以和成员变量的名字一样，在方法中用的时候，采用的是就近原则</p>
<pre><code class="language-java">class Demo{
 public int num = 5;
 public static void show(){
     int num = 5;
     System.out.println(num);
 }
 public static void main(String [] args){
     System.out.println(num);
     show();
 }
}
</code></pre>
</blockquote>
<h2 id="23-参数问题">23. 参数问题</h2>
<ul>
<li>基本类型：形参的改变不影响实参</li>
<li>引用类型：形参的改变直接影响实参</li>
</ul>
<h2 id="24-匿名对象">24. 匿名对象</h2>
<ul>
<li>定义：没有名字的对象，是对象的一种简化表示方法</li>
<li>应用：
<ul>
<li>匿名调用方法（如果需要调用多次方法，不建议使用匿名对象调用，因为每调用一次都创建一个新对象）</li>
<li>作为实际参数传递</li>
</ul>
</li>
<li>好处：匿名对象使用完成之后就是垃圾了，可以被回收。</li>
</ul>
<pre><code class="language-java">new Student();
//匿名调用方法
new Student().study();
//匿名对象做参数
new StudentDemo().studyDemo(new Student());
</code></pre>
<h2 id="25-equals与">25. equals（）与   ==</h2>
<ul>
<li>
<p>==</p>
<ul>
<li>基本类型：比较的是值是否相同</li>
<li>引用类型：比较的是地址值是否相同</li>
</ul>
</li>
<li>
<p>equals</p>
<ul>
<li>引用类型：Object默认比较的是地址值，子类重写后默认比较的是内容是否相同</li>
</ul>
</li>
</ul>
<h2 id="26-this关键字">26. this关键字</h2>
<pre><code class="language-java">class Person{
  private String name;
	public void setName(String name){
    	name = name;
	}
}
</code></pre>
<ul>
<li>分析：
<ul>
<li>这里实际上是把局部变量的值又赋给了局部变量</li>
<li>应该是把这个值赋值给成员变量</li>
<li>成员变量是随着对象的创建而存在</li>
<li>之前 “对象名.成员变量名” 可以访问成员变量</li>
<li>那么我们就需要找到一个可以表示 “当前对象” 的东西</li>
<li>而java提供了一个关键字 “this” 就可以表示 “当前对象”</li>
</ul>
</li>
</ul>
<blockquote>
<h3 id="this-当前对象所在类的对象的引用">this   -&gt;   当前对象(所在类的对象的“引用”)</h3>
</blockquote>
<ul>
<li>当前方法被谁调用，this就表示谁</li>
<li>修改上述例子</li>
</ul>
<pre><code class="language-java">class Person{
    private String name;
	public void setName(String name){
    	this.name = name;
	}
}
</code></pre>
<h2 id="27-构造方法">27. 构造方法</h2>
<ul>
<li>作用：初始化对象</li>
</ul>
<pre><code class="language-java">public class Student{
    private int sid;
    private String sname;
    //无参构造方法
    public Student(){
        
    }
    //有参构造方法
    public Student(int sid,String sname){
        this.sid = sid;
        this.sname = sname;
    }
    //构造方法可以被重载
    public Student(int sid){
        this.sid = sid;
    }
    public Student(String sname){
        this.sname = sname;
    }
    //Setter方法
    public void setId(int sid){
        this.sid = sid;
    }
    public void setName(String sname){
        this.sname = sname;
    }
    //Getter方法
    public int getId(){
        return sid;
    }
    public String getName(){
        return sname;
    }
    //重写toString方法
    @Override
    public String toString() {
        return &quot;Student{&quot; +
                &quot;sid=&quot; + sid +
                &quot;, sname='&quot; + sname + '\'' +
                '}';
    }
    
}

public class StudentTest{
    public static void main(String [] args){
        //创建对象
        Student stu1 = new Student();
        System.out.println(stu1);

        Student stu2 = new Student(18,&quot;zhiyuan&quot;);
        System.out.println(stu2);

        Student stu3 = new Student(18);
        System.out.println(stu3);

        Student stu4 = new Student(&quot;zhiyuan&quot;);
        System.out.println(stu4); 
    }
}

/*
输出结果
Student{sid=0, sname='null'}
Student{sid=18, sname='zhiyuan'}
Student{sid=18, sname='null'}
Student{sid=0, sname='zhiyuan'}
*/
</code></pre>
<ul>
<li>说明：
<ul>
<li>如果用户自己没写，系统会自动生成一个无参构造方法</li>
<li>如果用户写了构造方法，无论有参无参，系统都不会再自动生成无参构造方法</li>
<li>构造方法可以重载</li>
</ul>
</li>
</ul>
<h2 id="28-类的初始化过程">28. 类的初始化过程</h2>
<pre><code class="language-java">Student s = new Student();在内存中都干了哪些事？
//加载Student.class文件进内存
//在栈内存中给变量s分配内存空间
//在堆内存中给学生对象开辟空间
//对学生的成员变量进行隐式初始化(默认初始化)
//对学生的成员变量进行显式初始化(类内赋值初始化)    
//对学生的成员变量进行构造初始化(构造方法初始化) 
</code></pre>
<h2 id="29-static关键字">29. static关键字</h2>
<ul>
<li>
<p>可以修饰成员变量和成员方法</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>被类内所有对象共享（也是我们判断要不要用static的标准）</li>
<li>随着类的加载而加载</li>
<li>优先于对象存在</li>
<li>可以通过类名调用（本身可以通过对象调用，建议用类名调用，否则失去了用static修饰的意义 ）</li>
</ul>
</li>
<li>
<p>静态方法只能访问静态的成员变量和静态成员方法（静态方法中不能用this）</p>
<ul>
<li>静态的成员变量和成员方法是对着类加载而加载的，this是随着对象的创建而存在的</li>
</ul>
<pre><code class="language-java">public class Demo{
    private int num;
    private static int num2 = 4;
    public void show(){
        System.out.println(num);
        System.out.println(num2);//无法通过非静态的成员方法访问静态的成员变量
        show2();
        show3();
    }
    public static void show1(){
        System.out.println(num);//报错，无法通过静态的成员方法访问非静态的成员变量
        System.out.println(num2);
        show2();  //静态的成员方法无法访问非静态的成员方法
        show3();
    }
    public void show2(){
        
    }
    public static void show3(){
        
    }
}
</code></pre>
</li>
<li>
<p>非静态方法既可以访问静态的成员变量和成员方法，又可以访问非静态的成员变量和成员方法</p>
</li>
</ul>
<pre><code class="language-java">public static void main(String [] args){
    for(int i = 0;i &lt; args.length;i++){
        System.out.println(args[i]);
    }
}
//String [] ars用于接收来自控制台交互的参数
</code></pre>
<ul>
<li>静态的成员变量和成员变量
<ul>
<li>所属不同
<ul>
<li>成员变量：属于对象</li>
<li>静态成员变量：属于类</li>
</ul>
</li>
<li>内存区域不同
<ul>
<li>成员变量：堆内存</li>
<li>静态变量：方法区中的静态区</li>
</ul>
</li>
<li>出现时间不同
<ul>
<li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li>
<li>静态变量：随着类的加载而加载，随着类的消失而消失</li>
</ul>
</li>
<li>调用方式不同
<ul>
<li>成员变量：只能被对象调用</li>
<li>静态变量：可以使用类名调用，也可以使用对象名调用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="30-main方法">30. main方法</h2>
<pre><code class="language-java">public static void main(String [] args){
    //public：权限修饰符，公共的
    //static：被jvm调用，不需要创建对象
    //void：返回值为空类型，即无返回值
    //main：程序的主入口名，固定默认为main
    //String [] args：早期用于接收键盘录入数据，1.5版本后使用Scanner
}
</code></pre>
<pre><code class="language-java">//控制台编译运行时传入参数
javac Demo.java
java Demo hello world java  

//尝试输出参数    
public static void main(String [] args){
    for(String s : args){
        System.out.println(s);
    }
}
</code></pre>
<h2 id="31-文档注释">31.  文档注释</h2>
<ul>
<li>可以使用javadoc命令生成网页形式的说明书</li>
<li>制作帮助文档（了解）</li>
</ul>
<pre><code class="language-java">package com.demo.javase;
/**
 * @Author 絷缘
 * @Date 2020/11/2 10:02
 * @Version 1.0
 **/
public class ArrayTools {
    /**
     * 打印数组
     * @param arr 传入指定数组
     */
    public static void printArray(int [] arr){
        for (int a:arr) {
            System.out.println(a);
        }
    }

    /**
     * 获得数组中的最大值
     * @param arr 传入指定数组
     * @return int 返回数组中的最大值
     */
    public static int getMax(int [] arr){
        int max = arr[0];
        for(int i = 0;i &lt; arr.length;i++){
            if(arr[i] &gt; max){
                max = arr[i];
            }
        }
        return max;
    }

    /**
     * 获取数组中的最小值
     * @param arr 传入指定数组
     * @return int 返回数组中的最小值
     */
    public static int getMin(int [] arr){
        int min = arr[0];
        for(int i = 0;i &lt; arr.length;i++){
            if(arr[i] &lt; min){
                min = arr[i];
            }
        }
        return min;
    }

    /**
     * 反转数组方法A
     * 逆序数组
     * @param arr 传入指定数组
     */
    public static void reverseA(int [] arr){
        for(int i = 0,j = arr.length - 1;i &lt; j;i++,j--){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    /**
     * 反转数组方法B
     * 逆序数组
     * @param arr 传入指定数组
     */
    public static void reverseB(int [] arr){
        for(int i = 0;i &lt; arr.length/2;i++){
            int temp = arr[i];
            arr[i] = arr[arr.length - 1 - i];
            arr[arr.length - 1] = arr[i];
        }
    }

    /**
     * 获取指定值第一次出现的索引值
     * @param arr  传入的指定数组
     * @param value 传入的指定值
     * @return int 返回的是第一次出现的索引值，如果不存在返回-1
     */
    public static int getIndex(int [] arr,int value){
        int index = -1;
        for(int i = 0;i &lt; arr.length;i++){
            if(arr[i] == value){
                index = i;
                break;
            }
        }
        return index;
    }

    /**
     * 获取指定索引处的值
     * @param arr 传入指定数组
     * @param index 传入指定索引
     */
    public static void getValue(int [] arr,int index){
        if(index &gt; arr.length -1 || index &lt; 0){
            for(int i = 0;i &lt; arr.length;i++){
                if(index == i){
                    System.out.println(arr[i]);
                    break;
                }
            }
        }else{
            System.out.println(&quot;index错误&quot;);
        }
    }
}
</code></pre>
<ul>
<li>
<p>使用javadoc命令解析</p>
<ul>
<li>
<p>格式：</p>
<pre><code class="language-java">javadoc -d . -author -version ArrayTools.java 
</code></pre>
</li>
<li>
<p>报错：找不到可以文档化的公共或受保护的类</p>
<ul>
<li>原因：权限不够</li>
<li>解决方法：给类加上public</li>
</ul>
</li>
</ul>
</li>
<li>
<p>看文档</p>
<ul>
<li>看类的结构
<ul>
<li>看包名</li>
<li>看类的说明</li>
<li>看类的结构
<ul>
<li>成员变量：字段摘要</li>
<li>构造方法：构造方法摘要</li>
<li>成员方法：方法摘要
<ul>
<li>左边：返回值，是否为静态</li>
<li>右边：方法名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>外部调用（参考JavaDoc和字节码文件使用功能）</p>
<ul>
<li>构造方法私有化</li>
</ul>
</li>
</ul>
<h2 id="32-继承extends">32. 继承（extends）</h2>
<ul>
<li>Person类</li>
</ul>
<pre><code class="language-java">package com.demo.javase;

/**
 * @author 絷缘
 * @version 1.0
 * @date 2020/11/3 9:16
 **/
public class Person {
    protected String name;
    protected int age;
    protected String gender;

    /**
     * 有参构造方法
     * @param name 提供人的姓名
     * @param age  提供人的年龄
     * @param gender 提供人的性别
     */
    public Person(String name, int age, String gender) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    /**
     * 获取人的名字
     * @return String 返回人的姓名
     */
    public String getName() {
        return name;
    }

    /**
     * 获取人的年龄
     * @return int 返回人的年龄
     */
    public int getAge() {
        return age;
    }

    /**
     * 获取人的性别
     * @return String 返回人的性别
     */
    public String getGender() {
        return gender;
    }

    /**
     * 设置人的姓名
     * @param name 提供姓名参数
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 设置人的年龄
     * @param age 提供年龄参数
     */
    public void setAge(int age) {
        this.age = age;
    }

    /**
     * 设置人的性别
     * @param gender 提供性别参数
     */
    public void setGender(String gender) {
        this.gender = gender;
    }

    public void eat(){
        System.out.println(&quot;吃饭&quot;);
    }
    public void sleep(){
        System.out.println(&quot;睡觉&quot;);
    }
    public void work(){
        System.out.println(&quot;工作&quot;);
    }
    public void study(){
        System.out.println(&quot;学习&quot;);
    }
    public void play(){
        System.out.println(&quot;玩耍&quot;);
    }
    @Override
    public String toString() {
        return &quot;Person{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                &quot;, gender='&quot; + gender + '\'' +
                '}';
    }
}
</code></pre>
<ul>
<li>Student类</li>
</ul>
<pre><code class="language-java">package com.demo.javase;

/**
 * @author 絷缘
 * @version 1.0
 * @date 2020/11/3 9:26
 **/
public class Student extends Person{
    private int sid;
    public Student(int sid,String name,int age,String gender){
        super(name,age,gender);
        this.sid = sid;
    }

    /**
     * 获取学生ID
     * @return int 返回学生的ID
     */
    public int getSid() {
        return sid;
    }

    /**
     * 设置学生的ID
     * @param sid 提供学生ID参数
     */
    public void setSid(int sid) {
        this.sid = sid;
    }

    @Override
    public String toString() {
        return &quot;Student{&quot; +
                &quot;sid=&quot; + sid +
                &quot;, name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                &quot;, gender='&quot; + gender + '\'' +
                '}';
    }
}
</code></pre>
<ul>
<li>测试类</li>
</ul>
<pre><code class="language-java">package com.demo.javase;

/**
 * @author 絷缘
 * @version 1.0
 * @date 2020/11/3 9:28
 **/
public class Test {
    public static void main(String[] args) {
        System.out.println(&quot;==========================================================&quot;);
        Student stu1 = new Student(174350,&quot;zhiyuan&quot;,18,&quot;male&quot;);
        System.out.println(stu1);
        System.out.println(&quot;==========================================================&quot;);
        System.out.println(&quot;sid=&quot;+stu1.getSid());
        System.out.println(&quot;name=&quot;+stu1.getName());
        System.out.println(&quot;age=&quot;+stu1.getAge());
        System.out.println(&quot;gender=&quot;+stu1.getGender());
        System.out.println(&quot;==========================================================&quot;);
        stu1.eat();
        stu1.sleep();
        stu1.study();
        stu1.play();
        System.out.println(&quot;==========================================================&quot;);
    }
}
</code></pre>
<ul>
<li>继承中的成员变量关系
<ul>
<li>类的组成
<ul>
<li>成员变量</li>
<li>构造方法</li>
<li>成员方法</li>
</ul>
</li>
<li>子类的成员变量名字和父类的成员变量名一样的话
<ul>
<li>在子类的方法中找，有就用</li>
<li>在子类的成员位置找，有就用</li>
<li>在父类的成员位置找，有就用</li>
<li>如果找不到，就去父类的父类成员位置找，有就用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="33-super关键字">33. super关键字</h2>
<ul>
<li>
<p>super的用法和this很像</p>
<ul>
<li>this表示本类对象的调用</li>
<li>super表示的是父类对象的调用</li>
</ul>
</li>
<li>
<p>用法：</p>
<ul>
<li>访问成员变量</li>
</ul>
<pre><code class="language-java">this.成员变量
super.成员变量    
</code></pre>
<ul>
<li>访问构造方法</li>
</ul>
<pre><code class="language-java">this()
super()    
</code></pre>
<ul>
<li>访问成员方法</li>
</ul>
<pre><code class="language-java">this.成员方法()
super.成员方法()    
</code></pre>
</li>
<li>
<p>super和this的区别</p>
<ul>
<li>this表示本类对象的调用</li>
<li>super表示的是父类对象的调用</li>
</ul>
</li>
<li>
<p>注意：super调用构造方法或this调用构造方法时，必须是第一条语句</p>
</li>
</ul>
<h2 id="34-继承中构造方法的关系">34. 继承中构造方法的关系</h2>
<ul>
<li>
<p>子类中所有构造方法默认都会访问父类中的无参构造方法</p>
<ul>
<li>
<p>因为子类继承父类，会继承父类中的数据，还要使用这些数据，父类中的数据随着父类对象的存在才会存在，所以，子类初始化之前，一定会先初始化父类。</p>
</li>
<li>
<pre><code class="language-java">public class 子类 extends 父类{
	public	子类构造(){
        //super父类构造();不写，默认会调用父类构造方法初始化对象
    }
    public 子类构造(参数列表){
        super(参数列表);
        this.子类成员变量 = 参数;
    }
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="35-继承中成员方法的关系">35. 继承中成员方法的关系</h2>
<ul>
<li>子类中的成员方法与父类中的成员方法同名
<ul>
<li>使用子类对象调用方法，先看子类有没有，有就用，没有就看父类有没有，有就用，没有就报错</li>
</ul>
</li>
</ul>
<h2 id="36-方法的重写">36. 方法的重写</h2>
<ul>
<li>在子父类中，子类出现了和父类中一模一样的方法声明，这种现象叫做方法重写（复写）</li>
<li>方法重写应用
<ul>
<li>当子类需要父类的功能，而功能的主体子类又有自己特有的内容时，可以重写父类继承过来的方法</li>
<li>这样既继承了父类的功能，又定义了子类的特有功能内容</li>
</ul>
</li>
<li>注意事项：
<ul>
<li>父类中私有的方法不能被重写（因为父类中的私有方法无法被继承，更不要说重写了）</li>
<li>子类重写父类的方法，访问权限不能更低</li>
<li>父类的静态方法，子类也必须使用静态方法重写（本质不算方法重写，现象确实如此，涉及多态）</li>
<li>子类重写方法时，声明要一模一样</li>
</ul>
</li>
</ul>
<h2 id="37-方法重载和方法重写的区别">37. 方法重载和方法重写的区别</h2>
<ul>
<li>方法重载：同一个类中，出现多个方法名相同，参数列表不同的方法，这种现象称为方法重载</li>
<li>方法重写：在子类中，出现和父类中成员方法声明相同，功能主体不同的方法，这种现象称为方法重写</li>
</ul>
<h2 id="38-访问权限修饰符">38. 访问权限修饰符</h2>
<table>
<thead>
<tr>
<th>访问权限修饰符</th>
<th>描述</th>
<th>本类</th>
<th>同一个包的无关类</th>
<th>其他包的无关类</th>
<th>同一个包的子孙类</th>
<th>其他包的子孙类</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>访问权限公开</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>protected</td>
<td>访问权限受保护</td>
<td>✔️</td>
<td>✔️</td>
<td>❌</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>private</td>
<td>访问权限私有</td>
<td>✔️</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>默认的缺省的</td>
<td>friendly(同一个包内友好)</td>
<td>✔️</td>
<td>✔️</td>
<td>❌</td>
<td>✔️</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h3 id="1-public">1. public</h3>
<blockquote>
<p>public 公开的，是访问权限限制最宽的修饰符。被public修饰的类、属性、及方法不仅可以跨类访问，而且可以跨包访问</p>
</blockquote>
<h3 id="2-protected">2. protected</h3>
<blockquote>
<p>protected 受保护的， 是介于public和private之间的一种访问修饰。被protected修饰的属性及方法只能被类本身的方法和子类访问。（子类在不同的包中也可以访问）</p>
</blockquote>
<h3 id="3-private">3. private</h3>
<blockquote>
<p>private 私有的，对访问权限限制最窄的修饰符。被private修饰的属性以及方法只能被该类的对象访问。它的子类也不可以访问，更不支持跨包访问</p>
</blockquote>
<h3 id="4-friendly">4. friendly</h3>
<blockquote>
<p>friendly 友好的，默认不加任何访问修饰符，只支持在同一个包中进行访问，对同一个包内的类友好</p>
</blockquote>
<h2 id="39-其他修饰符">39. 其他修饰符</h2>
<h3 id="1-static">1. static</h3>
<ul>
<li>修饰变量：静态变量
<ul>
<li>独立于对象的变量，又称类变量，在类被加载进内存时加载，类无论被实例化几次，静态变量只有一份拷贝</li>
</ul>
</li>
<li>修饰方法：静态方法
<ul>
<li>独立于对象的方法，又称类方法，在类被加载进内存时加载
<ul>
<li>静态方法只能访问静态成员（变量、方法）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-final">2. final</h3>
<blockquote>
<p>我们只希望子类能够继承父类的方法，不希望他改动，java就提供了final关键字</p>
</blockquote>
<ul>
<li>
<p>修饰变量：变量一旦赋值后，不能被重新赋值。</p>
<ul>
<li>
<p>被 final 修饰的实例变量必须指定初始值（显式初始化，构造初始化，构造代码块）。</p>
</li>
<li>
<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>
</li>
</ul>
</li>
</ul>
<pre><code class="language-java">static final double PI = 3.14;
</code></pre>
<ul>
<li>修饰方法：父类方法可以被子类继承，但不可被重写</li>
</ul>
<pre><code class="language-java">public class Person{
    private String name;
    public final void changeName(String name){
        this.name = name;
    }
}
</code></pre>
<ul>
<li>修饰类：表示最终类，该类不可被继承（但最终类可以继承别的类）</li>
</ul>
<pre><code class="language-java">public final class Person{
    
}
</code></pre>
<ul>
<li>final修饰局部变量
<ul>
<li>基本类型：值不能发生改变</li>
<li>引用类型：地址值不能发生改变，但是该对象在堆内存中的值是可以改变的</li>
<li>修饰形参时，在方法内部不可对值进行改变</li>
</ul>
</li>
<li>final修饰成员变量的初始化时机：在对象构造完成之前赋值即可，只能赋值一次</li>
</ul>
<h3 id="3-abstract">3. abstract</h3>
<ul>
<li>修饰类：抽象类</li>
<li>修饰方法：抽象方法</li>
</ul>
<h3 id="4-synchronized">4. synchronized</h3>
<h3 id="5-transient">5. transient</h3>
<h3 id="6-volatile">6. volatile</h3>
<h2 id="40-多态">40. 多态</h2>
<ul>
<li>
<p>同一事物在不同时刻表现出来不同的状态</p>
</li>
<li>
<p>例：水在低温下是固态，常温下是液态，高温下是气态</p>
</li>
<li>
<p>例：你在你爹面前是儿子，在你爷爷面前是孙子</p>
</li>
</ul>
<h3 id="1-多态的前提和表现">1. 多态的前提和表现</h3>
<p>前提：</p>
<ul>
<li>有继承关系</li>
<li>有方法重写</li>
</ul>
<p>表现：</p>
<ul>
<li>父类引用指向子类对象（向上转型）</li>
</ul>
<h3 id="2-多态中成员的访问特点">2. 多态中成员的访问特点</h3>
<pre><code class="language-java">class Father{
	int num = 111;
	public void show(){
		System.out.println(&quot;show father&quot;);
	}
	public static void function(){
		System.out.println(&quot;function father&quot;);
	}
}

class Son extends Father{
	int num = 222;
	int num2 = 333;
	public void show(){
		System.out.println(&quot;show son&quot;);
	}
	public static void function(){
		System.out.println(&quot;function son&quot;);
	}
	public void method(){
		System.out.println(&quot;method son&quot;);
	}
}

class Demo1{
	public static void main(String [] args){
		//多态
		Father f1 = new Son();
        System.out.println(f.num);
        System.out.println(f.num2);//找不到num2
	}
}
</code></pre>
<ul>
<li>访问成员变量
<ul>
<li>编译看左边，运行看左边</li>
</ul>
</li>
<li>访问成员方法
<ul>
<li>编译看左边，运行看右边（成员方法存在方法重写，所以运行看右边）</li>
</ul>
</li>
<li>访问静态方法
<ul>
<li>编译看左边，运行看左边（静态和类相关，算不上重写，所以访问是父类）</li>
</ul>
</li>
<li>访问构造方法
<ul>
<li>创建子类对象时，自动访问父类的构造方法，将父类数据进行初始化</li>
</ul>
</li>
</ul>
<h3 id="3-多态的好处和弊端">3. 多态的好处和弊端</h3>
<h4 id="好处">好处：</h4>
<ul>
<li>提高了程序的复用性、可维护性（由继承保证）</li>
<li>提高了程序的可扩展性（有多态的保证）</li>
</ul>
<h4 id="弊端">弊端：</h4>
<ul>
<li>无法访问到子类独有的内容（变量以及方法）</li>
</ul>
<h4 id="难道真的不能访问子类的内容吗">难道真的不能访问子类的内容吗？</h4>
<ul>
<li>
<p>向下转型</p>
</li>
<li>
<pre><code class="language-java">Father f = new Son();
Son s = (Son)f;
</code></pre>
</li>
</ul>
<h3 id="4-多态的作用">4. 多态的作用</h3>
<ul>
<li>当把不同的子类对象都当做父类类型来看待，可以屏蔽不同子类对象之间的实现差异，从而写出通用的代码达到通用编程，以适应需求的不断变化。</li>
</ul>
<h2 id="41-抽象类abstract">41. 抽象类（abstract）</h2>
<h3 id="1-抽象类的定义">1. 抽象类的定义：</h3>
<blockquote>
<p>比如<strong>图形(Shape)类</strong>, 就是一个抽象的概念,因为我们无法计算这个**“图形”<strong>的面积,所以它的成员函数</strong>area()**是空的。</p>
<p>而继承它的子类**(矩形,椭圆形,三角形等)<strong>就可以去</strong>覆写area()**成员函数. 里面通过数学公式,计算出面积.</p>
</blockquote>
<ul>
<li>抽象类，用来表示一个<strong>抽象概念</strong>，不是一个具体的事物。</li>
<li>是一种<strong>只能定义类型</strong>,而<strong>不能产生对象</strong>的类，所以定义了抽象类则必须有子类的出现.</li>
<li>抽象类的好处在于能够明确地定义子类<strong>需要覆写的</strong>方法</li>
<li>抽象类需要使用<strong>abstract</strong>声明.</li>
<li>定义格式：public  abstract class 类名 {  }</li>
</ul>
<h3 id="2-抽象方法">2. 抽象方法</h3>
<ul>
<li>一个没有方法体的方法</li>
<li>有抽象方法的类就必须定义为抽象类</li>
<li>定义格式：public  abstract  返回值类型  方法名（）；</li>
</ul>
<h3 id="3-注意事项">3. 注意事项</h3>
<ul>
<li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li>
<li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
<li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li>
</ul>
<pre><code class="language-java">public abstract double computePay();
</code></pre>
<ul>
<li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li>
<li>如果子类是具体类，子类必须给出抽象类中的抽象方法的具体实</li>
</ul>
<ul>
<li>如果子类也是抽象类，子类可以不重写父类的抽象方法</li>
</ul>
<h3 id="4-抽象类的构造方法的意义">4. 抽象类的构造方法的意义</h3>
<ul>
<li>用于子类访问父类初始化数据</li>
<li>可以通过多态的方式实现实例化</li>
</ul>
<h3 id="5-抽象类中的成员特点">5. 抽象类中的成员特点</h3>
<ul>
<li>成员变量
<ul>
<li>可以是变量（成员变量，static 类变量）</li>
<li>也可以是常量（final 成员常量，static final 类常量）</li>
</ul>
</li>
<li>成员方法
<ul>
<li>可以有抽象方法（要求子类必须干的事情）</li>
<li>也可以有非抽象方法（给子类继承，提高代码复用性）</li>
</ul>
</li>
<li>构造方法
<ul>
<li>有构造，但是不能实例化</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public abstract class Animal{
    private String name;
    private int age;
    private String color;
    
    public Animal(){}
    public Animal(String name,int age,String color){
        this.name = name;
        this.age = age;
        this.color = color;
    }
    
    public String getName(){
        return name;
    }
    public int getAge(){
        return age;
    }
    public String getColor(){
        return color;
    }
    public void setName(String name){
        this.name = name;
    }
    public void setAge(int age){
        this.age = age;
    }
    public void setColor(String color){
        this.color = color;
    }
    public abstract void eat();
    public abstract void sleep();
    public abstract void play();
}
</code></pre>
<pre><code class="language-java">public class Dog extends Animal{
    public Dog(){}
    public Dog(String name,int age,String color){
        super(name,age,color);
    }
    public void eat(){
        System.out.println(&quot;狗吃狗&quot;);
    }
    public void sleep(){
        System.out.println(&quot;狗趴着睡&quot;);
    }
    public void play(){
        System.out.println(&quot;狗玩球&quot;);
    }
    public void lookDoor(){
        System.out.println(&quot;狗看门&quot;);
    }
}
</code></pre>
<pre><code class="language-java">public class Cat extends Animal{
    public Cat(){}
    public Cat(String name,int age,String color){
        super(name,age,color);
    }
        public void eat(){
        System.out.println(&quot;猫吃猫&quot;);
    }
    public void sleep(){
        System.out.println(&quot;猫蜷着睡&quot;);
    }
    public void play(){
        System.out.println(&quot;猫玩毛线&quot;);
    }
    public void catchMouse(){
        System.out.println(&quot;猫抓老鼠&quot;);
    }
}
</code></pre>
<pre><code class="language-java">public class Demo{
    public static void main(String [] args){
        Cat c1 = new Cat();
        c1.setName(&quot;咪咪&quot;);
        c1.setAge(1);
        c1.setColor(&quot;奶牛色&quot;);
        System.out.println(c1.getName()+c1.getAge()+c1.getColor());
        c1.eat();
        c1.sleep();
        c1.play();
        c1.catchMouse();
        
        Cat c2 = new Cat(&quot;橘猫&quot;,2,&quot;橘黄色&quot;);
        System.out.println(c2.getName()+c2.getAge()+c2.getColor());
        c2.eat();
        c2.sleep();
        c2.play();
        c2.catchMouse();
        
        //多态
        Animal a1 = new Cat();
        a1.setName(&quot;狸花猫&quot;);
        a1.setAge(2);
        a12.setColor(&quot;花&quot;);
        System.out.println(a1.getName()+a1.getAge()+a1.getColor());
        a1.eat();
        a1.sleep();
        a1.play();
        Cat c3 = (Cat)a1;
        c3.catchMouse();
        
        
        Animal a2 = new Cat(&quot;蓝猫&quot;,1,&quot;蓝色&quot;);
        System.out.println(a2.getName()+a2.getAge()+a2.getColor());
        a2.eat();
        a2.sleep();
        a2.play();
        Cat c4 = (Cat)a2;
        c4.catchMouse();
    }
}
</code></pre>
<h3 id="6-抽象类中的几个问题">6. 抽象类中的几个问题</h3>
<ul>
<li>一个类如果没有抽象方法，能不能定义成抽象类？如果可以，有什么意义？
<ul>
<li>可以，意义可以让类无法被实例化，即无法创建对象</li>
</ul>
</li>
<li>abstract类和abstract方法不能被以下修饰：
<ul>
<li>private abstract void show（）</li>
<li>final abstract void show（）</li>
<li>static abstract void show（）</li>
</ul>
</li>
</ul>
<h2 id="42-接口">42. 接口</h2>
<h3 id="1-概述">1. 概述</h3>
<ul>
<li>
<p>为了体现事物功能的扩展性，java就提供了接口来定义额外的功能，不给具体实现。</p>
</li>
<li>
<p>接口只描述所应该具备的方法，并没有具体实现，具体的实现由接口的实现类(相当于接口的子类)来完成。这样将功能的定义与实现分离，优化了程序设计。</p>
<blockquote>
<p>请记住：一切事物均有功能，即一切事物均有接口。</p>
</blockquote>
</li>
</ul>
<h3 id="2-接口的表示形式">2. 接口的表示形式</h3>
<ul>
<li>关键字：interface</li>
<li>格式：interface 接口名 {  }</li>
<li>实现接口关键字：implements</li>
<li>格式：class  类名  implements  接口名{  }</li>
</ul>
<h3 id="3-特点">3. 特点</h3>
<ul>
<li>接口不能被实例化</li>
<li>可以依赖具体的实现类实现实例化（接口多态）</li>
</ul>
<h3 id="4-接口的实现类">4. 接口的实现类</h3>
<ul>
<li>可以是抽象类，意义不大</li>
<li>可以是具体类，一定要重写接口中所有的抽象方法</li>
</ul>
<h3 id="5-多态类型">5. 多态类型</h3>
<ul>
<li>具体类多态（几乎不用）</li>
<li>抽象类多态（常用）</li>
<li>接口类多态（常用）</li>
</ul>
<pre><code class="language-java">interface AnimalInter {
    //钻火圈的额外功能
    public abstract void 钻火圈();
    
}
</code></pre>
<pre><code class="language-java">class Tiger implements AnimalInter{
    public void 钻火圈(){
        System.out.pritln(&quot;老虎钻火圈&quot;);
    }
}
</code></pre>
<pre><code class="language-java">class Demo{
    public static void main(String [] args){
        Tiger t = new Tiger();
		t.钻火圈();
		AnimalInter a = new Tiger();
		a.钻火圈();
    }
}
</code></pre>
<h3 id="6-接口中的成员特点">6. 接口中的成员特点</h3>
<ul>
<li>成员变量
<ul>
<li>默认被 public static final 修饰，只能是类常量</li>
<li>自己写上，否则会误认为是变量</li>
</ul>
</li>
<li>构造方法
<ul>
<li>没有构造方法，也不能有构造方法</li>
<li>因为接口是扩展功能，没有具体的实体对象</li>
<li>那么接口如何实现多态？
<ul>
<li>java中所有的类都直接或者间接继承了一个类，这个类就是Object类</li>
<li>Object是java中所有类的基类，是类层次结构中的根类</li>
</ul>
</li>
</ul>
</li>
<li>成员方法
<ul>
<li>接口中所有的方法都被public abstract修饰，即接口中所有的方法都是抽象方法</li>
<li>（其实可以出现非抽象方法，但不要记忆default void show(){}）</li>
<li>默认被 public abstract 修饰</li>
</ul>
</li>
</ul>
<pre><code class="language-java">interface Inter{
    public static final int num = 5;
    public static final int num2 = 6;
    public static final int num3 = 7;
    public static final int num4 = 8;
    
    public abstract void show();
}
</code></pre>
<pre><code class="language-java">class InterImp implements Inter{
    
}
</code></pre>
<pre><code class="language-java">class Demo{
    public static void main(String [] args){
        
    }
}
</code></pre>
<h3 id="7-类和类-类和接口-接口和接口之间的关系">7. 类和类、类和接口、接口和接口之间的关系</h3>
<ul>
<li>类和类
<ul>
<li>继承关系，只能单继承，可以多层继承</li>
</ul>
</li>
<li>类和接口
<ul>
<li>实现关系，可以单实现，也可以多实现</li>
<li>还可以在继承一个类的基础上同时实现多个接口</li>
</ul>
</li>
<li>接口和接口
<ul>
<li>继承关系，可以单继承，也可以多继承</li>
</ul>
</li>
</ul>
<h3 id="8-抽象类和接口的区别">8. 抽象类和接口的区别</h3>
<ul>
<li>
<p>成员区别：</p>
<ul>
<li>抽象类
<ul>
<li>成员变量：可以是变量，可以是常量</li>
<li>构造方法：有</li>
<li>成员方法：可以有抽象方法，也可以有非抽象方法</li>
</ul>
</li>
<li>接口
<ul>
<li>成员变量：都是静态常量</li>
<li>构造方法：没有</li>
<li>成员方法：只能是抽象方法</li>
</ul>
</li>
</ul>
</li>
<li>
<p>关系区别：</p>
<ul>
<li>类和类：继承，单继承</li>
<li>类和接口：实现，多实现</li>
<li>接口和接口：继承，多继承</li>
</ul>
</li>
<li>
<p>设计区别：</p>
<ul>
<li>抽象类：存储继承体系中共性的内容，体现的是 is  a 的关系</li>
<li>接口：体现事物的扩展功能，体现的是 like  a 的关系</li>
</ul>
</li>
<li>
<p>抽象类中可以有非抽象方法，接口中默认都为抽象方法（public abstract）</p>
</li>
<li>
<p>抽象类中的成员变量可以随便定义，接口中的成员变量都是类常量（public static final）</p>
</li>
</ul>
<h3 id="9-猫狗案例加入一个钻火圈的额外功能">9. 猫狗案例，加入一个钻火圈的额外功能</h3>
<pre><code class="language-java">interface AnimalInter{
    //定义额外功能
    public abstract void 钻火圈(){
        
    }
}

public abstract class Animal{
    private String name;
    private int age;
    private String color;
    
    public Animal(){
        
    }
    public Animal(String name,int age,String color){
        this.name = name;
        this.age = age;
        this.color = color;
    }
    
    public String getName(){
        return name;
    }
    public int getAge(){
        return age;
    }
    public String getColor(){
        return color;
    }
    public void setName(String name){
        this.name = name;
    }
    public void setAge(int age){
        this.age = age;
    }
    public void setColor(String color){
        this.color = color;
    }
    public abstract void eat();
    public abstract void sleep();
    public abstract void play();
    public void show(){
        System.out.println(&quot;Animal{&quot;+ name + &quot;,&quot; + age + &quot;,&quot; + color + &quot;}&quot;);
    }
}
//狗也是动物，所以继承动物
public class Dog extends Animal{
    public Dog(){}
    public Dog(String name,int age,String color){
        super(name,age,color);
    }
    public void eat(){
        System.out.println(&quot;狗吃骨头&quot;);
    }
    public void sleep(){
        System.out.println(&quot;狗趴着睡&quot;);
    }
    public void play(){
        System.out.println(&quot;狗玩球&quot;);
    }
    public void lookDoor(){
        System.out.println(&quot;狗会看门&quot;);
    }
}
//猫也是动物，所以继承动物
public class Cat extends Animal{
    public Cat(){}
    public Cat(String name,int age,String color){
        super(name,age,color);
    }
     public void eat(){
        System.out.println(&quot;猫吃鱼&quot;);
    }
    public void sleep(){
        System.out.println(&quot;猫蜷着睡&quot;);
    }
    public void play(){
        System.out.println(&quot;猫玩毛线&quot;);
    }
    public void catchMouse(){
        System.out.println(&quot;猫会抓老鼠&quot;);
    }
} 

//屌狗也是狗，所以继承狗
public class DiaoDog extends Dog implements AnimalInter{
    public DiaoDog(){}
    public DiaoDog(String name,int age,String color){
        super(name,age,color);
    }
    public void zhq(){
        System.out.println(&quot;屌狗钻火圈&quot;);
    }
}
//屌猫也是猫，所以继承猫
public class DiaoCat extends Cat implements AnimalInter{
    public DiaoCat(){}
    public DiaoCat(String name,int age,String color){
        super(name,age,color);
    }
    public void zhq(){
        System.out.println(&quot;屌猫钻火圈&quot;);
    }
}
//测试类
public class Demo{
    public static void main(String[]args){
        //测试普通狗
        Dog d1 = new Dog(&quot;哈巴狗&quot;,2,&quot;黄色&quot;);
        d1.show();
        d1.eat();
        d1.sleep();
        d1.play();
        d1.lookDoor();
        
        //测试屌狗
        DiaoDog d2 = new DiaoDog(&quot;金毛&quot;,3,&quot;金色&quot;);
        d2.show();
        d2.eat ();
        d2.sleep();
        d2.play();
        d2.lookDoor();
        d2.zhq();
        
        //测试普通猫
        Cat c1 = new Cat(&quot;橘猫&quot;,2,&quot;橘黄色&quot;);
        c1.show();
        c1.eat();
        c1.sleep();
        c1.play();
        c1.catchMouse();
        
        //测试屌猫
        DiaoCat c2 = new DiaoCat(&quot;狸花猫&quot;,3,&quot;狸花&quot;);
        c2.show();
        c2.eat ();
        c2.sleep();
        c2.play();
        c2.catchMouse();
        c2.zhq();
    }
}
</code></pre>
<h2 id="43-形参和返回值深入研究">43. 形参和返回值深入研究</h2>
<h3 id="1-形参">1. 形参</h3>
<ul>
<li>基本类型</li>
<li>引用类型
<ul>
<li>类：要的是该类的对象</li>
<li>抽象类：要的是该抽象类的具体子类的对象</li>
<li>接口：要的是该接口的具体实现类的对象</li>
</ul>
</li>
</ul>
<h3 id="2-返回值类型">2. 返回值类型</h3>
<ul>
<li>基本类型</li>
<li>引用类型
<ul>
<li>类：返回该类的具体对象</li>
<li>抽象类：返回该抽象类的具体子类对象</li>
<li>接口：返回该接口具体实现类对象</li>
</ul>
</li>
</ul>
<blockquote>
<p>链式编程：new Student().study()</p>
<p>每次调用方法之后返回的是另一个对象，而你需要继续调用这个对象的方法，就可以直接.方法名</p>
</blockquote>
<h2 id="44-包">44. 包</h2>
<h3 id="1-作用">1. 作用</h3>
<ul>
<li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li>
<li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li>
<li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li>
</ul>
<blockquote>
<p>Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）</p>
</blockquote>
<ul>
<li>区分同名文件，对类文件进行分类管理和存储</li>
</ul>
<h3 id="2-包的划分">2. 包的划分</h3>
<ul>
<li>基本划分
<ul>
<li>按功能分
<ul>
<li>com.dnc.add</li>
<li>com.dnc.delete</li>
<li>com.dnc.update</li>
<li>com.dnc.select</li>
</ul>
</li>
<li>按模块分
<ul>
<li>com.dnc.teacher</li>
<li>com.dnc.student</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-包的定义和注意事项">3. 包的定义和注意事项</h3>
<ul>
<li>格式：
<ul>
<li>package  包名；</li>
<li>多级包用点隔开</li>
</ul>
</li>
<li>注意：
<ul>
<li>package语句必须为程序的第一条语句</li>
<li>一个java文件中只能有一条package语句，且写在第一行</li>
</ul>
</li>
</ul>
<h3 id="4-带包的编译和运行">4. 带包的编译和运行</h3>
<ul>
<li>手动写：编写一个带包的java文件，使用javac编译，手动创建包，将编译后的字节码文件放入包内，回到编写java文件的路径下，用java命令运行，要带包名</li>
</ul>
<pre><code class="language-java">java com.dnc.demo.Demo
</code></pre>
<ul>
<li>自动：编写一个带包的java文件，javac编译时带上包名，回到编写java文件的路径下，用java命令运行</li>
</ul>
<pre><code class="language-java">javac -d . HelloWorld.java
java com.dnc.demo.Demo    
</code></pre>
<h3 id="5-导包">5. 导包</h3>
<ul>
<li>不同包下类之间的访问，每次使用的时候都要加包名，为了解决这个问题，java就提供了导包功能。</li>
<li>格式：import  包名；</li>
<li>注意：
<ul>
<li>用谁导谁，直接导入具体的类，写在package下</li>
<li>虽然包名后面可以写*，不建议</li>
<li>一个java文件中可以有多条import语句</li>
</ul>
</li>
</ul>
<h2 id="45-类和类的组成可用的修饰符">45. 类和类的组成可用的修饰符</h2>
<ul>
<li>修饰符：
<ul>
<li>权限修饰符：private  默认  protected  public</li>
<li>状态修饰符：static  final</li>
<li>抽象修饰符：abstract</li>
</ul>
</li>
<li>类：
<ul>
<li>权限修饰符：默认  public</li>
<li>状态修饰符：final</li>
<li>抽象修饰符：abstract</li>
</ul>
</li>
<li>成员变量：
<ul>
<li>权限修饰符：private  默认 protected  public</li>
<li>状态修饰符：static  final</li>
<li>抽象修饰符：没有</li>
</ul>
</li>
<li>成员方法：
<ul>
<li>权限修饰符：private  默认  protected  public</li>
<li>状态修饰符：static  final</li>
<li>抽象修饰符：abstract</li>
</ul>
</li>
<li>构造方法：
<ul>
<li>权限修饰符：public  private  protected  默认</li>
<li>状态修饰符：没有</li>
<li>抽象修饰符：没有</li>
</ul>
</li>
<li>除此之外的常用组合：
<ul>
<li>成员变量：
<ul>
<li>public static final</li>
</ul>
</li>
<li>成员方法：
<ul>
<li>public static</li>
<li>public abstract</li>
<li>public final</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="46-内部类">46. 内部类</h2>
<h3 id="1-把一个类定义在另一个类的内部这个里面的类就是内部类">1. 把一个类定义在另一个类的内部，这个里面的类就是内部类</h3>
<pre><code class="language-java">class A{
    class B{}				//B为成员内部类
    public void method(){
        class C{}			//C为局部内部类
    }
}
</code></pre>
<h3 id="2-分类">2. 分类</h3>
<h4 id="21-根据内部类在类中定义的位置不同">2.1 根据内部类在类中定义的位置不同</h4>
<ul>
<li>成员内部类</li>
<li>局部内部类</li>
</ul>
<h4 id="22-根据状态修饰符">2.2 根据状态修饰符</h4>
<ul>
<li>非静态内部类</li>
<li>静态内部类（static）</li>
</ul>
<blockquote>
<p>静态内部类无法访问外部类的成员</p>
</blockquote>
<h4 id="23-根据访问权限修饰符">2.3 根据访问权限修饰符</h4>
<ul>
<li>私有内部类（private）</li>
</ul>
<blockquote>
<p>如果你不希望内部类被外部类访问可以使用 private 修饰符</p>
</blockquote>
<ul>
<li>受保护的内部类（protected）</li>
<li>默认的内部类（缺省）</li>
<li>公开的内部类（public）</li>
</ul>
<h3 id="3-成员内部类">3. 成员内部类</h3>
<h4 id="31-格式">3.1 格式</h4>
<pre><code class="language-java">class Outer{
    class Inner{}
}
</code></pre>
<h4 id="32-创建对象格式">3.2 创建对象格式</h4>
<pre><code class="language-java">Outer.Inner i = new Outer().new Inner();
</code></pre>
<h4 id="33-内部类的成员与外部类的成员的使用方式">3.3. 内部类的成员与外部类的成员的使用方式</h4>
<ul>
<li>内部类可以直接访问外部类的东西</li>
<li>外部类必须创建对象才能访问内部类的东西</li>
<li>内部类直接访问外部类成员可以使用以下格式</li>
</ul>
<pre><code class="language-java">Outer.this.成员变量/成员方法()
</code></pre>
<ul>
<li>例：</li>
</ul>
<pre><code class="language-java">public class Outer{
    private int num = 10;
    public class Inner{
        int num = 20;
        public void methodInner(){
            int num = 30;
            System.out.println(num);			//局部变量
            System.out.println(this.num);		//内部类的成员变量
            System.out.println(Outer.this.num);	//外部类的成员变量
            this.show();						//内部类的成员方法
            Outer.this.show();					//外部类的成员方法
        }
        public void show(){
            System.out.println(&quot;Inner show()&quot;);
        }
    }
    public void show(){
        System.out.println(&quot;Outer show()&quot;);
    }
}
</code></pre>
<h4 id="34-成员内部类常见用法和常用修饰符">3.4 成员内部类常见用法和常用修饰符</h4>
<ul>
<li>private：为了保证安全</li>
</ul>
<blockquote>
<p>特殊情况下还需要让别人访问，就提供一个公有的方法，让外界来间接访问</p>
</blockquote>
<pre><code class="language-java">public class Outer{
    private class Inner{
        public void show(){
            System.out.println(&quot;Inner show()&quot;);
        }
    }
    public void methos(){
        Inner i = new Inner();
        i.show();
    }
}
</code></pre>
<ul>
<li>static：为了让数据访问更方便（可以看成外部类的静态成员）</li>
</ul>
<blockquote>
<ol>
<li>静态内部类可以有静态成员，非静态内部类不能有静态成员。</li>
<li>静态内部类的创建不依赖于外部类，非静态内部类必须依赖于外部类的创建而创建。</li>
</ol>
</blockquote>
<pre><code class="language-java">public class Outer{
    private static int num = 2;
    public static class Inner{
        public static void show(){
            System.out.println(num);
        }
    }
}
</code></pre>
<blockquote>
<p>创建对象格式</p>
</blockquote>
<pre><code class="language-java">Outer.Inner i = new Outer.Inner();
</code></pre>
<h3 id="4-局部内部类">4. 局部内部类</h3>
<h4 id="41-定义">4.1 定义：</h4>
<ul>
<li>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</li>
</ul>
<h4 id="42-格式">4.2 格式：</h4>
<pre><code class="language-java">class Outer{
    private int num = 5;
    public void show(){
        int num = 6;
        //局部内部类
        class Inner{
            public void function(){
                System.out.println(num);
                System.out.println(Outer.this.num);
            }
        }
    }
}
</code></pre>
<h4 id="43-注意事项">4.3 注意事项：</h4>
<ul>
<li>局部内部类就像是方法里面的一个局部变量一样，是不能有 public、protected、private 以及 static 修饰符的。</li>
<li>局部内部类可以直接访问外部类成员，即使是私有的</li>
<li>局部内部类中访问局部变量，局部变量会被变成final变量，JDK8之后，默认被final修饰，JDK7之前，需要自己添加final修饰符</li>
</ul>
<blockquote>
<p>方法执行结束出栈，局部变量不存在了，但是方法中的局部内部类实例化的对象在堆中依然存在，还会使用局部变量的值，而此时局部变量并不存在，被对象访问的只是一个字面值常量，所以会被final修饰</p>
<p>其实这是规定，无需理解，是延长变量生命周期的一种方式，因为类是加载到方法区中。而局部变量是随意方法的进栈而产生，随着方法的弹栈而消失，所以在局部内部类访问局部变量时，要给局部变量给final修饰使其变成常量，进入常量池，生命周期变长。</p>
</blockquote>
<figure data-type="image" tabindex="12"><img src="http://pic.zyblog.xyz/img/typora/20201110110926.png" alt="img" loading="lazy"></figure>
<ul>
<li>在外部类中不能创建局部内部类的对象</li>
<li>外部类不能直接访问局部内部类，只能在方法体中间接访问局部内部类，且访问必须在内部类定义之后</li>
</ul>
<h3 id="5-匿名内部类">5. 匿名内部类</h3>
<h4 id="51-格式">5.1 格式：</h4>
<pre><code class="language-java">new 父类名或者接口名(){
    //方法重写
}
</code></pre>
<h4 id="52-本质">5.2 本质</h4>
<ul>
<li>是一个继承了父类或者实现了接口的具体子类匿名对象</li>
</ul>
<h4 id="53-例">5.3 例</h4>
<pre><code class="language-java">interface Inter{
    public abstract void show();
}
class Outer{
    public abstract void method(){
        //匿名内部类
        new Inter(){
            public void show(){
                System.out.println(&quot;匿名内部类&quot;);
            }
        }.show();
    }
}
public class Test{
    public static void main(String [] args){
        //接口多态
        Inter i = new Inter(){
            public void show(){
                System.out.println(&quot;匿名内部类&quot;);
            }
        };
        i.show();
    }
}
</code></pre>
<blockquote>
<p>匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护，以下是一段 Android 事件监听代码</p>
</blockquote>
<pre><code class="language-java">scan_bt.setOnClickListener(new OnClickListener() {
    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
         
    }
});
 
history_bt.setOnClickListener(new OnClickListener() {
     
    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
         
    }
});
</code></pre>
<p>这段代码为两个按钮设置监听器，这里面就使用了匿名内部类</p>
<pre><code class="language-java">new OnClickListener() {
    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
         
    }
}
</code></pre>
<h4 id="54-注意事项">5.4 注意事项</h4>
<blockquote>
<p>匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为 Outter$1.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p>
</blockquote>
<ul>
<li>匿名内部类可以访问外部所有成员，包括私有</li>
<li>匿名内部类访问局部变量时，变量必须要用final修饰，JDK8以后即使没有用final修饰，会自动补上</li>
<li>匿名内部类用于继承其他类或是实现接口，作为参数去给方法传值</li>
</ul>
<h4 id="55-例">5.5 例</h4>
<pre><code class="language-java">public interface Inter{
    public abstract void show();
}
public class Outer{
    public static Inter method(){
        return new Inter(){
            public void show(){
                System.out.println(&quot;我爱**&quot;);
            }
        };
    }
}
public class Test{
    public static void main(String [] args){
        Outer.method().show();
    }
}
</code></pre>
<h3 id="6-lambda表达式">6. Lambda表达式</h3>
<h4 id="61-概述用来实现一个接口本质是一个匿名函数">6.1 概述：用来实现一个接口，本质是一个匿名函数</h4>
<h4 id="62-条件">6.2 条件：</h4>
<ul>
<li>要求被实现接口中有且仅有一个需要被实现的方法（函数式接口）</li>
</ul>
<h4 id="63-函数式接口">6.3 函数式接口：</h4>
<pre><code class="language-java">interface A{
    public abstract void show(); 
}
//标准的函数式接口定义，有且仅有一个需要被实现类重写的方法
</code></pre>
<pre><code class="language-java">interface B{
    public abstract void show();
    default void display(){}
}
//这里为什么说B也是一个函数式接口，是因为在JDK1.8版本中，接口中可以有default方法，default关键字修饰的方法就是初始化的抽象方法。或者说是一个已经实现了的抽象方法，不需要再在其他implement接口位置进行实现。比如定义了一个接口，有大量的类实现了这个接口，但是新需求来了，需要在原有的基础上添加一个方法，而使用default关键字的话就不用每个实现类都实现一次，只要在顶层接口中用default实现此方法，所有实现类就会全部拥有该方法，所以说display（）已经被重写，所以类实现此接口时只需要重写show（）方法，满足函数式接口的定义
</code></pre>
<pre><code class="language-java">interface C{
    public abstract void show();
    public static void display(){}
}
//这里为什么C也是一个函数式接口，是因为在JDK1.8版本中，接口中可以有静态方法，虽然静态方法可以不用实现但是必须有方法体，即{}，在类实现此接口时，不会继承接口中的static的方法，也就重写不了，所以需要被重写的方法只有show（）一个，满足函数式接口的定义
</code></pre>
<pre><code class="language-java">interface D{
    public abstract void show();
    public String toString();
}
//这里为什么说D也是一个函数式接口，是因为在类实现此接口时，由于默认预先继承Object类，而Object类重写了toString（）方法也算重写过了toString（）方法，因此此接口需要被实现的方法只有show（）一个，满足函数式接口的定义
</code></pre>
<h4 id="64-functionalinterface">6.4 @FunctionalInterface</h4>
<ul>
<li>@FunctionalInterface  注解  表示接口是一个函数式接口</li>
<li>可以用来验证某个接口是否为函数式接口</li>
</ul>
<h2 id="47-常用类api">47. 常用类(API)</h2>
<blockquote>
<p>java.lang包下的类使用时无需导包，其他的都需要导包</p>
</blockquote>
<h3 id="1-math类">1. Math类</h3>
<ul>
<li>
<p>所在包：java.lang.Math</p>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public static double random（）：返回一个大于等于0.0，小于1.0的double型数字</li>
<li>public static double abs（double a）：返回double类型的绝对值</li>
<li>public static float abs（float a）：返回float类型的绝对值</li>
<li>public static int abs（int a）：返回int类型的绝对值</li>
<li>public static long abs（long a）：返回long类型的绝对值</li>
<li>public static double asin（double a）：返回角度的反正弦值</li>
<li>public static double acos（double a）：返回角度的反余弦值</li>
<li>public static double atan（double a）：返回角度的反正切值</li>
<li>public static double sin（double a）：返回角度的正弦值</li>
<li>public static double cos（double a）：返回角度的余弦值</li>
<li>public static double tan（double a）：返回角度的正切值</li>
<li>public static double log（double a）：返回自然对数ln（以e为底）值</li>
<li>public static double pow（double a，double b）：返回a的b次方值</li>
<li>public static long round（double a）：四舍五入为long</li>
<li>public static int round（float a）：四舍五入为int</li>
<li>public static double ceil（double a）：向上取整为double</li>
<li>public static double floor（double a）：向下取整double</li>
<li>public static double sqrt（double a）：返回a的开平方根</li>
</ul>
</li>
</ul>
<h3 id="2-random类">2. Random类</h3>
<ul>
<li>
<p>所在包：jav.util.Random</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li>public Random（）：创建一个新的随机数生成器</li>
<li>public Random（long seed）：使用种子创建一个新的随机数生成器</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public int nextInt()：获取一个随机 int 数字（范围是int类型的范围，有正负两种）</li>
</ul>
<pre><code class="language-java">import java.util.Random;
...
Random r = new Random();    
int num = r.nextInt();  //-2147483648~2147483647  
System.out.println(num);
</code></pre>
<ul>
<li>public int nextInt(int num)：获取一个随机 int 数字，（参数表示范围，左闭右开区间）</li>
</ul>
<pre><code class="language-java">import java.util.Random;
...
Random r = new Random();
int num = r.nextInt(5);//[0,5)
System.out.println(num);
</code></pre>
<ul>
<li>public void setSeed（long seed）：设置随机数种子（有规律可循的伪随机数）</li>
</ul>
<pre><code class="language-java">public static void main(String [] args){
	System.out.println(&quot;未设置随机数种子，取到的随机数&quot;);
    for (int k = 0; k &lt; 5; k++) {
		Random ran = new Random();
		for (int i = 0; i &lt; 10; i++) {
			System.out.print(ran.nextInt(100)+&quot;\t&quot;);
		}
        System.out.println(&quot;&quot;);
	}
    System.out.println(&quot;设置随机数种子后，取到的随机数&quot;);
    for (int j = 0; j &lt; 5; j++) {
		Random ran2 = new Random();
		ran2.setSeed(100);
		for (int i = 0; i &lt; 10; i++) {
			System.out.print(ran2.nextInt(100)+&quot;\t&quot;);
		}
		System.out.println(&quot;&quot;);
	}    
}

//输出结果		
//未设置随机数种子，取到的随机数
58	76	62	95	90	61	53	30	31	20	
87	22	11	77	87	61	9	76	43	81	
17	52	16	94	10	14	11	11	73	83	
11	93	34	66	82	87	30	43	65	81	
12	31	77	91	80	54	58	16	86	46	
//设置随机数种子后，取到的随机数
15	50	74	88	91	66	36	88	23	13	
15	50	74	88	91	66	36	88	23	13	
15	50	74	88	91	66	36	88	23	13	
15	50	74	88	91	66	36	88	23	13	
15	50	74	88	91	66	36	88	23	13	
</code></pre>
</li>
</ul>
<h3 id="3-object类">3. Object类</h3>
<ul>
<li>
<p>所在包：java.lang.Object</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li>public Object（）</li>
<li>如果一个类没有继承其他类，则去使用Object的无参构造方法</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>
<p>protected Object clone（）</p>
<ul>
<li>创建一个副本对象</li>
<li>自定义类实现Cloneable接口，是一个标记接口，实现了这个接口的类的对象可以实现自我克隆</li>
<li>自定义类中重写Object中的clone方法</li>
</ul>
<pre><code class="language-java">@Override
protected Object clone() throws CloneNotSupportedException {
	return super.clone();
}
</code></pre>
</li>
<li>
<p>boolean equals（Object obj）</p>
<ul>
<li>比较两个对象是否相等</li>
</ul>
<pre><code class="language-java">public boolean equals(Object obj) {
        return (this == obj);
}
</code></pre>
<ul>
<li>默认的equals方法比较对象引用地址，没有意义，子类应该重写这个方法</li>
</ul>
<pre><code class="language-java">public boolean equals(Object anObject) {
        if (this == anObject) {
            return true;
        }
        if (anObject instanceof String) {
            String anotherString = (String)anObject;
            int n = value.length;
            if (n == anotherString.value.length) {
                char v1[] = value;
                char v2[] = anotherString.value;
                int i = 0;
                while (n-- != 0) {
                    if (v1[i] != v2[i])
                        return false;
                    i++;
                }
                return true;
            }
        }
        return false;
}
</code></pre>
</li>
<li>
<p>protected void finalize（）</p>
<ul>
<li>当对象不再使用的时候，提醒垃圾回收器来回收对象</li>
</ul>
</li>
<li>
<p>class&lt;?&gt; getClass（）</p>
<ul>
<li>返回当前正在运行的类的字节码文件对象</li>
</ul>
</li>
<li>
<p>int hashCode（）</p>
<ul>
<li>返回对象的哈希Code值</li>
<li>是通过对象地址值计算出来的，并不是对象的真正地址</li>
</ul>
</li>
<li>
<p>String toString（）</p>
<ul>
<li>返回对象的字符串表示形式</li>
</ul>
<pre><code class="language-java">//Object类中的toString方法
public String toString() {
        return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());
}
</code></pre>
<ul>
<li>默认的toString方法没有意义，子类应该去重写该方法</li>
</ul>
<pre><code class="language-java">	@Override
    public String toString() {
        return &quot;Student{&quot; +
                &quot;sname='&quot; + sname + '\'' +
                &quot;, sage=&quot; + sage +
                &quot;, sgender='&quot; + sgender + '\'' +
                '}';
    }
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="4-scanner类">4.  Scanner类</h3>
<ul>
<li>接受键盘标准输入</li>
<li>构造方法
<ul>
<li>Scanner（InputStream in）
<ul>
<li>InputStream in = System.in；</li>
</ul>
</li>
</ul>
</li>
<li>成员方法
<ul>
<li>nextXxxx（）：查找并返回下一个键盘输入数据
<ul>
<li>next（）</li>
<li>nextBoolean（）</li>
<li>nextByte（）</li>
<li>nextDouble（）</li>
<li>nextFloat（）</li>
<li>nextInt（）</li>
<li>nextLine（）</li>
<li>nextLong（）</li>
<li>nextShort（）</li>
</ul>
</li>
<li>hasNextXxxx（）：判断并返回是否存在下一个键盘输入数据
<ul>
<li>hasNext（）</li>
<li>hasNextBoolean（）</li>
<li>hasNextByte（）</li>
<li>hasNextDouble（）</li>
<li>hasNextFloat（）</li>
<li>hasNextInt（）</li>
<li>hasNextLine（）</li>
<li>hasNextLong（）</li>
<li>hasNextShort（）</li>
</ul>
</li>
<li>close（）：关闭Scanner对象</li>
</ul>
</li>
<li>先获取一个数字，再获取一个字符串时，不让输入直接结束了，因为回车也算一个字符
<ul>
<li>可以把两个数据都以字符串形式接受，然后在进行转换</li>
</ul>
</li>
</ul>
<h3 id="5arrays类">5.Arrays类</h3>
<ul>
<li>常用方法
<ul>
<li>sort方法：
<ul>
<li>public static void sort（数组）：数组排序</li>
</ul>
</li>
<li>toString方法：
<ul>
<li>public static String toString（数组）：将数组转为字符串</li>
</ul>
</li>
<li>binarySearch方法：
<ul>
<li>public static int binarySearch（被查找的数组，被查找的值）：使用二分法在指定数组中查找指定值</li>
</ul>
</li>
<li>public static <T> List<T> asList（T... a）：把数组转集合
<ul>
<li>数组转集合后，集合长度不可变</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-system类">6. System类</h3>
<ul>
<li>包：java.lang.System</li>
<li>字段：
<ul>
<li>static printStream err：标准错误输出流</li>
<li>static InputStream in：标准输入流</li>
<li>static PrintStream out：标准输出流</li>
</ul>
</li>
<li>成员方法：
<ul>
<li>public static long currentTimeMillis（）：获取当前时间（单位：毫秒）</li>
<li>public static void exit（int status）：终止当前运行的Java虚拟机
<ul>
<li>status为状态码，按照惯例，非零状态码表示异常终止</li>
</ul>
</li>
<li>public static void gc（）：运行垃圾回收器</li>
<li>public static Properties getProperties（）：获取当前的系统属性</li>
<li>public static void arraycopy（Object src，int srcPos，Object dest，int destPos，int length）
<ul>
<li>src：原数组</li>
<li>srcPos：原数组中的起始位置</li>
<li>dest：目标数组</li>
<li>destPos：目标数组的起始位置</li>
<li>length：要复制的数组元素的数量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="7-collections类">7. Collections类</h3>
<ul>
<li>
<p>包：java.util.Collections</p>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public static <T> boolean addAll(Collection&lt;? super T&gt; c,  T... elements)：将多个元素加入指定集合中</li>
<li>public static void shuffle（List&lt;?&gt; list）：打乱集合顺序</li>
<li>public static <T> void sort（List<T> list）：将集合按照默认顺序（升序）排列</li>
<li>public static <T> void sort（List<T> list，Comparator&lt;? super T&gt;）：将集合中元素按照指定比较器指定的排序规则排序</li>
</ul>
</li>
</ul>
<h2 id="48-string类">48. String类</h2>
<ul>
<li>包：java.lang.String</li>
<li>注意事项
<ul>
<li>
<p>字符串是常量，一旦被创建出来，不可改变</p>
</li>
<li>
<p>正是因为字符串是不可改变的，所以字符串可以共享使用</p>
</li>
<li>
<p>jdk1.8及以前String使用的是char数组，jdk1.9及以后使用的是byte数组。</p>
<blockquote>
<p>因为开发人员发现人们使用的字符串值是拉丁字符居多而之前使用的char数组每一个char占用两个字节而拉丁字符只需要一个字节就可以存储，剩下的一个字节就浪费了，造成内存的浪费，gc的更加频繁。因此在jdk9中将String底层的实现改为了byte数组。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="1-构造方法">1. 构造方法</h3>
<ul>
<li>public String（）：创建一个空白字符串，不含有任何内容</li>
<li>public String（char[ ] chars）：根据字符数组的内容，来创建对应的字符串</li>
<li>public String（byte[ ] bytes）：根据字节数组的内容，来创建对应的字符串</li>
<li>public String（byte[] bytes,  Charset charset）：按指定字符集解码并创建对应字符串</li>
<li>public String（byte[] bytes,  int offset, int length）：按照字节数组内容，从指定位置开始指定长度创建对应字符串</li>
<li>public String（byte[] bytes,  int offset, int length, Charset charset）：按照字节数组内容按指定编码从指定位置开始指定长度的字节数组内容创建对应字符串</li>
<li>public String（String original）：初始化新创建的String对象</li>
<li>public String（StringBuffer buffer）：将StringBuffer字符序列转为String对象</li>
<li>public String（StringBuilder builder）：将StringBuilder字符序列转为String对象</li>
</ul>
<pre><code class="language-java">String str1 = new String();

char [] c = {'a','b','c'};
String str2 = new String(c);

byte [] b = {65,66,67};//ASCII码：A，B，C
String str3 = new String(b);

//直接创建
String str4 = &quot;String&quot;;
//直接写上双引号，即使没有new，也会创建对象
</code></pre>
<h3 id="2-字符串的常量池">2. 字符串的常量池</h3>
<ul>
<li>JDK1.8之前，字符串常量池位于运行时常量池，运行时常量池存在于方法区中，JDK1.8之后，字符串常量池位于堆中</li>
<li>对于引用类型来说，==比较的是地址值</li>
<li>双引号直接写的字符串在常量池中，new的不在常量池中</li>
<li>Java6和6之前，常量池是存放在方法区（此时hotspot虚拟机对方法区的实现为永久代）中的。</li>
<li>Java7，将字符串常量池是单独存放到了堆中，运行时常量池剩下的东西还在方法区, 也就是hotspot中的永久代</li>
<li>Java8之后，取消了整个永久代区域，取而代之的是元空间。运行时常量池和静态常量池存放在元空间中，而字符串常量池依然存放在堆中，只不过方法区的实现从永久代变成了元空间(堆外内存)</li>
</ul>
<blockquote>
<p>在JDK1.8中，使用元空间代替永久代来实现方法区，但是方法区并没有改变，所谓&quot;Your father will always be your father&quot;，变动的只是方法区中内容的物理存放位置。正如上面所说，类型信息（元数据信息）等其他信息被移动到了元空间中；但是运行时常量池和字符串常量池被移动到了堆中。但是不论它们物理上如何存放，逻辑上还是属于方法区的。</p>
<p>JDK1.8中字符串常量池和运行时常量池逻辑上属于方法区，但是实际存放在堆内存中，因此既可以说两者存放在堆中，也可以说两则存在于方法区中，这就是造成误解的地方。</p>
<p>其实，移除永久代的工作从JDK1.7就开始了。JDK1.7中，存储在永久代的部分数据就已经转移到了Java Heap或者是 Native Heap。但永久代仍存在于JDK1.7中，并没完全移除，譬如符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap。</p>
<p>引用自：https://www.cnblogs.com/cosmos-wong/p/12925299.html</p>
</blockquote>
<figure data-type="image" tabindex="13"><img src="http://pic.zyblog.xyz/img/typora/20201111093041.png" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="http://pic.zyblog.xyz/img/typora/20201110212103.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="http://pic.zyblog.xyz/img/typora/20201112110934.png" alt="img" loading="lazy"></figure>
<ul>
<li>问题：<strong>String str1 = new String(&quot;abc&quot;)；创建了多少个对象？</strong></li>
</ul>
<blockquote>
<ol>
<li>从字符串常量池中查找是否存在“abc”对象，如果存在，返回引用地址，如果不存在，则创建一个对象</li>
<li>new String（）在堆中开辟空间创建了一个对象</li>
</ol>
<p>综上所述，创建了两个对象，一个引用</p>
</blockquote>
<ul>
<li>问题：<strong>String str1 = new String(&quot;A&quot;+&quot;B&quot;) ; 会创建多少个对象？</strong></li>
</ul>
<blockquote>
<ol>
<li>“A”如果没有在字符串常量池中被找到，就会被创建</li>
<li>“B”如果没有在字符串常量池中被找到，就会被创建</li>
<li>“AB”如果没有在字符串常量池中被找到，就会被创建</li>
<li>new String（）在堆中开辟空间创建了一个对象</li>
</ol>
<p>综上所述，创建了四个对象，一个引用</p>
</blockquote>
<ul>
<li>问题：<strong>String str2 = new String(&quot;ABC&quot;) + &quot;ABC&quot; ; 会创建多少个对象?</strong></li>
</ul>
<blockquote>
<ol>
<li>“ABC”如果没有在字符串常量池中被找到，就会被创建</li>
<li>“ABC”已经被创建，在字符串常量池中找到，返回引用地址</li>
<li>new String（）在堆中创建了一个对象</li>
<li>“ABCABC”被创建</li>
</ol>
<p>综上所述，创建了三个对象，一个引用</p>
</blockquote>
<h3 id="3-常用方法">3. 常用方法</h3>
<ul>
<li>
<p>public boolean equals（Object obj）</p>
<ul>
<li>参数可以是任何对象，只有参数为一个字符串并且内容相同才会返回true，否则返回false</li>
<li>如果一个常量和一个变量比较
<ul>
<li>&quot;abc&quot;.equals(str)  ✔️推荐使用，当str为null时，返回false，结果依然正确</li>
<li>str.equals(&quot;abc&quot;)​ ​ ❌不推荐使用，当str为null时，会出现NullPointerException空指针异常</li>
</ul>
</li>
</ul>
</li>
<li>
<p>public boolean equalsIgnoreCase(String str)</p>
<ul>
<li>忽略大小写，直接比较内容</li>
</ul>
</li>
<li>
<p>public char charAt（int index）</p>
<ul>
<li>返回指定索引处的字符</li>
</ul>
</li>
<li>
<p>public boolean endsWith（String str）</p>
<ul>
<li>判断字符串是否以制定后缀结尾</li>
</ul>
</li>
<li>
<p>public boolean startsWith（String str）</p>
<ul>
<li>判断字符串是否以指定前缀开头</li>
</ul>
</li>
<li>
<p>public boolean contains(CharSequence s)</p>
<ul>
<li>当且仅当此字符串包含指定的char值序列时才返回true</li>
<li>CharSequence是一个接口，String，StringBuilder，StringBuffer均是此接口的实现</li>
</ul>
</li>
<li>
<p>public byte[ ] getBytes（）</p>
<ul>
<li>使用默认字符集编码将字符串编码为字节数组</li>
</ul>
</li>
<li>
<p>public byte[ ] getBytes（Charset charset）</p>
<ul>
<li>使用给定编码将字符串编码为字节数组</li>
</ul>
</li>
<li>
<p>public int indexOf（String str）</p>
<ul>
<li>返回指定字符串在字符串内第一次出现的索引</li>
</ul>
</li>
<li>
<p>public int indexOf（String str，int fromIndex）</p>
<ul>
<li>返回指定字符串从指定索引处开始在字符串内第一次出现的索引</li>
</ul>
</li>
<li>
<p>public int lastIndexOf（String str）</p>
<ul>
<li>返回指定字符串从在字符串中最后一次出现的位置</li>
</ul>
</li>
<li>
<p>public int lastIndexOf（String str,  int fromIndex）</p>
<ul>
<li>返回指定字符串从指定索引处开始在字符串内最后一次出现的索引</li>
</ul>
</li>
<li>
<p>public boolean isEmpty（）</p>
<ul>
<li>判断字符串是否为空</li>
</ul>
</li>
<li>
<p>public String intern（）</p>
<ul>
<li>返回字符串对象的规范表示</li>
</ul>
</li>
<li>
<p>public int length（）</p>
<ul>
<li>返回该字符串的长度</li>
</ul>
</li>
<li>
<p>public String replace（char oldchar，char newchar）</p>
<ul>
<li>提供被替换的字符，和替换的新字符，返回替换后的字符串结果</li>
</ul>
</li>
<li>
<p>public String replaceAll（String regex，String replacement）</p>
<ul>
<li>提供被替换字符串的正则表达式规则，和替换的字符串，返回替换后的结果</li>
</ul>
</li>
<li>
<p>public String replaceFirst（String regex，String replacement）</p>
<ul>
<li>提供被替换字符串的正则表达式规则，和替换的字符串，只替换第一个满足条件的字符串并返回结果</li>
</ul>
</li>
<li>
<p>public String [ ] split（String regex）</p>
<ul>
<li>提供字符串分割的正则表达式规则，将分割后的结果存入字符串数组并返回</li>
</ul>
</li>
<li>
<p>public String [ ] split（String regex，int limit）</p>
<ul>
<li>提供字符串分割的正则表达式规则，limit控制分割的次数，次数为limit-1，将分割后的结果存入字符串数组并返回</li>
</ul>
<blockquote>
<p><strong>官方解释</strong></p>
<p><code>limit</code> 参数控制模式应用的次数，因此影响所得数组的长度。如果该限制 <em>n</em> 大于 0，则模式将被最多应用 <em>n</em> - 1 次，数组的长度将不会大于 <em>n</em>，而且数组的最后一项将包含所有超出最后匹配的定界符的输入。如果 <em>n</em> 为非正，那么模式将被应用尽可能多的次数，而且数组可以是任何长度。如果 <em>n</em> 为 0，那么模式将被应用尽可能多的次数，数组可以是任何长度，并且结尾空字符串将被丢弃。</p>
</blockquote>
</li>
<li>
<p>public String substring（int beginIndex）</p>
<ul>
<li>提供切割字符串的起始位置，返回切割后的结果，包头不包尾</li>
</ul>
</li>
<li>
<p>public String substring（int beginIndex，int endIndex）</p>
<ul>
<li>提供切割字符串的起始和结束位置，返回切割后的结果，包头不包尾</li>
</ul>
</li>
<li>
<p>public char [ ] toCharArray（）</p>
<ul>
<li>将字符串转为新的字符数组并返回字符数组</li>
</ul>
</li>
<li>
<p>public String toString（）</p>
<ul>
<li>
<p>将字符串转为字符串并返回</p>
<blockquote>
<p>为什么字符串依然有转为字符串的方法，因为java中所有的类都有一个默认的父类Object，toString方法就来自Object</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>public String toLowerCase（）</p>
</li>
<li>
<p>将字符串按照默认语言环境，转小写</p>
</li>
<li>
<p>public String toUpperCase（）</p>
<ul>
<li>将字符串按照默认语言环境，转大写</li>
</ul>
</li>
<li>
<p>public static String valueOf（数据类型 变量名）</p>
<ul>
<li>将任意数据类型转为字符串形式</li>
</ul>
</li>
<li>
<p>public String concat（String str）</p>
</li>
<li>
<p>将指定字符串连接到该字符串末尾</p>
</li>
<li>
<p>public int compareTo（String anotherString）</p>
<ul>
<li>按字典顺序（ASCII码表Unicode码）比较两个字符串
<ul>
<li>一个一个的字符ASCII码依次比较，如果第一个大，直接返回第一个字符码值差值</li>
<li>如果等于返回0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="49-stringbuffer类">49. StringBuffer类</h2>
<h3 id="1-概述-2">1. 概述</h3>
<ul>
<li>
<p>我们对字符串进行拼接的时候，每次都会产生一个新的String对象，耗时又浪费时间，使用StringBuffer可以解决这个问题</p>
</li>
<li>
<p>线程安全，可变的字符序列</p>
</li>
<li>
<p>包：java.lang.StringBuffer</p>
</li>
</ul>
<h3 id="2-构造方法">2. 构造方法</h3>
<ul>
<li>public StringBuffer（）
<ul>
<li>初始化空内容的字符串缓冲区</li>
</ul>
</li>
<li>public StringBuffer（CharSequence seq）
<ul>
<li>初始化指定字符序列的字符串缓冲区</li>
</ul>
</li>
<li>public StringBuffer（int capacity）
<ul>
<li>初始化指定容量的空内容的字符串（容量是理论值，长度是实际值，默认容量16）</li>
</ul>
</li>
<li>public StringBuffer（String str）
<ul>
<li>初始化指定字符串内容的字符串缓冲区</li>
</ul>
</li>
</ul>
<h3 id="3-常用方法-2">3. 常用方法</h3>
<ul>
<li>
<p>append方法</p>
<ul>
<li>public StringBuffer append（boolean b）</li>
<li>public StringBuffer append（char c）</li>
<li>public StringBuffer append（char [ ] str）</li>
<li>public StringBuffer append（char [ ] str，int offset，int len）</li>
<li>public StringBuffer append（CharSequence s）</li>
<li>public StringBuffer append（CharSequence s，int start，int end）</li>
<li>public StringBuffer append（double d）</li>
<li>public StringBuffer append（float f）</li>
<li>public StringBuffer append（int i）</li>
<li>public StringBuffer append（long lng）</li>
<li>public StringBuffer append（Object obj）</li>
<li>public StringBuffer append（String str）</li>
<li>public StringBuffer append（StringBuffer sb）</li>
</ul>
</li>
<li>
<p>insert方法</p>
<ul>
<li>public StringBuffer insert（int offset，boolean b）</li>
<li>public StringBuffer insert（int offset，char c）</li>
<li>public StringBuffer insert（int offset。char [ ] str）</li>
<li>public StringBuffer insert（int index，char [ ] str，int offset，int len）</li>
<li>public StringBuffer insert（int dstOffset，CharSequence s）</li>
<li>public StringBuffer insert（int dstOffset,  CharSequence s, int start,  int end）</li>
<li>public StringBuffer insert（int offset,  double d）</li>
<li>public StringBuffer insert（int offset,  float f）</li>
<li>public StringBuffer insert（int offset,  int i）</li>
<li>public StringBuffer insert（int offset,  long l）</li>
<li>public StringBuffer insert（int offset,  Object obj）</li>
<li>public StringBuffer insert（int offset,  String str）</li>
</ul>
</li>
<li>
<p>indexOf方法</p>
<ul>
<li>public int indexOf（String str）</li>
<li>public int indexOf（String str，int fromIndex）</li>
<li>public int lastIndexOf（String str）</li>
<li>public int lastIndexOf（String str，int fromIndex）</li>
</ul>
</li>
<li>
<p>常用方法</p>
<ul>
<li>
<p>public int length（）：返回当前长度</p>
</li>
<li>
<p>public int capacity（）：返回当前容量</p>
</li>
<li>
<p>public StringBuffer replace（int start，int end，String str）：用一段字符串替换指定位置长度的字符串</p>
</li>
<li>
<p>public StringBuffer reverse（）：反转字符串</p>
</li>
<li>
<p>public String substring（int start）：从指定位置截取字符串</p>
</li>
<li>
<p>public String substring（int start，int end）：截取指定位置长度的字符串</p>
</li>
<li>
<p>public String toString（）：转为字符串</p>
</li>
<li>
<p>public void setCharAt（int index，char ch）：将指定位置字符替换为ch</p>
</li>
<li>
<p>public void setLength（int newLength）：设置长度</p>
</li>
</ul>
</li>
<li>
<p>delete方法</p>
<ul>
<li>public StringBuffer delete（int start，int end）：删除指定位置开始到指定位置结束的字符串并返回结果</li>
<li>public StringBuffer deleteCharAt（int index）：删除指定位置的字符并返回结果</li>
</ul>
</li>
</ul>
<h2 id="50-stringbuilder">50. StringBuilder</h2>
<ul>
<li>
<p>StringBuffer和StringBuilder的区别</p>
<ul>
<li>线程安全：
<ul>
<li>StringBuffer线程安全
<ul>
<li>因为StringBuffer的所有公开方法都是synchronized修饰的</li>
</ul>
</li>
<li>StringBuilder线程不安全</li>
</ul>
</li>
<li>缓冲区：
<ul>
<li>StringBuffer每次获取toString都会直接使用缓冲区的toStringCache值来构造字符串</li>
<li>StringBuilder每次都要复制一次字符数组来构造一个字符串</li>
<li>StringBuffer 对缓存区优化，不过 StringBuffer 的这个toString 方法仍然是同步的（synchronized）</li>
</ul>
</li>
<li>性能：
<ul>
<li>StringBuffer 是线程安全的，它的所有公开方法都是同步的</li>
<li>StringBuilder 是没有对方法加锁同步的，性能高于StringBuffer</li>
</ul>
</li>
</ul>
<blockquote>
<p>StringBuffer 适用于用在多线程操作同一个 StringBuffer 的场景，如果是单线程场合 StringBuilder 更适合</p>
</blockquote>
</li>
</ul>
<h2 id="51-string作为参数">51. String作为参数</h2>
<h3 id="1-形式参数">1. 形式参数</h3>
<ul>
<li>基本类型：形式参数的改变不影响实参</li>
<li>引用类型：形式参数的改变直接影响实际参数</li>
<li>String比较特殊，作为参数传递的时候，效果和基本类型一样</li>
</ul>
<pre><code class="language-java">package com.demo.javase.demo;

/**
 * @author 絷缘
 * @version 1.0
 * @date 2020/11/13 13:58
 **/
public class StringBufferDemo1 {
    public static void main(String[] args) {
        StringBuffer sb1 = new StringBuffer(&quot;hello&quot;);
        StringBuffer sb2 = new StringBuffer(&quot;world&quot;);
        System.out.println(&quot;sb1=&quot;+sb1+&quot;,sb2=&quot;+sb2);
        change(sb1,sb2);
        System.out.println(&quot;sb1=&quot;+sb1+&quot;,sb2=&quot;+sb2);

    }
    public static void change(StringBuffer sb1,StringBuffer sb2){
        sb1 = sb2;
        sb2.append(sb1);
        System.out.println(&quot;sb1=&quot;+sb1+&quot;,sb2=&quot;+sb2);
    }
}
//输出结果为
//sb1=hello,sb2=world
//sb1=worldworld,sb2=worldworld
//sb1=hello,sb2=worldworld

</code></pre>
<h2 id="52-date类">52. Date类</h2>
<ul>
<li>包：java.util.Date</li>
<li>构造方法：
<ul>
<li>public Date（） ：创建一个Date对象，并初始化为当前时间</li>
<li>public Date（int year，int month，int date）：创建一个Date对象，并初始化为指定时间
<ul>
<li>year：指定年份-1900</li>
<li>month：0-11</li>
<li>date：1-31</li>
</ul>
</li>
<li>public Date（int year，int month，int date，int hrs，int min，int sec）
<ul>
<li>year：指定年份-1900</li>
<li>month：0-11</li>
<li>date：1-31</li>
<li>hrs：0-23</li>
<li>min：0-59</li>
<li>sec：0-59</li>
</ul>
</li>
<li>public Date（long date）：使用给定毫秒值创建Date对象</li>
<li>public Date（String s）：使用字符串内容创建Date对象并初始化它</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public String toString（）：格式化日期为YYYY-MM--DD字符串</li>
<li>public static Date valueOf（String s）：将JDBC日期字符串转为Date对象</li>
<li>public int getYear（）：获取年份</li>
<li>public int getMonth（）：获取月份</li>
<li>public int getDate（）：获取日期</li>
<li>public int getDay（）：获取星期几</li>
<li>public int getHours（）：获取时</li>
<li>public int getMinutes（）：获取分</li>
<li>public int getSeconds（）：获取秒</li>
<li>public long getTime（）：获取从1970年开始到现在的毫秒数</li>
<li>public void setYear（int year）：设置年份</li>
<li>public void setMonth（int month）：设置月份</li>
<li>public void setDate（int date）：设置日期</li>
<li>public void setHours（int hours）：设置时</li>
<li>public void setMinutes（int minutes）：设置分</li>
<li>public void setSeconds（int seconds）：设置秒</li>
<li>public void setTime（long time）：设置从1970年开始到现在的毫秒数</li>
</ul>
</li>
</ul>
<h2 id="53-dateformat">53. DateFormat</h2>
<ul>
<li>包：java.text.DateFormat</li>
<li>子类：SimpleDateFormat</li>
<li>构造方法：
<ul>
<li>protected DateFormat（）</li>
</ul>
</li>
<li>成员方法：
<ul>
<li>public String format（Date date）：将日期格式化为日期时间字符串</li>
<li>public Calendar getCalendar（）：将日期时间格式化为日历对象</li>
<li>public TimeZone getTimeZone（）：获取时区</li>
<li>public void setCalendar（Calendar newCalendar）</li>
<li>public void setTimeZone（TimeZone zone）</li>
<li>public Date parse（String source）：将字符串格式化为Date类型</li>
</ul>
</li>
<li>子类
<ul>
<li>构造方法
<ul>
<li>SimpleDateFormat（）</li>
<li>SimpleDateFormat（String pattern）：指定模式创建对象</li>
<li>SimpleDateFormat（String pattern，DateFormatSymbols formatSymbols）</li>
<li>SimpleDateFormat（String pattern，Locale locale）</li>
</ul>
</li>
<li>成员方法
<ul>
<li>public void applyLocalizedPattern（String pattern）</li>
<li>public void applyPattern（String pattern）</li>
<li>public boolean equals（Object obj）</li>
<li>public DateFormatSymbols getDateFormatSymbols（）</li>
<li>public void setDateFormatSymbols（DateFormatSymbols newFormatSymbols）</li>
<li>public StringBuffer format（Date date, StringBuffer toAppendTo, FieldPosition pos）</li>
<li>public Date parse（String text,  ParsePosition pos）</li>
<li>public String toLocalizedPattern（）</li>
<li>public String toPattern（）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="54-calendar类">54. Calendar类</h2>
<ul>
<li>
<p>包：java.util.Calendar</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li>protected Calendar（）：创建日历对象</li>
<li>protected Calendar（TimeZone zone，Locale aLocale）：创建指定时区和区域设置的日历对象</li>
</ul>
</li>
<li>
<p>成员方法：</p>
<ul>
<li>
<p>public abstract void add（int field,  int amount）：为指定字段添加值</p>
<ul>
<li>Calendar.YEAR</li>
<li>Calendar.MONTH</li>
<li>Calendar.DATE</li>
<li>Calendar.HOUR</li>
<li>Calendar.MINUTE</li>
<li>Calendar.SECOND</li>
</ul>
</li>
<li>
<p>public boolean after（Object when）：判断是否为参数时间之后的时间</p>
</li>
<li>
<p>public boolean before（Object when）：判断是否为参数时间之前的时间</p>
</li>
<li>
<p>public boolean equals（Object obj）：判断两个日期是否相同</p>
</li>
<li>
<p>public String getCalendarType（）：获取Calendar的的日历类型</p>
</li>
<li>
<p>public int get（int field）：获取指定日历字段的值</p>
<ul>
<li>Calendar.YEAR</li>
<li>Calendar.MONTH</li>
<li>Calendar.DATE</li>
<li>Calendar.HOUR</li>
<li>Calendar.MINUTE</li>
<li>Calendar.SECOND</li>
</ul>
</li>
<li>
<p>public void set（int field,  int value）：为指定字段设置值</p>
<ul>
<li>Calendar.YEAR</li>
<li>Calendar.MONTH</li>
<li>Calendar.DATE</li>
<li>Calendar.HOUR</li>
<li>Calendar.MINUTE</li>
<li>Calendar.SECOND</li>
</ul>
</li>
<li>
<p>public static Calendar getInstance（）：使用默认时区获取日历对象</p>
</li>
<li>
<p>public Date getTime（）：获取Date对象</p>
</li>
<li>
<p>public long getTimeInMillis（）：获取当前时间毫秒值</p>
</li>
<li>
<p>public TimeZone getTimeZone（）：获取时区</p>
</li>
<li>
<p>public void set（int year,  int month, int date, int hourOfDay, int minute, int second）：设置字段值</p>
</li>
<li>
<p>public void setTimeZone（TimeZone value）：设置指定时区</p>
</li>
<li>
<p>public void setTime（Date date）：使用Date对象设置日历时间</p>
</li>
<li>
<p>public void setTimeInMillis（long millis）：使用毫秒值设置日历时间</p>
</li>
<li>
<p>public Instant toInstant（）：将日历对象转为Instant对象</p>
<ul>
<li>Instant：在时间线上的瞬间点。</li>
<li>调用了Instant的toString方法，输出此瞬间使用ISO-8601表示形式的字符串表示形式。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="55-获取当前时间">55. 获取当前时间</h2>
<ul>
<li>时间戳</li>
</ul>
<pre><code class="language-java">//方法一：耗时最短
System.currentTimeMillis();
//方法二：耗时最长，效率最低
Calendar.getInstance().getTimeInMillis();
//方法三：耗时第二
new Date().getTime();
</code></pre>
<ul>
<li>时间</li>
</ul>
<pre><code class="language-java">SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);//设置日期格式
String date = df.format(new Date());// new Date()为获取当前系统时间，也可使用当前时间戳
</code></pre>
<h2 id="56-基本类型包装类">56. 基本类型包装类</h2>
<h3 id="1-概述-3">1. 概述</h3>
<ul>
<li>把基本数据类型封装成类类型，然后我们就可以使用类中的方法来处理数据</li>
<li>常用操作：用于基本数据类型和字符串之间的转换</li>
</ul>
<h3 id="2-包装类">2. 包装类</h3>
<ul>
<li>基本类型：byte short int long float double char boolean</li>
<li>包装类类型：Byte Short Integer Long Float Double Character Boolean</li>
</ul>
<h3 id="3-integer">3. Integer</h3>
<ul>
<li>
<p>包：java.lang.Integer</p>
</li>
<li>
<p>字段</p>
<ul>
<li>BYTES：int型字节数4</li>
<li>MAX_VALUE：int型最大值（2147483647）</li>
<li>MIN_VALUE：int型最小值（-2147483648）</li>
<li>SIZE：int型二进制位数32</li>
<li>TYPE：类的原始类型为int</li>
</ul>
</li>
<li>
<p>构造方法</p>
<ul>
<li>Integer(int value)：将int类型装箱为Integer类型</li>
<li>Integer(String s)：将数字字符串装箱为Integer类型</li>
</ul>
</li>
<li>
<p>常用方法</p>
<ul>
<li>public static int compare（int x，int y）：比较两个int数字值</li>
<li>public int compareTo（Integer anotherInteger）：比较两个Integer对象</li>
<li>public static int compareUnsigned（int x，int y） ：忽略符号比较两个int数字值</li>
<li>public static Integer decode（String nm）：将String解码为Integer</li>
<li>public boolean equals（Object obj）：与指定对象进行比较</li>
<li>public int intValue（）：将Integer转为int</li>
<li>public static int parseInt（Stirng s）：将字符串参数解析为（有符号）十进制整数</li>
<li>public static String toBinaryString（int i）：将int型转换为二进制字符串</li>
<li>public static String toHexString（int i）：将int型转换为十六进制字符串</li>
<li>public static String toOctalString（int i）：将int型转换为八进制字符串</li>
<li>public String toString（）：转为字符串</li>
<li>public static String toString（int i）：把int转为String</li>
<li>public static String toString（int i，int radix）：把int转为指定进制字符串，radix为基数</li>
<li>public static Integer valueOf（int i）：将int类型转为Integer对象</li>
<li>public static Integer valueOf（String s）：将数字字符串转为Integer对象</li>
</ul>
</li>
</ul>
<blockquote>
<p>最大进制为36进制：0-9，A-Z</p>
</blockquote>
<h3 id="4-自动拆箱装箱">4. 自动拆箱装箱</h3>
<blockquote>
<p>从JDK1.5+，支持自动装箱（基本数据类型 -&gt; 包装类型），支持自动拆箱（包装类型 -&gt; 基本数据类型）</p>
</blockquote>
<pre><code class="language-java">Integer it = new Integer(555);
		||
Integer it = 555; 	//自动装箱：把基本数据类型自动装换为包装类类型

it = it + 666;		//自动拆箱：把包装类类型自动转换为基本数据类型

//如果it为null，会报NullPointerException异常
Integer it2 = null;
it2 += 10;
</code></pre>
<h3 id="5-character">5. Character</h3>
<ul>
<li>字段</li>
<li>构造方法
<ul>
<li>public Character（char value）：将char类型装箱成Character</li>
</ul>
</li>
<li>成员方法
<ul>
<li>public char charValue（）：返回Character的值</li>
<li>public static int compare（char x，char y）：比较两个char值</li>
<li>public int compareTo（Charater anotherCharacter）：比较两个Character对象</li>
<li>public boolean equals（Object obj）：比较两个Character对象</li>
<li>public static boolean isDigit（char ch）：确定字符是否是数字</li>
<li>public static boolean isLetter（char ch）：确定字符是否为一个字母</li>
<li>public static boolean isLetterOrDigit（char ch）：确定指定字符是字母还是数字</li>
<li>public static boolean isLowerCase（char ch）：确定字符是否为小写字符</li>
<li>public static boolean isUpperCase（char ch）：确定字符是否为大写字符</li>
<li>public static boolean isSpaceChar（char ch）：确定字符是否为空格字符</li>
<li>public static boolean isWhitespace（char ch）：确定字符是否为空格字符</li>
<li>public static char toLowerCase（char ch）：字符转小写</li>
<li>public static char toUpperCase（cahr ch）：字符转大写</li>
<li>public String toString（）</li>
<li>public static Character valueOf（char c）：将char装箱为Character对象</li>
</ul>
</li>
</ul>
<h3 id="6-boolean">6. Boolean</h3>
<ul>
<li>成员变量
<ul>
<li>FALSE</li>
<li>TRUE</li>
<li>TYPE</li>
</ul>
</li>
<li>构造方法
<ul>
<li>public Boolean（boolean value）：只能是true和false</li>
<li>public Boolean（String s）：只有字符串为true时，为true，其它都为false</li>
</ul>
</li>
<li>成员方法
<ul>
<li>public boolean booleanValue（）：将Boolean拆箱为boolean类型</li>
<li>public static int compareTo（Boolean b）：比较两个Boolean类型</li>
<li>public boolean equals（Object obj）：比较boolean的值是否相等</li>
<li>public static boolean parseBoolean（String s）：将字符串转为boolean值</li>
<li>public static Boolean valueOf（boolean b）：将boolean装箱为Boolean类型</li>
<li>public static Boolean valueOf（String s）：将字符串转为Boolean类型</li>
</ul>
</li>
</ul>
<h3 id="7-double">7. Double</h3>
<ul>
<li>包：java.lang.Double</li>
<li>字段
<ul>
<li>BYTES：用于表示double型字节数</li>
<li>MAX_VALUE：最大正有限值</li>
<li>MIN_VALUE：最小的非零有限值</li>
<li>NaN：Not a Number</li>
<li>SIZE：double所占位数</li>
<li>TYPE：返回类型</li>
</ul>
</li>
<li>构造方法
<ul>
<li>public Double（double value）：将double类型变量装箱为Double类型对象</li>
<li>public Double（String s）：通过字符串的值创建一个Double对象</li>
</ul>
</li>
<li>成员方法
<ul>
<li>public byte byteValue（）：将Double对象拆箱为byte类型</li>
<li>public int compareTo（Double anotherDouble）：比较两个Double对象</li>
<li>public double doubleValue（）：将Double对象拆箱为double对象</li>
<li>public boolean equals（Object obj）：比较两个对象的值</li>
<li>public float floatValue（）：将Double对象拆箱为float类型</li>
<li>public int intValue（）：返回Double对象的int值</li>
<li>public boolean isNaN（）：判断是否为非数字</li>
<li>public static double parseDouble（Stirng s）：将String转为double型</li>
<li>public short shortValue（）：返回Double对象的short值</li>
<li>public static String toHexString（double d）：返回double类型的十六进制字符串</li>
<li>public static Double valueOf（double d）：将double 装箱为Double对象</li>
<li>public static Double valueOf（String s）：将字符串转为Double对象</li>
</ul>
</li>
</ul>
<h2 id="57-正则表达式">57. 正则表达式</h2>
<h3 id="1-概述-4">1. 概述</h3>
<ul>
<li>是一种用来描述匹配特定规则文本的字符串</li>
</ul>
<h3 id="2-正则表达式的规则">2. 正则表达式的规则</h3>
<ul>
<li>本处仅描述常用规则，其他详见 “正则表达式.md”
<ul>
<li>普通字符
<ul>
<li>a，b，c.......</li>
<li>0，1，2.......</li>
</ul>
</li>
<li>转义字符
<ul>
<li>\r：回车符</li>
<li>\n：换行符</li>
<li>\s：任意空字符</li>
<li>\t：制表符</li>
<li>\f：换页符</li>
</ul>
</li>
<li>预定义字符
<ul>
<li>点：任意字符</li>
<li>\d：所有数字</li>
<li>\D：非数字</li>
<li>\b：单词边界</li>
<li>\B：非单词边界</li>
<li>\w：单词字符</li>
<li>\W：非单词字符</li>
</ul>
</li>
<li>字符类
<ul>
<li>[abc]：a或b或c</li>
<li>[^abc]：除了a，b，c</li>
<li>[a-zA-Z]：所有大小写字母</li>
<li>[0-9]：0到9所有数字</li>
</ul>
</li>
<li>边界匹配器
<ul>
<li>^：行的开头</li>
<li>$：行的结尾</li>
</ul>
</li>
<li>数量词
<ul>
<li>？：一次或零次</li>
<li>*：零次或多次</li>
<li>+：一次或多次</li>
<li>{n}：出现n次</li>
<li>{n,m}：出现n到m次</li>
<li>{n,}：至少出现n次</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-正则表达式的应用">3. 正则表达式的应用</h3>
<ul>
<li>判断
<ul>
<li>public boolean  matches（String regex）</li>
</ul>
</li>
<li>分割
<ul>
<li>public String [ ] split（String regex）</li>
</ul>
</li>
<li>替换
<ul>
<li>public String replaceAll（String regex，String replacement）</li>
</ul>
</li>
<li>获取
<ul>
<li>Pattern类和Matcher类</li>
</ul>
</li>
</ul>
<pre><code class="language-java">//将正则表达式编译为模式对象
Pattern p = compile(&quot;\\d+&quot;);
//通过模式对象获取匹配器对象
Matcher m = p.matcher(&quot;zhiyuandnc666&quot;);
//调用匹配器的功能
boolean b = m.matches();
boolean b2 = m.lookingAt();
System.out.println(b);
System.out.println(b2);
System.out.println(b3); 
//返回结果
//false
//false
//true
</code></pre>
<pre><code class="language-java">String str = &quot;momo is a da shuai ge,zhen de shi yi ge da shuai ge,da shuai ge,shuai ge.&quot;;
Pattern p2 = Pattern.compile(&quot;\\b\\w{3}\\b&quot;);
Matcher m2 = p2.matcher(str);
while(m2.find()){
	String group = m2.group();
	System.out.println(group);
}
</code></pre>
<h2 id="58-biginteger">58. BigInteger</h2>
<ul>
<li>
<p>包：java.math.BigInteger</p>
</li>
<li>
<p>字段</p>
<ul>
<li>ONE：常数一</li>
<li>TEN：常数十</li>
<li>ZERO：常数零</li>
</ul>
</li>
<li>
<p>构造方法</p>
<ul>
<li>public BigInteger（byte [ ] val）</li>
<li>public BigInteger（int signum，byte [ ] magnitude）</li>
<li>public BigInteger（String val）</li>
</ul>
</li>
<li>
<p>成员方法</p>
<ul>
<li>
<p>public BigInteger add（BigInteger val）：加法运算</p>
</li>
<li>
<p>public BigInteger subtract（BigInteger val）：减法运算</p>
</li>
<li>
<p>public BigInteger divide（BigInteger val）：除法运算</p>
</li>
<li>
<p>public BigInteger multiply（BigInteger val）：乘法运算</p>
</li>
<li>
<p>public BigInteger remainder（BigInteger val）：取余运算</p>
</li>
<li>
<p>public BigInteger pow（int exponent）：次方运算</p>
</li>
<li>
<p>public BigInteger [ ] divideAndRemainder（BigInteger val）：返回包含商和余数的BigInteger数组</p>
</li>
<li>
<p>public int intValue（）：转为int</p>
</li>
</ul>
</li>
</ul>
<h2 id="59-bigdecimal">59. BigDecimal</h2>
<ul>
<li>
<p>浮点型数据操作容易损失精度</p>
<pre><code class="language-java">System.out.println(0.01+0.09);
System.out.println(0.08+0.02);
System.out.println(1.0-0.33);
System.out.println(1.015*100);
System.out.println(1.211/100);
//输出结果
0.09999999999999999
0.1
0.6699999999999999
101.49999999999999
0.012110000000000001
</code></pre>
<blockquote>
<p>因为浮点型的存储形式参考：https://blog.csdn.net/u014470361/article/details/79820892，导致超过16位的浮点数的精度丢失，我们需要更精确的结果，所以出现了BigDecimal类型，用于对超过16位有效位浮点数进行精确运算</p>
</blockquote>
</li>
<li>
<p>包：java.math.BigDecimal</p>
</li>
<li>
<p>字段：</p>
</li>
<li>
<p>构造方法</p>
<ul>
<li>
<p>BigDecimal(int)</p>
<p>创建一个具有参数所指定整数值的对象</p>
</li>
<li>
<p>BigDecimal(double)</p>
<p>创建一个具有参数所指定双精度值的对象</p>
</li>
<li>
<p>BigDecimal(long)</p>
<p>创建一个具有参数所指定长整数值的对象</p>
</li>
<li>
<p>BigDecimal(String)</p>
<p>创建一个具有参数所指定以字符串表示的数值的对象</p>
</li>
</ul>
</li>
<li>
<p>成员方法</p>
<ul>
<li>
<p>add(BigDecimal)</p>
<p>BigDecimal对象中的值相加，返回BigDecimal对象</p>
</li>
<li>
<p>subtract(BigDecimal)</p>
<p>BigDecimal对象中的值相减，返回BigDecimal对象</p>
</li>
<li>
<p>multiply(BigDecimal)</p>
<p>BigDecimal对象中的值相乘，返回BigDecimal对象</p>
</li>
<li>
<p>divide(BigDecimal)</p>
<p>BigDecimal对象中的值相除，返回BigDecimal对象</p>
</li>
<li>
<p>toString()</p>
<p>将BigDecimal对象中的值转换成字符串</p>
</li>
<li>
<p>doubleValue()</p>
<p>将BigDecimal对象中的值转换成双精度数</p>
</li>
<li>
<p>floatValue()</p>
<p>将BigDecimal对象中的值转换成单精度数</p>
</li>
<li>
<p>longValue()</p>
<p>将BigDecimal对象中的值转换成长整数</p>
</li>
<li>
<p>intValue()</p>
<p>将BigDecimal对象中的值转换成整数</p>
</li>
</ul>
</li>
</ul>
<h2 id="60-stringtokenizer">60. StringTokenizer</h2>
<ul>
<li>包：java.util.StringTokenizer</li>
<li>构造方法：
<ul>
<li>public StringTokenizer（String str）</li>
<li>public StringTokenizer（String str，String delim）
<ul>
<li>str：字符串</li>
<li>delim：分隔符</li>
</ul>
</li>
<li>public StringTokenizer（String str，String delim，boolean returDelims）
<ul>
<li>str：字符串</li>
<li>delim：分隔符</li>
<li>returnDelims：是否返回分隔符</li>
</ul>
</li>
</ul>
</li>
<li>成员方法
<ul>
<li>public int countTokens（）：统计分隔符出现的次数</li>
<li>public boolean hasMoreElements（）：判断字符串中是否存在下一个元素</li>
<li>public Object nextElement（）：获取字符串中的下一个元素</li>
</ul>
</li>
</ul>
<h2 id="61-集合">61. 集合</h2>
<ul>
<li>
<p>概述：集合就是java中用来存储多个不同引用类型的对象的容器</p>
</li>
<li>
<p>数组和集合的区别</p>
<ul>
<li>数组长度固定，既可以存储普通类型，也可以存储引用类型，但是只能存一种数据类型</li>
<li>集合长度可变，只能存储引用类型，但是可以存储不同引用类型</li>
</ul>
</li>
<li>
<p>集合特点</p>
<ul>
<li>智能存储对象，集合长度是可变的，集合可以存储不同类型的对象</li>
</ul>
</li>
<li>
<p>集合框架</p>
<figure data-type="image" tabindex="16"><img src="http://pic.zyblog.xyz/img/typora/20201118161923.gif" alt="集合" loading="lazy"></figure>
</li>
</ul>
<figure data-type="image" tabindex="17"><img src="http://pic.zyblog.xyz/img/typora/20201118162323.jpeg" alt="Collection" loading="lazy"></figure>
<figure data-type="image" tabindex="18"><img src="http://pic.zyblog.xyz/img/typora/20201118162352.png" alt="Map" loading="lazy"></figure>
<h3 id="一-collection集合顶层接口">一. Collection集合（顶层接口）</h3>
<ul>
<li>
<p>包：java.util.Collection</p>
</li>
<li>
<p>Collection集合层次结构中的顶层接口</p>
</li>
<li>
<p>常用方法</p>
<ul>
<li>public boolean add（E e）：将指定元素加入集合</li>
<li>public boolean addAll （Collection&lt;? extends E&gt;）：将指定集合所有元素加入集合</li>
<li>public void clear（）：删除集合中所有元素</li>
<li>public boolean contains（Object o）：判断集合中是否存在指定元素</li>
<li>public boolean containsAll（Collection&lt;?&gt; c）：判断集合中是否存在指定集合所有元素</li>
<li>public boolean equals（Object o）：比较指定对象与集合是否相等</li>
<li>public int hashCode（）：返回此集合的哈希码值</li>
<li>public boolean isEmpty（）：判断集合是否为空</li>
<li>public Iterator<E> iterator（）：返回集合的元素迭代器</li>
<li>public boolean remove（Object o）：从集合中移除指定元素</li>
<li>public boolean removeAll（Collection&lt;?&gt; c）：从集合中移除指定集合中所有元素</li>
<li>public boolean retainAll（Collection&lt;?&gt; c）：仅保留集合中指定集合的所有元素，返回原集合是否被修改
<ul>
<li>原集合如果没有指定集合中的元素，原集合置空</li>
<li>如果两个集合元素相同，原集合保持不变</li>
<li>如果原集合包含指定集合元素，则保留两者交集</li>
</ul>
</li>
<li>public int size（）：返回集合的元素个数</li>
<li>public Object[ ] toArray（）：将集合转为数组</li>
</ul>
</li>
<li>
<p>Collection集合框架</p>
</li>
</ul>
<figure data-type="image" tabindex="19"><img src="http://pic.zyblog.xyz/img/typora/20201118210316.png" alt="img" loading="lazy"></figure>
<h4 id="1-list接口继承自collection接口jdk12列表">1. List接口（继承自Collection接口，JDK1.2）【列表】</h4>
<ul>
<li>
<p>包：java.util.List</p>
</li>
<li>
<p>List接口继承自Collection接口</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>有序的集合（存储和取出元素顺序相同）</li>
<li>允许存储重复的元素</li>
<li>有索引，可以使用for循环直接遍历（这也是有序的一个表现）</li>
</ul>
</li>
<li>
<p>实现类：</p>
<ul>
<li>ArrayList
<ul>
<li>结构是数组，查询快，增删慢：线程不安全，效率高</li>
</ul>
</li>
<li>LinkedList
<ul>
<li>结构是链表，查询慢，增删快：线程不安全，效率高</li>
</ul>
</li>
<li>Vector
<ul>
<li>结构是数组，查询快，增删慢：线程安全，效率低</li>
<li>Stack</li>
</ul>
</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public void add（int index，E element）：将指定元素加入到集合指定索引处</li>
<li>public boolean addAll（int index，Collection&lt;? extends E&gt; c）：将指定集合从指定索引处加入集合</li>
<li>public E get（int index）：获取集合中指定索引处元素值</li>
<li>public int indexOf（Object o）：指定元素在集合中第一次出现的索引值</li>
<li>public int lastIndexOf（Object o）：指定元素在集合中最后一次出现的索引值</li>
<li>public ListIterator<E> listIterator（）</li>
<li>public ListIterator<E> listIterator（int index）</li>
<li>public E remove（int index）：移除集合中指定索引的元素</li>
<li>public boolean remove（Object o）：移除集合中指定元素</li>
<li>public boolean removeAll（Collection&lt;?&gt; c）：从集合中移除指定集合中的内容</li>
<li>public E set（int index，E element）：设置集合中指定索引处元素值</li>
<li>public int size（）：获取集合元素个数</li>
<li>public Object[ ] toArray（）：将集合转为Object数组</li>
<li>public List<E> subList（int fromIndex，int toIndex）：从集合中取出一段集合</li>
</ul>
</li>
</ul>
<h4 id="2-set接口继承自collection接口jdk12集合">2. Set接口（继承自Collection接口，JDK1.2）【集合】</h4>
<ul>
<li>包：java.util.Set</li>
<li>Set接口继承自Collection接口</li>
<li>特点：
<ul>
<li>无序的集合</li>
<li>不允许有重复的元素</li>
<li>没有索引，无法用for循环直接遍历，需要迭代器（这也是无序的一个表现）</li>
</ul>
</li>
<li>实现类：
<ul>
<li>TreeSet</li>
<li>HashSet
<ul>
<li>LinkedHashSet</li>
</ul>
</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public boolean add（E e）：若指定元素在集合中不存在，则加入集合</li>
<li>public boolean addAll（Collection &lt;? extends E&gt; c）：若指定集合中的元素在集合中不存在，则加入集合</li>
<li>public void clear（）：删除集合中所有元素</li>
<li>public boolean contains（Object o）：判断集合中是否包含指定元素</li>
<li>public boolean containsAll（Collection&lt;? extends E&gt; c）：判断集合中是否包含制定集合中的所有元素</li>
<li>public boolean equals（Object o）：比较两个集合是否相等</li>
<li>public boolean isEmpty（）：判断集合是否为空</li>
<li>public Iterator<E> iterator（）：返回集合元素迭代器</li>
<li>public boolean remove（Object o）：从集合中删除指定元素</li>
<li>public boolean removeAll（Collection&lt;? extends E&gt; c）：从集合中删除指定集合中包含的所有元素</li>
<li>public boolean retainAll（Collection&lt;? extends E&gt; c）：取交集</li>
<li>public int size（）：返回集合中元素的个数</li>
<li>public Object[ ] toArray（）：返回集合对象数组</li>
<li>public <T> T[ ] toArray（T [ ] a）：返回指定类型的集合对象数组</li>
</ul>
</li>
</ul>
<h4 id="3-queue接口继承自collection接口jdk15队列">3. Queue接口（继承自Collection接口，JDK1.5）【队列】</h4>
<ul>
<li>Queue接口继承自Collection接口</li>
<li>注意事项：
<ul>
<li>Queue使用时要尽量避免Collection的add()和remove()方法，而是要使用offer()来加入元素，使用poll()来获取并移出元素，它们的优点是通过返回值可以判断是否成功，add()和remove()方法在失败的时候会抛出异常</li>
<li>LinkedList类实现了Queue接口，因此我们可以把LinkedList当成Queue来用</li>
</ul>
</li>
<li>特点：
<ul>
<li>先进先出，先添加的元素，最先被删除</li>
<li>队列是一种特殊的线性表，他只允许在表的前端删除元素，在表的后端插入元素</li>
</ul>
</li>
<li>实现类：
<ul>
<li>ArrayDeque</li>
<li>PriorityQueue</li>
</ul>
</li>
<li>Queue集合框架</li>
</ul>
<figure data-type="image" tabindex="20"><img src="http://pic.zyblog.xyz/img/typora/20201118212911.jpeg" alt="img" loading="lazy"></figure>
<blockquote>
<p>（1）. Deque接口（继承自Queue接口）【双端队列】</p>
<ul>
<li>Deque接口继承自Queue接口，同时具有队列和栈的功能</li>
<li>实现类
<ul>
<li>LinkedList：使用双向链表</li>
<li>ArrayDeque：使用循环数组实现双向队列</li>
</ul>
</li>
</ul>
<p>（2）. AbstractQueue类（实现自Queue接口）</p>
<ul>
<li>子类
<ul>
<li>PriorityQueue：优先队列，使用数组实现堆的结构，线程不安全</li>
<li>PriorityBlockingQueue：优先阻塞队列，使用ReentrantLock锁来保持同步，线程安全</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="二-map集合顶层接口">二. Map集合（顶层接口）</h3>
<ul>
<li>包：java.util.Map</li>
<li>Map集合层次接口中的顶层接口</li>
<li>常用方法：
<ul>
<li>public void clear（）：删除Map集合中所有元素</li>
<li>public boolean containsKey（Object key）：判断集合中是否包含指定键</li>
<li>public boolean containsValue（Object value）：判断集合中是否包含指定值</li>
<li>public boolean equals（Object o）：判断集合是否相同</li>
<li>public boolean isEmpty（）：判断集合是否为空</li>
<li>public V get（Object key）：获取指定键对应的值</li>
<li>public Set<K> keySet（）：获取Map集合中键的Set集合</li>
<li>public Set&lt;Map.Entry&lt;K，V&gt;&gt; entrySet（）：获取Map集合映射关系的Set集合</li>
<li>public V put（K key，V value）：将指定键值对加入Map集合</li>
<li>public void putAll（Map&lt;? extends K，? extends V&gt; m）：将指定集合中的所有映射加入到当前集合</li>
<li>public int size（）：返回Map集合中映射数量</li>
<li>public Collection<V> values（）：获取Map集合中值的Collection集合</li>
</ul>
</li>
<li>Map集合框架</li>
</ul>
<figure data-type="image" tabindex="21"><img src="http://pic.zyblog.xyz/img/typora/20201118213122.png" alt="img" loading="lazy"></figure>
<h3 id="三-iterator迭代器">三. Iterator迭代器</h3>
<ul>
<li>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</li>
<li>包：java.util.Iterator</li>
<li>获取迭代器对象的方式
<ul>
<li>iterator（）</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>next（）：获取集合中的下一个元素</li>
<li>hasNext（）：判断集合中是否存在下一个元素</li>
<li>remove（）：删除迭代器已迭代元素</li>
</ul>
</li>
</ul>
<pre><code class="language-java"> public static void main(String[] args) {
        Collection c = new ArrayList();
        c.add(&quot;String&quot;);
        c.add(123);
        c.add(true);
        c.add('a');
        c.add(12.0);
        System.out.println(c);
        Iterator it = c.iterator();
        while(it.hasNext()){
            System.out.println(it.next());
        }
        for(;it.hasNext();){
            System.out.println(it.next());
        }
    }
</code></pre>
<h3 id="四-spliterator接口jdk18">四. Spliterator接口（JDK1.8）</h3>
<ul>
<li>包：java.util.Spliterator
<ul>
<li>Spliterator是Java 8中加入的一个新接口；这个名字代表“可拆分迭代器”（splitable iterator）。</li>
<li>和Iterator一样，Spliterator也用于遍历数据源中的元素，但它是为了并行执行而设计的。</li>
<li>Java 8已经为集合框架中包含的所有数据结构提供了一个默认的Spliterator实现。</li>
<li>集合实现了Spliterator接口，接口提供了一个spliterator方法。</li>
</ul>
</li>
<li>获取迭代器对象的方法：
<ul>
<li>spliterator（）</li>
</ul>
</li>
</ul>
<h3 id="五-listiterator接口jdk12">五. ListIterator接口（JDK1.2）</h3>
<ul>
<li>包：java.util.ListIterator</li>
<li>常用方法：
<ul>
<li>public void add（E e）</li>
<li>public boolean hasNext（）</li>
<li>public boolean hasPrevious（）</li>
<li>public E next（）</li>
<li>public int nextIndex（）</li>
<li>public E previous（）</li>
<li>public int previousIndex（）</li>
<li>public void remove（）</li>
<li>public void set（E e）</li>
</ul>
</li>
</ul>
<h2 id="62-arraylist可变数组">62. ArrayList可变数组</h2>
<ul>
<li>数组的长度不可以发生改变</li>
<li>ArrayList的长度可以发生改变</li>
<li>包：java.util.ArrayList</li>
<li>构造方法：
<ul>
<li>ArrayList（）：构造一个初始容量为10的空列表</li>
<li>ArrayList（Collection&lt;? extends E&gt; c）：构造一个包含指定集合的元素列表</li>
<li>ArrayList（int initialCapacity）：构造具有初始容量的空列表</li>
</ul>
</li>
</ul>
<blockquote>
<p>ArrayList<E></p>
<p><E>代表泛型</p>
<p>泛型：也就是装在集合中的所有元素属于什么类型，注意泛型只能是引用类型，不能是基本类型</p>
</blockquote>
<h3 id="1-格式">1. 格式：</h3>
<pre><code class="language-java">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
</code></pre>
<blockquote>
<p>ArrayList<String> list = new ArrayList<String>();</p>
<p>从JDK1.8开始，右侧尖括号内部可以不写内容，默认与左边相同，JDK1.8之前需要写明内容，但是建议写上</p>
</blockquote>
<ul>
<li>注意事项：
<ul>
<li>对于ArrayList集合来说，直接打印得到的不是地址值，而是内容，如果内容为空，得到的是空的中括号</li>
</ul>
</li>
</ul>
<h3 id="2-向集合中添加一些数据需要用到add方法">2. 向集合中添加一些数据，需要用到add方法</h3>
<pre><code class="language-java">list.add(&quot;赵丽颖&quot;);
list.add(&quot;古力娜扎&quot;);
list.add(&quot;迪丽热巴&quot;);
list.add(&quot;胡歌&quot;);
System.out.println(list);
</code></pre>
<ul>
<li>注意事项：
<ul>
<li>添加的数据类型必须为创建ArrayList集合时使用的类型，否则为错误写法</li>
</ul>
</li>
</ul>
<h3 id="3-常用方法-3">3. 常用方法</h3>
<ul>
<li>public boolean add（E e）：向列表中添加元素，参数类型和创建列表时的泛型一致，返回值为添加是否成功</li>
<li>public E get（int index）：从列表中获取元素，参数是索引编号，返回值就是对应位置的元素</li>
<li>public E set（int index，E element）：为列表中指定位置的元素设置值</li>
<li>public E remove（int index）：从列表当中删除元素，参数是索引编号，返回值就是被删除的元素</li>
<li>public int size（）：获取列表的尺寸，返回值是集合中元素的个数</li>
<li>public void clear（）：从列表中删除所有元素</li>
<li>public boolean addAll（Collection<E> c）：将指定集合的内容（按迭代器返回的顺序）追加到列表的末尾</li>
<li>public boolean contains（Object o）：如果列表中包含指定元素，则返回true</li>
<li>public int indexOf（Object o）：返回此列表指定元素第一次出现的位置，如果不存在，返回-1</li>
<li>public int lastIndexOf（Object o）：返回此列表指定元素最后一次出现的位置，如果不存在，则返回-1</li>
<li>public boolean isEmpty（）：判断列表是否为空</li>
<li>public Object [ ] toArray（）：将列表转为数组</li>
<li>public void trimToSize（）：将列表的容量修改为列表当前大小</li>
</ul>
<h3 id="4-遍历arraylist集合">4. 遍历ArrayList集合</h3>
<pre><code class="language-java">for(int i = 0;i &lt; list.size();i++){
    System.out.println(list.get(i));
}
</code></pre>
<h3 id="5-arraylist存储基本数据类型">5. ArrayList存储基本数据类型</h3>
<ul>
<li>如果希望ArrayList当中存储基本数据类型，就必须使用基本数据类型的 “包装类”</li>
</ul>
<blockquote>
<p>包装类：是引用类型，包装类都位于java.lang包下</p>
<p>基本数据类型						包装类</p>
<p>byte											  Byte</p>
<p>short											Short</p>
<p>int												 Integer</p>
<p>long											  Long</p>
<p>float											  Float</p>
<p>double 										Double</p>
<p>char											  Character</p>
<p>boolean									  Boolean</p>
<p>从JDK1.5+，支持自动装箱（基本数据类型 -&gt; 包装类型），支持自动拆箱（包装类型 -&gt; 基本数据类型）</p>
</blockquote>
<ul>
<li>定义格式</li>
</ul>
<pre><code class="language-java">ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
</code></pre>
<h3 id="6-arraylist的遍历三种">6. ArrayList的遍历(三种)</h3>
<pre><code class="language-java">import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class ArrayListDemo {
    public static void main(String args[]){
        List&lt;String&gt; list = new ArrayList&lt;String&gt;();
        list.add(&quot;鞠婧祎&quot;);
        list.add(&quot;佟丽娅&quot;);
        list.add(&quot;迪丽热巴&quot;);
        //方法一：Iterator（迭代器）遍历
        Iterator it1 = list.iterator();
        while(it1.hasNext()){
            System.out.println(it1.next());
        }
        for(Iterator it2;it2.hasNext();){
            System.out.println(it2.next());
        }
        //方法二：foreach遍历
        for(String li:list){
            System.out.println(li);
        }
        //方法三：for循环遍历
        for(int i = 0;i &lt; list.size();i++){
            System.out.println(list.get(i));
        }
    }    
</code></pre>
<h2 id="63-linkedlist">63. LinkedList</h2>
<ul>
<li>包：java.util.LinkedList</li>
<li>构造方法：
<ul>
<li>LinkedList（）：构造一个空链表</li>
<li>LinkedList（Collection&lt;? extends E&gt; c）：构造一个包含指定集合的空链表</li>
</ul>
</li>
</ul>
<h4 id="1-格式-2">1. 格式：</h4>
<pre><code class="language-java">LinkedList&lt;Student&gt; list = new LinkedList&lt;Student&gt;();
</code></pre>
<h4 id="2-常用方法">2. 常用方法：</h4>
<ul>
<li>public boolean add（E e）：将指定元素追加到集合末尾</li>
<li>public void add（int index，E element）：在集合中指定位置插入指定元素</li>
<li>public boolean addAll（Collection&lt;? extends E&gt; c）：将指定集合内容加入到集合末尾</li>
<li>public boolean addAll（int index，Collection&lt;? extends E&gt; c）：将指定集合内容从指定位置加入到集合</li>
<li>public void addFirst（E e）：在集合首部加入指定元素</li>
<li>public void addLast（E e）：在集合末尾加入指定元素</li>
<li>public void clear（）：删除集合中所有元素</li>
<li>public boolean contains（Object o）：判断集合中是否包含指定元素</li>
<li>public E element（）：</li>
<li>public E get（int index）：获取集合中指定位置的元素</li>
<li>public E getFirst（）：返回集合中第一个元素</li>
<li>public E getLast（）：返回集合中最后一个元素</li>
<li>public int indexOf（Object o）：返回指定元素在集合中第一次出现的位置</li>
<li>public int lastIndexOf（Object o）：返回指定元素在集合中最后一个出现的位置</li>
<li>public ListIterator<E> listIterator（int index）：获取迭代器</li>
<li>public boolean offer（E e）：将指定元素添加到集合的尾部</li>
<li>public boolean offerFirst（E e）：将指定元素添加到集合的首部</li>
<li>public boolean offerLast（E e）：将指定元素添加到集合的尾部</li>
<li>public E element（）：检索但不删除链表的头部（第一个元素）</li>
<li>public E peek（）：检索但不删除链表的头部（第一个元素）</li>
<li>public E peekFirst（）：检索但不删除链表的第一个元素，如果链表为空，返回null</li>
<li>public E peekLast（）：检索但不删除链表的最后一个元素，如果链表为空，返回null</li>
<li>public E poll（）：检索并删除链表的头（第一个元素）</li>
<li>public E pollFirst（）：检索并删除链表的第一个元素，如果链表为空，返回null</li>
<li>public E pollLast（）：检索并删除链表的最后一个元素，如果链表为空，返回null</li>
<li>public E pop（）：</li>
<li>public void push（E e）：</li>
<li>public E remove（）：检索并删除链表的头（第一个元素）</li>
<li>public E remove（int index）：删除链表中指定位置元素</li>
<li>public E removeFirst（）</li>
<li>public E removeLast（）</li>
<li>public E set（int index，E element）</li>
<li>public int size（）</li>
<li>public Spliterator<E> spliterator（）</li>
<li>public Object[ ] toArray（）</li>
<li>public <T> T[ ] toArray（T[ ] a）</li>
</ul>
<h2 id="64-vector">64. Vector</h2>
<ul>
<li>包：java.util.Vectory</li>
<li>构造方法：
<ul>
<li>Vector（）：构造一个初始容量为10的空集合</li>
<li>Vector（Collection&lt;? extends E&gt; c）：构造一个包含指定集合的集合</li>
<li>Vector（int initialCapacity）：构造一个指定容量的集合</li>
<li>Vector（int initialCapacity，int capacityIncrement）：构造一个指定容量指定增量的集合</li>
</ul>
</li>
</ul>
<h4 id="1-格式-3">1. 格式：</h4>
<pre><code class="language-java">Vector v = new Vector(16,2);
</code></pre>
<h4 id="2-常用方法-2">2. 常用方法：</h4>
<ul>
<li>public boolean add（E e）：将指定元素追加到集合末尾</li>
<li>public void add（int index，E element）：将指定元素插入到集合指定位置</li>
<li>public boolean addAll（Collection&lt;? extends E&gt; c）：将指定集合中所有内容追加到当前集合末尾</li>
<li>public boolean addAll（int index，Collection&lt;? extends E&gt; c）：将指定集合中所有内容插入到集合指定位置</li>
<li>public void addElement（E obj）：将指定组件添加到集合的末尾</li>
<li>public int capacity（）：获取集合容量</li>
<li>public void clear（）：删除集合中所有元素</li>
<li>public boolean contains（Object o）：判断集合中是否包含指定元素</li>
<li>public boolean containsAll（Collection&lt;?&gt; c）：判断集合中是否包含指定集合的所有元素</li>
<li>public void copyInto（Object[ ] anArray）：将集合复制到指定数组中</li>
<li>public E elementAt（int index）：获取指定索引处的元素</li>
<li>public Enumeration<E> elements（）：获取集合的元素枚举</li>
<li>public boolean equals（Object o）：将集合与指定对象比较</li>
<li>public E firstElement（）：返回集合的第一个元素</li>
<li>public void forEach（Consumer&lt;? super E&gt; action）：</li>
<li>public E get（int index）：获取指定位置的元素</li>
<li>public int indexOf（Object o）：返回集合中指定元素第一次出现的索引</li>
<li>public int indexOf（Object o，int index）：返回集合中指定元素从指定位置开始第一次出现的索引</li>
<li>public boolean isEmpty（）：检查集合是否为空</li>
<li>public Iterator<E> iterator（）：迭代器</li>
<li>public E lastElement（）：返回集合中最后一个元素</li>
<li>public int lastIndexOf（Object o）：返回集合中指定元素最后一次出现的索引</li>
<li>public int lastIndexOf（Object o，int index）：返回集合中指定元素从指定位置开始最后一次出现的索引</li>
<li>public ListIterator<E> listIterator（）：获取迭代器</li>
<li>public E remove（int index）：删除集合中指定元素</li>
<li>public boolean removeAll（Collection&lt;?&gt; c）：从集合中删除指定集合的所有元素</li>
<li>public void replaceAll（）</li>
<li>public boolean retainAll（Collection&lt;?&gt; c）：保留两集合的交集</li>
<li>public E set（int index，E element）：设置集合中指定位置的元素值</li>
<li>public void setSize（int newSize）：设置集合容量</li>
<li>public int size（）：获取集合元素个数</li>
<li>public List<E> subList（int fromIndex，int toIndex）：从集合中截取一段集合</li>
<li>public Object [ ] toArray（）：转Object数组</li>
<li>public <T> T [ ] toArray（T [ ] a）：转指定类型数组</li>
<li>public void trimToSize（）：修改容量</li>
</ul>
<h2 id="65-enumerationjavautil中的接口现已被iterator取代与enum没有关系">65. Enumeration：java.util中的接口，现已被Iterator取代，与enum没有关系</h2>
<h2 id="66-泛型">66. 泛型</h2>
<ul>
<li>概述：限定统一存储数据类型的一种特殊类型
<ul>
<li>泛型的实现是靠类型擦除技术 类型擦除是在编译期完成的 也就是在编译期 编译器会将泛型的类型参数都擦除成它的限定类型，如果没有则擦除为object类型之后在获取的时候再强制类型转换为对应的类型。 在运行期间并没有泛型的任何信息，因此也没有优化。</li>
</ul>
</li>
<li>格式：&lt;数据类型&gt;
<ul>
<li>数据类型必须是引用类型</li>
</ul>
</li>
<li>好处：
<ul>
<li>类型参数化，让应用类型像参数一样传递</li>
<li>使运行时异常变为编译时异常，减少了编译时的类型检查</li>
<li>泛型方法</li>
<li>减少类型转换，提高代码的安全性</li>
</ul>
</li>
<li>用法：
<ul>
<li>泛型接口</li>
<li>泛型抽象类</li>
<li>泛型类</li>
<li>方法参数类型约束</li>
<li>方法返回类型约束</li>
</ul>
</li>
</ul>
<h4 id="1-泛型类">1. 泛型类</h4>
<pre><code class="language-java">public class 类名&lt;泛型类型&gt;{}
</code></pre>
<h4 id="2-泛型方法">2. 泛型方法</h4>
<pre><code class="language-java">public &lt;泛型返回类型&gt; 返回类型 方法名(泛型类型形参){}
</code></pre>
<h4 id="3-泛型接口">3. 泛型接口</h4>
<pre><code class="language-java">interface 接口名&lt;泛型类型&gt;{}
</code></pre>
<h4 id="4-泛型抽象类">4. 泛型抽象类</h4>
<pre><code class="language-java">public abstract class 类名&lt;泛型类型&gt;{}
</code></pre>
<h4 id="5-泛型通配符">5. 泛型通配符</h4>
<pre><code class="language-java">&lt;?&gt;任意类型，如果不明确，那就是Object以及任意java类
&lt;? extends E&gt;向下限定，E及其子类
&lt;? super E&gt;向上限定，E及其父类
</code></pre>
<h2 id="67-增强for循环">67. 增强for循环</h2>
<pre><code class="language-java">for(元素数据类型 临时变量:多元素容器){
    System.out.println(临时变量);
}
</code></pre>
<ul>
<li>实现原理</li>
</ul>
<pre><code class="language-java">for (Integer i : list) {
   System.out.println(i);
}
</code></pre>
<p>反编译后</p>
<pre><code class="language-java">Integer i;
for(Iterator iterator = list.iterator(); iterator.hasNext(); System.out.println(i)){
   i = (Integer)iterator.next();        
}
</code></pre>
<h2 id="68-静态导入">68. 静态导入</h2>
<ul>
<li>
<p>直接导入到方法级别（方法必须是静态的）</p>
<ul>
<li>import static packageName.className.methodName；</li>
</ul>
</li>
<li>
<p>注意事项：</p>
<ul>
<li>方法必须为静态方法</li>
<li>如果有多个静态方法，就不知道用哪个，就需要加方法的绝对包路径进行调用</li>
</ul>
</li>
<li>
<p>例：</p>
</li>
</ul>
<pre><code class="language-java">import static java.lang.Math.abs;
import static java.lang.Math.pow;
import static java.lang.Math.max;
public class Demo{
    public static void main(String [] args){
        System.out.println(abs(111));
        System.out.println(pow(3,2));
        System.out.println(max(3,2));
    }
}
</code></pre>
<h2 id="69-可变参数">69. 可变参数</h2>
<ul>
<li>概述：
<ul>
<li>不知道方法将来需要多少个参数</li>
</ul>
</li>
<li>格式：
<ul>
<li>修饰符  返回值类型  方法名（数据类型... 变量名）{ }</li>
</ul>
</li>
<li>注意：
<ul>
<li>这里的变量其实是一个数组</li>
<li>如果一个方法既有可变参，也有其他参数，那么，可变参必须是最后一个</li>
<li>可变参只能有一个，且放在参数列表最后</li>
</ul>
</li>
<li>例：</li>
</ul>
<pre><code class="language-java">public static int sum(int... a){
    return a;
}
public static String method(Object... o){
    return o.toString();
}
</code></pre>
<h2 id="70-treeset">70. TreeSet</h2>
<ul>
<li>包：java.util.TreeSet</li>
<li>父类：java.util.AbstractSet</li>
<li>实现了SortedSet接口</li>
<li>构造方法：
<ul>
<li>public TreeSet（）：构造一个空的集合</li>
<li>public TreeSet（Collection&lt;? extends E&gt; c）：构造一个包含指定集合元素的新集合，根据元素自然排序进行排序</li>
<li>public TreeSet（Comparator&lt;? super E&gt; comparator）：按照指定比较器的顺序构造一个空的集合</li>
<li>public TreeSet（SortedSet<E> s）：构造一个包含指定集合元素的新集合，按照默认排序</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public boolean add（E e）：将指定元素添加到集合中</li>
<li>public boolean addAll（Collection&lt;? extends E&gt; c）：将指定集合中所有元素加入到集合中</li>
<li>public E ceiling（E e）：查找集合中大于等于指定元素的最小元素，如果没有，返回null</li>
<li>public Object clone（）：返回集合的浅拷贝</li>
<li>public void clear（）：删除集合中所有元素</li>
<li>public boolean contains（Object o）：判断集合中是否包含指定元素</li>
<li>public E first（）：返回集合中第一个元素</li>
<li>public E floor（E e）：查找集合中小于等于指定元素的最大元素，如果没有，返回null</li>
<li>public boolean isEmpty（）：判断集合是否为空</li>
<li>public Iterator<E> iterator（）：以升序返回集合元素迭代器</li>
<li>public Iterator<E> descendingIterator（）：以降序返回集合元素迭代器</li>
<li>public NavigableSet<E> descendingSet（）：返回集合元素反向排序集合</li>
<li>public E last（）：返回集合中最后一个元素</li>
<li>public E lower（E e）：查找集合中小于指定元素的最大元素，如果没有，返回null</li>
<li>public E higher（E e）：查找集合中大于指定元素的最小元素，如果没有，返回null</li>
<li>public E pollFirst（）：检索并删除集合中第一个元素</li>
<li>public E pollLast（）：检索并删除集合中最后一个元素</li>
<li>public boolean remove（Object o）：从集合中删除指定元素</li>
<li>public int size（）：返回集合中元素个数</li>
<li>public Spliterator<E> spliterator（）</li>
<li>public NavigableSet<E> subSet（E fromElement，boolean fromInclusive，E toElement，boolean toInclusive）：截取一段集合</li>
<li>public SortedSet<E> subSet（E fromElement，E toElement）：截取一段集合</li>
<li>public SortedSet<E> tailSet（E fromElement）：返回集合中大于等于指定元素的部分集合</li>
<li>public NavigableSet<E> tailSet（E fromElement，boolean inclusive）</li>
</ul>
</li>
<li>实现原理</li>
</ul>
<figure data-type="image" tabindex="22"><img src="http://pic.zyblog.xyz/img/typora/20201126165845.png" alt="img" loading="lazy"></figure>
<blockquote>
<p>比较器</p>
<ul>
<li>包：java.lang.Comparable</li>
<li>红黑树完成的自然排序实际上是依赖于Comparable接口中的compareTo（）方法，所以想要按照自己的方式进行数据排序，必须实现此接口并重写该方法</li>
<li>需要比较的对象的类去实现Comparable接口并重写compareTo（）方法</li>
<li>需要比较的对象的类也可以去实现Comparator接口并重写compare（）方法</li>
</ul>
<p>Comparable和Comparator的区别</p>
<ul>
<li><img src="http://pic.zyblog.xyz/img/typora/20201204135756.png" alt="img" loading="lazy"></li>
</ul>
</blockquote>
<h2 id="71-hashset">71. HashSet</h2>
<ul>
<li>
<p>底层数据结构是哈希表（元素是链表的数组）</p>
</li>
<li>
<p>包：java.util.HashSet</p>
</li>
<li>
<p>父类：java.util.AbstractSet</p>
</li>
<li>
<p>构造方法：（初始容量16，负载因子0.75）</p>
<ul>
<li>public HashSet（）：构造一个空集合</li>
<li>public HashSet（Collection&lt;? extends E&gt; c）：构造一个包含指定集合中所有元素的集合</li>
<li>public HashSet（int initialCapacity）：构造一个之指定容量的空集合</li>
<li>public HashSet（int initialCapacity，float loadFactor）：构造一个指定容量，指定负载因子的空集合</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>
<p>public boolean add（E e）：将指定元素加入集合</p>
</li>
<li>
<p>public void clear（）：删除集合中所有元素</p>
</li>
<li>
<p>public Object clone（）：返回HashSet的浅拷贝</p>
</li>
<li>
<p>public boolean isEmpty（）：判断集合是否为空</p>
</li>
<li>
<p>Iterator<E> iterator（）：返回集合元素迭代器</p>
</li>
<li>
<p>public boolean remove（Object o）：移除集合中指定元素</p>
</li>
<li>
<p>public int size（）：返回集合中元素个数</p>
</li>
</ul>
</li>
</ul>
<h2 id="72-linkedhashset">72. LinkedHashSet</h2>
<ul>
<li>底层数据结构是哈希表（元素是双向链表的数组）</li>
<li>元素存取有序</li>
<li>包：java.util.LinkedHashSet</li>
<li>父类：java.util.HashSet</li>
<li>构造方法：
<ul>
<li>public LinkedHashSet（）：构造一个默认容量16，负载因子0.75的空集合</li>
<li>public LinkedHashSet（Collection&lt;? extends E&gt; c）：构造包含指定集合的集合</li>
<li>public LinkedHashSet（int initialCapacity）：构造指定初始容量的空集合</li>
<li>public LinkedHashSet（int initialCapacity，float loadFactor）：构造指定初始容量和指定负载因子的空集合</li>
</ul>
</li>
<li>常用方法：继承自父类（HashSet的方法）
<ul>
<li>public boolean add（E e）：将指定元素加入集合</li>
<li>public void clear（）：删除集合中所有元素</li>
<li>public Object clone（）：返回HashSet的浅拷贝</li>
<li>public boolean isEmpty（）：判断集合是否为空</li>
<li>Iterator<E> iterator（）：返回集合元素迭代器</li>
<li>public boolean remove（Object o）：移除集合中指定元素</li>
<li>public int size（）：返回集合中元素个数</li>
</ul>
</li>
</ul>
<h2 id="73-hashmap">73. HashMap</h2>
<ul>
<li>包：java.util.HashMap</li>
<li>构造方法：
<ul>
<li>public HashMap（）：构造一个空的HashMap集合，初始容量为16，负载因子为0.75</li>
<li>public HashMap（int initialCapacity）：构造一个指定容量的HashMap集合</li>
<li>public HashMap（int initialCapacity，int loadFactor）：构造一个具有指定容量和指定负载因子的HashMap集合</li>
<li>public HashMap（Map&lt;? extends K,? extends V&gt; m）：构造一个包含指定Map集合所有映射关系的HashMap集合</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public void clear（）：删除集合中所有映射关系</li>
<li>public Object clone（）：获得集合的浅拷贝</li>
<li>public boolean containsKey（Object key）：判断集合中是否包含指定键</li>
<li>public boolean containsValue（Object value）：判断集合中是否包含指定值</li>
<li>public boolean isEmpty（）：判断集合是否为空</li>
<li>public V get（Object key）：获取指定键对应的值</li>
<li>public Set<K> keySet（）：获取Map集合中键的Set集合</li>
<li>public Set&lt;Map.Entry&lt;K，V&gt;&gt; entrySet（）：获取Map集合映射关系的Set集合</li>
<li>public V put（K key，V value）：将指定键值对加入Map集合（若指定键存在，则将指定值与之关联，说白了就是修改映射关系）</li>
<li>public void putAll（Map&lt;? extends K，? extends V&gt; m）：将指定集合中的所有映射加入到当前集合</li>
<li>public int size（）：返回Map集合中映射数量</li>
<li>public Collection<V> values（）：获取Map集合中值的Collection集合</li>
<li>public V remove（Object key）：删除指定键对应的键值对</li>
<li>public boolean remove（Object key，Object value）：删除唯一对应关系的键值对</li>
</ul>
</li>
</ul>
<h2 id="74linkedhashmap">74.LinkedHashMap</h2>
<ul>
<li>包：java.util.LinkedHashMap</li>
<li>父类：java.util.HashMap</li>
<li>构造方法：
<ul>
<li>public LinkedHashMap（）：构造一个空的LinkedHashMap集合，初始容量为16，负载因子为0.75</li>
<li>public LinkedHashMap（int initialCapacity）：构造一个指定容量的LinkedHashMap集合</li>
<li>public LinkedHashMap（int initialCapacity，int loadFactor）：构造一个具有指定容量和指定负载因子的LinkedHashMap集合</li>
<li>public LinkedHashMap（Map&lt;? extends K,? extends V&gt; m）：构造一个包含指定Map集合所有映射关系的LinkedHashMap集合</li>
<li>public LinkedHashMap（int initialCapacity，int loadFactor，boolean accessOrder）：构造一个具有指定初始容量和指定负载因子以及制定订购模式的LinkedHashMap集合</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public void clear（）：删除集合中所有映射关系</li>
<li>public boolean containsValue（Object value）：判断集合中是否存在指定值</li>
<li>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet（）：获取集合中所有映射关系组成的Set集合</li>
<li>public V get（Object key）：获取指定键对应的值</li>
<li>public Set<K> keySet（）：获取集合中所有键组成的Set集合</li>
<li>public Collection<V> values（）：获取集合中所有键组成的Collection集合</li>
</ul>
</li>
</ul>
<h2 id="75-treemap">75. TreeMap</h2>
<ul>
<li>
<p>包：java.util.TreeMap</p>
</li>
<li>
<p>父类：java.util.AbstractMap</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li>public TreeMap（）：构造一个（默认使用键自然排序）空TreeMap集合</li>
<li>public TreeMap（Comparator&lt;? super K&gt; comparator）：构造一个（按照指定比较器规则排序）空TreeMap集合</li>
<li>public TreeMap（Map&lt;? extends K，? extends V&gt; m）：构造一个包含指定Map集合所有映射关系的（按照指定Map集合中key的自然排序）TreeMap集合</li>
<li>public TreeMap（SortedMap&lt;K，? extends V&gt; m）：构造一个包含指定SortedMap集合中所有映射关系的并按照SortedMap中的排序规则排序的TreeMap集合</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public void clear（）：删除集合中所有映射关系</li>
</ul>
</li>
<li>
<p>public Object clone（）：获取集合的浅拷贝</p>
<ul>
<li>public Comparator&lt;? super K&gt; comparator（）：返回集合的比较器</li>
</ul>
</li>
<li>
<p>public boolean containsKey（Object key）：判断集合中是否包含指定键</p>
<ul>
<li>public boolean containsValue（Object value）：判断集合中是否包含指定值</li>
</ul>
</li>
<li>
<p>public NavigableSet<K> descendingKeySet（）：返回相反顺序的键的Set集合</p>
<ul>
<li>public NavigableMap&lt;K，V&gt; descendingMap（）：返回相反顺序的映射关系的Map集合</li>
</ul>
</li>
<li>
<p>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet（）：获取集合中所有映射关系组成的Set集合</p>
<ul>
<li>public Map.Entry&lt;K，V&gt; firstEntry（）：获取集合中第一个键对应的映射关系</li>
</ul>
</li>
<li>
<p>public K firstKey（）：获取集合中第一个键的值</p>
</li>
<li>
<p>public Map.Entry&lt;K，V&gt; floorEntry（）：获取集合中最后一个键对应的映射关系</p>
</li>
<li>
<p>public K floorKey（）：获取集合中最后一个键的值</p>
</li>
<li>
<p>public V get（Object key）：获取指定键对应的值</p>
</li>
<li>
<p>public Set<K> keySet（）：获取集合中所有键构成的Set集合</p>
</li>
<li>
<p>public Collection<V> values（）：获取集合中所有值构成的Collection集合</p>
</li>
<li>
<p>public V put（K key，V value）：将指定映射关系加入集合中，若指定键已存在，则修改对应值</p>
</li>
<li>
<p>public void putAll（Map&lt;? extends K，? extends V&gt; m）：将指定Map集合中所有映射关系加入集合中</p>
</li>
<li>
<p>public V remove（Object key）：删除指定键对应的映射关系</p>
</li>
<li>
<p>public int size（）：返回集合中映射数量</p>
</li>
</ul>
<h2 id="76-异常">76. 异常</h2>
<h3 id="1-分类">1. 分类</h3>
<ul>
<li>运行时异常：所有RuntimeException类及子类都属于运行时异常
<ul>
<li>运行时异常一般是代码问题，提高代码健壮性</li>
</ul>
</li>
<li>编译时异常：除运行时异常外都属于编译时异常
<ul>
<li>编译时异常必须显示处理，否则无法编译通过</li>
</ul>
</li>
<li>自定义异常</li>
</ul>
<h3 id="2-处理异常">2. 处理异常</h3>
<ul>
<li>
<p>try...catch...finally</p>
<ul>
<li>
<p>变形格式：try...catch</p>
<pre><code class="language-java">try{
    //try里的代码越少越好，因为每捕获一次异常，JVM就会启动分配一次资源
}catch(异常名 变量名){
    //catch里面必须有内容，哪怕只给一个简单的提示
}
</code></pre>
</li>
<li>
<p>一个异常的处理，写一个<code>try{}catch{}</code></p>
</li>
<li>
<p>多个异常的处理，写一个<code>try{}</code>，写多个<code>catch(){}</code>，但是一个一场被捕获到就直接走catch语句了，无法捕获另外的异常</p>
</li>
<li>
<p>注意事项：</p>
<ul>
<li>能明确的异常尽量明确，实在不明确异常再使用Exception</li>
<li>如果有明确的异常，同级的异常前后无所谓，不同级的异常，明确的异常在前，Exception必须放置于最后，因为Exception可以匹配所有异常，是明确异常的父类的父类</li>
</ul>
</li>
<li>
<p>JDK1.7出现了一个新的异常处理方案：</p>
<pre><code class="language-java">try{
    
}catch(Exception1 | Exception2 | Exception3 | ... variableName){
    
}
</code></pre>
<ul>
<li>可以通过或将多个异常连接在一起，使得catch可以同时处理多个异常，但是**<code>注意：这种方式异常中不可以有Exception</code>**</li>
</ul>
</li>
</ul>
</li>
<li>
<p>异常中需要了解的方法：</p>
<ul>
<li>public String getMessage（）：返回异常的详细信息</li>
<li>public String toString（）：返回异常的简单介绍
<ul>
<li>这个对象的类的name（全路径名）</li>
<li>“：”（一个冒号和一个空格）</li>
<li>调用这个对象的**<code>getLocalizedMessage()</code><strong>方法的结果，默认返回</strong><code>getMessage()</code>**</li>
</ul>
</li>
<li>public void printStackTrace（）：将toString的内容以及异常出现的位置输出到控制台</li>
<li>public void printStackTrace（PrintStream s）：将异常内容保存到日志文件中，方便查看</li>
</ul>
</li>
<li>
<p>throws：有些异常我们无法处理或者权限不够时，就需要将异常抛出</p>
<ul>
<li>throws必须跟在方法的括号后面</li>
<li>编译期异常被抛出，将来的调用者必须处理</li>
<li>运行时异常被抛出，将来的调用者可以不处理</li>
<li>throws后可以跟多个异常，中间用逗号隔开</li>
</ul>
</li>
<li>
<p>throw：如果出现了异常情况，我们需要抛出该异常的对象，使用throw new 异常名（）；</p>
<ul>
<li>使用throw一定抛出了异常</li>
<li>使用throws可能抛出异常，并不一定会发生异常</li>
</ul>
</li>
<li>
<p>throw和throws的区别</p>
<ul>
<li>
<p>放在方法声明后面，跟的是异常类名</p>
</li>
<li>
<p>可以跟多个异常类名，用逗号隔开</p>
</li>
<li>
<p>表示抛出异常，由该方法的调用者来处理</p>
</li>
<li>
<p>throws表示出现异常的可能性，并不一定会抛出异常</p>
<hr>
</li>
<li>
<p>放在方法体内，跟的是对象名</p>
</li>
<li>
<p>只能抛出一个异常对象</p>
</li>
<li>
<p>表示抛出异常，有方法体内语句处理</p>
</li>
<li>
<p>throw表示抛出了异常，执行throw一定会抛出异常</p>
</li>
</ul>
</li>
<li>
<p>finally</p>
<ul>
<li>格式：<code>try{}catch(){}finally{}</code></li>
<li>finally 里的语句一定会被执行</li>
<li>用于释放资源，在IO流和数据库操作中常见</li>
</ul>
</li>
<li>
<p><strong><code>如果catch中有return语句，finally中的语句依然会被执行，且在return之前</code></strong></p>
</li>
<li>
<p>try...catch的几种变形</p>
<ul>
<li>try...catch...finally</li>
<li>try...catch</li>
<li>try...catch...catch</li>
<li>try...catch...catch...finally</li>
<li>try...finally（主要为了释放资源）</li>
</ul>
</li>
</ul>
<h3 id="3-自定义异常">3. 自定义异常</h3>
<ul>
<li>
<p>继承自Exception</p>
<ul>
<li>
<pre><code class="language-java">public class MyException extends Exception{
    public MyException(){}
    public MyException(String message){
        super(message);
    }
}

public class Teacher{
    public void checkScore(int score) throws MyException{
        if(score &gt; 0 &amp;&amp; score &lt; 100){
            System.out.println(&quot;分数正常&quot;);
        }else{
            throw new MyException(&quot;分数不正常&quot;);
        }
    }
}
public class Demo{
    public static void main(String [] args){
        Teacher t = new Teacher();
        t.checkScore(50);
        t.checkScore(120);
    }
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="77-io流">77. I/O流</h2>
<h3 id="1-file类路径名的表示形式文件是否存在还不一定">1. File类（路径名的表示形式，文件是否存在还不一定）</h3>
<ul>
<li>包：java.io.File</li>
<li>构造方法：
<ul>
<li>public File（File parent，String child）：创建在父路径对象（File parent）下的指定子文件（String child）的File对象</li>
<li>public File（String pathname）：创建一个绝对路径文件的File对象</li>
<li>public File（String parent，String child）：创建在父路径（String parent）下的指定子文件（String child）的File对象</li>
<li>public File（URI uri）：创建一个统一资源标识符表示的文件的File对象</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>
<p>public boolean canExecute（）：测试文件是否具有可执行权限</p>
</li>
<li>
<p>public boolean canRead（）：测试文件是否具有可读权限</p>
</li>
<li>
<p>public boolean canWrite（）：测试文件是否具有可写权限</p>
</li>
<li>
<p>public int comparaTo（File pathname）：</p>
</li>
<li>
<p>public boolean createNewFile（）：当且仅当前文件不存在时创建新文件</p>
</li>
<li>
<p>public boolean delete（）：删除File对象对应的文件或目录</p>
</li>
<li>
<p>public void deleteOnExit（）：在虚拟机终止时删除File对象对应的文件或目录</p>
</li>
<li>
<p>public boolean equals（Object obj）：比较是否相等</p>
</li>
<li>
<p>public boolean exists（）：测试该文件是否存在</p>
</li>
<li>
<p>public File getAbsoluteFile（）：返回File对象的绝对路径的File对象</p>
</li>
<li>
<p>public String getAbsolutePath（）：返回File对象的绝对路径的字符串</p>
</li>
<li>
<p>public String getCanonicalPath（）：返回File对象的规范化绝对路径，（带.和..的路径格式）</p>
</li>
<li>
<p>public File getCanoncialFile（）：返回File对象的规范化表示File对象</p>
</li>
<li>
<p>public String getName（）：获取File对象表示的文件名或目录名</p>
</li>
<li>
<p>public String getParent（）：获取File对象父目录的字符串</p>
</li>
<li>
<p>public File getParentFile（）：获取File对象父目录的File对象</p>
</li>
<li>
<p>public String getPath（）：将定义File对象时的路径返回</p>
</li>
<li>
<p>public long getTotalSpace（）：获取File对象表示的文件所在的磁盘分区的总容量（单位：Byte）</p>
</li>
<li>
<p>public long getFreeSpace（）：获取File对象表示的文件所在的磁盘分区的剩余容量（单位：Byte）</p>
</li>
<li>
<p>public boolean isAbsolute（）：判断File对象的路径名是否为绝对路径</p>
</li>
<li>
<p>public boolean isDirectory（）：判断File对象所表示的文件是否为目录</p>
</li>
<li>
<p>public boolean isFile（）：判断File对象所表示的文件是否为文件</p>
</li>
<li>
<p>public boolean isHidden（）：判断File对象所表示的文件是否为隐藏文件</p>
</li>
<li>
<p>public long lastModified（）：获取File对象所表示的文件最后一次修改时间</p>
</li>
<li>
<p>public long length（）：获取File对象多表示的文件的大小（单位：Byte）</p>
</li>
<li>
<p>public String[ ] list（）：将File对象表示的目录中所有文件名加入到字符串数组中，如果File对象不表示目录，返回null</p>
</li>
<li>
<p>public String[ ] list（FilenameFilter filter）：将File对象表示的目录中所有文件名满足过滤器规则的加入到字符串数组中，如果File对象不表示目录，返回null</p>
<ul>
<li>
<p>FilenameFilter文件名过滤器</p>
<ul>
<li>
<p>包：java.io.FilenameFilter（函数式接口）</p>
</li>
<li>
<p>方法：public boolean accept（File dir，String name）</p>
</li>
<li>
<pre><code class="language-java">//匿名内部类写法
File file = new File(&quot;E:\\壁纸&quot;);
String [] list = file.list(new FilenameFilter(){
   @Override
    public boolean accept(File dir,String name){
        return name.toLowerCase().endsWith(&quot;.png&quot;);
    }
});
//Lambda表达式写法
File file = new File(&quot;E:\\壁纸&quot;);
String [] list = file.list((File dir,String name) -&gt; {
	return name.toLowerCase().endsWith(&quot;.png&quot;);
});        
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>public File[ ] listFiles（）：将File对象表示的目录中所有文件加入到文件对象数组中，如果File对象不表示目录，返回null</p>
</li>
<li>
<p>pubic File[ ] listFiles（FileFilter filter）：将File对象表示的目录中所有满足过滤器规则的文件加入到文件对象数组中，如果File对象不表示目录，返回null</p>
</li>
<li>
<p>public File[ ] listFiles（FilenameFilter filter）：将File对象表示的目录中所有满足过滤器规则的文件加入到文件对象数组中，如果File对象不表示目录，返回null</p>
</li>
<li>
<p>public static File[ ] listRoots（）：获取所有文件系统根目录，即盘符</p>
<ul>
<li>
<pre><code class="language-java">File[] files = File.listRoots();
for (int i = 0; i &lt; files.length; i++) {
	System.out.println(files[i]);
}
//输出结果
C:\
D:\
E:\
F:\
</code></pre>
</li>
</ul>
</li>
<li>
<p>public boolean mkdir（）：创建File对象对应的目录</p>
</li>
<li>
<p>public boolean mkdirs（）：创建File对象对应的目录，包括任何必须但不存在的父目录</p>
</li>
<li>
<p>public boolean renameTo（File dest）：重命名File对象所表示的文件</p>
</li>
<li>
<p>public Path toPath（）：将File对象转为Path对象（java.nio.file.Path）</p>
</li>
<li>
<p>public String toString（）：将File对象转为字符串</p>
</li>
<li>
<p>public String toURI（）：将File对象转为URI对象</p>
</li>
<li>
<p>public URL toURL（）：将File对象转为URL对象，已弃用，建议使用URI.toURL（）方法</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-递归">2. 递归</h3>
<ul>
<li>
<p>概述：方法定义中调用方法本身的现象</p>
</li>
<li>
<p>注意</p>
<ul>
<li>递归一定要有出口，否则就是死递归</li>
<li>递归次数不能太多，否则栈内存溢出【递归次数(即方法调用次数)×方法栈帧 &gt; 栈大小  <strong><code>导致</code></strong>  栈溢出】</li>
<li>构造方法不能递归使用</li>
</ul>
</li>
<li>
<p>例</p>
<ul>
<li>
<pre><code class="language-java">//递归求阶乘
public static void main(String [] args){
    factorical(5);
}
public static void factorial(int number){
    if(number==1){
        return 1;
    }else{
        return number*factorical(number-1);
    }
}
</code></pre>
</li>
<li>
<pre><code class="language-java">//递归求不死神兔问题(斐波那契数列)1，1，2，3，5，8...
public static void mian(String [] args){
    fib(10);
}
public static int fib(int number){
    if(number==1 || number==2){
        return 1;
    }else{
        return fib(number-1)+fib(number-2);
    }
}
</code></pre>
</li>
<li>
<pre><code class="language-java">//递归查找某路径下所有以指定后缀.mp4结尾的文件
public static void main(String [] args){
    
}
public static void getAllFilePathMp4(File srcFolder){
   	File[] files = srcFolder.listFiles();
    for(File f:files){
        if(f.isDirectory()){
            getAllFilePathMp4(f);
        }else{
            if(f.getName().endsWith(&quot;.mp4&quot;)){
                System.out.println(&quot;Name:&quot;+f.getName()+&quot;[&quot;+&quot;Path:&quot;+f.getAbsolutePath()+&quot;]&quot;);
            }
        }
    }
} 
</code></pre>
</li>
<li>
<pre><code class="language-java">//递归删除指定目录下所有文件
public static void deleteAllFile(File srcFolder){
    File[] files = srcFolder.listFiles();
    if(files.length==0){
        srcFolder.delete();
    }else{
        for(File f:files){
            if(f.isDirectory()){
                deleteAllFile(f);
            }else{
                System.out.println(&quot;Name:&quot;+f.getName()+&quot;\tDeleteState:&quot;+f.delete());
            }
        }
        System.out.println(&quot;Name:&quot;+ srcFolder.getName()+&quot;\tDeleteState:&quot;+srcFolder.delete());
    }
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="3-字节流万能的流">3. 字节流（万能的流）</h3>
<h4 id="31-字节输入流javaioinputstream抽象类">3.1 字节输入流(java.io.InputStream抽象类)</h4>
<ul>
<li>FileInputStream
<ul>
<li>包：java.io.FileInputStream</li>
<li>构造方法
<ul>
<li>public FileInputStream（File file）</li>
<li>public FileInputStream（FileDescriptor fdObj）</li>
<li>public FileInputStream（String name）</li>
</ul>
</li>
<li>常用方法
<ul>
<li>public int available（）</li>
<li>public void close（）：关闭输入流并释放资源</li>
<li>protected void finalize（）</li>
<li>public FileChannel getChannel（）</li>
<li>public FileDescriptor getFD（）</li>
<li>public int read（）</li>
<li>public int read（byte[ ] b）：从输入流中读取b.length字节的数据，返回读入b缓冲区的字节数，如果读取完毕返回-1，（一次读取多个字节数据，提高读写速度）</li>
<li>public int read（byte[ ] b，int off，int len）</li>
<li>public long skip（long n）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="32-字节输出流javaiooutputstream抽象类">3.2 字节输出流(java.io.OutputStream抽象类)</h4>
<ul>
<li>FileOutputStream
<ul>
<li>包：java.io.FileOutputStream</li>
<li>构造方法
<ul>
<li>
<p>public FileOutputStream（File file）</p>
</li>
<li>
<p>public FileOutputStream（File file，boolean append）</p>
</li>
<li>
<p>public FileOutputStream（FileDescriptor fdObj）</p>
</li>
<li>
<p>public FileOutStream（String name）</p>
</li>
<li>
<p>public FileOutputStream（String name，boolean append）</p>
</li>
<li>
<blockquote>
<p>如果文件不存在，会自动创建，但如果目录不存在，不会自动创建，抛异常</p>
</blockquote>
</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public void close（）：关闭输出流，并释放资源</li>
<li>protected void finalize（）</li>
<li>public FileChannel getChannel（）</li>
<li>public FileDescriptor getFD（）</li>
<li>public void write（byte[ ] b）</li>
<li>public void write（byte[ ] b，int off，int len）</li>
<li>public void write（int b）</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>字符串是utf-8编码，一个汉字三个字节，一个字母一个字节。<br>
字符串是gbk编码时，一个汉字两个字节，一个字母一个字节。</p>
<p>计算机如何判断将三个字节拼成一个汉字？</p>
<p>文件的编码格式，以及单字节的格式</p>
<p>不同系统的换行符识别不同</p>
<ul>
<li>\r（Mac系统）</li>
<li>\n（Linux系统）</li>
<li>\r\n（Windows系统）</li>
</ul>
</blockquote>
<h4 id="33-字节缓冲流提高fileinputstream的读写效率装饰设计模式">3.3 字节缓冲流（提高FileInputStream的读写效率）装饰设计模式</h4>
<ul>
<li>BufferedInputStream
<ul>
<li>包：java.io.BufferedInputStream</li>
<li>构造方法：
<ul>
<li>public BufferedInputStream（InputStream in）</li>
<li>public BufferedInputStream（InputStream in，int size）：可以指定缓冲区byte数组大小</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public int read（）</li>
<li>public int read（byte[ ] b，int off，int len）：</li>
<li>public void reset（）</li>
<li>public long skip（long n）</li>
</ul>
</li>
</ul>
</li>
<li>BufferedOutputStream
<ul>
<li>包：java.io.BufferedOutputStream</li>
<li>构造方法：
<ul>
<li>public BufferedOutputStream（OutputStream out）</li>
<li>public BufferedOutputStream（OutputStream out，int size）</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public void flush（）：刷新缓冲输出流</li>
<li>public void write（byte [ ] b，int off，int len）：从指定字节数组写入len个字节</li>
<li>public void write（int b）：将指定字节写入缓冲输出流</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>读写文件效率比较</p>
<pre><code class="language-java">public class Demo5 {
    public static void main(String[] args) throws IOException {
        long startTime = System.currentTimeMillis();
//        methodA(&quot;E:\\视频教程\\java\\day02\\day01\\视频\\1_2020-09-09.mp4&quot;,&quot;F:\\copy1.mp4&quot;);//半个小时，我吐了
//        methodB(&quot;E:\\视频教程\\java\\day02\\day01\\视频\\1_2020-09-09.mp4&quot;,&quot;F:\\copy2.mp4&quot;);//共耗时：5246毫秒
//        methodC(&quot;E:\\视频教程\\java\\day02\\day01\\视频\\1_2020-09-09.mp4&quot;,&quot;F:\\copy3.mp4&quot;);//共耗时：13230毫秒
//        methodD(&quot;E:\\视频教程\\java\\day02\\day01\\视频\\1_2020-09-09.mp4&quot;,&quot;F:\\copy4.mp4&quot;);//共耗时：1389毫秒
        long endTime = System.currentTimeMillis();
        System.out.println(&quot;共耗时：&quot;+ (endTime-startTime) +&quot;毫秒&quot;);
    }
    public static void methodA(String srcFolder,String destFolder) throws IOException {
        FileInputStream fis = new FileInputStream(srcFolder);
        FileOutputStream fos = new FileOutputStream(destFolder);
        int flag = 0;
        while((flag=fis.read())!=-1){
            fos.write(flag);
        }
        fos.close();
        fis.close();
    }
    public static void methodB(String srcFolder,String destFolder) throws IOException {
        FileInputStream fis = new FileInputStream(srcFolder);
        FileOutputStream fos = new FileOutputStream(destFolder);
        int flag = 0;
        byte [] b = new byte[1024];
        while((flag=fis.read(b))!=-1){
            fos.write(b);
        }
        fos.close();
        fis.close();
    }
    public static void methodC(String srcFolder,String destFolder) throws IOException {
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(srcFolder));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFolder));
        int flag = 0;
        while((flag=bis.read())!=-1){
            bos.write(flag);
        }
        bos.close();
        bis.close();
    }
    public static void methodD(String srcFolder,String destFolder) throws IOException {
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(srcFolder));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFolder));
        int flag = 0;
        byte [] b = new byte[1024];
        while((flag=bis.read(b))!=-1){
            bos.write(b);
        }
        bos.close();
        bis.close();
    }
}
</code></pre>
</blockquote>
<h3 id="4-字符流为了操作文本数据java提供了字符流将字节流转换为字符流">4. 字符流（为了操作文本数据，Java提供了字符流，将字节流转换为字符流）</h3>
<h4 id="41-字符输入流javaioreader">4.1 字符输入流(java.io.Reader)</h4>
<ul>
<li>InputStreamReader
<ul>
<li>
<p>构造方法</p>
<ul>
<li>public InputStreamReader（InputStream in）：使用默认字符集将字节输入流转为字符输入流</li>
<li>public InputStreamReader（InputStream in，Charset cs）：创建指定字符集将字节输入流转为字符输入流</li>
<li>public InputStreamReader（InputStream in，CharsetDecoder dec）：创建指定字符集解码器输入流</li>
<li>public InputStreamReader（InputStream in，String charsetName）：创建指定字符集输入流</li>
</ul>
</li>
<li>
<p>常用方法</p>
<blockquote>
<p>String(byte [ ] bytes，String charsetName)：通过指定字符集编码字节数组</p>
<p>byte[ ] getBytes(String charsetName)：使用指定字符集编码把字符串编码为字节数组</p>
</blockquote>
<ul>
<li>public void close（）：关闭输入流释放资源</li>
<li>public String getEncoding（）：返回字符集编码名称</li>
<li>public int read（）：读一个字符</li>
<li>public int read（char[ ] cbuf，int offset，int length）：将字符输入流读入数组的一部分</li>
<li>public boolean ready（）：告诉这个流是否准备好被读取</li>
<li>public void mark（int readAheadLimit）：标记流中当前位置</li>
<li>public boolean markSupport（）：告诉这个流是否支持mark操作</li>
<li>public int read（char[ ] cbuf）：将字符输入流读入数组</li>
<li>public int read（CharBuffer target）：将字符输入流读入指定字符缓冲区</li>
<li>public void reset（）：重置流</li>
<li>public long skip（long n）：跳过指定长度字符</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="42-字符输出流javaiowriter">4.2 字符输出流(java.io.Writer)</h4>
<ul>
<li>OutputStreamWriter
<ul>
<li>构造方法：
<ul>
<li>public OutputStreamWriter（OutputStream out）：使用默认字符集将字节输出流转为字符输出流</li>
<li>public outputStreamWriter（OutputStream out，Charset cs）：使用指定字符集解码将字节输出流转为字符输出流</li>
<li>public OutputStreamWriter（OutputStream out，CharsetEncoder enc）：创建指定字符集解码的字符输出流</li>
<li>public OutputStreamWriter（OutputStream out，Stirng charsetName）：创建指定名字编码解码的字符输出流</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public void close（）：关闭流，释放资源（会先刷新流，即调用flush（）方法）</li>
<li>public void flush（）：刷新流</li>
<li>public String getEncoding（）：返回该字符输出流的编码格式</li>
<li>public void write（char[ ] cbuf，int off，int len）：写入字符数组的一部分</li>
<li>public void write（int c）：写入一个字符</li>
<li>public void write（String str，int off，int len）：写入一个字符串的一部分</li>
<li>public Writer append（char c）：追加指定字符</li>
<li>public Writer append（CharSequence csq）：追加指定字符序列</li>
<li>public Writer append（CharSequence csq，int start，int end）：追加指定字符序列子序列</li>
<li>public abstract void close（）：关闭流</li>
<li>public abstract void flush（）：刷新流</li>
<li>public void write（char[ ] cbuf）：写入一个字符数组</li>
<li>public void write（String str）：写入字符串</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="43-转换流简化写法">4.3 转换流简化写法</h4>
<ul>
<li>FileWriter = FileOutputStream + 字符编码</li>
<li>FileReader = FileInputStream + 字符编码</li>
</ul>
<h4 id="44-字符缓冲流">4.4 字符缓冲流</h4>
<ul>
<li>BufferedReader</li>
<li>BufferedWriter</li>
</ul>
<p><strong><code>复制文本文件</code></strong></p>
<p>复制图片</p>
<p>把ArrayList中的字符串数据存储到文本文件</p>
<p>从文本文件读取一行数据保存到集合中，并遍历</p>
<p>复制单级文件夹</p>
<p>复制多级文件夹</p>
<p>键盘输入几个学生信息，按照年龄排序，存入文本文件</p>
<p>加入a.txt文件中一串字符串“asdlfjsdaldjasf”</p>
<p>请编写代码实现读取内容，然后排序后写入b.txt</p>
<p>登录注册io版</p>
<h3 id="5-打印流只有写数据的没有读数据的">5. 打印流（只有写数据的没有读数据的）</h3>
<h4 id="51-字节打印流javaioprintstream">5.1 字节打印流（java.io.PrintStream）</h4>
<h4 id="52-字符打印流javaioprintwriter">5.2 字符打印流（java.io.PrintWriter）</h4>
<h4 id="53-特点">5.3 特点：</h4>
<ul>
<li>
<p>只有写数据没有读取数据</p>
</li>
<li>
<p>可以操作任意类型的数据</p>
</li>
<li>
<p>如果启动了自动刷新，无需手动刷新</p>
<ul>
<li>
<pre><code class="language-java">PrintWriter pw = new PrintWriter(new FileWriter(&quot;E:\\a.txt&quot;),true)
</code></pre>
</li>
</ul>
</li>
<li>
<p>可以直接操作文本文件</p>
</li>
</ul>
<h3 id="6-序列化流">6. 序列化流</h3>
<blockquote>
<p>序列化是指把一个Java对象变成二进制内容，本质上就是一个byte[]数组。</p>
<p>为什么要把Java对象序列化呢？</p>
<p>因为序列化后可以把byte[]保存到文件中，或者把byte[]通过网络传输到远程，这样，就相当于把Java对象存储到文件或者通过网络传输出去了。 有序列化，就有反序列化，即把一个二进制内容（也就是byte[]数组）变回Java对象。有了反序列化，保存到文件中的byte[]数组又可以“变回”Java对象，或者从网络上读取byte[]并把它“变回”Java对象</p>
</blockquote>
<h4 id="61-objectoutputstream序列化">6.1 ObjectOutputStream（序列化）</h4>
<ul>
<li>
<p>父类：OutputStream</p>
</li>
<li>
<p>包：java.io.ObjectOutputStream</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li>public ObjectOutputStream（OutputStream out）</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public void writeObject（Object obj）：写出对象</li>
</ul>
<pre><code class="language-java">//类的序列化由实现java.io.Serializable接口的类启用。 不实现此接口的类将不会使任何状态序列化或反序列化。 可序列化类的所有子类型都是可序列化的。 序列化接口没有方法或字段，仅用于标识可串行化的语义。 
</code></pre>
<ul>
<li>public void close（）：关闭输出流</li>
</ul>
</li>
</ul>
<h4 id="62-objectinputstream反序列化">6.2 ObjectInputStream（反序列化）</h4>
<ul>
<li>
<p>父类：InputStream</p>
</li>
<li>
<p>包：java.io.ObjectInputStream</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li>public ObjectInputStream（InputStream in）</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public Object readObject（）：从ObjectOutputStream中读取对象</li>
<li>public void close（）：关闭输入流</li>
</ul>
</li>
<li>
<p>例</p>
</li>
</ul>
<pre><code class="language-java">package com.demo.javase;

import java.io.Serializable;
/**
 * @author 絷缘
 * @version 1.0
 * @date 2020/12/9 8:56
 **/
public class Student implements Serializable {
    private String name;
    private int age;
    public Student(){}
    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return &quot;Student{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                '}';
    }
}
</code></pre>
<pre><code class="language-java">public static void main(String[] args) throws IOException, ClassNotFoundException {
	ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;F:\\b.txt&quot;));
    oos.writeObject(new Student(&quot;zhiyuan&quot;,22));
    oos.close();
    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;F:\\b.txt&quot;));
    Object o = ois.readObject();
    if(o instanceof Student){
		System.out.println(o);
	}        
}
</code></pre>
<blockquote>
<p>java.io.InvalidClassException：</p>
<pre><code class="language-java">Exception in thread &quot;main&quot; java.io.InvalidClassException: com.demo.javase.Student; 
local class incompatible: stream classdesc serialVersionUID = -2157397684930231136, 
local class serialVersionUID = 1206998284855657234
</code></pre>
<ul>
<li>
<p>若在序列化对象时，类未被修改，序列化后，手动修改了类文件，那么进行反序列化时会有异常</p>
<ul>
<li>可序列化的类的版本号serialVersionUID不同，抛出InvalidClassException</li>
</ul>
</li>
<li>
<p>若在序列化对象时，类没有无参构造方法，序列化后，进行反序列化时会有异常</p>
</li>
<li>
<p>若在序列化对象时，类中有未知的数据类型，序列恶化后，进行反序列化时会有异常</p>
</li>
</ul>
<h3 id="serialversionuid和transient">serialVersionUID和transient</h3>
<ul>
<li>serialVersionUID（Serializable的底层比较方式）
<ul>
<li>官方手册：强烈建议声明可序列化类的版本号</li>
<li><strong><code>private static final long serialVersionUID = 25L;</code></strong></li>
</ul>
</li>
</ul>
<p>声明此版本号后，手动修改类文件后，反序列化未发生错误</p>
<ul>
<li>transient（类中成员不想被序列化和反序列化）
<ul>
<li>被transient修饰的成员，不参与序列化与反序列化，被反序列化后依据成员本身类型给默认值</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="7-特殊操作流">7. 特殊操作流</h3>
<h4 id="71-properties">7.1 Properties</h4>
<ul>
<li>
<p>父类：java.util.Hashtable&lt;Object，Object&gt;</p>
</li>
<li>
<p>包：java.util.Properties</p>
</li>
<li>
<p>Properties是一个Map体系的集合类，可以直接保存到流中或从流中加载</p>
</li>
<li>
<p>构造方法：</p>
<ul>
<li>public Properties（）</li>
<li>public Properties（Properties defaults）</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public String getProperty（String key）：根据指定key，获取value</li>
<li>public String getProperty（String key，String defaultValue）</li>
<li>public void list（PrintStream out）：把属性列表打印到指定输出流</li>
<li>public void list（PrintWriter out）：把属性列表打印到输出流</li>
<li>public void load（InputStream in）：从输入字节流读取属性列表</li>
<li>public void load（Reader reader）：</li>
<li>public void loadFromXML（InputStream in）：从指定XML文件输入流中读取所有属性加入properties中</li>
<li>public Enumeration&lt;?&gt; propertiesNames（）：返回属性表的所有key的枚举</li>
<li>public Object setProperty（String key，String value）：调用HashTable的put（）方法，向属性集合中加入数据</li>
<li>public void store（OutputStream out，String comments）</li>
<li>public void store（Writer writer，String comments）</li>
<li>public void storeToXML（OutputStream os，String comment）</li>
<li>public void storeToXML（OutputStream os，Stirng comment，Stirng encoding）</li>
<li>public Set<String> stringPropertyNames（）：键的集合</li>
</ul>
<pre><code class="language-java">public static void main(String[] args) throws IOException {
        Properties pt = new Properties();
        pt.setProperty(&quot;username&quot;,&quot;root&quot;);
        pt.setProperty(&quot;password&quot;,&quot;123456&quot;);
        Set&lt;String&gt; keys = pt.stringPropertyNames();
        Iterator&lt;String&gt; it = keys.iterator();
        for(;it.hasNext();){
            System.out.println(it.next());
        }
        pt.store(new BufferedWriter(new FileWriter(&quot;F:\\c.txt&quot;)),null);
        Properties pt2 = new Properties();
        pt2.load(new BufferedReader(new FileReader(&quot;F:\\c.txt&quot;)));
        for (String key:pt2.stringPropertyNames()) {
            System.out.println(key+&quot;=&quot;+pt2.getProperty(key));
        }
    }
</code></pre>
</li>
</ul>
<h2 id="78-多线程">78. 多线程</h2>
<h3 id="1-进程系统资源分配的最小单位">1. 进程：系统资源分配的最小单位</h3>
<h3 id="2-线程是进程的执行单元是cpu调度的最小单位">2. 线程：是进程的执行单元，是CPU调度的最小单位</h3>
<ul>
<li>单线程</li>
<li>多线程</li>
</ul>
<h3 id="3-多线程实现方式">3. 多线程实现方式</h3>
<h4 id="31-继承thread类javalangthread">3.1 继承Thread类（java.lang.Thread）</h4>
<ul>
<li>继承Thread类并重写run方法，使用start方法启动线程</li>
</ul>
<pre><code class="language-java">public static void main(String[] args) {
        MyThread mt1 = new MyThread();
        MyThread mt2 = new MyThread();
        mt1.start();
        mt2.start();
    }

public class MyThread extends Thread{
    @Override
    public void run() {
        for (int i = 0; i &lt; 1000; i++) {
            System.out.print(i+&quot;\t&quot;);
        }
    }
}
</code></pre>
<ul>
<li>设置和获取线程名称</li>
</ul>
<pre><code class="language-java">//第一种，使用setName设置线程名称
public static void main(String[] args) {
        MyThread mt1 = new MyThread();
        MyThread mt2 = new MyThread();
        mt1.setName(&quot;线程A&quot;);
        mt2.setName(&quot;线程B&quot;);
        mt1.start();
        mt2.start();
    }

public class MyThread extends Thread{
    @Override
    public void run() {
        for (int i = 0; i &lt; 1000; i++) {
            System.out.print(getName()+&quot;:&quot;+i+&quot;\t&quot;);
        }
    }
}
//第二种，使用父类带参构造设置线程名称
public static void main(String[] args) {
        MyThread mt1 = new MyThread(&quot;线程A&quot;);
        MyThread mt2 = new MyThread(&quot;线程B&quot;);
        mt1.start();
        mt2.start();
    }

public class MyThread extends Thread{
    @Override
    public void run() {
        for (int i = 0; i &lt; 1000; i++) {
            System.out.print(getName()+&quot;:&quot;+i+&quot;\t&quot;);
        }
    }
    public MyThread(String name){
        super(name);
    }
}
</code></pre>
<ul>
<li>获取启动线程的线程名</li>
</ul>
<pre><code class="language-java">String name = Thread.currentThread().getName();
System.out.println(name);
</code></pre>
<ul>
<li>
<p>线程调度</p>
<ul>
<li>分时调度模型</li>
<li>抢占式调度模型</li>
</ul>
</li>
</ul>
<pre><code class="language-java">  public final int getPriority()：返回此线程的优先级
  public final void setPriority()：更改线程优先级    
  Thread.MAX_PRIORITY=10
  Thread.MIN_PRIORITY=1
  Thread.NORM_PRIORITY=5    
</code></pre>
<pre><code class="language-java">      public static void main(String[] args) {
          ThreadPriority tp1 = new ThreadPriority(&quot;线程A&quot;);
          ThreadPriority tp2 = new ThreadPriority(&quot;线程B&quot;);
          tp1.setPriority(5);
          tp2.setPriority(6);
          tp1.start();
          tp2.start();
      }
  
  public class ThreadPriority extends Thread{
      @Override
      public void run() {
          for (int i = 0; i &lt; 100; i++) {
              System.out.println(getName()+&quot;:&quot;+i);
          }
      }
      public ThreadPriority(String name){
          super(name);
      }
  }
</code></pre>
<ul>
<li>
<p>线程控制</p>
<ul>
<li>public static sleep(long millis)：使当前正在执行的线程停留指定毫秒数</li>
<li>public void join()：等待这个线程死亡</li>
<li>public void setDaemon(boolean on)：将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出</li>
<li>public static void yield()：使当前占用资源的线程主动让出资源</li>
</ul>
</li>
</ul>
<pre><code class="language-java">//sleep()
public static void main(String[] args) {
        ThreadSleep ts1 = new ThreadSleep();
        ThreadSleep ts2 = new ThreadSleep();
        ts1.start();
        ts2.start();
    }

public class ThreadSleep extends Thread{
    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(i);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
//join()
public static void main(String[] args) {
        ThreadJoin tj1 = new ThreadJoin(&quot;A&quot;);
        ThreadJoin tj2 = new ThreadJoin(&quot;B&quot;);
        tj1.start();
        try {
            tj1.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        tj2.start();
    }

public class ThreadJoin extends Thread {
    @Override
    public void run() {
        for (int i = 0; i &lt; 1000; i++) {
            System.out.print(getName()+&quot;:&quot;+i+&quot;\t&quot;);
        }
    }
    public ThreadJoin(String name){
        super(name);
    }
}
//setDaemon()
public static void main(String[] args) {
        ThreadDaemon td1 = new ThreadDaemon(&quot;A&quot;);
        ThreadDaemon td2 = new ThreadDaemon(&quot;B&quot;);

        Thread.currentThread().setName(&quot;C&quot;);
        td1.setDaemon(true);
        td2.setDaemon(true);
        td1.start();
        td2.start();
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);
        }
    }

public class ThreadDaemon extends Thread{
    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(getName()+&quot;:&quot;+i);
        }
    }
    public ThreadDaemon(String name){
        super(name);
    }
}
</code></pre>
<ul>
<li>线程生命周期
<ul>
<li>创建线程对象</li>
<li>线程就绪等待分配资源</li>
<li>分配到资源开始运行</li>
<li>线程结束</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="24"><img src="http://pic.zyblog.xyz/img/typora/20201209223414.png" alt="image-20201209223406529" loading="lazy"></figure>
<h4 id="32-实现runnable接口javalangrunnable">3.2 实现Runnable接口（java.lang.Runnable）</h4>
<ul>
<li>定义一个类实现Runnable接口</li>
<li>重写run方法</li>
<li>创建该类对象，并将对象作为参数构造Thread对象</li>
<li>启动线程</li>
</ul>
<pre><code class="language-java">public class RunnableDemo1 implements Runnable{
    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);
        }
    }
    public RunnableDemo1(String s){
        Thread.currentThread().setName(s);
    }
}
public class Demo6 {
    public static void main(String[] args) {
        Thread t1 = new Thread(new RunnableDemo1());
        Thread t2 = new Thread(new RunnableDemo1());
        Thread t3 = new Thread(new RunnableDemo1(), &quot;线程C&quot;);
        t1.start();
        t2.start();
        t3.start();
    }
}
</code></pre>
<blockquote>
<p>推荐使用实现Runnable接口的方式实现多线程</p>
<p>原因：</p>
<ul>
<li>Java中只能单继承，所以放我们继承Thread类实现多线程后，想要继续继承其他类就不可能了</li>
<li>实现Runnable接口的多继承可以实现资源共享</li>
</ul>
</blockquote>
<h4 id="33-实现callable接口javautilconcurrentcallable">3.3 实现Callable接口（java.util.concurrent.Callable）</h4>
<ul>
<li>定义一个类实现Callable接口</li>
<li>重写call方法</li>
<li>创建该类对象，启动线程</li>
</ul>
<pre><code class="language-java">public class MyCallableDemo implements Callable {
    @Override
    public Object call() throws Exception {
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(Thread.currentThread().getName()+&quot;-&quot;+i);
        }
        return null;
    }
}

public class Demo7 {
    public static void main(String[] args) {
        MyCallableDemo myCallableDemo = new MyCallableDemo();
        ExecutorService service = Executors.newFixedThreadPool(5);
        service.submit(myCallableDemo);

    }
}
</code></pre>
<h4 id="34-匿名内部类实现多线程">3.4 匿名内部类实现多线程</h4>
<pre><code class="language-java">    public void ThreadDemo(){
        Thread t1 = new Thread(){
            @Override
            public void run() {
                for (int i = 0; i &lt; 100; i++) {
                    System.out.println(Thread.currentThread().getName()+&quot;-&quot;+i);
                }
            }
        };
        t1.start();
    }
    public void RunnableDemo(){
        Runnable r1 = new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i &lt; 100; i++) {
                    System.out.println(Thread.currentThread().getName()+&quot;-&quot;+i);
                }
            }
        };
        new Thread(r1,&quot;线程A&quot;).start();
        new Thread(r1,&quot;线程B&quot;).start();
    }

</code></pre>
<h3 id="4-线程同步">4. 线程同步</h3>
<pre><code class="language-java">//卖票问题
public class SellTicket implements Runnable {
    private int tickets = 100;

    @Override
    public void run() {
        while(true){
            if (tickets &gt; 0) {
                System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;票&quot;);
                tickets--;
            }else{
                break;
            }
        }
    }
}

public class SellTicketDemo {
    public static void main(String[] args) {
        SellTicket st = new SellTicket();
        Thread t1 = new Thread(st, &quot;窗口1&quot;);
        Thread t2 = new Thread(st, &quot;窗口2&quot;);
        Thread t3 = new Thread(st, &quot;窗口3&quot;);
        t1.start();
        t2.start();
        t3.start();
    }
}
</code></pre>
<h4 id="41-出现了问题多线程数据安全问题">4.1 出现了问题（多线程数据安全问题）</h4>
<ul>
<li>相同的票出现了多次
<ul>
<li>资源被其他线程抢占，其他线程资源又被其他线程抢占</li>
</ul>
</li>
<li>出现了负数票数
<ul>
<li>当某个线程抢到CPU执行权，而且正在出售第1张票，票数减一变为0，而此时其他线程抢到了执行权，票数减一变为-1</li>
</ul>
</li>
</ul>
<h4 id="42-解决办法">4.2 解决办法</h4>
<ul>
<li>同步代码块：锁定多条语句操作共享数据的代码
<ul>
<li>优点：解决了多线程的数据安全问题</li>
<li>缺点：当线程较多的时候，每个线程都回去判断同步上的锁，耗费资源，降低运行效率</li>
</ul>
</li>
</ul>
<pre><code class="language-java">synchronized(任意对象){
    多条语句操作共享数据的代码
}
synchronized(任意对象)：相当于给代码加锁了，任意对象就可以看成是一把锁
</code></pre>
<pre><code class="language-java">public class SellTicket implements Runnable {
    private int tickets = 100;
    private Object object = new Object();

    @Override
    public void run() {
        while(true){
            synchronized(object){
                if (tickets &gt; 0) {
                    System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;票&quot;);
                    tickets--;
                }else{
                    break;
                }
            }
        }
    }
}

public class SellTicketDemo {
    public static void main(String[] args) {
        SellTicket st = new SellTicket();
        Thread t1 = new Thread(st, &quot;窗口1&quot;);
        Thread t2 = new Thread(st, &quot;窗口2&quot;);
        Thread t3 = new Thread(st, &quot;窗口3&quot;);
        t1.start();
        t2.start();
        t3.start();
    }
}

</code></pre>
<ul>
<li>同步方法：把<code>synchronized</code>关键字加到方法上
<ul>
<li>同步方法的锁对象：this</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public class SellTicket implements Runnable {
    private int tickets = 100;
    private Object object = new Object();
    private int i = 0;

    @Override
    public void run() {
        while(true){
            if(i%2==0){
                synchronized(this){
                    if (tickets &gt; 0) {
                        System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;票&quot;);
                        tickets--;
                    }else{
                        break;
                    }
                }
                i++;
            }else{
                sellTicket();
            }

        }
    }

    public synchronized void sellTicket(){
        if (tickets &gt; 0) {
            System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;票&quot;);
            tickets--;
        }
    }
}

public class SellTicketDemo {
    public static void main(String[] args) {
        SellTicket st = new SellTicket();
        Thread t1 = new Thread(st, &quot;窗口1&quot;);
        Thread t2 = new Thread(st, &quot;窗口2&quot;);
        Thread t3 = new Thread(st, &quot;窗口3&quot;);
        t1.start();
        t2.start();
        t3.start();
    }
}
</code></pre>
<ul>
<li>同步静态方法：在static后加上synchronized关键字
<ul>
<li>同步静态方法的锁对象：类名.class（反射）</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public class SellTicket implements Runnable {
    private static int tickets = 100;
    private Object object = new Object();
    private int i = 0;

    @Override
    public void run() {
        while(true){
            if(i%2==0){
                synchronized(SellTicket.class){
                    if (tickets &gt; 0) {
                        System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;票&quot;);
                        tickets--;
                    }else{
                        break;
                    }
                }
                i++;
            }else{
                sellTicket();
            }

        }
    }

    public static synchronized void sellTicket(){
        if (tickets &gt; 0) {
            System.out.println(Thread.currentThread().getName()+&quot;正在出售第&quot;+tickets+&quot;票&quot;);
            tickets--;
        }
    }
}

public class SellTicketDemo {
    public static void main(String[] args) {
        SellTicket st = new SellTicket();
        Thread t1 = new Thread(st, &quot;窗口1&quot;);
        Thread t2 = new Thread(st, &quot;窗口2&quot;);
        Thread t3 = new Thread(st, &quot;窗口3&quot;);
        t1.start();
        t2.start();
        t3.start();
    }
}
</code></pre>
<h3 id="5-线程安全的类">5. 线程安全的类</h3>
<h4 id="51-stringbuffer在多线程中会被使用到">5.1 StringBuffer(在多线程中会被使用到)</h4>
<h4 id="52-vector不常被使用">5.2 Vector（不常被使用）</h4>
<h4 id="53-hashtable不常被使用">5.3 Hashtable（不常被使用）</h4>
<blockquote>
<p>常使用Collections.synchronizedList（new ArrayList<String>()）将线程不安全的集合类变成线程安全的集合类</p>
</blockquote>
<h3 id="6-锁lockjdk15">6. 锁Lock（JDK1.5）</h3>
<ul>
<li>
<p>Lock实现同步比使用synchronized方法和语句可以获得更广泛的锁定操作</p>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public void lock（）：获得锁</li>
<li>public void unlock（）：释放锁</li>
</ul>
</li>
<li>
<p>实现类：ReentrantLock</p>
<ul>
<li>构造方法：
<ul>
<li>public ReentrantLock（）</li>
</ul>
</li>
<li>实现</li>
</ul>
<pre><code class="language-java">public class SellTicket implements Runnable {
    private static int tickets = 100;
    private Object object = new Object();
    private int i = 0;
    private Lock lock = new ReentrantLock();

    @Override
    public void run() {
        while (true) {
            try{
                lock.lock();
                if (tickets &gt; 0) {
                    System.out.println(Thread.currentThread().getName() + &quot;正在出售第&quot; + tickets + &quot;票&quot;);
                    tickets--;
                } else {
                    break;
                }
            }finally{
                lock.unlock();
            }
        }
    }
}

public class SellTicketDemo {
    public static void main(String[] args) {
        SellTicket st = new SellTicket();
        Thread t1 = new Thread(st, &quot;窗口1&quot;);
        Thread t2 = new Thread(st, &quot;窗口2&quot;);
        Thread t3 = new Thread(st, &quot;窗口3&quot;);
        t1.start();
        t2.start();
        t3.start();
    }
}
</code></pre>
</li>
</ul>
<h3 id="7-死锁问题">7. 死锁问题</h3>
<figure data-type="image" tabindex="25"><img src="http://pic.zyblog.xyz/img/typora/20201216100635.png" alt="image-20201216100627936" loading="lazy"></figure>
<h4 id="71-同步弊端">7.1 同步弊端</h4>
<ul>
<li>效率低</li>
<li>如果出现了同步嵌套，容易出现死锁</li>
</ul>
<h4 id="72-死锁的产生">7.2 死锁的产生</h4>
<ul>
<li>
<p>概述：死锁或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于<em>死锁</em>状态或系统产生了<em>死锁</em>，这些永远在互相等待的进程称为<em>死锁</em>进程。</p>
</li>
<li>
<p>产生：我们在解决多线程共享资源的线程同步问题时，会使用synchronized关键字修饰方法或者通过Lock加锁方式修饰方法、代码块，防止多个线程访问统一资源产生的线程安全问题。但是当线程X持有锁A，等待锁B，而线程Y此时持有锁B，等待锁A时，就会出现X，Y两个线程互相等待的情况，这种情况就是死锁。</p>
</li>
<li>
<p>产生条件</p>
<ul>
<li>互斥条件：一个资源每次只能被一个进程使用。</li>
<li>保持和请求条件：一个进程因请求资源而阻塞时，对已获得资源保持不放。</li>
<li>不可剥夺条件：进程已获得资源，在未使用完成前，不能被剥夺。</li>
<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>
</ul>
</li>
</ul>
<h4 id="73-死锁的解决">7.3 死锁的解决</h4>
<ul>
<li>只要破坏其中任意一个条件，就可以避免死锁，其中最简单的就是破环循环等待条件。按同一顺序访问对象，加载锁，释放锁。</li>
</ul>
<h3 id="8-线程间的通信等待唤醒机制">8. 线程间的通信（等待唤醒机制）</h3>
<h4 id="81-概述">8.1 概述</h4>
<ul>
<li>多个线程在处理同一个资源，但是处理的任务不相同</li>
</ul>
<h4 id="82-等待唤醒机制">8.2 等待唤醒机制</h4>
<ul>
<li>
<p>多个线程间的⼀种协作机制。谈到线程我们经常想到的是线程间的竞争( race )，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。就好比在公司你你和你的同事，你们可能存在在晋升时的竞争，但更多时候你们更多是⼀起合作以完成某些任务。</p>
<p>就是在⼀个线程进行了规定操作后，就进⼊等待状态( wait（）)，等待其他线程执行完他们的指定代码过后再将其唤醒( notify（） )；在有多个线程进⾏等待时，如果需要，可以使⽤ notifyAll（）来唤醒所有的等待线程。</p>
<p>wait/notify 就是线程间的⼀种协作机制。</p>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>wait（）：线程不再活动，不再参与调度，进入wait set中，因此不会浪费CPU资源，也不会去竞争锁，此时线程状态为WAITING，等待其他线程完成指定任务，使用notify通知当前线程从wait set中释放出来，重新进入调度队列</li>
<li>notify（）：通知处在wait set中的线程释放进入调度队列</li>
<li>notifyAll（）：通知所有处在wait set中的线程释放进入调度队列</li>
</ul>
<blockquote>
<p>注意：<br>
哪怕只通知了⼀个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，<br>
所以它需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调⽤ wait 方法之后的地方恢复执行。<br>
总结如下：</p>
<ul>
<li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态；</li>
<li>否则，从 wait set 出来，又进⼊ entry set，线程就从WAITING状态⼜变成BLOCKED 状态。</li>
</ul>
</blockquote>
</li>
<li>
<p>注意事项</p>
<ul>
<li>wait方法与notify方法必须要由同⼀个锁对象调用。因为：对应的锁对象可以通过notify唤<br>
醒使用同⼀个锁对象调用的wait方法后的线程。</li>
<li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对<br>
象的所属类都是继承了Object类的。</li>
<li>wait方法与notify方法必须要在同步代码块或者是同步函数中使⽤。因为：必须要通过锁对<br>
象调用这2个方法。</li>
</ul>
</li>
</ul>
<h4 id="83-生产者消费者问题">8.3 生产者消费者问题</h4>
<figure data-type="image" tabindex="26"><img src="http://pic.zyblog.xyz/img/typora/20201216110343.png" alt="image-20201216110342885" loading="lazy"></figure>
<figure data-type="image" tabindex="27"><img src="http://pic.zyblog.xyz/img/typora/20201216110904.png" alt="image-20201216110904509" loading="lazy"></figure>
<ul>
<li>代码实现</li>
</ul>
<pre><code class="language-java">public class BaoZi {
    private String pi;
    private String xian;
    private boolean flag = false;

    public String getPi() {
        return pi;
    }

    public String getXian() {
        return xian;
    }

    public boolean isFlag() {
        return flag;
    }

    public void setPi(String pi) {
        this.pi = pi;
    }

    public void setXian(String xian) {
        this.xian = xian;
    }

    public void setFlag(boolean flag) {
        this.flag = flag;
    }
}

public class BaoZiPu implements Runnable{
    private BaoZi bz;

    public BaoZiPu(BaoZi bz) {
        this.bz = bz;
    }

    @Override
    public void run() {
        int count = 0;
        while(true){
            synchronized (bz){
                if(bz.isFlag()){
                    try {
                        bz.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }else{
                    if(count%2==0){
                        bz.setPi(&quot;薄皮&quot;);
                        bz.setXian(&quot;猪肉大葱&quot;);
                    }else{
                        bz.setPi(&quot;冰皮&quot;);
                        bz.setXian(&quot;韭菜鸡蛋&quot;);
                    }
                    count++;
                    System.out.println(&quot;包子铺正在做：&quot;+bz.getPi()+bz.getXian()+&quot;包子&quot;);
                    try {
                        Thread.sleep(300);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    bz.setFlag(true);
                    bz.notify();
                    System.out.println(&quot;包子已经做好了：&quot;+bz.getPi()+bz.getXian()+&quot;包子，大家可以来买了&quot;);
                }
            }
        }

    }
}

public class ChiHuo implements Runnable{
    private BaoZi bz;

    public ChiHuo(BaoZi bz) {
        this.bz = bz;
    }

    @Override
    public void run() {
        while(true){
            synchronized (bz){
                if(!bz.isFlag()){
                    try {
                        bz.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }else{
                    System.out.println(&quot;吃货正在吃：&quot;+bz.getPi()+bz.getXian()+&quot;的包子&quot;);
                    try {
                        Thread.sleep(300);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    bz.setFlag(false);
                    bz.notify();
                    System.out.println(&quot;吃货已经把：&quot;+bz.getPi()+bz.getXian()+&quot;的包子吃完了&quot;);
                    System.out.println(&quot;===================================================&quot;);
                }
            }
        }
    }
}

public class Demo {
    public static void main(String[] args) {
        BaoZi bz = new BaoZi();
        new Thread(new BaoZiPu(bz)).start();
        new Thread(new ChiHuo(bz)).start();
    }
}
</code></pre>
<h3 id="9-线程池">9. 线程池</h3>
<ul>
<li>概述：我们使用线程时如果并发的线程数量很多，并且每个线程都是执行一个很短的任务就结束了，这样频繁地创建线程就会大大降低系统的效率</li>
<li>线程池：就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，以避免消耗过多的资源</li>
<li>原理：集合容器，队列思想
<ul>
<li><img src="http://pic.zyblog.xyz/img/typora/20201216114458.png" alt="image-20201216114457792" loading="lazy"></li>
<li><img src="http://pic.zyblog.xyz/img/typora/20201216114530.png" alt="image-20201216114530635" loading="lazy"></li>
</ul>
</li>
<li>代码实现：
<ul>
<li>包：<code>java.util.concurrent.Executors</code>：线程池的工厂类，用来生成线程池</li>
<li>静态方法：
<ul>
<li><code>public static ExecutorService newFixedThreadPool（int nThreads）</code>：创建一个可重用的线程数的线程池
<ul>
<li>参数：<code>int nThread</code>（创建线程池中包含的线程数量）</li>
<li>返回值：<code>ExecutorService</code>接口，返回ExecutorService接口的实现类对象
<ul>
<li><code>java.util.concurrent.ExecutorService</code>：线程池接口
<ul>
<li><code>submit（Runnable task）</code>：提交一个Runnable任务用于执行</li>
<li><code>void shutdown（） </code>：关闭销毁线程池的方法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>线程池使用步骤
<ol>
<li>使用线程池的工厂类Executors里提供的静态方法newFixedThreadPool生成一个指定数量的线程池</li>
<li>创建一个类，实现Runnable接口，重写run方法，设置线程任务</li>
<li>调用ExecutorService中的静态方法submit，传递线程任务（实现类），开启线程，执行run方法</li>
<li>调用ExecutorService中的方法shutdown销毁线程池（不建议执行）</li>
</ol>
</li>
</ul>
<pre><code class="language-java">public class ThreadPoolDemo{
    public static void main(String [] args){
        //1.使用线程池的工厂类Executors里提供的静态方法newFixedThreadPool生成一个指定数量的线程池
        ExecutorService es = Executors.newFixedThreadPool(2);
        //2.创建一个类，实现Runnable接口，重写run方法，设置线程任务
        //3.调用ExecutorService中的静态方法submit，传递线程任务（实现类），开启线程，执行run方法
        es.submit(new MyThread()));
        es.submit(new MyThread()));
        es.submit(new MyThread()));
        es.shutdown();
        es.submit(new MyThread()));//抛异常，线程池已经被销毁了，不能再获取线程了
    }
}
public class MyThread implements Runnable{
    @Override
    public void run(){
        System.out.println(Thread.currentThread().getName()+&quot;创建了一个新线程&quot;);
    }
}
</code></pre>
<h3 id="10-线程组">10. 线程组</h3>
<figure data-type="image" tabindex="30"><img src="http://pic.zyblog.xyz/img/typora/20201216121657.jpeg" alt="img" loading="lazy"></figure>
<ul>
<li>可以把线程归属到某一个线程组中，线程组中可以有线程对象，也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式</li>
<li>线程组的作用是：可以批量管理线程或线程组对象，有效地对线程或线程组对象进行组织</li>
<li>包：java.lang.ThreadGroup</li>
<li>构造方法
<ul>
<li>ThreadGroup（String name）</li>
<li>ThreadGroup（ThreadGroup parent，String name）</li>
</ul>
</li>
<li>代码实现</li>
</ul>
<pre><code class="language-java">public class MyThread implements Runnable{
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName());
    }
}
public class ThreadGroupDemo {
    public static void main(String[] args) {
        ThreadGroup g1 = new ThreadGroup(&quot;线程组1&quot;);
        Thread t1 = new Thread(g1, new MyThread(), &quot;a&quot;);
        Thread t2 = new Thread(g1, new MyThread(), &quot;b&quot;);
        System.out.println(t1.getThreadGroup());
        System.out.println(t2.getThreadGroup());

    }
}
</code></pre>
<ul>
<li>多线程实现文件上传</li>
</ul>
<pre><code class="language-java">
</code></pre>
<ul>
<li>多线程实现文件下载</li>
</ul>
<pre><code class="language-java">
</code></pre>
<h3 id="11-定时器">11. 定时器</h3>
<ul>
<li>线程工具，用来调度多个定时任务，以后台线程的方式执行</li>
</ul>
<h4 id="111-类javautiltimer-和-javautiltimertask">11.1 类：java.util.Timer 和 java.util.TimerTask</h4>
<ul>
<li>java.util.Timer</li>
<li>线程调度任务以供将来在后台线程中执行的功能。 任务可以安排一次执行，或定期重复执行。
<ul>
<li>方法
<ul>
<li>void schedule（TimeTasj task，Data time）</li>
<li>void cancle（）</li>
</ul>
</li>
</ul>
</li>
<li>java.util.TimerTask
<ul>
<li>方法
<ul>
<li>boolean cancle（）</li>
<li>abstract void run（）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="12-小结">12. 小结</h3>
<blockquote>
<ol>
<li>多线程的实现方式有几种</li>
<li>同步有几种方式</li>
<li>启动线程的方式</li>
<li>sleep和wait方法的区别</li>
<li>为什么wait和notify方法在Object中</li>
<li>线程的生命周期</li>
<li>练习：多线程网络编程群聊</li>
</ol>
</blockquote>
<h2 id="79-网络编程">79. 网络编程</h2>
<h3 id="1-计算机网络">1. 计算机网络</h3>
<ul>
<li>计算机之间为了实现资源共享和信息传递，通过通信线路连接起来的若干计算机组成的网络
<ul>
<li>局域网</li>
<li>城域网</li>
<li>广域网</li>
</ul>
</li>
</ul>
<h3 id="2-网络模型osi">2. 网络模型（OSI）</h3>
<ul>
<li>OSI（Open System Interconnection开放式系统互联）参考模型（理论模型，但实际上没有人用这个标准）
<ul>
<li>物理层：负责为设备之间的数据通信提供传输信号和物理介质</li>
<li>数据链路层：负责通过协议保证传输数据的正确性MAC</li>
<li>网络层：负责定义能够表示所有网络节点的逻辑地址IP地址</li>
<li>传输层：负责是否选择差错恢复协议、数据流重用、错误顺序重排</li>
<li>会话层：负责使应用建立和维持会话，使通信在失效时继续恢复通信</li>
<li>表示层：负责定义转换数据格式及加密</li>
<li>应用层：负责文件访问和管理、可靠传输服务、远程操作服务（HTTP、FTP、SMTP）</li>
</ul>
</li>
<li>TCP/IP模型
<ul>
<li>网络接口层</li>
<li>网络层</li>
<li>传输层</li>
<li>应用层</li>
</ul>
</li>
</ul>
<h3 id="3-通信协议">3. 通信协议</h3>
<ul>
<li>TCP协议（Transmission Control Protocol传输控制协议）：三次握手，四次挥手</li>
<li>UDP协议（User Datagram Protocol用户数据报协议）：无连接的传输协议，不可靠的信息传输服务，每个包最大64KB</li>
<li>IP协议（Internet Protocol互联网协议/网际协议）：负责数据从一台机器发送到另一台机器，给互联网每台设备分配一个唯一的标识IP地址
<ul>
<li>IPv4（4字节32位二进制标识地址）：4段8位二进制数</li>
<li>IPv6（16字节128位二进制标识地址）：8段十六进制数</li>
</ul>
</li>
</ul>
<h3 id="4-ip地址与端口号">4. IP地址与端口号</h3>
<ul>
<li>IP地址：用于在网络中唯一标识一台主机的一段地址（主机）</li>
<li>端口号：用于在通信实体上进行网络通讯应用程序的标识（进程）
<ul>
<li>常用端口号：
<ul>
<li>MySQL：3306</li>
<li>Oracle：1521</li>
<li>Tomcat：8080</li>
<li>HTTP：80</li>
<li>FTP：21</li>
<li>SMTP：25</li>
</ul>
</li>
<li>用户端口（1024以后的端口）</li>
</ul>
</li>
</ul>
<h3 id="5-java网络编程">5. Java网络编程</h3>
<h4 id="51-inetaddress">5.1 InetAddress</h4>
<ul>
<li>包：java.net.InetAddress</li>
<li>子类：
<ul>
<li>Inet4Address</li>
<li>Inet6Address</li>
</ul>
</li>
<li>无构造方法</li>
<li>常用方法：
<ul>
<li>public static InetAddress[ ] getAllByName（String host）：根据指定主机名称的配置返回InetAddress对象数组</li>
<li>public static InetAddress getByAddress（byte[ ] addr）：根据指定IP地址字节数组返回InetAddress对象</li>
<li>public static InetAddress getByAddress（String host，byte[ ] addr）：根据指定主机名称和IP地址字节数组返回InetAddress对象</li>
<li>public boolean equals（Object obj）：比较两个对象</li>
<li>public byte[ ] getAddress（）：返回InetAddress对象的原始IP地址</li>
<li>public static InetAddress getLocalHost（）：获取本机主机InetAddress对象</li>
<li>public String getHostAddress（）：获取IP地址字符串</li>
<li>public String getHostName（）：获取IP地址对应主机名</li>
<li>public boolean isReachable（int timeout）：测试改地址是否可达，参数单位毫秒</li>
<li>public String toString（）：将IP地址转为String</li>
</ul>
</li>
</ul>
<h4 id="52-socket编程">5.2 Socket编程</h4>
<ul>
<li>
<p>socket（套接字）是网络中的一个通信节点：网络中通信端点的抽象</p>
<ul>
<li>客户端Socket</li>
<li>服务器ServerSocket</li>
</ul>
</li>
<li>
<p>通信要求：IP地址+端口号</p>
</li>
<li>
<p>开发步骤</p>
<ul>
<li>
<p>服务器端：</p>
<ul>
<li>创建ServerSocket，指定端口号</li>
<li>调用accept等待客户端接入</li>
<li>使用输入流，接收请求数据到服务器</li>
<li>使用输出流，发送响应数据给客户端</li>
<li>释放资源</li>
</ul>
</li>
<li>
<p>客户端：</p>
<ul>
<li>创建Socket，指定服务器IP地址+端口号</li>
<li>使用输出流，发送请求数据给服务器</li>
<li>使用输入流，接受相应数据到客户端</li>
<li>释放资源</li>
</ul>
</li>
</ul>
</li>
<li>
<p>ServerSocket类</p>
<ul>
<li>包：java.net.ServerSocket</li>
<li>子类：java.net.SSLServerSocket</li>
<li>构造方法：
<ul>
<li>public ServerSocket（）：创建未绑定的服务器套接字</li>
<li>public ServerSocket（int port）：创建绑定到指定端口号的服务器套接字</li>
<li>public ServerSocket（int port，int backlog）：创建服务器套接字并绑定到指定本地端口号和backlog</li>
<li>public ServerSocket（int port，int backlog，InetAddress bindAddr）：创建绑定指定端口号的套接字，backlog和本地IP地址绑定</li>
</ul>
</li>
<li>常用方法：
<ul>
<li>public Socket accept（）：监听客户端数据，并返回客户端的Socket</li>
<li>public void bind（SocketAddress endpoint）：将ServerSocket绑定到特定IP地址和端口号</li>
<li>public void bind（SocketAddress endpoint，int backlog）</li>
<li>public void close（）：关闭套接字</li>
<li>public ServerSocketChannel getChannel（）</li>
<li>public InetAddress getInetAddress（）：返回ServerSocket的本地地址</li>
<li>public int getLocalPort（）：返回ServerSocket正在使用的端口号</li>
<li>public SocketAddress getLocalSocketAddress（）</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>案例1：TCP编程实现客户端发送数据给服务器端</p>
<pre><code class="language-java">package com.demo.javase;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * 基于TCp协议的服务端开发
 * ①.创建ServerSocket，并绑定端口号
 * ②.调用accept（）接收客户端请求
 * ③.获取输入流，读取客户端发送数据
 * ④.获取输出流，发送数据给客户端
 * @author 絷缘
 * @version 1.0
 * @date 2020/12/8 21:46
 **/
public class TCPServer {
    public static void main(String[] args) throws IOException {
        System.out.println(&quot;服务器已启动......&quot;);
        //①.创建ServerSocket，并绑定端口号
        ServerSocket listener = new ServerSocket(8890);
        //②.调用accept（）接收客户端请求，阻塞方法，如果没有客户端请求，则阻塞
        Socket socket = listener.accept();
        InputStream inputStream = socket.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
        String data = br.readLine();
        System.out.println(&quot;客户端IP：&quot; + socket.getInetAddress() + &quot;\t发送数据：&quot; + data + &quot;\t时间：&quot; + new SimpleDateFormat(&quot;yyyy-MM-dd kk:mm:ss&quot;).format(new Date(System.currentTimeMillis())));
        br.close();
        socket.close();
        listener.close();
    }
}
</code></pre>
<pre><code class="language-java">package com.demo.javase;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.nio.charset.StandardCharsets;

/**
 * 基于TCP的客户端开发
 * ①.创建客户端套接字，并指定服务器的IP地址和端口号
 * ②.获取输出流，发送数据给服务器
 * ③.获取输入流，接收服务器返回数据
 * ④.关闭，释放资源
 * @author 絷缘
 * @version 1.0
 * @date 2020/12/8 22:04
 **/
public class TCPClient {
    public static void main(String[] args) throws IOException {
        System.out.println(&quot;客户端已启动......&quot;);
        //①.创建客户端套接字，并指定服务器的IP地址和端口号
        Socket socket = new Socket(&quot;127.0.0.1&quot;,8890);
        //②.获取输出流，发送数据给服务器
        OutputStream outputStream = socket.getOutputStream();
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
        bw.write(&quot;Are you OK ?&quot;);
        bw.close();
        socket.close();
    }
}
</code></pre>
</blockquote>
<h4 id="53-udp协议发送接收数据">5.3 UDP协议发送接收数据</h4>
<ul>
<li>
<p>步骤</p>
<ul>
<li>创建发送端的Socket对象</li>
<li>创建数据，把数据打包</li>
<li>调用Socket对象的方法发送数据</li>
<li>释放资源</li>
<li>创建接收端的Socket对象</li>
<li>创建接收数据包容器</li>
<li>接收数据并解析数据</li>
<li>释放资源</li>
</ul>
<pre><code class="language-java">public class UDPSend {
    public static void main(String[] args) throws IOException {
        DatagramSocket ds = new DatagramSocket();
        byte[] bytes = &quot;你好！&quot;.getBytes();
        DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getLocalHost(),8090);
        ds.send(dp);
    }
}

public class UDPReceive {
    public static void main(String[] args) throws IOException {
        //创建接收端Socket
        DatagramSocket ds = new DatagramSocket(8090);
        //创建一个数据包，作为接收容器
        byte [] bys = new byte[1024];
        DatagramPacket dp = new DatagramPacket(bys,bys.length);
        ds.receive(dp);
        //接收数据，解析数据并打印到控制台
        byte[] data = dp.getData();
        String str = new String(data,0,data.length);
        System.out.println(new StringBuffer().append(&quot;发送方IP：&quot;).append(dp.getAddress()).append(&quot;\t发送内容：&quot;).append(str).toString());
        //关闭资源
    }
}
</code></pre>
</li>
</ul>
<h4 id="54-tcp协议发送接收数据">5.4 TCP协议发送接收数据</h4>
<ul>
<li>创建客户端的Socket对象（Socket）</li>
<li>获取输出流对象，写数据</li>
<li>释放资源</li>
<li>创建服务器端的Socket对象（ServerSocket）</li>
<li>获取输入流对象，读数据</li>
<li>释放资源</li>
</ul>
<pre><code class="language-java">public class TCPClient {
    public static void main(String[] args) throws IOException {
        System.out.println(&quot;客户端已启动......&quot;);
        //①.创建客户端套接字，并指定服务器的IP地址和端口号
        Socket socket = new Socket(&quot;127.0.0.1&quot;,8890);
        //②.获取输出流，发送数据给服务器
        OutputStream outputStream = socket.getOutputStream();
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
        bw.write(&quot;Are you OK ?&quot;);
        bw.close();
        socket.close();
    }
}
public class TCPServer {
    public static void main(String[] args) throws IOException {
        System.out.println(&quot;服务器已启动......&quot;);
        //①.创建ServerSocket，并绑定端口号
        ServerSocket listener = new ServerSocket(8890);
        //②.调用accept（）接收客户端请求，阻塞方法，如果没有客户端请求，则阻塞
        Socket socket = listener.accept();
        InputStream inputStream = socket.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
        String data = br.readLine();
        System.out.println(&quot;客户端IP：&quot; + socket.getInetAddress() + &quot;\t发送数据：&quot; + data + &quot;\t时间：&quot; + new SimpleDateFormat(&quot;yyyy-MM-dd kk:mm:ss&quot;).format(new Date(System.currentTimeMillis())));
        br.close();
        socket.close();
        listener.close();
    }
}
</code></pre>
<ul>
<li>服务器可以反馈</li>
</ul>
<pre><code class="language-java">public class TCPServer {
    public static void main(String[] args) throws IOException {
        System.out.println(&quot;服务器已启动......&quot;);
        //①.创建ServerSocket，并绑定端口号
        ServerSocket listener = new ServerSocket(8890);
        //②.调用accept（）接收客户端请求，阻塞方法，如果没有客户端请求，则阻塞
        Socket socket = listener.accept();
        InputStream inputStream = socket.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
        String data = br.readLine();
        System.out.println(&quot;客户端IP：&quot; + socket.getInetAddress() + &quot;\t发送数据：&quot; + data + &quot;\t时间：&quot; + new SimpleDateFormat(&quot;yyyy-MM-dd kk:mm:ss&quot;).format(new Date(System.currentTimeMillis())));
        //给反馈
        OutputStream outputStream = socket.getOutputStream();
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(outputStream,StandardCharsets.UTF_8));
        bw.write(&quot;Hello!Thank you!Thank you very much!&quot;);
        bw.newLine();
        bw.flush();

        socket.close();
        listener.close();
    }
}


public class TCPClient {
    public static void main(String[] args) throws IOException {
        System.out.println(&quot;客户端已启动......&quot;);
        //①.创建客户端套接字，并指定服务器的IP地址和端口号
        Socket socket = new Socket(&quot;127.0.0.1&quot;,8890);
        //②.获取输出流，发送数据给服务器
        OutputStream outputStream = socket.getOutputStream();
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
        bw.write(&quot;Are you OK ?&quot;);
        bw.newLine();
        bw.flush();
        //接受反馈
        InputStream inputStream = socket.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
        String str = br.readLine();
        System.out.println(&quot;服务器：&quot; + str);

        bw.close();
        br.close();
        socket.close();
    }
}
//在此处我犯了一个严重的错误，如果使用BufferedWriter 不加newLine()和flush()的话，服务端BufferedReader的readline()方法就读取不到msg,会一直阻塞下去。
</code></pre>
<h3 id="6-网络编程模型">6. 网络编程模型</h3>
<h4 id="61-bio网络编程模型同步阻塞的bioblocking-io">6.1 BIO网络编程模型（同步阻塞的BIO）【Blocking I/O】</h4>
<ul>
<li>JDK1.4之前，我们使用的都是BIO，我们想要实现ServerSocket和Socket之间的通信，需要使用多线程来处理大量请求</li>
<li>同步阻塞I/O，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制来改善。BIO方式适用于连接数目比较小且固定的架构，这种方式对服务端资源要求比较高，并发局限于应用中，在jdk1.4以前是唯一的io现在，但程序直观简单易理解</li>
</ul>
<figure data-type="image" tabindex="31"><img src="http://pic.zyblog.xyz/img/typora/20201210143814.png" alt="image-20201210143814190" loading="lazy"></figure>
<h4 id="62-nio网络编程模型同步非阻塞nionon-blocking-io">6.2 NIO网络编程模型（同步非阻塞NIO）【Non-blocking I/O】</h4>
<ul>
<li>NIO是基于事件驱动思想来完成的</li>
<li>同步非阻塞I/O，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有IO请求时才启动一个线程进行处理。NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，jdk1,4开始支持</li>
</ul>
<figure data-type="image" tabindex="32"><img src="http://pic.zyblog.xyz/img/typora/20201210144443.png" alt="image-20201210144443494" loading="lazy"></figure>
<h4 id="63-aio网络编程模型异步非阻塞aio">6.3 AIO网络编程模型（异步非阻塞AIO）</h4>
<ul>
<li>异步非阻塞I/O，服务器实现模式为一个有效请求一个线程，客户端的IO请求都是由操作系统先完成了再通知服务器用其启动线程进行处理。AIO方式适用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，jdk1.7开始支持。</li>
</ul>
<h3 id="7-nio">7. NIO</h3>
<figure data-type="image" tabindex="33"><img src="http://pic.zyblog.xyz/img/typora/20201210140416.png" alt="image-20201210140343354" loading="lazy"></figure>
<blockquote>
<p>参考文档：https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html</p>
</blockquote>
<h4 id="71-nio与传统io的区别">7.1 NIO与传统IO的区别</h4>
<ul>
<li>NIO简介
<ul>
<li>Java NIO（New IO/Non-Blocking IO）是从Java1.4版本开始引入的一个新的IO，为了替代传统的阻塞式IO，NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的、基于通道的IO操作，NIO将以更加高效的方式进行文件的读写操作。</li>
</ul>
</li>
<li>区别
<ul>
<li>传统的IO是面向流的，NIO是面向缓冲区的</li>
<li>传统的IO是阻塞式IO，NIO是非阻塞式的</li>
<li>传统的IO没有选择器，NIO有选择器</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="34"><img src="http://pic.zyblog.xyz/img/typora/20201213100459.png" alt="image-20201213100451064" loading="lazy"></figure>
<h4 id="72-通道channel和缓冲区buffer">7.2 通道（Channel）和缓冲区（Buffer）</h4>
<ul>
<li>
<p>概述：</p>
<ul>
<li>Java NIO系统的核心在于：通道（Channel）和缓冲区（Buffer），通道用于建立起到IO设备的连接（例如：文件、套接字），所以如果需要使用NIO时，首先就要获取一个连接到IO设备的通道，然后通过与缓冲区结合，对数据进行读写处理</li>
</ul>
<blockquote>
<p>简而言之：Channel负责传输，Buffer负责存储</p>
</blockquote>
</li>
</ul>
<h4 id="73-缓冲区buffer">7.3 缓冲区（Buffer）</h4>
<ul>
<li>
<p>java.nio.Buffer：抽象类</p>
</li>
<li>
<p>概述：负责数据存取，缓存区底层就是数组</p>
</li>
<li>
<p>根据数据类型的不同，提供了相应的缓冲区（Boolean除外）</p>
<ul>
<li>ByteBuffer</li>
<li>ShortBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>FloatBuffer</li>
<li>DoubleBuffer</li>
<li>CharBuffer</li>
</ul>
</li>
<li>
<p>四个重要属性：</p>
<ul>
<li>Capacity：容量</li>
<li>Position：位置</li>
<li>Limit：上限</li>
<li>Mark：标记</li>
</ul>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public int capacity（）：返回缓冲区容量</li>
<li>public Buffer clear（）：清除此缓冲区</li>
<li>public Buffer flip（）：反转这个缓冲区，由写变读，由读变写</li>
<li>public boolean hasRemaining（）：当前位置position到上限limit是否存在元素</li>
<li>public int limit（）：返回缓冲区的上限</li>
<li>public Buffer limit（int newLimit）：设置此缓冲区的上限</li>
<li>public Buffer mark（）：设置此缓冲区的标记</li>
<li>public int position（）：返回此缓冲区的位置</li>
<li>public Buffer position（int newPosition）：设置此缓冲区的位置</li>
<li>public int remaining（）：返回当前位置和上限之间的元素</li>
<li>public Buffer reset（）：将此缓冲区的位置重置为上一次标记的位置</li>
<li>public Buffer rewind（）：倒带缓冲区四大属性</li>
</ul>
</li>
<li>
<p>非直接缓冲区（使用allocate方法获取缓冲区对象，创建在JVM内存中）</p>
<ul>
<li>allocate（）：获取非直接缓冲区对象</li>
<li>put（）：存入数据到缓冲区中</li>
<li>get（）：从缓冲区中读取数据</li>
<li>limit（）：获取缓冲区上限</li>
<li>position（）：获取缓冲区位置</li>
<li>capacity（）：获取缓冲区容量</li>
<li>mark（）：设置缓冲区标记</li>
<li>reset（）：重置position到上一次mark处</li>
<li>clear（）：清除缓冲区，position为0，limit为capacity</li>
</ul>
<pre><code class="language-java">//使用allocate分配一个指定大小的缓冲区
System.out.println(&quot;=================allocate()方法创建缓冲区后===================&quot;);
ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
System.out.println(&quot;position:&quot; + byteBuffer.position());
System.out.println(&quot;limit:&quot; + byteBuffer.limit());
System.out.println(&quot;capacity:&quot; + byteBuffer.capacity());
System.out.println(&quot;===================put()方法加入数据后=================&quot;);
byteBuffer.put(&quot;HelloWorld!&quot;.getBytes());
System.out.println(&quot;position:&quot; + byteBuffer.position());
System.out.println(&quot;limit:&quot; + byteBuffer.limit());
System.out.println(&quot;capacity:&quot; + byteBuffer.capacity());
System.out.println(&quot;===================flip()方法切换读数据模式后================&quot;);
byteBuffer.flip();
System.out.println(&quot;position:&quot; + byteBuffer.position());
System.out.println(&quot;limit:&quot; + byteBuffer.limit());
System.out.println(&quot;capacity:&quot; + byteBuffer.capacity());
System.out.println(&quot;===================get()方法读取数据后================&quot;);
byte [] dst = new byte[byteBuffer.limit()];
byteBuffer.get(dst);
System.out.println(&quot;position:&quot; + byteBuffer.position());
System.out.println(&quot;limit:&quot; + byteBuffer.limit());
System.out.println(&quot;capacity:&quot; + byteBuffer.capacity());
System.out.println(&quot;====================rewind()方法执行后===================&quot;);
byteBuffer.rewind();
System.out.println(&quot;position:&quot; + byteBuffer.position());
System.out.println(&quot;limit:&quot; + byteBuffer.limit());
System.out.println(&quot;capacity:&quot; + byteBuffer.capacity());
System.out.println(&quot;==================clear()方法执行后=======================&quot;);
byteBuffer.clear();
System.out.println(&quot;position:&quot; + byteBuffer.position());
System.out.println(&quot;limit:&quot; + byteBuffer.limit());
System.out.println(&quot;capacity:&quot; + byteBuffer.capacity());
/*
clear()方法并非删除了数据，而是将position变为0，limit变为capacity的大小，数据依然存在
*/
System.out.println((char)byteBuffer.get(1));
byte [] bys = new byte[1024];
System.out.println((char)byteBuffer.get(1));
byteBuffer.get(bys,0,2);
System.out.println(new String(bys,0,bys.length));
byteBuffer.mark();
byteBuffer.get(bys,2,4);
System.out.println(new String(bys,0,bys.length));
byteBuffer.reset();
byteBuffer.get(bys,2,4);
System.out.println(new String(bys,0,bys.length));

=================allocate()方法创建缓冲区后===================
position:0
limit:1024
capacity:1024
===================put()方法加入数据后=================
position:11
limit:1024
capacity:1024
===================flip()方法切换读数据模式后================
position:0
limit:11
capacity:1024
===================get()方法读取数据后================
position:11
limit:11
capacity:1024
====================rewind()方法执行后===================
position:0
limit:11
capacity:1024
==================clear()方法执行后=======================
position:0
limit:1024
capacity:1024
e
He                                                                            
HelloW                                                                                 
HelloW                                                                                 
</code></pre>
</li>
<li>
<p>直接缓冲区（使用allocateDirect方法获取缓冲区对象，创建在物理内存中）</p>
<ul>
<li>allocateDirect（）：获取直接缓冲区对象</li>
<li>put（）：存入数据到缓冲区中</li>
<li>get（）：从缓冲区中读取数据</li>
<li>limit（）：获取缓冲区上限</li>
<li>position（）：获取缓冲区位置</li>
<li>capacity（）：获取缓冲区容量</li>
<li>mark（）：设置缓冲区标记</li>
<li>reset（）：重置position到上一次mark处</li>
<li>clear（）：清除缓冲区，position为0，limit为capacity</li>
</ul>
<pre><code class="language-java">ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024);
byteBuffer.put(&quot;zhiyuan&quot;.getBytes());
System.out.println(byteBuffer.isDirect());
</code></pre>
</li>
<li>
<p>直接缓冲区和非直接缓冲区的区别</p>
</li>
</ul>
<figure data-type="image" tabindex="35"><img src="http://pic.zyblog.xyz/img/typora/20201213184555.jpeg" alt="非直接缓冲区" loading="lazy"></figure>
<hr>
<figure data-type="image" tabindex="36"><img src="http://pic.zyblog.xyz/img/typora/20201213184622.jpeg" alt="直接缓冲区" loading="lazy"></figure>
<h4 id="74-通道channel">7.4 通道（Channel）</h4>
<ul>
<li>
<p>用于建立起与IO设备的连接，结合缓冲区实现读写数据</p>
</li>
<li>
<p>特性</p>
<ul>
<li>双向性：类似于流，但不同于InputStream和OutputStream，流具有单向性和独占性，通道则偏向于数据的流通性，一个Channel支持双向传输（输入、输出）</li>
<li>非阻塞式</li>
<li>操作唯一性</li>
</ul>
</li>
<li>
<p>实现</p>
<ul>
<li>文件类：FileChannel</li>
<li>UDP类：DatagramChannel</li>
<li>TCP类：ServerSocketChannel / SocketChannel</li>
</ul>
</li>
<li>
<p>获取通道</p>
<ol>
<li>通过支持通道的类提供的<code>getChannel()</code>获取
<ul>
<li>FileInputStream/FileOutputStream</li>
<li>RandomAccessFile</li>
<li>ServerSocket/Socket</li>
<li>DatagramSocket</li>
</ul>
</li>
<li>JDK1.7以后NIO2针对各个类提供了静态方法<code>open()</code>获取</li>
<li>JDK1.7以后NIO2的Files工具类提供了<code>newByteChannel()</code>获取</li>
</ol>
</li>
<li>
<p>利用通道完成文件的复制</p>
</li>
</ul>
<pre><code class="language-java">//使用非直接缓冲区完成文件的复制
public static void test1() throws IOException {
        FileInputStream fis = new FileInputStream(&quot;E:\\壁纸\\壁纸\\212.jpg&quot;);
        FileOutputStream fos = new FileOutputStream(&quot;copy1.jpg&quot;);
        FileChannel inChannel = fis.getChannel();
        FileChannel outChannel = fos.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(1024);
        while(inChannel.read(buffer)!=-1){
            buffer.flip();
            outChannel.write(buffer);
            buffer.clear();
        }
        outChannel.close();
        inChannel.close();
        fos.close();
        fis.close();
    }
//使用直接缓冲区通道写数据
public static void test2() throws IOException{
        FileInputStream fis = new FileInputStream(&quot;E:\\壁纸\\壁纸\\212.jpg&quot;);
        FileOutputStream fos = new FileOutputStream(&quot;copy2.jpg&quot;);
        FileChannel inChannel = fis.getChannel();
        FileChannel outChannel = fos.getChannel();
        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024);
        while(inChannel.read(byteBuffer)!=-1){
            byteBuffer.flip();
            outChannel.write(byteBuffer);
            byteBuffer.clear();
        }
        outChannel.close();
        inChannel.close();
        fos.close();
        fis.close();
    }
//使用直接缓冲区完成文件的复制（使用内存映射文件的方式）
public static void test3() throws IOException, URISyntaxException {
        FileChannel inChannel = FileChannel.open(Paths.get(&quot;E:\\壁纸\\壁纸\\212.jpg&quot;), StandardOpenOption.READ);
        FileChannel outChannel = FileChannel.open(Paths.get(&quot;copy3.jpg&quot;),StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
        //内存映射文件
        MappedByteBuffer inMapBuffer = inChannel.map(FileChannel.MapMode.READ_ONLY, 0, inChannel.size());
        MappedByteBuffer outMapBuffer = outChannel.map(FileChannel.MapMode.READ_WRITE, 0, inChannel.size());
        //直接对缓冲区进行数据的读写操作
        byte [] dst = new byte[inMapBuffer.limit()];
        inMapBuffer.get(dst);
        outMapBuffer.put(dst);
        inChannel.close();
        outChannel.close();
    }
//使用直接缓冲区完成文件复制（使用通道数据交换的方式）
    public static void test4() throws IOException{
        FileChannel inChannel = FileChannel.open(Paths.get(&quot;E:\\壁纸\\壁纸\\212.jpg&quot;), StandardOpenOption.READ);
        FileChannel outChannel = FileChannel.open(Paths.get(&quot;copy4.jpg&quot;),StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
        inChannel.transferTo(0, inChannel.size(), outChannel);
//        outChannel.transferFrom(inChannel,0,inChannel.size());
        inChannel.close();
        outChannel.close();
    }
//耗时对比
    public static void main(String[] args) throws IOException, URISyntaxException {
        long startTime = System.currentTimeMillis();
//        test1();//52毫秒（非直接缓冲区使用Buffer复制）
//        test2();//41毫秒（直接缓冲区使用Buffer复制）
//        test3();//24毫秒（直接缓冲区使用文件映射复制）
//        test4();//17毫秒（直接缓冲区使用通道数据交换复制）
        long endTime = System.currentTimeMillis();
        long useTime = endTime - startTime;
        System.out.println(&quot;耗时：&quot; + useTime + &quot;毫秒&quot;);
    }
</code></pre>
<ul>
<li>
<p>分散（Scatter）读取和聚集（Gather）写入</p>
<ul>
<li>分散读取：将通道中数据分散到多个缓冲区中</li>
<li>聚集写入：将多个缓冲区的数据聚集到通道中</li>
</ul>
<pre><code class="language-java">//首先创建一个随机访问文件
RandomAccessFile raf= new RandomAccessFile(&quot;test.txt&quot;, &quot;rw&quot;);
//根据随机获取通道
FileChannel channel = raf.getChannel();
//分配指定大小指定缓冲区
ByteBuffer buf1=ByteBuffer.allocateDirect(200);
ByteBuffer buf2=ByteBuffer.allocateDirect(1024);
// 分散读取
ByteBuffer[] bufs={buf1,buf2};
channel.read(bufs);//采用通道分散读取数据
for (ByteBuffer byteBuffer : bufs) {
    // 切换成读模式
    byteBuffer.flip();
}
System.out.println(new String(bufs[0].array(),0,bufs[0].limit()));
System.out.println(&quot;-------------------------------------------------&quot;);
System.out.println(new String(bufs[1].array(),1,bufs[1].limit()));
System.out.println(&quot;------聚集写入---------&quot;);
        //创建一个随机写入文件
RandomAccessFile raf2= new RandomAccessFile(&quot;test2.txt&quot;, &quot;rw&quot;);
//获取写入通道
FileChannel channel2 = raf2.getChannel();
channel2.write(bufs);//采用通道写入数据
raf2.close();//关闭
raf.close();//关闭
</code></pre>
</li>
</ul>
<h4 id="75-字符集charset">7.5 字符集（Charset）</h4>
<ul>
<li>编码：字符串 -&gt; 字节数组</li>
<li>解码：字节数组 -&gt; 字符串</li>
</ul>
<pre><code class="language-java">public static void main(String[] args) {
        SortedMap&lt;String, Charset&gt; map = Charset.availableCharsets();
        Set&lt;Map.Entry&lt;String, Charset&gt;&gt; set = map.entrySet();
        for (Map.Entry&lt;String, Charset&gt; s : set) {
            System.out.println(s.getKey() + &quot;\t&quot; + s.getValue() + &quot;\t&quot; + s.getClass());
        }
   		 //创建编码格式
        Charset gbk = Charset.forName(&quot;GBK&quot;);
        //获取编码器
        CharsetEncoder charsetEncoder = gbk.newEncoder();
        //获取解码器
        CharsetDecoder charsetDecoder = gbk.newDecoder();
        //编码
        CharBuffer cb = CharBuffer.allocate(1024);
        cb.put(&quot;HelloWord!&quot;);
        cb.flip();
        ByteBuffer encode = charsetEncoder.encode(cb);
        System.out.print(&quot;[&quot;);
        for (int i = 0; i &lt; encode.limit(); i++) {
            System.out.print(encode.get(i)+&quot;,&quot;);
        }
        System.out.print(&quot;]&quot;);
        //解码
        encode.rewind();
        CharBuffer decode = charsetDecoder.decode(encode);
        System.out.print(&quot;\n[&quot;);
        for (int i = 0; i &lt; decode.limit(); i++) {
            System.out.print(decode.get(i)+&quot;,&quot;);
        }
        System.out.print(&quot;]&quot;);
}
</code></pre>
<h4 id="76-nio的非阻塞简述">7.6 NIO的非阻塞简述</h4>
<figure data-type="image" tabindex="37"><img src="http://pic.zyblog.xyz/img/typora/20201210140416.png" alt="image-20201210140343354" loading="lazy"></figure>
<ul>
<li>在客户端与服务器之间，建立一个选择器（Selector），将每一个用于传输数据的通道（Channel）注册到该选择器（Selector）上，选择器（Selector）来监控各个通道的IO（WRITE、READ、ACCEPT、CONNECT）状态，当客户端IO状态准备就绪时，选择器（Selector）通知服务器开始处理各种IO</li>
</ul>
<h4 id="77-nio阻塞式编程">7.7 NIO阻塞式编程</h4>
<ul>
<li>
<p>三个核心</p>
<ul>
<li>
<p>第一步：创建通道（Channel），负责建立IO设备连接</p>
<ul>
<li>java.nio.channels.Channel接口
<ul>
<li>SelectableChannel
<ul>
<li>ServerSocketChannel</li>
<li>SocketChannel</li>
<li>DatagramChannel</li>
<li>Pipe.SinkChannel</li>
<li>Pipe.SourceChannel</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>FileChannel不能切换成非阻塞模式</p>
</blockquote>
</li>
<li>
<p>第二步：创建缓冲区（Buffer），负责数据的存取</p>
</li>
<li>
<p>第三步：创建选择器（Selector），是SelectableChannel的多路复用器，负责监控SelectableChannel的IO状态</p>
</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public class TCPDemo {
    @Test
    public void client() throws IOException {
        SocketChannel socketChannel = null;
        FileChannel inChannel = null;

        //1.建立IO通道
        try {
            socketChannel = SocketChannel.open(new InetSocketAddress(&quot;127.0.0.1&quot;,8090));
        } catch (IOException e) {
            e.printStackTrace();
        }
        //2.建立缓冲区
        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024);
        //3.读取本地图片发送到服务器
        try {
            inChannel = FileChannel.open(Paths.get(&quot;E:\\壁纸\\壁纸\\212.jpg&quot;), StandardOpenOption.READ);
        } catch (IOException e) {
            e.printStackTrace();
        }
        while(inChannel.read(byteBuffer)!=-1){
            byteBuffer.flip();
            socketChannel.write(byteBuffer);
            byteBuffer.clear();
        }
        inChannel.close();
        socketChannel.close();
    }

    @Test
    public void server() throws IOException {
        //1.建立IO通道
        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
        //2.绑定端口号
        serverSocketChannel.bind(new InetSocketAddress(8090));
        //3.获取客户端连接的通道
        SocketChannel socketChannel = serverSocketChannel.accept();
        //4.接收客户端的数据，并保存到本地
        FileChannel outChannel = FileChannel.open(Paths.get(&quot;client1.jpg&quot;), StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE);
        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
        while(socketChannel.read(byteBuffer)!=-1){
            byteBuffer.flip();
            outChannel.write(byteBuffer);
            byteBuffer.clear();
        }
        //5.关闭资源
        socketChannel.close();
        serverSocketChannel.close();
        outChannel.close();
    }
}
</code></pre>
<h4 id="78-nio非阻塞式编程">7.8 NIO非阻塞式编程</h4>
<ul>
<li>TCP</li>
</ul>
<pre><code class="language-java">
</code></pre>
<ul>
<li>UDP</li>
</ul>
<pre><code class="language-java">
</code></pre>
<h4 id="79-管道pipe">7.9 管道（Pipe）</h4>
<pre><code class="language-java">//1. 获取Pipe管道
Pipe pipe = Pipe.open();
//2. 将缓冲区中的数据写入管道
ByteBuffer buffer = ByteBuffer.allocate(1024);
Pipe.SinkChannel sinkChannel = pipe.sink();
buffer.put(&quot;Pipe&quot;.getBytes());
buffer.flip();
sinkChannel.write(buffer);
//3. 读取缓冲区中的数据
Pipe.SourceChannel sourceChannel = pipe.source();
buffer.flip();
int length = sourceChannel.read(buffer);
System.out.println(new String(buffer.array(),0,length));
sourceChannel.close();
sinkChannel.close();
</code></pre>
<h4 id="72-selector选择器多路复用器">7.2 Selector：选择器/多路复用器</h4>
<ul>
<li>
<p>作用：I/O就绪状态选择</p>
</li>
<li>
<p>地位：NIO网络编程的基础</p>
</li>
<li>
<p>事件</p>
<ul>
<li>SelectionKey.OP_CONNECT（连接就绪）</li>
<li>SelectionKey.OP_ACCEPT（接受就绪）</li>
<li>SelectionKey.OP_READ（读就绪）</li>
<li>SelectionKey.OP_WRITE（写就绪）</li>
</ul>
</li>
<li>
<p>实现</p>
<pre><code class="language-java">//创建Selector
Selector selector = Selector.open();
//将Channel注册到Selector上，监听读就绪事件
SelectionKey selectionKey = channel.register(selector,SelectionKey.OP_READ);
//阻塞等待Channel有就绪事件发生
int selectNum = selector.select();
//获取发生就绪事件的Channel集合
Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();
</code></pre>
</li>
</ul>
<h4 id="74-nio编程实现步骤">7.4 NIO编程实现步骤</h4>
<ul>
<li>第一步：创建Selector</li>
<li>第二步：创建ServerSocketChannel，并绑定监听端口</li>
<li>第三步：将Channel设置为非阻塞模式</li>
<li>第四步：将Channel注册到Selector上，监听连接事件</li>
<li>第五步：循环调用Selector的select方法，检查就绪情况</li>
<li>第六步：调用selectedKeys方法获取就绪Channel集合</li>
<li>第七步：判断就绪事件种类，调用业务处理方法</li>
<li>第八步：根据业务需要，决定是否再次注册监听事件，重复执行第三步操作</li>
</ul>
<h4 id="75-nio网络编程实战">7.5 NIO网络编程实战</h4>
<pre><code class="language-java">
</code></pre>
<h4 id="76-分散读取scatter和聚集写入gather">7.6 分散读取Scatter和聚集写入Gather</h4>
<ul>
<li>分散读取：从Channel中读取数据分散到多个Buffer中</li>
<li>聚集写入：把多个Buffer的数据聚集写入Channel中</li>
</ul>
<pre><code class="language-java">public static void main(String[] args){
    RandomAccessFile raf = new RandomAccessFile(&quot;a.txt&quot;,&quot;rw&quot;);
    
    FileChannel channel = raf.getChannel();
    
    ByteBuffer bb1 = ByteBuffer.allocate(10*3);
    ByteBuffer bb2 = ByteBuffer.allocate(100*3);
    
    Byter[] bbs = {bb1,bb2};
    channel.read(bbs);
    
    for(ByteBuffer bb : bbs){
        bb.flip();
        System.out.println(new String(bb.array(),0,bb.limit));
    }
    System.out.println(&quot;-----------------------------------&quot;);
    
    RandomAccessFile raf2 = new RandomAccessFile(&quot;b.txt&quot;,&quot;rw&quot;);
    FileChannel channel2 = raf2.getChannel();
    channel2.write(bb2);
}
</code></pre>
<h4 id="77-编解码">7.7 编解码</h4>
<ul>
<li>Charset</li>
</ul>
<h2 id="80-反射和注解">80. 反射和注解</h2>
<h3 id="1-反射">1. 反射</h3>
<h4 id="11-类加载">1.1 类加载</h4>
<ul>
<li>
<p>概述：当程序要使用某个类时，如果该类还未被加载进内存中，则系统会通过**<code>类的加载</code><strong>，</strong><code>类的连接</code><strong>，</strong><code>类的初始化</code>**这三个步骤来对类进行初始化</p>
</li>
<li>
<p>类加载</p>
<ul>
<li>将class文件读入内存，并为其创建一个java.lang.Class对象</li>
<li>任何类被使用时，系统都会为其建立一个java.lang.Class对象</li>
</ul>
</li>
<li>
<p>类的连接</p>
<ul>
<li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li>
<li>准备阶段：负责为类的类变量分配内存，并设置默认初始值</li>
<li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li>
</ul>
</li>
<li>
<p>类的初始化</p>
<ul>
<li>在该阶段，主要就是对类变量进行初始化</li>
</ul>
</li>
<li>
<p>类的初始化步骤</p>
<ol>
<li>
<p>假如类还未被加载和连接，则程序先加载并连接该类</p>
</li>
<li>
<p>假如该类的直接父类还未被初始化，则先初始化其直接父类（初始化直接父类也遵循1-3）</p>
</li>
<li>
<p>假如类中有初始化语句，则系统依次执行这些初始化语句</p>
</li>
</ol>
</li>
<li>
<p>类的初始化时机</p>
<ol>
<li>创建类的实例</li>
<li>调用类的类方法</li>
<li>访问类或者接口的类变量，或者为类变量赋值</li>
<li>使用反射方式来强制创建某个类或者接口对应的java.langClass对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ol>
</li>
</ul>
<h4 id="12-类加载器">1.2 类加载器</h4>
<ul>
<li>
<p>作用：负责将class文件加载进内存中，并为之生成对应的java.lang.Class对象</p>
</li>
<li>
<p>JVM的类加载机制</p>
<ul>
<li>全盘负责：就是当一个类加载器负责加载某个class时，该class所依赖的和引用的其他class也将由类加载器负责载入，除非显式使用另外一个类加载器来载入</li>
<li>父类委托：就是当一个类加载器负责加载某个class时，先让父类加载器试图加载该class，只有在父类加载器无法加载该类时才尝试从自己的了一路径中加载该类</li>
<li>缓存机制：保证所有加载过的class都会被缓存，当程序需要使用某个class对象时，类加载器先从缓存区中搜索该class，只有当缓存区中不存在该class对象时，系统才会读取该类对应的二进制数据，并将其转换成class对象，存储到缓存区</li>
</ul>
</li>
<li>
<p>包：java.lang.ClassLoader（抽象类）</p>
</li>
<li>
<p>常用方法：</p>
<ul>
<li>public ClassLoader getParent（）：返回父类加载器</li>
<li>public static ClassLoader getSystemClassLoader（）：返回系统类加载器</li>
</ul>
</li>
<li>
<p>Java运行时内置类加载器</p>
<ul>
<li>BootstrapClassLoader：虚拟机内置类加载器，通常为null</li>
<li>ExtensionClassLoader：平台类加载器（JDK1.9变为PlatFormClassLoader）</li>
</ul>
<blockquote>
<p>The extension class loader has been renamed; it is now the platform class loader. All classes in the Java SE Platform are guaranteed to be visible through the platform class loader. In addition, the classes in modules that are standardized under the Java Community Process but not part of the Java SE Platform are guaranteed to be visible through the platform class loader.</p>
<p>Just because a class is visible through the platform class loader does not mean the class is actually defined by the platform class loader. Some classes in the Java SE Platform are defined by the platform class loader while others are defined by the bootstrap class loader. Applications should not depend on which class loader defines which platform class.</p>
</blockquote>
<ul>
<li>SystemClassLoader：应用程序类加载器</li>
</ul>
<blockquote>
<p>类加载器的继承关系：System的父加载器为Extension，而Extension的父加载器为Bootstrap</p>
</blockquote>
</li>
</ul>
<figure data-type="image" tabindex="38"><img src="http://pic.zyblog.xyz/img/typora/20201211113018.png" alt="img" loading="lazy"></figure>
<pre><code class="language-java">public class Demo {
    public static void main(String[] args) {
        ClassLoader c1 = ClassLoader.getSystemClassLoader();
        System.out.println(c1);//AppClassLoader
        ClassLoader c2 = c1.getParent();
        System.out.println(c2);//ExtClassLoader
        ClassLoader c3 = c2.getParent();
        System.out.println(c3);//null
    }
}
//sun.misc.Launcher$AppClassLoader@18b4aac2
//sun.misc.Launcher$ExtClassLoader@1b6d3586
//null
</code></pre>
<h4 id="13-反射">1.3 反射</h4>
<figure data-type="image" tabindex="39"><img src="http://pic.zyblog.xyz/img/typora/20201211115906.png" alt="image-20201211115906252" loading="lazy"></figure>
<ul>
<li>
<p>概述：是指在运行时获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法的一种机制，由于这种动态性，可以极大地增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</p>
</li>
<li>
<p>获取Class类的对象</p>
<ul>
<li>使用class属性，获取所属类对应的对象</li>
<li>使用getClass（）方法，获取所属类对应的对象（Object类中的方法）</li>
<li>使用Class类中的静态方法forName（String className），字符串参数为某个类的全路径</li>
</ul>
<pre><code class="language-java">public class Demo2 {
    public static void main(String[] args) {
        Class&lt;Student&gt; c1 = Student.class;
        Student stu = new Student();
        Class&lt;? extends Student&gt; c2 = stu.getClass();
        Class&lt;?&gt; c3 = null;
        try {
            c3 = Class.forName(&quot;com.demo.javase.Student&quot;);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        System.out.println(&quot;c1:&quot;+c1+&quot;\tc2:&quot;+c2+&quot;\tc3:&quot;+c3);
    }
}
//c1:class com.demo.javase.Student	c2:class com.demo.javase.Student	c3:class com.demo.javase.Student
</code></pre>
</li>
<li>
<p>反射获取构造方法并使用</p>
<ul>
<li>public Constructor&lt;?&gt;[ ]  getConstructors（）：获取所有public的构造方法</li>
<li>public Constructor&lt;?&gt;[ ]  getDeclaredConstructors（）：获取所有构造方法</li>
<li>public Constructor<T> getConstructor（Class&lt;?&gt; ... parameterTypes）：获取指定public构造方法</li>
<li>public Constructor<T> getDeclaredConstructor（Class&lt;?&gt; ... parameterTypes）：获取指定构造方法</li>
<li>public T newInstance（Object... initargs）：根据指定构造方法创建对象</li>
</ul>
</li>
</ul>
<pre><code class="language-java">//获取class对象
Class&lt;?&gt; c = Class.forName(&quot;com.demo.javase.Student&quot;);
Constructor&lt;?&gt;[] cons = c.getConstructors();
for(Constructor con : cons){
    System.out.println(con);
}
//public com.demo.javase.Student(java.lang.String,int)
//public com.demo.javase.Student()

Constructor&lt;?&gt;[] allCons = c.getDeclaredConstructors();
for (Constructor&lt;?&gt; allCon : allCons) {
	System.out.println(allCon);
}
//public com.demo.javase.Student(java.lang.String,int)
//com.demo.javase.Student(int)
//private com.demo.javase.Student(java.lang.String)
//public com.demo.javase.Student()

//基本类型和引用类型都可以通过class属性来获取对应的类对象
Constructor&lt;?&gt; con = c.getConstructor(String.class,int.class);
Object o = con.newInstance(&quot;zhiyuan&quot;,23);
System.out.println(o);
//学生{name='zhiyuan', age=23}

Constructor&lt;?&gt; con2 = c.getDeclaredConstructor(int.class);
System.out.println(con2.newInstance(22));
//学生{name='null', age=22}
//私有构造方法可以获取到但无法使用私有构造方法创建对象
Constructor&lt;?&gt; con3 = c.getDeclaredConstructor(String.class);
//System.out.println(con3.newInstance(&quot;zhiyuan&quot;));

</code></pre>
<ul>
<li>暴力反射（使用私有构造方法创建对象）</li>
</ul>
<pre><code class="language-java">//私有构造方法可以获取到但无法使用私有构造方法创建对象，若要使用，可以用暴力反射
Constructor&lt;?&gt; con3 = c.getDeclaredConstructor(String.class);
con3.setAccessible(true);
System.out.println(con3.newInstance(&quot;zhiyuan&quot;));
//学生{name='zhiyuan', age=0}
</code></pre>
<ul>
<li>反射获取成员变量并使用
<ul>
<li>public Field[ ] getFields（）：获取所有公共成员变量和类变量</li>
<li>public Field getField（String name）：获取指定公共成员变量和类变量</li>
<li>public Field[ ] getDeclaredFields（）：获取所有成员变量和类变量</li>
<li>public Field getDeclaredField（String name）：获取指定成员变量和类变量
<ul>
<li>Field类中用于给变量赋值的方法
<ul>
<li>public void set（Object obj，Object value）：给obj对象的成员变量赋值为value</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-java">Class&lt;?&gt; c = Class.forName(&quot;com.demo.javase.Student&quot;);
Field[] fields = c.getFields();
for (Field field : fields) {
	System.out.println(field);
}
//public java.lang.String com.demo.javase.Student.gender

Field[] declaredFields = c.getDeclaredFields();
for (Field declaredField : declaredFields) {
	System.out.println(declaredField);
}
//private java.lang.String com.demo.javase.Student.name
//private int com.demo.javase.Student.age
//int com.demo.javase.Student.count
//public java.lang.String com.demo.javase.Student.gender
//static int com.demo.javase.Student.num

Field genderField = c.getField(&quot;gender&quot;);
Constructor&lt;?&gt; con = c.getConstructor(String.class,int.class);
Object o = con.newInstance(&quot;zhiyuan&quot;,25);
genderField.set(o,&quot;male&quot;);
System.out.println(o);
//Student{name='zhiyuan', age=25, count=0, gender='male'}
</code></pre>
<ul>
<li>暴力反射（给私有成员变量赋值）</li>
</ul>
<pre><code class="language-java">Field nameField = c.getDeclaredField(&quot;name&quot;);
Object zhiyuan = con.newInstance(&quot;zhiyuan&quot;, 26);
nameField.setAccessible(true);
nameField.set(zhiyuan,&quot;zhiyuan002&quot;);
System.out.println(zhiyuan);
//Student{name='zhiyuan002', age=26, count=0, gender='null'}
</code></pre>
<ul>
<li>反射获取成员方法并使用
<ul>
<li>public Method [ ] getMethods（）：获取所有公共的方法（包含继承过来的方法）</li>
<li>public Method [ ] getDeclaredMethods（）：获取所有的方法（不包含继承过来的方法）</li>
<li>public Method getMethod（）：获取指定的公共方法</li>
<li>public Method getDeclaredMethod（）：获取指定的方法
<ul>
<li>Method类中用于使用方法的方法
<ul>
<li>public Object invoke（Object obj，Object... args）：obj为调用方法的对象，args是方法需要的参数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-java">Class&lt;?&gt; c = Class.forName(&quot;com.demo.javase.Student&quot;);
Method[] methods = c.getMethods();
for (Method method : methods) {
	System.out.println(method);
}
System.out.println(&quot;=================================================================&quot;);
Method[] declaredMethods = c.getDeclaredMethods();
for (Method declaredMethod : declaredMethods) {
	System.out.println(declaredMethod);
}
/*
public java.lang.String com.demo.javase.Student.toString()
public java.lang.String com.demo.javase.Student.getName()
public void com.demo.javase.Student.setName(java.lang.String)
public int com.demo.javase.Student.getAge()
public void com.demo.javase.Student.setAge(int)
public final void java.lang.Object.wait() throws java.lang.InterruptedException
public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
public boolean java.lang.Object.equals(java.lang.Object)
public native int java.lang.Object.hashCode()
public final native java.lang.Class java.lang.Object.getClass()
public final native void java.lang.Object.notify()
public final native void java.lang.Object.notifyAll()
=================================================================
public java.lang.String com.demo.javase.Student.toString()
public java.lang.String com.demo.javase.Student.getName()
public void com.demo.javase.Student.setName(java.lang.String)
public int com.demo.javase.Student.getAge()
private void com.demo.javase.Student.show()
static void com.demo.javase.Student.why()
public void com.demo.javase.Student.setAge(int)
*/

Method setName = c.getMethod(&quot;getName&quot;);
Constructor&lt;?&gt; con = c.getConstructor(String.class, int.class);
Object zhiyuan = con.newInstance(&quot;zhiyuan&quot;, 22);
Object o = setName.invoke(zhiyuan);
System.out.println(o);
//zhiyuan

Method setName = c.getMethod(&quot;setName&quot;,String.class);
Constructor&lt;?&gt; con = c.getConstructor(String.class, int.class);
Object zhiyuan = con.newInstance(&quot;zhiyuan&quot;, 22);
Object o = setName.invoke(zhiyuan,&quot;Hulk&quot;);
System.out.println(o);
System.out.println(zhiyuan);
//null
//Student{name='Hulk', age=22, count=0, gender='null'}
</code></pre>
<ul>
<li>暴力反射（调用私有方法）</li>
</ul>
<pre><code class="language-java">Method show = c.getDeclaredMethod(&quot;show&quot;);
Constructor&lt;?&gt; con2 = c.getConstructor(String.class, int.class);
Object hulk = con2.newInstance(&quot;Hulk&quot;, 50);
show.setAccessible(true);
show.invoke(hulk);
</code></pre>
<h4 id="14-反射练习">1.4 反射练习</h4>
<ul>
<li>向**<code>ArrayList&lt;Integer&gt;</code>**集合中添加一个字符串数据</li>
</ul>
<pre><code class="language-java">ArrayList&lt;Integer&gt; integers = new ArrayList&lt;&gt;();
Class&lt;?&gt; c = integers.getClass();
Method add = c.getDeclaredMethod(&quot;add&quot;, Object.class);
add.invoke(integers,&quot;我吐&quot;);
add.invoke(integers,&quot;反射真神奇&quot;);
System.out.println(integers);
//[我吐, 反射真神奇]
</code></pre>
<h3 id="2-注解">2. 注解</h3>
<h4 id="21-概述">2.1 概述：</h4>
<ul>
<li>注解（Annotation），一种代码级别的说明，它是JDK1.5以后版本引入的一个特性，与类、接口、枚举在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等前面，用来对这些元素进行说明，注释。</li>
<li>作用：
<ol>
<li>编写文档：通过代码里的标识的注解生成文档</li>
<li>代码分析：通过代码里的标识的注解对代码进行分析（反射）</li>
<li>编译检查：通过代码里的标识的注解让编译器能够实现基本的编译检查（@Override）</li>
</ol>
</li>
</ul>
<h4 id="22-jdk预定义注解">2.2 JDK预定义注解</h4>
<ul>
<li>@Override：检测被该注解标注的方法是否继承自父类</li>
<li>@Deprecate：该注解标注的内容，表示已过时</li>
<li>@SuppressWarnings：压制警告
<ul>
<li>@SuppressWarnings(&quot;all&quot;)：压制所有警告</li>
</ul>
</li>
</ul>
<h4 id="23-自定义注解">2.3 自定义注解</h4>
<ul>
<li>格式：</li>
</ul>
<pre><code class="language-java">public @interface 注解名称{}
</code></pre>
<ul>
<li>本质：注解本质上就是一个接口，继承自java.lang.annotation.Annotation</li>
</ul>
<pre><code class="language-java">public interface MyAnno extends java.lang.annotation.Annotation{}
</code></pre>
<ul>
<li>
<p>属性：接口中可以定义的抽象方法</p>
<ul>
<li>要求：
<ol>
<li>属性的返回值类型
<ul>
<li>基本数据类型</li>
<li>String</li>
<li>枚举</li>
<li>注解</li>
<li>以上类型的数组</li>
</ul>
</li>
<li>定义了属性，需要给属性赋值
<ul>
<li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时可以不进行属性的赋值</li>
<li>如果只有一个属性需要赋值，并且属性名是value，则value可以忽略不写，直接定义值即可</li>
<li>数组赋值时，使用大括号{}包裹，如果数组中只有一个值，则大括号可以省略</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>
<p>元注解：用于描述注解的注解</p>
<ul>
<li>@Target：描述注解能够作用的范围
<ul>
<li>ElementType取值
<ul>
<li>TYPE：可以作用于类上，接口上，注解接口上，枚举类上</li>
<li>METHOD：可以作用于方法上</li>
<li>FIELD：可以作用于成员变量上，枚举常量上</li>
</ul>
</li>
</ul>
</li>
<li>@Retention：描述注解被保留的阶段
<ul>
<li>RetentionPolicy取值
<ul>
<li>SOURCE：注解保留到源码中，编译为字节码class文件中就不存在了</li>
<li>CLASS：注解保留在字节码class文件中，不必被JVM读取</li>
<li>RUNTIME：注解保留到字节码class文件中，并被JVM读取（可以通过反射方式读取）</li>
</ul>
</li>
</ul>
</li>
<li>@Documented：描述注解是否被抽取到api文档中</li>
<li>@Inherited：描述注解是否被子类继承</li>
</ul>
</li>
<li>
<p>在程序中使用注解：获取注解中定义的属性值</p>
<ul>
<li>获取注解定义的位置的对象</li>
<li>获取指定的注解
<ul>
<li>getAnnotation（Class）</li>
</ul>
</li>
<li>调用注解中的抽象方法获取配置的属性值</li>
</ul>
</li>
</ul>
<blockquote>
<p>小结：</p>
<ol>
<li>以后大多数时候，我们会使用注解，而不是自定义注解</li>
<li>注解给谁用：
<ol>
<li>编译器</li>
<li>解析程序</li>
</ol>
</li>
<li>注解不是程序的一部分</li>
</ol>
</blockquote>
<h4 id="24-代码实现">2.4 代码实现</h4>
<pre><code class="language-java">//简单的实现：解析注解属性值，调用方法
//材料：一个自定义注解，一个测试类，一个解析注解类

//1.自定义注解
@Target(value={ElementType.TYPE,ElementType.FIELD,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface MyAnnotation {
    public abstract String className();
    public abstract String methodName();
}
//2.测试类
public class AnnotationDemo {
    public void show(){
        System.out.println(&quot;show()方法&quot;);
    }
}
//3.注解解析类
@MyAnnotation(className = &quot;com.demo.javase.AnnotationDemo&quot;,methodName = &quot;show&quot;)
public class Demo1 {
    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
        //获取当前解析类的对象
        Class&lt;Demo1&gt; c = Demo1.class;
        //获取注解对象（本质上就是在内存中实现了一个注解的类的对象）
        MyAnnotation annotation = c.getAnnotation(MyAnnotation.class);
        /*
        * public MyAnnotionImp implements MyAnnotation{
        *   public String className(){
        *       return &quot;com.demo.javase.AnnotationDemo&quot;;
        *   }
        *   public String methodName(){
        *       return &quot;show&quot;;
        *   }
        * }
        * */
        //获取注解对象的属性值
        String className = annotation.className();
        String methodName = annotation.methodName();
        System.out.println(className);
        System.out.println(methodName);
        //获取测试类的对象
        Class&lt;?&gt; c2 = Class.forName(className);
        //创建测试类的实例化对象
        Object o = c2.newInstance();
        //获取对应名称的方法
        Method method = c2.getMethod(methodName);
        //执行方法
        method.invoke(o);
    }
}
</code></pre>
<pre><code class="language-java">//利用注解实现程序检错
//材料：一个自定义注解，一个测试类，一个解析注解检错类

//1.自定义注解
@Target(value={ElementType.TYPE,ElementType.METHOD,ElementType.FIELD})
@Retention(value = RetentionPolicy.RUNTIME)
@Documented
public @interface Check {
}
//2.测试类
public class Demo2 {
    @Check
    public void add(){
        System.out.println(&quot;1+0=&quot;+(1+0));
    }
    @Check
    public void subtract(){
        System.out.println(&quot;1-0=&quot;+(1-0));
    }
    @Check
    public void multiply(){
        System.out.println(&quot;1*0=&quot;+(1*0));
    }
    @Check
    public void divide(){
        System.out.println(&quot;1/0=&quot;+(1/0));
    }
}
//3.解析注解检错类
public class CheckDemo {
    public static void main(String[] args) throws IOException {
        Demo2 demo2 = new Demo2();
        Class&lt;? extends Demo2&gt; aClass = demo2.getClass();
        Method[] methods = aClass.getMethods();
        int number = 0;
        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;bug.txt&quot;,true));
        for (Method method : methods) {
            if(method.isAnnotationPresent(Check.class)){
                try {
                    method.invoke(demo2);
                } catch (Exception e){
                    number++;
                    bw.write(&quot;问题:&quot;+method.getName()+&quot;()方法出现异常&quot;);
                    bw.newLine();
                    bw.write(&quot;异常:&quot;+e.toString());
                    bw.newLine();
                }
            }
        }
        if(number &gt; 0){
            bw.write(&quot;类名：&quot;+ demo2.getClass().getName());
            bw.newLine();
            bw.write(&quot;本次总共检测到&quot;+number+&quot;个错误&quot;);
            bw.newLine();
            bw.write(&quot;检测时间：&quot;+new SimpleDateFormat(&quot;yyyy年MM月dd日 kk时mm分ss秒&quot;).format(new Date(System.currentTimeMillis())));
            bw.newLine();
        }else{
            bw.write(&quot;恭喜你，本次检测此程序没有错误&quot;);
        }
        bw.write(&quot;---------------------------------------------&quot;);
        bw.newLine();
        bw.flush();
        bw.close();
        System.out.println(number);
    }
}
//bug.txt的结果
/*
问题:divide()方法出现异常
异常:java.lang.reflect.InvocationTargetException
类名：com.demo.javase.demo.Demo2
本次总共检测到1个错误
检测时间：2020年12月15日 12时39分35秒
*/
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/3pOEFSCc4/">https://zhiyuandnc.github.io/3pOEFSCc4/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用API收集（第一期：2021.2.19）]]></title>
        <id>https://zhiyuandnc.github.io/IW8mQ0Bvy/</id>
        <link href="https://zhiyuandnc.github.io/IW8mQ0Bvy/">
        </link>
        <updated>2021-02-19T07:46:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-b站api">一、B站API</h2>
<h3 id="1-热门搜索api">1. 热门搜索API</h3>
<blockquote>
<p>https://s.search.bilibili.com/main/hotword?mid=&amp;buvid=034F9BB5-4350-41BB-90DC-24287F103A7D138368infoc&amp;jsonp=jsonp&amp;callback=jsonCallback_bili_66770627113836521</p>
</blockquote>
<h3 id="2-获取视频信息api">2. 获取视频信息API</h3>
<blockquote>
<p>https://api.bilibili.com/x/web-interface/archive/stat?bvid={视频BV号}</p>
<p>https://api.bilibili.com/x/player/pagelist?bvid={视频BV号}</p>
<p>https://api.bilibili.com/x/web-interface/view?aid={视频AV号}</p>
<p>https://api.bilibili.com/x/web-interface/view?bvid={视频BV号}</p>
<p>https://api.bilibili.com/x/web-interface/view?cid={视频cid}</p>
</blockquote>
<blockquote>
<p>上述多个接口既可以获取视频详细信息，也可以获取视频简单信息，具体哪个是哪个，我忘记了，请读者带入参数自行测试</p>
</blockquote>
<h3 id="3-获取弹幕api">3. 获取弹幕API</h3>
<blockquote>
<p>https://comment.bilibili.com/{cid}.xml</p>
</blockquote>
<blockquote>
<p>将视频的cid与此url拼接，发送get请求，即可获取该视频弹幕信息</p>
</blockquote>
<h3 id="4-获取视频cidapi">4. 获取视频cidAPI</h3>
<blockquote>
<p>https://api.bilibili.com/x/player/pagelist?bvid={BV号}</p>
</blockquote>
<h3 id="5-b站每日排行榜api">5. B站每日排行榜API</h3>
<blockquote>
<p>https://api.bilibili.com/x/web-interface/ranking/v2?rid=0&amp;type=all</p>
</blockquote>
<h3 id="6-b站入站必刷榜单api">6. B站入站必刷榜单API</h3>
<blockquote>
<p>https://api.bilibili.com/x/web-interface/popular/precious?page_size=100&amp;page=1</p>
</blockquote>
<h3 id="7-b站每周必看api">7. B站每周必看API</h3>
<blockquote>
<p>https://api.bilibili.com/x/web-interface/popular/series/one?number={期数}</p>
</blockquote>
<blockquote>
<p>期数从1开始，具体哪一期，请参考B站上的期数获取指定信息，截止到2021.2.19已更新到99期</p>
</blockquote>
<h3 id="8-b站小黑屋api">8. B站小黑屋API</h3>
<blockquote>
<p>https://api.bilibili.com/x/credit/blocked/list?jsonp=jsonp&amp;otype=0&amp;pn={页数}&amp;ps=20&amp;callback=__jp0</p>
</blockquote>
<blockquote>
<p>因为B站一次性展示内容只有10条左右，会根据滚动条动态发送ajax请求加载数据，所以需要每次提供加载的页数，就可加载到对应资源<br>
其他参数没做研究，但猜测大致是<code>来源</code>和<code>类型</code>，请读者自行获取相关信息</p>
</blockquote>
<h2 id="二-知乎api">二、 知乎API</h2>
<h3 id="1-知乎每日热榜api">1. 知乎每日热榜API</h3>
<blockquote>
<p>https://www.zhihu.com/api/v3/feed/topstory/hot-lists/total?limit=50&amp;desktop=true</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuandnc666@88.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/IW8mQ0Bvy/">https://zhiyuandnc.github.io/IW8mQ0Bvy/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组模拟实现循环队列]]></title>
        <id>https://zhiyuandnc.github.io/wN4eqwrOE/</id>
        <link href="https://zhiyuandnc.github.io/wN4eqwrOE/">
        </link>
        <updated>2021-02-02T13:19:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-代码实现">一、代码实现</h2>
<pre><code class="language-java">public class CircularArrayQueue {
    /**
     * 队列最大容量
     */
    private int maxSize;
    /**
     * 队列头指针（指向首元素)
     */
    private int front;
    /**
     * 队列尾指针（指向尾元素的后一个位置）
     */
    private int rear;
    /**
     * 数组模拟队列容器
     */
    private int[] arr;

    /**
     * 初始化循环队列
     * @param maxSize int
     */
    public CircularArrayQueue(int maxSize){
        this.maxSize = maxSize;
        arr = new int[maxSize];
        rear = front = 0;
    }

    /**
     * 判断队列是否已满
     * @return isFull boolean
     */
    public boolean isFull(){
        return (rear+1)%maxSize==front;
    }

    /**
     * 判断队列是否为空
     * @return isEmpty boolean
     */
    public boolean isEmpty(){
        return rear==front;
    }

    /**
     * 入队列
     * @param n 元素值
     */
    public void addQueue(int n){
        //队满不能入队
        if(isFull()){
            throw new RuntimeException(&quot;队列已满，无法加入数据！&quot;);
        }
        arr[rear] = n;
        rear = (rear+1)%maxSize;
    }

    /**
     * 出队列
     * @return int
     */
    public int getQueue(){
        //队空不能出队
        if(isEmpty()){
            throw new RuntimeException(&quot;队列已空，无法取得数据！&quot;);
        }
        int value = arr[front];
        front = (front+1)%maxSize;
        return value;
    }

    /**
     * 遍历队列所有元素
     */
    public void showQueue(){
        if(isEmpty()){
            System.out.println(&quot;队列为空！&quot;);
        }
        for (int i = front; i &lt; front + size(); i++) {
            System.out.println(arr[i%maxSize] + &quot;\t&quot;);
        }
    }

    /**
     * 获取当前队列元素个数
     * @return size int
     */
    public int size(){
        return (rear-front+maxSize)%maxSize;
    }

    /**
     * 获取队首元素
     * @return
     */
    public int headQueue(){
        if(isEmpty()){
            throw new RuntimeException(&quot;队列已空，无法取得数据！&quot;);
        }
        return arr[front];
    }
}
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/wN4eqwrOE/">https://zhiyuandnc.github.io/wN4eqwrOE/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组模拟实现队列]]></title>
        <id>https://zhiyuandnc.github.io/IjOXWGTmT/</id>
        <link href="https://zhiyuandnc.github.io/IjOXWGTmT/">
        </link>
        <updated>2021-02-01T12:55:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-队列">一、队列</h2>
<ul>
<li>特点：先入先出</li>
<li>分析：因为队列队首队尾都可以操作，所以需要两个变量模拟指针 <code>front</code> 和 <code>rear</code> 分别指向首元素的前一个位置和尾元素，使用数组实现队列</li>
<li>入队列：rear后移，元素入队</li>
<li>出队列：front后移，元素出队</li>
</ul>
<h2 id="二-代码实现">二、代码实现</h2>
<pre><code class="language-java">public class ArrayQueue{
    /**
     * 队列最大容量
     */
    private int maxSize;
    /**
     * 队列头指针（指向首元素的前一个位置）
     */
    private int front;
    /**
     * 队列尾指针（指向尾元素）
     */
    private int rear;
    /**
     * 数组模拟队列容器
     */
    private int[] arr;

    /**
     * 初始化队列
     * @param maxSize int
     */
    public ArrayQueue(int maxSize){
        this.maxSize = maxSize;
        arr = new int[maxSize];
        //初始化状态下头指针与尾指针相同，均为-1
        front = rear = -1;
    }

    /**
     * 判断队列是否已满
     * @return boolean
     */
    public boolean isFull(){
        return rear == maxSize - 1;
    }

    /**
     * 判断队列是否为空
     * @return boolean
     */
    public boolean isEmpty(){
        return rear == front;
    }

    /**
     * 入队列
     * @param data int
     */
    public void addQueue(int data){
        //队满不能入队
        if(isFull()){
            throw new RuntimeException(&quot;队列已满，无法加入数据！&quot;);
        }
        //rear后移，元素入队列
        arr[++rear] = data;
    }

    /**
     * 出队列
     * @return int
     */
    public int getQueue(){
        //队空不能出队
        if(isEmpty()){
            throw new RuntimeException(&quot;队列已空，无法取得数据！&quot;);
        }
        //front后移，元素出队列
        return arr[++front];
    }

    /**
     * 遍历队列所有元素
     */
    public void showQueue(){
        //队空无需遍历
        if(isEmpty()){
            System.out.println(&quot;队列为空！&quot;);
            return ;
        }
        for (int i = 0; i &lt; arr.length; i++) {
            System.out.print(arr[i] + &quot;\t&quot;);
        }
    }

    /**
     * 获取队首元素
     * @return int
     */
    public int headQueue(){
        //队空不返回
        if(isEmpty()){
            throw new RuntimeException(&quot;队列为空！&quot;);
        }
        return arr[front+1];
    }
}
</code></pre>
<h2 id="三-测试队列功能">三、测试队列功能</h2>
<pre><code class="language-java">public class ArrayQueueDemo {
    public static void main(String[] args) {
        ArrayQueue arrayQueue = new ArrayQueue(10);
        for (int i = 0; i &lt; 10; i++) {
            arrayQueue.addQueue(10);
        }
        arrayQueue.showQueue();
        // arrayQueue.addQueue(10);
        for (int i = 0; i &lt; 10; i++) { 
            arrayQueue.getQueue();
        }
        // arrayQueue.getQueue();
        System.out.println(arrayQueue.isEmpty());
        System.out.println(arrayQueue.isFull());
        System.out.println(arrayQueue.headQueue());
    }
}
</code></pre>
<h2 id="四-控制台结果">四、控制台结果</h2>
<pre><code class="language-java">10	10	10	10	10	10	10	10	10	10	true
true
Exception in thread &quot;main&quot; java.lang.RuntimeException: 队列为空！
	at com.zhiyuan.datastructure.queue.array.ArrayQueue.headQueue(ArrayQueue.java:100)
	at com.zhiyuan.datastructure.queue.array.ArrayQueueDemo.main(ArrayQueueDemo.java:22)
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/IjOXWGTmT/">https://zhiyuandnc.github.io/IjOXWGTmT/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[稀疏数组实现棋盘存储与恢复]]></title>
        <id>https://zhiyuandnc.github.io/ZZGM9B12P/</id>
        <link href="https://zhiyuandnc.github.io/ZZGM9B12P/">
        </link>
        <updated>2021-02-01T08:07:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-导入jackson依赖">一、导入Jackson依赖</h2>
<blockquote>
<p>为了将对象序列化为XML文件，将XML反序列化为对象</p>
</blockquote>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;
    &lt;version&gt;2.9.8&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="二-创建棋盘数据信息bean对象">二、创建棋盘数据信息Bean对象</h2>
<blockquote>
<p>将稀疏数组存储为对象</p>
</blockquote>
<pre><code class="language-java">public class SparseArray {
    private int row;
    private int col;
    private int count;
    private Array [] data;

    public SparseArray() {}

    public SparseArray(int row, int col, int count, Array[] data) {
        this.row = row;
        this.col = col;
        this.count = count;
        this.data = data;
    }

    public void setRow(int row) {
        this.row = row;
    }

    public void setCol(int col) {
        this.col = col;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public void setData(Array[] data) {
        this.data = data;
    }

    public int getRow() {
        return row;
    }

    public int getCol() {
        return col;
    }

    public int getCount() {
        return count;
    }

    public Array[] getData() {
        return data;
    }
}
</code></pre>
<pre><code class="language-java">public class Array {
    private int row;
    private int col;
    private int value;

    public Array() {}

    public Array(int row, int col, int value) {
        this.row = row;
        this.col = col;
        this.value = value;
    }

    public void setRow(int row) {
        this.row = row;
    }

    public void setCol(int col) {
        this.col = col;
    }

    public void setValue(int value) {
        this.value = value;
    }

    public int getRow() {
        return row;
    }

    public int getCol() {
        return col;
    }

    public int getValue() {
        return value;
    }
}
</code></pre>
<h2 id="三-实现棋盘存储与恢复">三、实现棋盘存储与恢复</h2>
<blockquote>
<p>将数据对象序列化到XML配置文件中，实现存储棋盘<br>
将XML配置反序列化为数据对象，实现恢复棋盘</p>
</blockquote>
<pre><code class="language-java">public class SparsearrayDemo1 {
    public static void main(String[] args) {
        // 创建一个原始的二维数组
        // 0：表示没有棋子，1：表示黑子，2：表示白子
        int [][]chessArray = new int [11][11];
        chessArray[1][2] = 1;
        chessArray[2][3] = 2;
        chessArray[4][5] = 2;
        System.out.println(&quot;原数组内容：&quot;);
        for (int[] ints : chessArray) {
            System.out.println(Arrays.toString(ints));
        }
        // 遍历二维数组获得非零元素个数
        int count = 0;
        for (int[] value : chessArray) {
            for (int j = 0; j &lt; value.length; j++) {
                if (value[j] != 0) {
                    count++;
                }
            }
        }
        System.out.println(&quot;非零个数：&quot; + count);
        int [][] sparseArray = new int [count+1][3];
        int row = chessArray.length;
        int col = chessArray[0].length;
        sparseArray[0][0] = row;
        sparseArray[0][1] = col;
        sparseArray[0][2] = count;
        int num = 0;
        for (int i = 0; i &lt; chessArray.length; i++) {
            for (int j = 0; j &lt; chessArray[i].length; j++) {
                if (chessArray[i][j]!=0){
                    sparseArray[++num][0] = i;
                    sparseArray[num][1] = j;
                    sparseArray[num][2] = chessArray[i][j];
                }
            }
        }
        //创建存储棋盘数据的对象
        SparseArray info = new SparseArray();
        info.setRow(sparseArray[0][0]);
        info.setCol(sparseArray[0][1]);
        info.setCount(sparseArray.length-1);
        Array [] arrays = new Array[sparseArray.length-1];
        for (int i = 1; i &lt; sparseArray.length; i++) {
            Array array = new Array();
            array.setRow(sparseArray[i][0]);
            array.setCol(sparseArray[i][1]);
            array.setValue(sparseArray[i][2]);
            arrays[i-1] = array;
        }
        info.setData(arrays);
        System.out.println(&quot;开始存储棋盘1&quot;);
        File file = new File(&quot;./sparsearray.xml&quot;);
        saveBoard(file,info);
        System.out.println(&quot;棋盘存储成功&quot;);
        System.out.println(&quot;开始恢复棋盘&quot;);
        int[][] ints = recoverBoard(file, SparseArray.class);
        for (int[] anInt : ints) {
            System.out.println(Arrays.toString(anInt));
        }
        System.out.println(&quot;棋盘恢复成功&quot;);
    }
    public static void saveBoard(File file,SparseArray info){
        //将对象序列化为xml文件存储
        try {
            if(!file.exists()){
                file.createNewFile();
            }
            fromObjectToXML(file,info);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static int [][] recoverBoard(File file,Class cls){
        if(file.exists()){
            SparseArray info = (SparseArray)fromXMLToObject(file, cls);
            int [][] newArray = new int [info.getRow()][info.getCol()];
            Array[] data = info.getData();
            for (int i = 0; i &lt; data.length; i++) {
                newArray[data[i].getRow()][data[i].getCol()] = data[i].getValue();
            }
            return newArray;
        }
        return null;
    }
    public static void fromObjectToXML(File file,Object data){
        BufferedWriter bw = null;
        XmlMapper xmlMapper = new XmlMapper();
        try {
            String xml = xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(data);
            bw = new BufferedWriter(new FileWriter(file));
            bw.write(xml,0,xml.length());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            try {
                bw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    public static Object fromXMLToObject(File file,Class cls){
        BufferedReader br = null;
        XmlMapper xmlMapper = new XmlMapper();
        Object sparseArray = null;
        try {
            sparseArray = xmlMapper.readValue(new FileInputStream(file), cls);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sparseArray;
    }
}
</code></pre>
<h2 id="四-查看存储的棋局">四、查看存储的棋局</h2>
<pre><code class="language-xml">&lt;SparseArray&gt;
  &lt;row&gt;11&lt;/row&gt;
  &lt;col&gt;11&lt;/col&gt;
  &lt;count&gt;3&lt;/count&gt;
  &lt;data&gt;
    &lt;data&gt;
      &lt;row&gt;1&lt;/row&gt;
      &lt;col&gt;2&lt;/col&gt;
      &lt;value&gt;1&lt;/value&gt;
    &lt;/data&gt;
    &lt;data&gt;
      &lt;row&gt;2&lt;/row&gt;
      &lt;col&gt;3&lt;/col&gt;
      &lt;value&gt;2&lt;/value&gt;
    &lt;/data&gt;
    &lt;data&gt;
      &lt;row&gt;4&lt;/row&gt;
      &lt;col&gt;5&lt;/col&gt;
      &lt;value&gt;2&lt;/value&gt;
    &lt;/data&gt;
  &lt;/data&gt;
&lt;/SparseArray&gt;
</code></pre>
<h2 id="五-控制台打印结果">五、控制台打印结果</h2>
<pre><code class="language-java">原数组内容：
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
非零个数：3
开始存储棋盘
棋盘存储成功
开始恢复棋盘
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
棋盘恢复成功
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/ZZGM9B12P/">https://zhiyuandnc.github.io/ZZGM9B12P/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis数据库简单学习]]></title>
        <id>https://zhiyuandnc.github.io/WvJdcATYk/</id>
        <link href="https://zhiyuandnc.github.io/WvJdcATYk/">
        </link>
        <updated>2021-01-31T10:23:30.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>redis是一款高性能的NOSQL系列的非关系型数据库（key-value）</p>
<p>官网：<a href="https://redis.io/">https://redis.io/</a></p>
<p>中文网：<a href="https://www.redis.net.cn/">https://www.redis.net.cn/</a></p>
</blockquote>
<h2 id="一-非关系型数据库">一、非关系型数据库</h2>
<h3 id="1-特点">1. 特点</h3>
<ul>
<li>数据之间没有关联关系</li>
<li>数据存储在内存中</li>
</ul>
<h3 id="2-解决的问题">2. 解决的问题</h3>
<ul>
<li>经常查询的一些不会经常发生变化的数据
<ul>
<li>缓存思想
<ul>
<li>若缓存中存在，则直接从缓存数据库中查询数据并返回</li>
<li>若缓存中不存在，则到关系型数据库中查询，将查询到的结果放入缓存并返回</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="二-redis数据库">二、Redis数据库</h2>
<h3 id="1-下载">1. 下载</h3>
<ul>
<li>注意：官网并不支持下载Windows版本的Redis，所以微软出面制作了Windows版本的Redis，但是自16年开始更新到版本3.2.100就不在更新了，无奈，一群自愿者出来开始更新Windows版本的Redis</li>
<li>微软的：<a href="https://github.com/microsoftarchive/redis">https://github.com/microsoftarchive/redis</a></li>
<li>自愿者的：<a href="https://github.com/tporadowski/redis">https://github.com/tporadowski/redis</a></li>
</ul>
<h3 id="2-安装">2. 安装</h3>
<ul>
<li>下载zip压缩包，解压即可使用</li>
</ul>
<h3 id="3-配置">3. 配置</h3>
<ul>
<li><code>redis.windows.conf</code>：Redis的核心配置文件</li>
<li><code>redis-cli.exe</code>：Redis的客户端</li>
<li><code>redis-server.exe</code>：Redis的服务端</li>
</ul>
<h3 id="4-使用">4. 使用</h3>
<ul>
<li>双击<code>redis-server.exe</code>运行服务端</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1612089913395.jpg" alt="" loading="lazy"></figure>
<ul>
<li>双击<code>redis-cli.exe</code>运行客户端</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://zhiyuandnc.github.io/post-images/1612089943909.jpg" alt="" loading="lazy"></figure>
<h3 id="5-redis的学习">5. Redis的学习</h3>
<ul>
<li>Redis数据结构
<ul>
<li>key-value格式的数据
<ul>
<li>key都是字符串</li>
<li>value有5种不同的数据结构
<ul>
<li>字符串类型：string（String）</li>
<li>哈希类型：hash（map）</li>
<li>列表类型：list（linkedlist）</li>
<li>集合类型：set（无重复值）</li>
<li>有序集合类型：sortedset（有序且无重复值）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-字符串类型">6. 字符串类型</h3>
<ul>
<li>存储：<code>set key value</code></li>
<li>获取：<code>get key</code></li>
<li>删除：<code>del key</code></li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://zhiyuandnc.github.io/post-images/1612089960903.jpg" alt="" loading="lazy"></figure>
<h3 id="7-哈希类型">7. 哈希类型</h3>
<ul>
<li>存储：<code>hset key field value</code></li>
<li>获取：<code>hget key field</code> <code>hgetall key</code></li>
<li>删除：<code>hdel key field</code></li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://zhiyuandnc.github.io/post-images/1612089979154.jpg" alt="" loading="lazy"></figure>
<h3 id="8-列表类型可重复">8. 列表类型（可重复）</h3>
<ul>
<li>可以添加一个元素到列表的头部或者尾部</li>
<li>添加
<ul>
<li><code>lpush key value</code>：将元素加到列表头部</li>
<li><code>rpush key value</code>：将元素加到列表尾部</li>
</ul>
</li>
<li>获取
<ul>
<li><code>lrange key start end</code>：获取范围内的列表元素</li>
<li><code>lrange key 0 -1</code>：获取列表中所有元素</li>
</ul>
</li>
<li>删除
<ul>
<li><code>lpop key</code>：从列表的头部删除元素，并将元素返回</li>
<li><code>rpop key</code>：从列表的尾部删除元素，并将元素返回</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://zhiyuandnc.github.io/post-images/1612089997534.jpg" alt="" loading="lazy"></figure>
<h3 id="9-集合类型无重复">9. 集合类型（无重复）</h3>
<ul>
<li>存储：<code>sadd key value</code></li>
<li>获取：<code>smembers key</code>：获取set集合中所有元素</li>
<li>删除：<code>srem key value</code>：删除set集合中的某个元素</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://zhiyuandnc.github.io/post-images/1612090019457.jpg" alt="" loading="lazy"></figure>
<h3 id="10-有序集合类型有序无重复">10. 有序集合类型（有序无重复）</h3>
<ul>
<li>
<p>每个value对应一个double类型的浮点数，有序集合正是通过这个浮点数保证有序的</p>
</li>
<li>
<p>存储：<code>zadd key score value</code></p>
</li>
<li>
<p>获取：<code>zrange key start end</code></p>
<ul>
<li><code>zrange key 0 -1 withscores</code></li>
</ul>
</li>
<li>
<p>删除：<code>zrem key value</code></p>
</li>
</ul>
<figure data-type="image" tabindex="7"><img src="https://zhiyuandnc.github.io/post-images/1612090036401.jpg" alt="" loading="lazy"></figure>
<h3 id="11-通用命令">11. 通用命令</h3>
<ul>
<li>查询所有的键：<code>key *</code></li>
<li>查询指定键对应value的类型：<code>type key</code></li>
<li>删除指定的key-value：<code>del key</code></li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://zhiyuandnc.github.io/post-images/1612090053842.jpg" alt="" loading="lazy"></figure>
<h3 id="12-持久化">12. 持久化</h3>
<ul>
<li>
<p>将内存中的数据存储到本地，就叫持久化数据</p>
</li>
<li>
<p>Redis持久化机制</p>
<ul>
<li>RDB：默认方式，不需要配置，默认就使用这种机制
<ul>
<li>在一定时间间隔中，检测key的变化情况，然后持久化数据</li>
</ul>
</li>
<li>AOF：日志记录的方式，可以记录每一条命令的操作，可以在每一次命令操作后，持久化数据</li>
</ul>
</li>
<li>
<p>配置文件 <code>redis.windows.conf</code></p>
<ul>
<li>
<p>RDB配置</p>
<ul>
<li>修改以下配置文件项</li>
</ul>
<pre><code class="language-ini">save 900 1
#   after 900 sec (15 min) if at least 1 key changed
save 300 10
#   after 300 sec (5 min) if at least 10 keys changed
save 60 10000
#   after 60 sec if at least 10000 keys changed
</code></pre>
<ul>
<li>重新启动 Redis，并指定配置文件：<code>redis-server.exe redis.windows.conf</code></li>
</ul>
</li>
<li>
<p>AOF配置</p>
<ul>
<li>修改以下配置文件项</li>
</ul>
<pre><code class="language-ini">appendonly no 
# 关闭AOF
appendonly yes
# 开启AOF
appendfsync always
# 每一次操作都进行持久化
appendfsync everysec
# 每隔一秒进行一次持久化
appendfsync no
# 不进行持久化
</code></pre>
<ul>
<li>重新启动Redis，并指定配置文件： <code>redis-server.exe redis.windows.conf</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三-java操作redis">三、Java操作Redis</h2>
<h3 id="1-jedis">1. Jedis</h3>
<ul>
<li>导入maven依赖</li>
</ul>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;redis.clients&lt;/groupId&gt;
    &lt;artifactId&gt;jedis&lt;/artifactId&gt;
    &lt;version&gt;3.3.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>代码实现</li>
</ul>
<pre><code class="language-java">public class JedisDemo1 {
    public static void main(String[] args) {
        Jedis jedis = new Jedis(&quot;localhost&quot;,6379);
        jedis.set(&quot;password&quot;,&quot;123456&quot;);
        jedis.close();
    }
}
</code></pre>
<ul>
<li>前往客户端查看 <code>keys *</code>，可以看到password的key和值</li>
</ul>
<figure data-type="image" tabindex="9"><img src="https://zhiyuandnc.github.io/post-images/1612090073044.jpg" alt="" loading="lazy"></figure>
<h3 id="2-jedis操作5种redis数据结构">2. Jedis操作5种Redis数据结构</h3>
<ul>
<li>操作String类型</li>
</ul>
<pre><code class="language-java">public class JedisDemo1 {
    public static void main(String[] args) {
        Jedis jedis = new Jedis(&quot;localhost&quot;,6379);
        //操作String类型（String）
        jedis.set(&quot;password&quot;,&quot;123456&quot;);
        //操作哈希类型（HashMap）
        HashMap&lt;String, String&gt; hashmap = new HashMap&lt;String, String&gt;();
        hashmap.put(&quot;name&quot;,&quot;zhangsan&quot;);
        hashmap.put(&quot;age&quot;,&quot;69&quot;);
        hashmap.put(&quot;gender&quot;,&quot;male&quot;);
        jedis.hset(&quot;hashmap&quot;,hashmap);
        //操作列表类型（list）
        jedis.lpush(&quot;listB&quot;,&quot;a&quot;);
        jedis.lpush(&quot;listB&quot;,&quot;b&quot;);
        jedis.rpush(&quot;listB&quot;,&quot;c&quot;);
        //操作Set集合（set）
        jedis.sadd(&quot;set&quot;,&quot;a&quot;);
        jedis.sadd(&quot;set&quot;,&quot;b&quot;);
        //操作有序集合（SortedSet）
        jedis.zadd(&quot;zset&quot;,99,&quot;zhangsan&quot;);
        jedis.zadd(&quot;zset&quot;,69,&quot;lisi&quot;);
        jedis.zadd(&quot;zset&quot;,66,&quot;wangwu&quot;);
        jedis.close();
    }
}
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://zhiyuandnc.github.io/post-images/1612090095314.jpg" alt="" loading="lazy"></figure>
<h3 id="3-string类型常用方法">3. String类型常用方法</h3>
<ul>
<li><code>setex(String key,int second,String value)</code>：增加字符串数据项并指定过期时间</li>
<li><code>set(String key,String value)</code>：增加字符串数据项（覆盖，已存在覆盖值）</li>
<li><code>setnx(String key,String value)</code>：增加字符串数据项（不覆盖，若已存在则不执行）</li>
<li><code>del(String key)</code>：删除指定键的字符串数据项</li>
<li><code>get(String key)</code>：获取指定键的字符串数据项的值</li>
<li><code>append(String key,String s)</code>：在指定键的字符串数据项的value后追加字符串</li>
<li><code>mset(String key1,String value1,String key2,String value2...)</code>：增加多条字符串数据项</li>
<li><code>mget(String key1,String key2...)</code>：获取指定键对应的多条数据项</li>
</ul>
<h3 id="4-hash类型常用方法">4. Hash类型常用方法</h3>
<ul>
<li><code>hset(String key,String key,String value)</code>：增加指定键的hash数据项</li>
<li><code>hset(String key,Map map)</code>：增加指定键对应的值加入hash数据项</li>
<li><code>hgetAll(String key)</code>：获取指定键对应的hash数据项</li>
<li><code>hkeys(String key)</code>：获取指定键对应的hash数据项的所有键</li>
<li><code>hvals(String key)</code>：获取指定键对应的hash数据项的所有值</li>
<li><code>hdel(String key,String k1,String k2...)</code>：从指定键对应的hash数据项中删除多个元素</li>
<li><code>hlen(String key)</code>：获取指定键对应的hash数据项的元素个数</li>
<li><code>hexists(String key,String k1)</code>：判断指定键对应的hash数据相中是否存在k1对应的元素</li>
</ul>
<h3 id="5-list类型常用方法">5. List类型常用方法</h3>
<ul>
<li><code>lpush(String key,String v1,String v2...)</code>：从list头部插入元素</li>
<li><code>rpush(String key,String v1,String v2...)</code>：从list尾部插入元素</li>
<li><code>lrange(String key,int start,int end)</code>：获取指定区间的list元素</li>
<li><code>lrem(String key,int n,String value)</code>：</li>
<li><code>lpop(String key)</code>：从list头部弹出一个元素</li>
<li><code>rpop(String key)</code>：从list尾部弹出一个元素</li>
<li><code>llen(String key)</code>：获取list的元素个数</li>
<li><code>lset(String key,int index,String value)</code>：修改list中指定索引处的值</li>
</ul>
<h3 id="6-set类型常用方法">6. Set类型常用方法</h3>
<ul>
<li><code>sadd(String key,String v1,Stirng v2...)</code>：增加指定键对应的set数据项</li>
<li><code>smembers(String key)</code>：获取指定键对应的set数据项的所有元素</li>
<li><code>srem(String key,String val)</code>：删除set中值为val的数据项</li>
<li><code>srem(String key,String v1,String v2...)</code>：删除set中值为v1，v2的数据项、</li>
<li><code>spop(String key)</code>：随机弹出set中一个元素</li>
<li><code>scard(String key)</code>：获取set集合的元素个数</li>
</ul>
<h3 id="7-sortedset类型常用方法">7. SortedSet类型常用方法</h3>
<ul>
<li><code>zadd(String key,Map map)</code>：增加指定件对应的zset数据项</li>
<li><code>zadd(String key,int score,int val)</code>：向zset中加入一个元素</li>
<li><code>zrange(String key,int start,int end)</code>：获取zset指定区间的元素值</li>
<li><code>zrangeWithScore(String key,int start,int end)</code>：获取zset指定区间的元素值和score</li>
<li><code>zrangeByScore(String key,int start,int end)</code></li>
<li><code>zrem(String key,String vlaue)</code>：删除zset例指定值的元素</li>
<li><code>zcard(String key)</code>：获取zset中元素的个数</li>
</ul>
<h2 id="四-jedis连接池">四、Jedis连接池</h2>
<h3 id="1-jedispool">1. JedisPool</h3>
<pre><code class="language-java">JedisPoolConfig config = new JedisPoolConfig();
config.setMaxTotal(50);
config.setMaxIdle(10);
config.setMaxWaitMillis(3000);
JedisPool jedisPool = new JedisPool(config,&quot;localhost&quot;,6379);
Jedis jedis = jedisPool.getResource();
jedis.set(&quot;key&quot;,&quot;value&quot;);
jedis.close();
</code></pre>
<h3 id="2-jedispool工具类">2. JedisPool工具类</h3>
<pre><code class="language-java">package com.zhiyuan.jedis;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import java.io.IOException;
import java.util.Properties;

public class JedisPoolUtils {
    private static JedisPool jedisPool;
    private JedisPoolUtils(){}
    static{
        Properties pros = new Properties();
        try {
            pros.load(JedisPoolUtils.class.getClassLoader().getResourceAsStream(&quot;jedis.properties&quot;));
            String host = pros.getProperty(&quot;Host&quot;);
            String port = pros.getProperty(&quot;Port&quot;);
            String maxTotal = pros.getProperty(&quot;MaxTotal&quot;);
            String maxIdle = pros.getProperty(&quot;MaxIdle&quot;);
            String maxWaitMillis = pros.getProperty(&quot;MaxWaitMillis&quot;);
            JedisPoolConfig config = new JedisPoolConfig();
            config.setMaxIdle(Integer.parseInt(maxIdle));
            config.setMaxTotal(Integer.parseInt(maxTotal));
            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));
            jedisPool = new JedisPool(config,host, Integer.parseInt(port));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static Jedis getJedis(){
        return jedisPool.getResource();
    }
}
</code></pre>
<pre><code class="language-properties">Host=localhost
Port=6379
MaxTotal=50
MaxIdle=10
MaxWaitMillis=3000
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/WvJdcATYk/">https://zhiyuandnc.github.io/WvJdcATYk/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS原生实现简单ajax请求]]></title>
        <id>https://zhiyuandnc.github.io/3g0TLSILu/</id>
        <link href="https://zhiyuandnc.github.io/3g0TLSILu/">
        </link>
        <updated>2021-01-31T03:05:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-写个简单的html页面">一、写个简单的HTML页面</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Ajax请求测试&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://at.alicdn.com/t/font_2335994_6js183z4xv2.css&quot;&gt;
    &lt;script src=&quot;./js/jquery-3.1.1.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;search&quot;&gt;
            &lt;input type=&quot;text&quot; placeholder=&quot;请输入关键字查询&quot;&gt;
            &lt;button&gt;
                &lt;i class=&quot;iconfont icon-sousuo&quot;&gt;&lt;/i&gt;
                搜索
            &lt;/button&gt;
        &lt;/div&gt;
        &lt;div class=&quot;search-info&quot;&gt;
            &lt;ul class=&quot;search-list&quot;&gt;&lt;/ul&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="二-随便写点css">二、随便写点CSS</h2>
<pre><code class="language-css">&lt;style&gt;
    *{
        margin:0;
        padding:0;
        box-sizing: border-box;
    }
    li{
        list-style:none;
    }
    a{
        text-decoration:none;
    }
    .container{
        width: 800px;
        height: auto;
        background-color:#f2f2f2;
        margin:50px auto;
        overflow: hidden;
    }
    .search{
        width: 600px;
        height: 50px;
        line-height: 50px;
        background-color:#228b22;
        margin:50px auto auto;
        display: flex;
        flex-direction:row;
        justify-content: space-between;
    }
    .search input{
        flex:10;
        border:1px solid #228b22;
        border-right:none;
        outline:none;
        text-indent:20px;
    }
    .search button{
        flex:2;
        font-size: 14px;
        color:#228b22;
        border:1px solid #228b22;
        outline:none;
        background-color: #fff;
    }
    .search-info{
        display:none;
        width:600px;
        height:auto;
        background-color:#fff;
        margin:0 auto;
        border:1px solid #228b22;
        border-top:none;
    }
    ul{
        padding:20px;
    }
    ul &gt; li{
        margin:0 0 10px 0;
        font-size:14px;
        line-height: 14px;
        color:#666666;
    }
&lt;/style&gt;
</code></pre>
<h2 id="三-js原生实现ajax">三、JS原生实现Ajax</h2>
<blockquote>
<p>问：这不是用了JQuery吗，扯什么原生？<br>
答：DOM元素的处理使用了JQuery，因为更方便，只是为了简化JS操作DOM的步骤，AJAX还是JS原生的</p>
</blockquote>
<pre><code class="language-js">&lt;script&gt;
   //获取页面中的输入框元素并绑定oninput和onpropertychange事件，实现对input内容的实时监控
    $('input').bind('input propertychange', function(){
        if(!($('input').val()==&quot;&quot;)){
            //初始化xhttp对象为null
            let xhttp = null;
            if(window.XMLHttpRequest){
                //现代浏览器的创建XMLHttp对象的方式（IE7+）
                xhttp = new XMLHttpRequest();
            }else{
                //非现代浏览器创建XMLHttp对象的方式（IE7-）
                xhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
            }
            //判断xhttp对象获取成功，执行以下操作
            if(xhttp!=null){
                // 监听ajax请求就绪事件
                xhttp.onreadystatechange = function(){
                    // 请求就绪，响应正确，就开始解析返回的数据
                    if(xhttp.readyState===4 &amp;&amp; xhttp.status===200){
                        // 将返回的字符串数据解析为JSON对象
                        let responseData = JSON.parse(xhttp.responseText);
                        // 每次重新请求的同时，移除列表中所有li元素
                        $('.search-list').find(&quot;li&quot;).remove();
                        for (const filminfo of responseData) {
                            // 向ul列表中追加子元素li
                            $('.search-list').append(&quot;&lt;li class=\&quot;list-item\&quot;&gt;&quot;+filminfo[&quot;name&quot;]+&quot;&lt;/li&gt;&quot;);
                            console.log(&quot;&lt;li class=\&quot;list-item\&quot;&gt;&quot;+filminfo[&quot;name&quot;]+&quot;&lt;/li&gt;&quot;);
                        }
                        // 由上到下展开显示列表
                        $('.search-info').slideDown(300);
                    }
                }
                // 建立异步请求的链接
                xhttp.open(&quot;GET&quot;,&quot;/360Video/demo1?keyword=&quot;+$('input').val(),true);
                // 发送异步请求
                xhttp.send();
            }
        }
    });
    // 输入框失焦，隐藏列表
    $('input').blur(function(){
        $('.search-info').slideUp(300);
    });
&lt;/script&gt;
</code></pre>
<h2 id="四-写个简单的servlet去响应ajax请求">四、写个简单的Servlet去响应ajax请求</h2>
<pre><code class="language-java">@WebServlet(urlPatterns = &quot;/demo1&quot;)
public class ServletDemo1 extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doGet(request, response);
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String keyword = request.getParameter(&quot;keyword&quot;);
        System.out.println(keyword);
        // 这里我使用自己的工具类去拿了360影视的数据，以json格式返回
        String data = HttpUtils.getData(&quot;https://www.360kan.com/dianying/list.php?rank=rankhot&amp;cat=all&amp;area=all&amp;act=all&amp;year=all&amp;pageno=2&amp;from=dianying_list&quot;);
        // 这里必须要这么设置Content-Type，不然前端获取到的json里面中文是乱码的
        response.setContentType(&quot;application/json;charset=UTF-8&quot;);
        // 将json数据写出到页面
        response.getWriter().write(data);
    }
}
</code></pre>
<h2 id="五-最终效果展示">五、最终效果展示</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1612064368464.gif" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/3g0TLSILu/">https://zhiyuandnc.github.io/3g0TLSILu/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java原生实现DOM树解析XML文件]]></title>
        <id>https://zhiyuandnc.github.io/fIrwGdZp7/</id>
        <link href="https://zhiyuandnc.github.io/fIrwGdZp7/">
        </link>
        <updated>2021-01-30T10:16:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-测试用的xml文件">一、测试用的XML文件</h2>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;bookstore&gt;
    &lt;book id=&quot;1&quot;&gt;
        &lt;name&gt;书1&lt;/name&gt;
        &lt;author&gt;作者1&lt;/author&gt;
        &lt;price&gt;￥998&lt;/price&gt;
    &lt;/book&gt;
    &lt;book id=&quot;2&quot;&gt;
        &lt;name&gt;书2&lt;/name&gt;
        &lt;author&gt;作者2&lt;/author&gt;
        &lt;price&gt;￥998&lt;/price&gt;
    &lt;/book&gt;
    &lt;book id=&quot;3&quot;&gt;
        &lt;name&gt;书3&lt;/name&gt;
        &lt;author&gt;作者3&lt;/author&gt;
        &lt;price&gt;￥998&lt;/price&gt;
    &lt;/book&gt;
&lt;/bookstore&gt;
</code></pre>
<h2 id="二-解析xml文件">二、解析XML文件</h2>
<pre><code class="language-java">public class DomDemo {
    public static void main(String[] args) {
        InputStream inputStream = DomDemo.class.getClassLoader().getResourceAsStream(&quot;test.xml&quot;);
        DocumentBuilderFactory dom = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder domBuilder = dom.newDocumentBuilder();
            Document document = domBuilder.parse(inputStream);
            Element bookstore = document.getDocumentElement();
            System.out.println(bookstore.getTagName());
            NodeList bookList = bookstore.getElementsByTagName(&quot;book&quot;);
            for (int i = 0; i &lt; bookList.getLength() ; i++) {
                Node book = bookList.item(i);
                NamedNodeMap bookAttributes = book.getAttributes();
                for (int j = 0; j &lt; bookAttributes.getLength(); j++) {
                    Node node = bookAttributes.item(j);
                    if (node.getNodeType() == Node.ATTRIBUTE_NODE){
                        System.out.println(node.getNodeName()+&quot;:&quot;+node.getNodeValue());
                    }
                }
                NodeList bookChildList = book.getChildNodes();
                for (int j = 0; j &lt; bookChildList.getLength(); j++) {
                    Node childItem = bookChildList.item(j);
                    if (childItem.getNodeType() == Node.ELEMENT_NODE){
                        System.out.println(childItem.getNodeName()+&quot;:&quot;+childItem.getTextContent());
                    }
                }
                System.out.println(&quot;=======================&quot;);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<h2 id="三-稍微有点麻烦了建议使用jsoup操作更加方便">三、稍微有点麻烦了，建议使用Jsoup，操作更加方便</h2>
<pre><code class="language-java">bookstore
id:1
name:书1
author:作者1
price:￥998
=======================
id:2
name:书2
author:作者2
price:￥998
=======================
id:3
name:书3
author:作者3
price:￥998
=======================
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/fIrwGdZp7/">https://zhiyuandnc.github.io/fIrwGdZp7/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSTL标签+EL表达式改进360影视采集练习案例]]></title>
        <id>https://zhiyuandnc.github.io/AqFeWp4vE/</id>
        <link href="https://zhiyuandnc.github.io/AqFeWp4vE/">
        </link>
        <updated>2021-01-30T00:49:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-导入jstl标签库和el表达式的依赖">一、导入JSTL标签库和EL表达式的依赖</h2>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;
    &lt;artifactId&gt;jstl&lt;/artifactId&gt;
    &lt;version&gt;1.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;javax.el&lt;/groupId&gt;
    &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;
    &lt;version&gt;3.0.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<blockquote>
<p>如果你们创建的不是maven项目，那么可能需要自己去tomcat的lib目录下去找这两个JAR包，然后导入到项目中</p>
</blockquote>
<h2 id="二-改进之前的jsp页面">二、改进之前的JSP页面</h2>
<pre><code class="language-html">&lt;%@ page import=&quot;com.zhiyuan.utils.HttpUtils&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.JsonArray&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.JsonParser&quot; %&gt;
&lt;%@ page import=&quot;com.zhiyuan.bean.FilmInfo&quot; %&gt;
&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.Gson&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.JsonElement&quot; %&gt;
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot; %&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;360Video&lt;/title&gt;
    &lt;link rel=&quot;icon&quot; href=&quot;https://www.360kan.com/favicon.ico&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/style.css?v=&lt;%=Math.random()%&gt;&quot;&gt;
    &lt;script src=&quot;./js/jquery-3.1.1.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;header&quot;&gt;
    &lt;div class=&quot;nav&quot;&gt;360影视采集&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;ul class=&quot;list&quot;&gt;
    &lt;%
        String data = HttpUtils.getData(&quot;https://www.360kan.com/dianying/list.php?rank=rankhot&amp;cat=all&amp;area=all&amp;act=all&amp;year=all&amp;pageno=2&amp;from=dianying_list&quot;);
        JsonArray jsonElements = new JsonParser().parse(data).getAsJsonArray();
        ArrayList&lt;FilmInfo&gt; filmInfos = new ArrayList&lt;&gt;();
        Gson gson = new Gson();
        for (JsonElement filmInfo : jsonElements) {
            filmInfos.add(gson.fromJson(filmInfo,FilmInfo.class));
        }
        request.setAttribute(&quot;data&quot;,filmInfos);
    %&gt;
        &lt;c:forEach items=&quot;${requestScope.data}&quot; var=&quot;film&quot;&gt;
            &lt;li&gt;
                &lt;div class=&quot;poster&quot;&gt;
                    &lt;img src=&quot;${film.poster}&quot;&gt;
                    &lt;c:if test=&quot;${'付费'.equals(film.paid)}&quot;&gt;
                        &lt;div class=&quot;paid&quot;&gt;付费&lt;/div&gt;
                    &lt;/c:if&gt;
                    &lt;div class=&quot;info&quot;&gt;
                        &lt;div class=&quot;year&quot;&gt;${film.year}&lt;/div&gt;
                        &lt;c:if test=&quot;${film.score!=null}&quot;&gt;
                            &lt;div class=&quot;score&quot;&gt;${film.score}&lt;/div&gt;
                        &lt;/c:if&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;detail&quot;&gt;
                    &lt;div class=&quot;name&quot;&gt;${film.name}&lt;/div&gt;
                    &lt;div class=&quot;star&quot;&gt;${film.star.length()&gt;12?film.star.substring(0,12).concat(&quot;...&quot;):film.star}&lt;/div&gt;
                &lt;/div&gt;
            &lt;/li&gt;
        &lt;/c:forEach&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<blockquote>
<p>注意：在页面中若想使用JSTL标签，必须要引入JSTL标签库，EL表达式不需要引入，可以直接使用<br>
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</p>
</blockquote>
<h2 id="三-实际效果和原来还是一模一样的">三、实际效果和原来还是一模一样的</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1611968722793.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/AqFeWp4vE/">https://zhiyuandnc.github.io/AqFeWp4vE/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaWeb阶段练习：360影视数据采集]]></title>
        <id>https://zhiyuandnc.github.io/360Video/</id>
        <link href="https://zhiyuandnc.github.io/360Video/">
        </link>
        <updated>2021-01-29T10:31:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-idea创建maven管理的javaweb项目">一、idea创建Maven管理的JavaWeb项目</h2>
<h2 id="二-创建一个用来封装影片数据的javabean对象">二、创建一个用来封装影片数据的JavaBean对象</h2>
<pre><code class="language-java">public class FilmInfo {
    private String name;
    private String url;
    private String poster;
    private boolean isPaid;
    private String year;
    private String score;
    private String star;
    public FilmInfo(){}

    public FilmInfo(String name, String url, String poster, boolean isPaid, String year, String score, String star) {
        this.name = name;
        this.url = url;
        this.poster = poster;
        this.isPaid = isPaid;
        this.year = year;
        this.score = score;
        this.star = star;
    }

    public String getName() {
        return name;
    }

    public String getUrl() {
        return url;
    }

    public String getPoster() {
        return poster;
    }

    public boolean isPaid() {
        return isPaid;
    }

    public String getYear() {
        return year;
    }

    public String getScore() {
        return score;
    }

    public String getStar() {
        return star;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void setPoster(String poster) {
        this.poster = poster;
    }

    public void setPaid(boolean paid) {
        isPaid = paid;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public void setScore(String score) {
        this.score = score;
    }

    public void setStar(String star) {
        this.star = star;
    }

    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer(&quot;FilmInfo{&quot;);
        sb.append(&quot;name='&quot;).append(name).append('\'');
        sb.append(&quot;, url='&quot;).append(url).append('\'');
        sb.append(&quot;, poster='&quot;).append(poster).append('\'');
        sb.append(&quot;, isPaid=&quot;).append(isPaid);
        sb.append(&quot;, year=&quot;).append(year);
        sb.append(&quot;, score=&quot;).append(score);
        sb.append(&quot;, star='&quot;).append(star).append('\'');
        sb.append('}');
        return sb.toString();
    }
}
</code></pre>
<h2 id="三-使用了-gson-和-httputils-的依赖">三、使用了 <code>Gson</code> 和 <code>HttpUtils</code> 的依赖</h2>
<h3 id="1-gson的maven依赖">1. Gson的maven依赖</h3>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
    &lt;artifactId&gt;gson&lt;/artifactId&gt;
    &lt;version&gt;2.8.5&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="2-httputils是我手写的http工具类里面主要包含3个方法get请求post请求还有采集数据的getdata方法">2. HttpUtils是我手写的Http工具类，里面主要包含3个方法，get请求，post请求，还有采集数据的getData方法</h3>
<pre><code class="language-java">public class HttpUtils {
    public static String getHtmlCode(String url) {
        HttpURLConnection connection = null;
        InputStream is = null;
        BufferedReader br = null;
        StringBuilder sb = new StringBuilder();
        try {
            connection = (HttpURLConnection) new URL(url).openConnection();
            is = connection.getInputStream();
            br = new BufferedReader(new InputStreamReader(is, &quot;UTF-8&quot;));
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
                sb.append(&quot;\n&quot;);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
    public static String Get(String url) {
        HttpURLConnection conn = null;
        InputStream is = null;
        BufferedReader br = null;
        String line = null;
        StringBuilder sb = new StringBuilder();
        try {
            //获取URL连接对象强转为HTTPURL连接对象
            conn = (HttpURLConnection) new URL(url).openConnection();
            //设置HTTP请求方式为GET
            conn.setRequestMethod(&quot;GET&quot;);
            //设置连接超时时间为3秒
            conn.setConnectTimeout(3000);
            //设置读取时间超时为5秒
            conn.setReadTimeout(5000);
            conn.setRequestProperty(&quot;Content-Type&quot;, &quot;text/html;charset=utf-8&quot;);
            conn.setRequestProperty(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml,application/json;&quot;);
            conn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;);
            //发送请求
            conn.connect();
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
                br = new BufferedReader(new InputStreamReader(is, &quot;UTF-8&quot;));
                while ((line = br.readLine()) != null) {
                    sb.append(line + &quot;\n&quot;);
                }
            } else {
                return &quot;ResponseCode is Error:&quot; + conn.getResponseCode();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return sb.toString();
    }
    public static String Post(String url, String requestContent) {
        System.out.println(&quot;请求的URL：&quot;+url);
        System.out.println(&quot;请求的参数：&quot;+requestContent);
        HttpURLConnection conn = null;
        OutputStream os = null;
        BufferedWriter bw = null;
        InputStream is = null;
        String line = null;
        StringBuilder sb = new StringBuilder();
        BufferedReader br = null;
        try {
            conn = (HttpURLConnection) new URL(url).openConnection();
            conn.setRequestProperty(&quot;Connection&quot;,&quot;keep-alive&quot;);
            conn.setRequestMethod(&quot;POST&quot;);
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(15000);
            conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;charset=utf-8&quot;);
            conn.setRequestProperty(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml,application/json,application/x-www-form-urlencoded&quot;);
            conn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;);
            conn.getOutputStream().write(requestContent.getBytes(&quot;UTF-8&quot;));
            conn.getOutputStream().flush();
            if (conn.getResponseCode()==200){
                is = conn.getInputStream();
                br = new BufferedReader(new InputStreamReader(is, &quot;UTF-8&quot;));
                while((line=br.readLine())!=null){
                    sb.append(line+&quot;\n&quot;);
                }
            }else{
                return &quot;ResponseCode is Error:&quot; + conn.getResponseCode();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            if(br!=null){
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(bw!=null){
                try {
                    bw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return sb.toString();
    }
    public static String getData(String url){
        String sourceCode = Get(url);
        String regex = &quot;&lt;li class=\&quot;item\&quot;&gt;\\s*&lt;a class=\&quot;js-tongjic\&quot; href=\&quot;(.*?)\&quot; monitor-shortpv-c=\&quot;(.*?)\&quot;&gt;\\s*&lt;div class=\&quot;cover g-playicon\&quot;&gt;\\s*&lt;img src=\&quot;(.*?)\&quot;&gt;\\s*(&lt;span class=\&quot;pay\&quot;&gt;(.*?)&lt;/span&gt;)?\\s*&lt;div class=\&quot;mask-wrap\&quot;&gt;\\s*&lt;span class=\&quot;hint\&quot;&gt;(.*?)&lt;/span&gt;\\s*(&lt;span class=\&quot;point\&quot;&gt;(.*?)&lt;/span&gt;)?\\s*&lt;/div&gt;\\s*&lt;/div&gt;\\s*&lt;div class=\&quot;detail\&quot;&gt;\\s*&lt;p class=\&quot;title g-clear\&quot;&gt;\\s*&lt;span class=\&quot;s1\&quot;&gt;(.*?)&lt;/span&gt;\\s*&lt;/p&gt;\\s*&lt;p class=\&quot;star\&quot;&gt;(.*?)&lt;/p&gt;\\s*&lt;/div&gt;\\s*&lt;/a&gt;\\s*&lt;/li&gt;&quot;;
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(sourceCode);
        // System.out.println(m.groupCount());
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        ArrayList&lt;FilmInfo&gt; list = new ArrayList&lt;FilmInfo&gt;();
        while(m.find()){
            FilmInfo fi = new FilmInfo(m.group(9),&quot;http://www.360kan.com/&quot;+m.group(1),m.group(3),&quot;付费&quot;.equals(m.group(5)),m.group(6),m.group(8),m.group(10));
            list.add(fi);
        }
        return gson.toJson(list);
    }
}
</code></pre>
<blockquote>
<p>Java实现原生的get和post请求，我在之前的博客中发过了，不懂的朋友可以回看我之前的博客，我就不做解释了，这里解释一下getData方法，这个方法主要是使用get发送请求获取指定页面源码，再通过正则表达式拿到我们所需要的数据，使用gson封装为Json数据返回，没有什么技术含量<br>
注意：为了取到详细信息，此处正则表达式比较长，我建议使用配置文件来读取这种较长的正则表达式，避免代码中语句过长，问题排查难度大的问题，我这里是做记录写博客，所以直接放到变量里</p>
</blockquote>
<h2 id="四-随便写个前端页面">四、随便写个前端页面</h2>
<h3 id="1-jsp部分">1. JSP部分</h3>
<pre><code class="language-html">&lt;%@ page import=&quot;com.zhiyuan.utils.HttpUtils&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.JsonArray&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.JsonParser&quot; %&gt;
&lt;%@ page import=&quot;com.zhiyuan.bean.FilmInfo&quot; %&gt;
&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.Gson&quot; %&gt;
&lt;%@ page import=&quot;com.google.gson.JsonElement&quot; %&gt;
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot; %&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;360Video&lt;/title&gt;
    &lt;link rel=&quot;icon&quot; href=&quot;https://www.360kan.com/favicon.ico&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/style.css?v=&lt;%=Math.random()%&gt;&quot;&gt;
    &lt;script src=&quot;./js/jquery-3.1.1.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;header&quot;&gt;
    &lt;div class=&quot;nav&quot;&gt;360影视采集&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;ul class=&quot;list&quot;&gt;
    &lt;%
        String data = HttpUtils.getData(&quot;https://www.360kan.com/dianying/list.php?rank=rankhot&amp;cat=all&amp;area=all&amp;act=all&amp;year=all&amp;pageno=2&amp;from=dianying_list&quot;);
        JsonArray jsonElements = new JsonParser().parse(data).getAsJsonArray();
        ArrayList&lt;FilmInfo&gt; filmInfos = new ArrayList&lt;&gt;();
        Gson gson = new Gson();
        for (JsonElement filmInfo : jsonElements) {
            filmInfos.add(gson.fromJson(filmInfo,FilmInfo.class));
        }
        for (FilmInfo filmInfo : filmInfos) {
    %&gt;
        &lt;li&gt;
            &lt;div class=&quot;poster&quot;&gt;
                &lt;img src=&quot;&lt;%=filmInfo.getPoster()%&gt;&quot;&gt;
                &lt;div class=&quot;paid&quot;&gt;&lt;%=filmInfo.isPaid()?&quot;付费&quot;:&quot;免费&quot;%&gt;&lt;/div&gt;
                &lt;div class=&quot;info&quot;&gt;
                    &lt;div class=&quot;year&quot;&gt;&lt;%=filmInfo.getYear()%&gt;&lt;/div&gt;
                    &lt;div class=&quot;score&quot;&gt;&lt;%=filmInfo.getScore()!=null?filmInfo.getScore():&quot;&quot;%&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;detail&quot;&gt;
                &lt;div class=&quot;name&quot;&gt;&lt;%=filmInfo.getName()%&gt;&lt;/div&gt;
                &lt;div class=&quot;star&quot;&gt;&lt;%=filmInfo.getStar().length()&gt;12?filmInfo.getStar().substring(0,12)+&quot;...&quot; : filmInfo.getStar()%&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/li&gt;
    &lt;%
        }
    %&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="2-css部分">2. css部分</h3>
<pre><code class="language-css">*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body,html{
    background-color:#f2f2f2;
}
a{
    text-decoration:none;
}
li{
    list-style:none;
}
.header{
    width: 100%;
    height: 50px;
    line-height: 50px;
    text-align: center;
    color:#228b22;
    font-weight: bold;
    background-color:#fff;
    box-shadow:rgba(0, 0, 0, 0.2) 1px 1px 8px 1px;
}
.container{
    width:1190px;
    background-color:#fff;
    margin:20px auto;
}
.list &gt; li{
    display: flex;
    flex-direction:column;
    align-items:center;
    width: 155px;
    height: 250px;
    margin-bottom:15px;
}
.list{
    display:flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content:space-between;
}
li &gt; .poster{
    width: 155px;
    height: 212px;
    border-radius:5px;
    overflow: hidden;
    position:relative;
}
.poster &gt; img{
    width: 100%;
    height: 100%;
}
.poster .info{
    position:absolute;
    width:155px;
    height: 38px;
    line-height: 38px;
    font-size: 12px;
    color:#000;
    bottom:0;
    background-color:rgba(0,0,0,.12);
    display: flex;
    flex-direction: row;
    justify-content:space-between;
    padding:0 10px;
}
.poster .paid{
    position: absolute;
    left:5px;
    top:5px;
    width:40px;
    height: 20px;
    line-height: 20px;
    font-size: 12px;
    color:#fff;
    background-color:goldenrod;
    text-align:center;
    border-radius:5px;
}
.info .score{
    color:goldenrod;
}
.info .year{
    color:#fff;
}
li &gt; .detail{
    width: 155px;
    height: 38px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items:center;
    cursor:pointer;
}
.detail &gt; .name{
    width:155px;
    height: 14px;
    line-height: 14px;
    font-size: 14px;
    color:#000;
    padding-left:5px;
}
.detail &gt; .star{
    width: 155px;
    height: 12px;
    line-height: 12px;
    font-size: 12px;
    color:#666666;
    margin-top:5px;
    padding-left:5px;
}
</code></pre>
<h2 id="五-运行起来看一下效果">五、运行起来看一下效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1611919017902.png" alt="" loading="lazy"></figure>
<blockquote>
<p>这里我只是采集了1页数据，当然采集其他的数据不过是重复这个操作，没有什么技术含量，就不说了</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/360Video/">https://zhiyuandnc.github.io/360Video/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LayUI学习（2）栅格系统]]></title>
        <id>https://zhiyuandnc.github.io/Dw2rPiHYV/</id>
        <link href="https://zhiyuandnc.github.io/Dw2rPiHYV/">
        </link>
        <updated>2021-01-22T14:21:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; href=&quot;layui-v2.5.7/layui/css/layui.css&quot;&gt;
&lt;script src=&quot;layui-v2.5.7/layui/layui.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-栅格系统的布局容器-layui-container">二、栅格系统的布局容器 <code>layui-container</code></h2>
<blockquote>
<p>建议使用<code>layui-container</code> 作为包裹栅格系统的容器，这样可以让列在不同尺寸屏幕下可控</p>
</blockquote>
<pre><code class="language-html">&lt;div class=&quot;layui-container&quot;&gt;&lt;/div&gt;
</code></pre>
<h2 id="三-栅格系统的行容器-layui-row">三、栅格系统的行容器 <code>layui-row</code></h2>
<pre><code class="language-html">&lt;div class=&quot;layui-row&quot;&gt;&lt;/div&gt;
</code></pre>
<h2 id="四-栅格系统的行内空间分配-layui-col-md列数">四、栅格系统的行内空间分配 <code>layui-col-md列数</code></h2>
<blockquote>
<p>在LayUI中将栅格系统分为12格，也就是说每一行会有12列的空间供我们调节内容布局，超过12列自动换行，栅格系统中的内容会根据所在屏幕尺寸完成自适应<br>
列可以同时出现最多四种不同的组合，分别是：xs（超小屏幕，如手机）、sm（小屏幕，如平板）、md（桌面中等屏幕）、lg（桌面大型屏幕），以呈现更加动态灵活的布局。<br>
本教程仅以中等屏幕（md）为例展示栅格系统用法</p>
</blockquote>
<pre><code class="language-html">&lt;div class=&quot;layui-row&quot;&gt;
    &lt;div class=&quot;layui-col-md5&quot;&gt;
        占宽度的十二分之五
    &lt;/div&gt;
    &lt;div class=&quot;layui-col-md7&quot;&gt;
        占宽度的十二分之七
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<blockquote>
<p>我们通过 <code>layui-col-md列数</code> 的格式可以为指定div分配指定列数的空间</p>
</blockquote>
<h2 id="五-为栅格系统设置列间距-layui-col-space像素">五、为栅格系统设置列间距 <code>layui-col-space像素</code></h2>
<blockquote>
<p>LayUI的<code>layui-col-space像素</code>像素支持范围为1px~30px</p>
</blockquote>
<pre><code class="language-html">&lt;div class=&quot;layui-row layui-col-space10&quot;&gt;
  &lt;div class=&quot;layui-col-md4&quot;&gt;
    占宽度的十二分之四
  &lt;/div&gt;
  &lt;div class=&quot;layui-col-md4&quot;&gt;
    占宽度的十二分之四
  &lt;/div&gt;
  &lt;div class=&quot;layui-col-md4&quot;&gt;
    占宽度的十二分之四
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-为栅格系统设置列偏移-layui-col-md-offset列数">六、为栅格系统设置列偏移 <code>layui-col-md-offset列数</code></h2>
<pre><code class="language-html">&lt;div class=&quot;layui-row&quot;&gt;
  &lt;div class=&quot;layui-col-md4&quot;&gt;
    占宽度的十二分之四
  &lt;/div&gt;
  &lt;div class=&quot;layui-col-md4 layui-col-md-offset4&quot;&gt;
    占宽度的十二分之四，但是栅格偏移四列，所以当前div会偏移到最右侧
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-栅格嵌套">七、栅格嵌套</h2>
<pre><code class="language-html">&lt;div class=&quot;layui-container&quot;&gt;
    &lt;div class=&quot;layui-row layui-col-space10&quot;&gt;
        &lt;div class=&quot;layui-col-md6&quot;&gt;
            &lt;div class=&quot;layui-col-md4&quot; style=&quot;background-color:#3ace72;&quot;&gt;十二分之四&lt;/div&gt;
            &lt;div class=&quot;layui-col-md8&quot; style=&quot;background-color:#00aae7;&quot;&gt;十二分之八&lt;/div&gt;
            &lt;div class=&quot;layui-col-md8&quot; style=&quot;background-color:#666666;&quot;&gt;十二分之八&lt;/div&gt;
            &lt;div class=&quot;layui-col-md4&quot; style=&quot;background-color:#00F7DE;&quot;&gt;十二分之四&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;layui-col-md6&quot;&gt;
            &lt;div class=&quot;layui-col-md2&quot; style=&quot;background-color:#2E2D3C;&quot;&gt;十二分之二&lt;/div&gt;
            &lt;div class=&quot;layui-col-md10&quot; style=&quot;background-color:#3c4f6b;&quot;&gt;十二分之十&lt;/div&gt;
            &lt;div class=&quot;layui-col-md10&quot; style=&quot;background-color:#4DD89E;&quot;&gt;十二分之十&lt;/div&gt;
            &lt;div class=&quot;layui-col-md2&quot; style=&quot;background-color:#009f95;&quot;&gt;十二分之二&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1611328080646.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/Dw2rPiHYV/">https://zhiyuandnc.github.io/Dw2rPiHYV/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS正则实现Json文本压缩去除空格效果]]></title>
        <id>https://zhiyuandnc.github.io/ZeuH4X3iy/</id>
        <link href="https://zhiyuandnc.github.io/ZeuH4X3iy/">
        </link>
        <updated>2021-01-22T13:41:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-准备一段测试用的json文本">一、准备一段测试用的Json文本</h2>
<pre><code class="language-json">{
    &quot;age&quot; : 12,
    &quot;name&quot; : &quot;zhiyuan&quot;,
    &quot;gender&quot; : &quot;male&quot;,
    &quot;skill&quot; : [&quot;J a v a&quot;,&quot;C&quot;,&quot;J S&quot;,&quot;Py th on&quot;]
}
</code></pre>
<h2 id="二-去除除value值中的空白字符之外的所有空白字符">二、去除除value值中的空白字符之外的所有空白字符</h2>
<pre><code class="language-js">function clearEmpty(){
    var json = document.getElementById(&quot;content&quot;).value;
    console.log(json);
    let str = json.replace(&quot;\r\n&quot;,&quot;&quot;);
    let newStr = str.trim().replace(/\s*\[\s*/g,&quot;\[&quot;).replace(/\s*\]\s*/g,&quot;\]&quot;).replace(/\s*\{\s*/g,&quot;\{&quot;).replace(/\s*\}\s*/g,&quot;\}&quot;).replace(/&quot;\s*:\s*&quot;/g,'&quot;:&quot;').replace(/&quot;\s*:\s*/g,'&quot;:').replace(/&quot;\s*,\s*/g,'&quot;,').replace(/,\s*&quot;/g,',&quot;').replace(/]\s*,\s*/g,&quot;],&quot;);
    console.log(newStr);
    document.getElementById(&quot;new-content&quot;).innerText = newStr;
}
</code></pre>
<h2 id="三-写一个难看的页面">三、写一个难看的页面</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Json文本格式压缩&lt;/title&gt;
&lt;/head&gt;
&lt;style&gt;
    *{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family:微软雅黑,sans-serif;
    }
    .container{
        width: 100%;
        height:auto;
        background-color:#f8f8f8;
        padding:20px;
        position: relative;
    }
    #content,#new-content{
        width: 100%;
        height:300px;
        background-color: #ffffff;
        color:#666;
        font-size:14px;
        outline:none;
        border:1px solid #1DB69A;
        border-radius:10px;
        padding:20px;
    }
    button{
        background-color:#FFFFFF;
        color: #1DB69A;
        height: 50px;
        width: 150px;
        font-size: 18px;
        outline:none;
        border:1px solid #1DB69A;
        cursor: pointer;
        border-radius:50px;
        margin:20px;
        position: absolute;
        right:20px;
        top:250px;
    }
    button:hover{
        background-color:#1DB69A;
        color: #FFFFFF;
    }
    button:focus{
        background-color:#009688;
        color:#FFFFFF;
    }
    .line{
        width:980px;
        margin:20px auto;
        font-size:20px;
        font-weight:bold;
        border-left:300px solid #1DB69A;
        border-right:300px solid #1DB69A;
        line-height: 2px;
        text-align: center;
        color: #1DB69A;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;line&quot;&gt;请将json格式文本粘贴到文本框中&lt;/div&gt;
        &lt;textarea name=&quot;content&quot; cols=&quot;50&quot; rows=&quot;20&quot; id=&quot;content&quot;&gt;&lt;/textarea&gt;
        &lt;button onclick=&quot;clearEmpty()&quot;&gt;去除所有空格&lt;/button&gt;
        &lt;div class=&quot;line&quot;&gt;下面将生成去除空格的Json文本&lt;/div&gt;
        &lt;textarea name=&quot;new-content&quot; id=&quot;new-content&quot; cols=&quot;50&quot; rows=&quot;20&quot; disabled&gt;&lt;/textarea&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="四-测试一下效果">四、测试一下效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1611323854003.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/ZeuH4X3iy/">https://zhiyuandnc.github.io/ZeuH4X3iy/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS3新增选择器记录]]></title>
        <id>https://zhiyuandnc.github.io/ORutvrQMw/</id>
        <link href="https://zhiyuandnc.github.io/ORutvrQMw/">
        </link>
        <updated>2021-01-18T07:58:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-css3以前的选择器">一、CSS3以前的选择器</h2>
<table>
<thead>
<tr>
<th>选择器</th>
<th>概述</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>标签选择器</td>
<td>选择页面中所有指定类型的标签</td>
<td><code>a{}</code></td>
</tr>
<tr>
<td>ID选择器</td>
<td>选择页面中拥有指定ID值的标签</td>
<td><code>#id{}</code></td>
</tr>
<tr>
<td>Class选择器</td>
<td>选择页面中拥有指定Class值的标签</td>
<td><code>.class{}</code></td>
</tr>
<tr>
<td>通配符选择器</td>
<td>选择页面中所有标签</td>
<td><code>*{}</code></td>
</tr>
<tr>
<td>后代选择器</td>
<td>选择指定标签下所有后代元素标签</td>
<td><code>ul li{}</code></td>
</tr>
<tr>
<td>相邻兄弟选择器</td>
<td>选择指定标签同级的向下一个指定元素标签</td>
<td><code>li+li{}</code></td>
</tr>
<tr>
<td>子选择器</td>
<td>选择指定标签下指定类型的直接子元素标签</td>
<td><code>ul &gt; li{}</code></td>
</tr>
<tr>
<td>属性选择器</td>
<td>选择拥有指定属性和属性值的指定类型的标签</td>
<td><code>input[type='password']{}</code></td>
</tr>
<tr>
<td>分组选择器</td>
<td>同时选择多个满足条件的标签</td>
<td><code>html,body,p,ul{}</code></td>
</tr>
<tr>
<td>伪类选择器</td>
<td>一般指a标签等存在交互行为的元素在多种状态下的操作</td>
<td><code>a:hover{}</code> <br><code>a:active{}</code><br> <code>a:visited{}</code><br> <code>input:focus{}</code></td>
</tr>
<tr>
<td>伪元素选择器</td>
<td>DOM中不存在的元素，一般用来协助标签完成特定功能</td>
<td><code>div::before{}</code> <br><code>div::after{}</code> <br><code>p::first-line{}</code> <br><code>p::first-letter{}</code></td>
</tr>
<tr>
<td>过滤选择器</td>
<td>选择指定类型指定属性条件的标签</td>
<td><code>h1.title{}</code></td>
</tr>
</tbody>
</table>
<h2 id="二-css3新增的选择器">二、CSS3新增的选择器</h2>
<table>
<thead>
<tr>
<th>选择器</th>
<th>概述</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>加强属性选择器</td>
<td>在原有属性选择器的基础上增加了类似于字符串匹配的功能</td>
<td><code>input[name^='user']{}</code> <br><code>input[name$='word']{}</code> <br><code>input[name*='name']{}</code></td>
</tr>
<tr>
<td>结构伪类选择器</td>
<td>在之前特定几个伪类的基础上，添加了对子元素选择的支持</td>
<td><code>:root{}</code> <br> <code>ul:nth-child(n){}</code> <br> <code>ul:nth-last-child(n){}</code> <br> <code>ul:nth-of-type(n){}</code> <br> <code>ul:nth-last-of-type(n){}</code> <br> <code>ul:last-child{}</code> <br> <code>ul:first-child{}</code> <br> <code>ul:first-of-type{}</code> <br> <code>ul:last-of-type{}</code> <br> <code>ul:only-child{}</code> <br> <code>ul:only-of-type{}</code> <br> <code>li:empty{}</code></td>
</tr>
<tr>
<td>否定伪类选择器</td>
<td>选择除满足指定选择器的元素外的所有标签元素</td>
<td><code>:not(p){}</code></td>
</tr>
<tr>
<td>通用兄弟选择器</td>
<td>选择指定元素之后的指定条件的多个同级标签元素</td>
<td><code>ul~li{}</code></td>
</tr>
<tr>
<td>目标伪类选择器</td>
<td>选择指定元素指向的锚点处的指定标签元素</td>
<td><code>#id:target{}</code></td>
</tr>
<tr>
<td>状态伪类选择器</td>
<td>选择拥有指定状态的标签元素</td>
<td><code>input:enabled{}</code> <br> <code>input:disabled{}</code> <br> <code>input:checked{}</code> <br> <code>::selection{}</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/ORutvrQMw/">https://zhiyuandnc.github.io/ORutvrQMw/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LayUI学习（1）布局容器]]></title>
        <id>https://zhiyuandnc.github.io/8Jg7UIzu2/</id>
        <link href="https://zhiyuandnc.github.io/8Jg7UIzu2/">
        </link>
        <updated>2021-01-16T06:21:35.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>官网：<a href="https://www.layui.com/">https://www.layui.com/</a><br>
下载好LayUI的资源文件</p>
</blockquote>
<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; href=&quot;layui-v2.5.7/layui/css/layui.css&quot;&gt;
&lt;script src=&quot;layui-v2.5.7/layui/layui.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-固定宽度容器">二、固定宽度容器</h2>
<pre><code class="language-html">&lt;div class=&quot;layui-container&quot; style=&quot;background-color:#009F95;&quot;&gt;
	固定宽度
&lt;/div&gt;
</code></pre>
<h2 id="三-适应宽度容器">三、适应宽度容器</h2>
<pre><code class="language-html">&lt;div class=&quot;layui-fluid&quot; style=&quot;background-color: #00FF00;&quot;&gt;
	适应容器宽度
&lt;/div&gt;
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/8Jg7UIzu2/">https://zhiyuandnc.github.io/8Jg7UIzu2/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java的代理模式实现]]></title>
        <id>https://zhiyuandnc.github.io/Proxy/</id>
        <link href="https://zhiyuandnc.github.io/Proxy/">
        </link>
        <updated>2021-01-16T00:27:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-代理模式">一、代理模式</h2>
<blockquote>
<p>简介：用另外的对象处理当前对象的业务逻辑并且不会影响到当前对象的一种增强当前对象功能的开发模式<br>
作用：临时增强当前对象的功能</p>
</blockquote>
<h3 id="1-分类">1. 分类</h3>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h3 id="2-静态代理">2. 静态代理</h3>
<ul>
<li>问：什么是静态代理？</li>
<li>答：通俗一点讲，就是我们在代码编写时已经已知了每一步的操作，然后一板一眼的去对指定的对象进行代理增强，这就是静态，当我们有新的需求，之前写的所有的代码都需要被改变</li>
<li>问：怎么实现？</li>
<li>答：事实上，我们在SE中所学的 <code>多态</code> 就是静态代理模式的实现</li>
<li>问：多态？</li>
<li>答：接口多态和抽象类多态正是我们去实现静态代理的方式</li>
<li>问：实现一下？</li>
<li>答：好的，但我只实现接口多态，抽象类多态的写法也是一样的，需要你去思考</li>
</ul>
<h4 id="代码实现接口多态实现">代码实现（接口多态实现）</h4>
<pre><code class="language-java">//1. 创建一个接口Person
public interface Person {
    public abstract String buy(String name);
}
//2. 定义一个接口实现类实现Person接口
public class Customer implements Person{
    @Override
    public String buy(String name){
        return name + &quot;购买成功&quot;;
    }
}
//3. 定义代理类实现Person接口，并进行静态代理的实现
public class StaticProxyDemo implements Person{
    private Person p;
    public StaticProxyDemo(Person p){
        this.p = p;
    }
    @Override
    public String buy(String name) {
        return p.buy(name)+&quot;我增强了buy方法&quot;;
    }
    public static void main(String[] args) {
        Person p = new Customer();
        StaticProxyDemo staticProxyDemo = new StaticProxyDemo(p);
        String result = staticProxyDemo.buy(&quot;橘子&quot;);
        System.out.println(result);
    }
}
</code></pre>
<h3 id="3-动态代理">3. 动态代理</h3>
<ul>
<li>问：什么是动态代理？</li>
<li>答：动态代理就是，我们已知要增强的功能，只需书写增强功能部分，然后通过程序运行过程在JVM内存中动态生成代理对象来实现对对象功能的增强</li>
<li>问：怎么实现？</li>
<li>答：动态代理目前有两种实现方式，一种是JDK自带的 <code>JDK代理（又叫接口代理）</code> ，一种是使用第三方库 <code>CGLIB</code> 实现的 <code>基于CGLIB的动态代理</code></li>
<li>问：实现一下？</li>
<li>答：好的</li>
</ul>
<h4 id="jdk代理代码实现">JDK代理代码实现</h4>
<ul>
<li>依赖的类：<code>java.lang.reflect.Proxy</code></li>
<li>使用的方法：<code>static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></li>
<li>方法参数讲解：
<ul>
<li><code>ClassLoader loader</code>：提供被代理类的类加载器</li>
<li><code>Class&lt;?&gt;[] interfaces</code>：提供被代理类实现的接口</li>
<li><code>InvocationHandler h</code>：提供增强对象的功能，它是一个接口，我们需要使用匿名内部类或者lambda表达式去实现它的 invoke 方法，来达到增强对象的目的</li>
</ul>
</li>
<li>invoke方法参数详解
<ul>
<li>Object invoke(Object proxy, Method method, Object[] args)
<ul>
<li><code>Object proxy</code>：代理对象的引用，一般不使用</li>
<li><code>Method method</code>：代理对象调用接口中方法触发的方法对象</li>
<li><code>Object[] args</code>：代理对象调用接口中方法传递的参数列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-java">//创建一个接口Person
public interface Person {
    public abstract String buy(String name);
}
//创建一个类实现接口Person
public class Customer implements Person{
    @Override
    public String buy(String name){
        return name + &quot;购买成功&quot;;
    }
}
//创建测试类实现JDK动态代理
public class DynamicDemo {
    public static void main(String[] args) {
        //创建被代理对象
        final Customer customer = new Customer();

        Person customerProxy = (Person) Proxy.newProxyInstance(customer.getClass().getClassLoader(), customer.getClass().getInterfaces(), new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                if (&quot;buy&quot;.equalsIgnoreCase(method.getName())) {
                    Object result = method.invoke(customer, args);
                    return result + &quot;，我被加强了&quot;;
                } else {
                    return method.invoke(customer, args);
                }
            }
        });
        String content = customerProxy.buy(&quot;橘子&quot;);
        System.out.println(content);
    }
}
</code></pre>
<h4 id="cglib代理代码实现">CGLIB代理代码实现</h4>
<ul>
<li>依赖的包：我这里使用maven导入依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;cglib&lt;/groupId&gt;
    &lt;artifactId&gt;cglib&lt;/artifactId&gt;
    &lt;version&gt;3.3.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>
<p>使用的类：<code>net.sf.cglib.proxy.Enhancer</code></p>
</li>
<li>
<p>使用的方法：<code>static Object create(Class type, Callback callback)</code></p>
</li>
<li>
<p>方法参数详解：</p>
<ul>
<li><code>Class type</code>：提供被代理类的字节码文件对象</li>
<li><code>Callback callback</code>：提供增强对象的功能，它是一个顶层接口，我们需要通过多态去实现它的子接口</li>
<li><code>MethodInterceptor</code>并重写其中的<code>intercept</code>方法</li>
</ul>
</li>
<li>
<p>intercept方法参数详解</p>
<ul>
<li><code>Object intercept(Object obj, java.lang.reflect.Method method, Object[] args, MethodProxy proxy)</code>
<ul>
<li><code>Object obj</code>：与JDK代理相同，都是代理对象的引用，一般不使用</li>
<li><code>Method method</code>：代理类调用接口中方法时触发的方法对象</li>
<li><code>Object[] args</code>：代理类调用接口中方法时传递的参数列表</li>
<li><code>MethodProxy proxy</code>：方法的代理对象引用，一般不使用</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-java">//定义一个类
public class Customer {
    public String buy(String name){
        return name+&quot;购买成功&quot;;
    }
}
//实现基于CGLIB的动态代理
public class CGLIBProxyDemo {
    public static void main(String[] args) {
        //创建被代理对象
        final Customer customer = new Customer();
        Customer proxyCustomer = (Customer)Enhancer.create(customer.getClass(), new MethodInterceptor() {
            @Override
            public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
                Object result = null;
                if(&quot;buy&quot;.equalsIgnoreCase(method.getName())){
                    result = method.invoke(customer,args)+&quot;,我被加强了&quot;;
                }else{
                    result = method.invoke(customer);
                }
                return result;
            }
        });
        String content = proxyCustomer.buy(&quot;香蕉&quot;);
        System.out.println(content);
    }
}
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/Proxy/">https://zhiyuandnc.github.io/Proxy/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java原生实现HTTP的GET和POST请求]]></title>
        <id>https://zhiyuandnc.github.io/JavaHttp/</id>
        <link href="https://zhiyuandnc.github.io/JavaHttp/">
        </link>
        <updated>2021-01-15T04:57:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-原生实现get请求">一、原生实现GET请求</h2>
<pre><code class="language-java">public static String Get(String url) {
    HttpURLConnection conn = null;
    InputStream is = null;
    BufferedReader br = null;
    String line = null;
    StringBuilder sb = new StringBuilder();
    try {
        //获取URL连接对象强转为HTTPURL连接对象
        conn = (HttpURLConnection) new URL(url).openConnection();
        //设置HTTP请求方式为GET
        conn.setRequestMethod(&quot;GET&quot;);
        //设置连接超时时间为3秒
        conn.setConnectTimeout(3000);
        //设置读取时间超时为5秒
        conn.setReadTimeout(5000);
        // 设置请求头
        conn.setRequestProperty(&quot;Content-Type&quot;, &quot;text/html;charset=utf-8&quot;);
        conn.setRequestProperty(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml,application/json;&quot;);
        conn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;);
        //发送请求
        conn.connect();
        //获取响应码，判断请求是否成功
        if (conn.getResponseCode() == 200) {
            is = conn.getInputStream();
            br = new BufferedReader(new InputStreamReader(is, &quot;UTF-8&quot;));
            while ((line = br.readLine()) != null) {
                // 当line不为null时，将line追加到sb中
                sb.append(line + &quot;\n&quot;);
            }
        } else {
            // 返回错误信息
            return &quot;ResponseCode is Error:&quot; + conn.getResponseCode();
        }
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        // 释放IO流
        if (br != null) {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    // 返回sb的String内容
    return sb.toString();
}
</code></pre>
<blockquote>
<p>问：怎么没有GET传参的方法？<br>
答：一般我们会直接通过QueryString将多个键值的参数用&amp;连接再与URL直接拼接，所以实际上我们还是只做了请求定向的链接，所以不需要传参的方法</p>
</blockquote>
<h2 id="二-原生实现post请求">二、原生实现POST请求</h2>
<pre><code class="language-java">public static String Post(String url, String requestContent) {
    System.out.println(&quot;请求的URL：&quot;+url);
    System.out.println(&quot;请求的参数：&quot;+requestContent);
    HttpURLConnection conn = null;
    OutputStream os = null;
    BufferedWriter bw = null;
    InputStream is = null;
    String line = null;
    StringBuilder sb = new StringBuilder();
    BufferedReader br = null;
    try {
        // 获取URL连接对象强转为HTTPURL连接对象
        conn = (HttpURLConnection) new URL(url).openConnection();
        //设置请求头
        conn.setRequestProperty(&quot;Connection&quot;,&quot;keep-alive&quot;);
        conn.setRequestMethod(&quot;POST&quot;);
        //因为POST请求需要对流进行读写，所以需要设置输入输出均为true
        conn.setDoInput(true);
        conn.setDoOutput(true);
        // 设置超时时间
        conn.setConnectTimeout(3000);
        conn.setReadTimeout(15000);
        // 设置请求头
        conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;charset=utf-8&quot;);
        conn.setRequestProperty(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml,application/json,application/x-www-form-urlencoded&quot;);
        conn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;);
        // 将POST参数转为字节数组写到流中并刷新流（这一步相当于提交参数）
        conn.getOutputStream().write(requestContent.getBytes(&quot;UTF-8&quot;));
        conn.getOutputStream().flush();
        // 获取响应码，判断请求是否成功
        if (conn.getResponseCode()==200){
            is = conn.getInputStream();
            br = new BufferedReader(new InputStreamReader(is, &quot;UTF-8&quot;));
            while((line=br.readLine())!=null){
                sb.append(line+&quot;\n&quot;);
            }
        }else{
            // 返回错误信息
            return &quot;ResponseCode is Error:&quot; + conn.getResponseCode();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }finally {
        // 释放IO流
        if(br!=null){
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if(bw!=null){
            try {
                bw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    // 返回sb的String内容
    return sb.toString();
}
</code></pre>
<blockquote>
<p>问：为什么我的不成功？<br>
答：请检查代码是否与我的完全一致，还有POST请求头中的Content-Type有几种固定的格式，并非你想写什么就可以写什么，就比如，如果我设置Content-Type为text/html;charset=utf-8，在GET请求下是正常的，在POST请求中是不行的，无法正确提交你的参数，因为你的参数并非是html格式的</p>
</blockquote>
<h2 id="三-post请求中的常见content-type">三、POST请求中的常见Content-Type</h2>
<h3 id="1-以querystring的形式去提交post参数">1. 以QueryString的形式去提交POST参数</h3>
<blockquote>
<p>你需要使用的Content-Type为application/x-www-form-urlencoded</p>
</blockquote>
<pre><code class="language-java">conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;charset=utf-8&quot;);
</code></pre>
<h3 id="2-以formdata的形式去提交post参数">2. 以FormData的形式去提交POST参数</h3>
<blockquote>
<p>你需要使用的Content-Type为multipart/form-data</p>
</blockquote>
<pre><code class="language-java">conn.setRequestProperty(&quot;Content-Type&quot;, &quot;multipart/form-data&quot;);
</code></pre>
<h3 id="3-以json格式去提交post参数">3. 以Json格式去提交POST参数</h3>
<blockquote>
<p>你需要使用的Content-Type为application/json</p>
</blockquote>
<pre><code class="language-java">conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
</code></pre>
<blockquote>
<p>问：啥叫QueryString,FormData,Json？<br>
答：请百度</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/JavaHttp/">https://zhiyuandnc.github.io/JavaHttp/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10系统盘空间优化总结]]></title>
        <id>https://zhiyuandnc.github.io/LwW9qXRhj/</id>
        <link href="https://zhiyuandnc.github.io/LwW9qXRhj/">
        </link>
        <updated>2021-01-13T15:42:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-找不到这几个系统文件怎么办">一、找不到这几个系统文件怎么办？</h2>
<p>那是因为这几个都是系统文件，不仅被隐藏还受系统保护，所以要取消隐藏系统保护文件，看下面一步步来就好</p>
<h3 id="1-第一步">1. 第一步</h3>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610614071694.png" alt="" loading="lazy"></figure>
<h3 id="2-第二步">2. 第二步</h3>
<figure data-type="image" tabindex="2"><img src="https://zhiyuandnc.github.io/post-images/1610614084253.png" alt="" loading="lazy"></figure>
<blockquote>
<p>这样就可以显示被隐藏的系统文件了，但我们尽量不要随便删除系统文件，否则会产生一些无法预料的错误</p>
</blockquote>
<h2 id="二-删除系统休眠文件-hiberfilsys">二、删除系统休眠文件 hiberfil.sys</h2>
<p>我们常说的电脑睡眠，是指电脑进入低功耗状态，将它的工作状态保存进内存，当我们恢复操作时会自动加载之前的状态，而休眠功能则是将它的工作状态保存进磁盘，这就形成了我们现在的这个hiberfil.sys文件，事实上我们大多数人都不会用到这个功能，毕竟我们连这个文件听都没听过，所以这个文件是可以放心删除的，但是请按照我下面的操作进行删除，否则出现其他的问题，可没办法解决</p>
<blockquote>
<p>以下内容摘自百度百科：<a href="https://baike.baidu.com/item/hiberfil.sys/4299821?fr=aladdin">https://baike.baidu.com/item/hiberfil.sys/4299821?fr=aladdin</a><br>
在一些较新的具有STR功能的主板上安装了xp及更新的操作系统后，在系统区根目录下会有一个 hiberfil.sys 的文件，它的大小和内存容量一样，这是什么文件呢？原来这个就是系统的休眠功能所占用的硬盘空间的文件（Windows 默认休眠功能是处于打开状态的），电脑处于休眠状态时，内存中的所有内容将保存到硬盘，并且电脑会被关闭。电脑在返回打开状态之后，关闭电脑时打开的所有程序和文档将全都还原到桌面。也就是说，当你让电脑进入休眠状态时，Windows 在关闭系统前将所有的内存内容写入hiberfil.sys文件。而后，当你重新打开电脑，操作系统使用Hiberfil.sys把所有信息放回内存，电脑恢复到关闭前的状态。然而，Windows 在硬盘上留下了hiberfil.sys文件，即使这个文件不再需要了。</p>
</blockquote>
<h3 id="1-第一步管理员权限运行cmd">1. 第一步：管理员权限运行CMD</h3>
<h3 id="2-第二步输入命令powercfg-h-off回车执行">2. 第二步：输入命令<code>powercfg -h off</code>，回车执行</h3>
<pre><code class="language-shell">powercfg -h off
</code></pre>
<blockquote>
<p>片刻之后，我们发现C盘中的hiberfil.sys已经被删除，C盘空间也多了出来，删除成功了<br>
要是之后还想恢复这个休眠功能，只需要再次以管理员权限运行CMD，输入命令 <code>powercfg -h on</code> 即可恢复</p>
</blockquote>
<h2 id="二-移动虚拟内存文件-pagefilesys">二、移动虚拟内存文件 pagefile.sys</h2>
<blockquote>
<p>什么是pagefile.sys？<br>
以下内容摘自百度百科：https://baike.baidu.com/item/pagefile.sys/460068?fr=aladdin](https://baike.baidu.com/item/pagefile.sys/460068?fr=aladdin)<br>
pagefile.sys即安装过程中创建的虚拟内存页面文件。这个文件的大小是自己系统虚拟内存设置的最小值的大小。假如虚拟内存的设置为800MB－1600MB 那么你在自己的设定驱动盘下面就可看到大小为800MB的pagefile.sys文件<br>
也就是说pagefile.sys文件是系统管理虚拟内存的文件，所以说我们是不建议删除它的，一般我们会将这个文件移动到其他空闲的盘符上，以节省C盘空间</p>
</blockquote>
<h3 id="第一步右键此电脑点击属性在弹出窗口点击高级系统设置如下">第一步：右键“此电脑”，点击“属性”，在弹出窗口点击“高级系统设置”，如下</h3>
<figure data-type="image" tabindex="3"><img src="https://zhiyuandnc.github.io/post-images/1610615542491.png" alt="" loading="lazy"></figure>
<h3 id="第二步在弹出窗口选择高级选项卡点击性能下的设置">第二步：在弹出窗口选择“高级”选项卡，点击“性能”下的“设置”</h3>
<figure data-type="image" tabindex="4"><img src="https://zhiyuandnc.github.io/post-images/1610615619675.png" alt="" loading="lazy"></figure>
<h3 id="第三步在弹出窗口选择高级选项卡点击更改">第三步：在弹出窗口选择“高级”选项卡，点击“更改”</h3>
<figure data-type="image" tabindex="5"><img src="https://zhiyuandnc.github.io/post-images/1610615704082.png" alt="" loading="lazy"></figure>
<h3 id="第四步我是已经移动过这个文件所以c盘这里显示空没移动前会显示托管的系统">第四步：我是已经移动过这个文件，所以C盘这里显示空，没移动前会显示“托管的系统”</h3>
<figure data-type="image" tabindex="6"><img src="https://zhiyuandnc.github.io/post-images/1610615952562.png" alt="" loading="lazy"></figure>
<h3 id="第五步选择一个你的空闲磁盘准备将虚拟内存文件移动过去的磁盘选择它然后点击系统管理的大小然后点击设置最后确定可能会让你重启系统如果提示请忽略我们还要继续操作">第五步：选择一个你的空闲磁盘，准备将虚拟内存文件移动过去的磁盘，选择它，然后点击“系统管理的大小”，然后点击“设置”，最后“确定”，可能会让你重启系统，如果提示，请忽略，我们还要继续操作</h3>
<figure data-type="image" tabindex="7"><img src="https://zhiyuandnc.github.io/post-images/1610616069552.png" alt="" loading="lazy"></figure>
<h3 id="第六步这次选择c盘然后选择无分页文件点击设置最后点击确认然后一路确认直到所有窗口关闭点击立即重新启动系统等待系统重启就好了系统重启后我们发现c盘中的pagefilesys不在了打开我们选择的空闲硬盘可以在根目录看到被移动的pagefilesys文件">第六步：这次选择C盘，然后选择“无分页文件”，点击“设置”，最后点击“确认”，然后一路确认，直到所有窗口关闭，点击“立即重新启动”系统，等待系统重启就好了，系统重启后，我们发现C盘中的pagefile.sys不在了，打开我们选择的空闲硬盘，可以在根目录看到被移动的pagefile.sys文件</h3>
<figure data-type="image" tabindex="8"><img src="https://zhiyuandnc.github.io/post-images/1610616342157.png" alt="" loading="lazy"></figure>
<blockquote>
<p>这两次下来，C盘应该能被释放不少空间，Win10的小技巧分享结束</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/LwW9qXRhj/">https://zhiyuandnc.github.io/LwW9qXRhj/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用注册表自定义功能]]></title>
        <id>https://zhiyuandnc.github.io/hab_ZN2hO/</id>
        <link href="https://zhiyuandnc.github.io/hab_ZN2hO/">
        </link>
        <updated>2021-01-12T13:11:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-右键创建文本文件">一、右键创建文本文件</h2>
<pre><code class="language-shell">Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\.txt]

@=&quot;txtfile&quot;

&quot;Content Type&quot;=&quot;text/plain&quot;

[HKEY_CLASSES_ROOT\.txt\ShellNew]

&quot;NullFile&quot;=&quot;&quot; [HKEY_CLASSES_ROOT\txtfile]

@=&quot;文本文档&quot;

[HKEY_CLASSES_ROOT\txtfile\shell]

[HKEY_CLASSES_ROOT\txtfile\shell\open]

[HKEY_CLASSES_ROOT\txtfile\shell\open\command]

@=&quot;NOTEPAD.EXE %1&quot;
</code></pre>
<h2 id="二-右键记事本打开">二、右键记事本打开</h2>
<pre><code class="language-shell">Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\notepad]

@=&quot;用记事本打开 &quot;

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\notepad\command]

@=&quot;notepad %1&quot;
</code></pre>
<h2 id="三-右键查看文件hash值">三、右键查看文件Hash值</h2>
<pre><code class="language-shell">Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\*\shell\hash]
&quot;MUIVerb&quot;=&quot;Hash&quot;
&quot;SubCommands&quot;=&quot;&quot;


; SHA1
[HKEY_CLASSES_ROOT\*\shell\hash\shell\01menu]
&quot;MUIVerb&quot;=&quot;SHA1&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\01menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm SHA1 | format-list&quot;


; SHA256
[HKEY_CLASSES_ROOT\*\shell\hash\shell\02menu]
&quot;MUIVerb&quot;=&quot;SHA256&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\02menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm SHA256 | format-list&quot;


; SHA384
[HKEY_CLASSES_ROOT\*\shell\hash\shell\03menu]
&quot;MUIVerb&quot;=&quot;SHA384&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\03menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm SHA384 | format-list&quot;


; SHA512
[HKEY_CLASSES_ROOT\*\shell\hash\shell\04menu]
&quot;MUIVerb&quot;=&quot;SHA512&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\04menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm SHA512 | format-list&quot;


; MACTripleDES
[HKEY_CLASSES_ROOT\*\shell\hash\shell\05menu]
&quot;MUIVerb&quot;=&quot;MACTripleDES&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\05menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm MACTripleDES | format-list&quot;


; MD5
[HKEY_CLASSES_ROOT\*\shell\hash\shell\06menu]
&quot;MUIVerb&quot;=&quot;MD5&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\06menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm MD5 | format-list&quot;


; RIPEMD160
[HKEY_CLASSES_ROOT\*\shell\hash\shell\07menu]
&quot;MUIVerb&quot;=&quot;RIPEMD160&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\07menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm RIPEMD160 | format-list&quot;


; Allget-filehash -literalpath '%1' -algorithm RIPEMD160 | format-list
[HKEY_CLASSES_ROOT\*\shell\hash\shell\08menu]
&quot;CommandFlags&quot;=dword:00000020
&quot;MUIVerb&quot;=&quot;显示全部&quot;

[HKEY_CLASSES_ROOT\*\shell\hash\shell\08menu\command]
@=&quot;powershell -noexit get-filehash -literalpath '%1' -algorithm SHA1 | format-list;get-filehash -literalpath '%1' -algorithm SHA256 | format-list;get-filehash -literalpath '%1' -algorithm SHA384 | format-list;get-filehash -literalpath '%1' -algorithm SHA512 | format-list;get-filehash -literalpath '%1' -algorithm MACTripleDES | format-list;get-filehash -literalpath '%1' -algorithm MD5 | format-list;get-filehash -literalpath '%1' -algorithm RIPEMD160 | format-list&quot;
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/hab_ZN2hO/">https://zhiyuandnc.github.io/hab_ZN2hO/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义注解简单模拟Junit实现测试]]></title>
        <id>https://zhiyuandnc.github.io/SHhX20vPx/</id>
        <link href="https://zhiyuandnc.github.io/SHhX20vPx/">
        </link>
        <updated>2021-01-12T08:54:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-创建自定义注解">一、创建自定义注解</h2>
<pre><code class="language-java">@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface MyTest {}
</code></pre>
<h2 id="二-创建测试用的类和方法">二、创建测试用的类和方法</h2>
<pre><code class="language-java">public class Demo {
    @MyTest
    public void show(){
        System.out.println(&quot;show()方法&quot;);
    }
}
</code></pre>
<h2 id="三-实现自定义注解功能">三、实现自定义注解功能</h2>
<pre><code class="language-java">public class MyTest {
    public static void main(String[] args) throws IllegalAccessException, InstantiationException, InvocationTargetException {
        Class&lt;Demo&gt; dc = Demo.class;
        Demo demo = dc.newInstance();
        Method[] methods = dc.getDeclaredMethods();
        for (Method method : methods) {
            if(method.isAnnotationPresent(com.zhiyuan.annotation.MyTest.class)){
                method.invoke(demo);
            }
        }
    }
}
</code></pre>
<h2 id="四-执行结果">四、执行结果</h2>
<pre><code class="language-java">//show()方法
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/SHhX20vPx/">https://zhiyuandnc.github.io/SHhX20vPx/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（11）段落]]></title>
        <id>https://zhiyuandnc.github.io/06BP2pOk4/</id>
        <link href="https://zhiyuandnc.github.io/06BP2pOk4/">
        </link>
        <updated>2021-01-11T12:50:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src = &quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-普通段落">二、普通段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="三-占位符段落">三、占位符段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui placeholder segment&quot;&gt;
	&lt;div class=&quot;ui icon header&quot;&gt;
		&lt;i class=&quot;pdf file outline icon&quot;&gt;&lt;/i&gt;No documents are listened for this customer
	&lt;/div&gt;
	&lt;div class=&quot;ui primary button&quot;&gt;Add Document&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="四-阴影段落">四、阴影段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="五-堆叠段落">五、堆叠段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui stacked segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-html">&lt;div class=&quot;ui tall stacked segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-html">&lt;div class=&quot;ui piled segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-多彩段落">六、多彩段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui vertical raised segments&quot;&gt;
	&lt;div class=&quot;ui orange segment&quot;&gt;
		&lt;p&gt;top&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui red segment&quot;&gt;
		&lt;p&gt;center&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui green segment&quot;&gt;
		&lt;p&gt;center&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui violet segment&quot;&gt;
		&lt;p&gt;center&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui blue segment&quot;&gt;
		&lt;p&gt;bottom&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-html">&lt;div class=&quot;ui horizontal raised segments&quot;&gt;
	&lt;div class=&quot;ui orange segment&quot;&gt;
		&lt;p&gt;top&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui red segment&quot;&gt;
		&lt;p&gt;center&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui green segment&quot;&gt;
		&lt;p&gt;center&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui violet segment&quot;&gt;
		&lt;p&gt;center&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;ui blue segment&quot;&gt;
		&lt;p&gt;bottom&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-带加载器段落">七、带加载器段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui loading segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="八-反转段落">八、反转段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui inverted segment&quot;&gt;
	&lt;div class=&quot;ui inverted placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="九-垂直附加段落">九、垂直附加段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui top attached segment&quot;&gt;
	&lt;div class=&quot;ui header&quot;&gt;top&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui inverted attached segment&quot;&gt;
	&lt;div class=&quot;ui inverted placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui bottom attached segment&quot;&gt;
	&lt;div class=&quot;ui header&quot;&gt;bottom&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十-分级内容段落">十、分级内容段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui secondary inverted green segment&quot;&gt;
	&lt;p&gt;二级分级颜色展示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ui tertiary inverted green segment&quot;&gt;
	&lt;p&gt;三级分级颜色展示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ui inverted green segment&quot;&gt;
	&lt;p&gt;默认分级颜色展示&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十一-圆形段落">十一、圆形段落</h2>
<pre><code class="language-html">&lt;div class=&quot;ui red inverted circular segment&quot;&gt;
	&lt;div class=&quot;ui inverted header&quot;&gt;
		现在购买&lt;div class=&quot;sub header&quot;&gt;只要$998&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十二-实际效果">十二、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610369464880.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/06BP2pOk4/">https://zhiyuandnc.github.io/06BP2pOk4/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（10）揭示效果]]></title>
        <id>https://zhiyuandnc.github.io/6TaBTojkN/</id>
        <link href="https://zhiyuandnc.github.io/6TaBTojkN/">
        </link>
        <updated>2021-01-11T12:18:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-fade渐隐渐现效果">二、Fade（渐隐渐现效果）</h2>
<pre><code class="language-html">&lt;div class=&quot;ui fade reveal&quot;&gt;
	&lt;div class=&quot;visible content&quot;&gt;
		&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot; class=&quot;ui small image&quot;&gt;
	&lt;/div&gt;
	&lt;div class=&quot;hidden content&quot;&gt;
		&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot; class=&quot;ui small image&quot;&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui fade reveal small image&quot;&gt;
	&lt;div class=&quot;visible content&quot;&gt;
		&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
	&lt;div class=&quot;hidden content&quot;&gt;
		&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="三-move左右移动效果">三、Move（左右移动效果）</h2>
<pre><code class="language-html">&lt;div class=&quot;ui move left reveal small image&quot;&gt;
	&lt;div class=&quot;visible content&quot;&gt;
		&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
	&lt;div class=&quot;hidden content&quot;&gt;
		&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui move right reveal small image&quot;&gt;
	&lt;div class=&quot;visible content&quot;&gt;
		&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
	&lt;div class=&quot;hidden content&quot;&gt;
		&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui move up reveal small image&quot;&gt;
	&lt;div class=&quot;visible content&quot;&gt;
		&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
	&lt;div class=&quot;hidden content&quot;&gt;
		&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui move down reveal small image&quot;&gt;
	&lt;div class=&quot;visible content&quot;&gt;
		&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;	
    &lt;div class=&quot;hidden content&quot;&gt;
		&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="四-rotate旋转揭示效果">四、Rotate（旋转揭示效果）</h2>
<pre><code class="language-html">&lt;div class=&quot;ui small circular rotate right reveal image&quot;&gt;
	&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot; class=&quot;visible content&quot;&gt;
	&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot; class=&quot;hidden content&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui small circular rotate left reveal image&quot;&gt;
	&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot; class=&quot;visible content&quot;&gt;
	&lt;img src=&quot;./img/ade.jpg&quot; alt=&quot;&quot; class=&quot;hidden content&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="五-实际效果">五、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610367532989.gif" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/6TaBTojkN/">https://zhiyuandnc.github.io/6TaBTojkN/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（9）占位符]]></title>
        <id>https://zhiyuandnc.github.io/9njMczwwO/</id>
        <link href="https://zhiyuandnc.github.io/9njMczwwO/">
        </link>
        <updated>2021-01-11T12:03:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-普通占位符">二、普通占位符</h2>
<pre><code class="language-html">&lt;div class=&quot;ui placeholder&quot;&gt;
	&lt;div class=&quot;image header&quot;&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;paragraph&quot;&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="三-segment占位符">三、segment占位符</h2>
<pre><code class="language-html">&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="四-不同长度占位符">四、不同长度占位符</h2>
<pre><code class="language-html">&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;div class=&quot;ui placeholder&quot;&gt;
		&lt;div class=&quot;very short line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;short line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;medium line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;long line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;very long line&quot;&gt;&lt;/div&gt;
		&lt;div class=&quot;full line&quot;&gt;&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="五-适应容器占位符">五、适应容器占位符</h2>
<pre><code class="language-html">&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;div class=&quot;ui fluid placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;very long line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;full line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;medium line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;short line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;long line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-反转占位符">六、反转占位符</h2>
<pre><code class="language-html">&lt;div class=&quot;ui raised inverted segment&quot;&gt;
	&lt;div class=&quot;ui inverted placeholder&quot;&gt;
		&lt;div class=&quot;image header&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&quot;paragraph&quot;&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
			&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-实际效果">七、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610366621670.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/9njMczwwO/">https://zhiyuandnc.github.io/9njMczwwO/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（8）加载器]]></title>
        <id>https://zhiyuandnc.github.io/QDJU1dBj2/</id>
        <link href="https://zhiyuandnc.github.io/QDJU1dBj2/">
        </link>
        <updated>2021-01-11T11:46:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-普通加载器">二、普通加载器</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;普通加载器样式&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui loader&quot;&gt;&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="三-加载器反转">三、加载器反转</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;加载器反转效果&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active inverted dimmer&quot;&gt;
		&lt;div class=&quot;ui loader&quot;&gt;&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="四-带文字描述的加载器">四、带文字描述的加载器</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;带文字的加载器&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="五-不同状态的加载器">五、不同状态的加载器</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;不同状态的加载器&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui indeterminate text loader&quot;&gt;正在准备文件&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-加载器的显示与隐藏">六、加载器的显示与隐藏</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;加载器的显示与隐藏&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active loader&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui disabled loader&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-内联样式加载器">七、内联样式加载器</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;内联样式加载器&lt;/div&gt;
&lt;div class=&quot;ui active text inline loader&quot;&gt;加载中&lt;/div&gt;
</code></pre>
<h2 id="八-不同尺寸加载器">八、不同尺寸加载器</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;不同尺寸加载器&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui mini text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui tiny text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui small text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui medium text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui large text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui big text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui huge text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
	&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
	&lt;div class=&quot;ui active dimmer&quot;&gt;
		&lt;div class=&quot;ui massive text loader&quot;&gt;加载中&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="九-实际效果">九、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610365740630.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/QDJU1dBj2/">https://zhiyuandnc.github.io/QDJU1dBj2/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java中所有TimeZoneID]]></title>
        <id>https://zhiyuandnc.github.io/QwkVexFfD/</id>
        <link href="https://zhiyuandnc.github.io/QwkVexFfD/">
        </link>
        <updated>2021-01-10T12:20:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-使用代码输出java中所有timezoneid">一、使用代码输出Java中所有TimeZoneID</h2>
<pre><code class="language-java">public static void main(String[] args) {
    Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();
    for (String zoneId : zoneIds) {
        System.out.println(zoneId);
    }
}
</code></pre>
<h2 id="二-所有timezoneid表格">二、所有TimeZoneID表格</h2>
<table>
<thead>
<tr>
<th>时区ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>Asia/Aden</td>
</tr>
<tr>
<td>America/Cuiaba</td>
</tr>
<tr>
<td>Etc/GMT+9</td>
</tr>
<tr>
<td>Etc/GMT+8</td>
</tr>
<tr>
<td>Africa/Nairobi</td>
</tr>
<tr>
<td>America/Marigot</td>
</tr>
<tr>
<td>Asia/Aqtau</td>
</tr>
<tr>
<td>Pacific/Kwajalein</td>
</tr>
<tr>
<td>America/El_Salvador</td>
</tr>
<tr>
<td>Asia/Pontianak</td>
</tr>
<tr>
<td>Africa/Cairo</td>
</tr>
<tr>
<td>Pacific/Pago_Pago</td>
</tr>
<tr>
<td>Africa/Mbabane</td>
</tr>
<tr>
<td>Asia/Kuching</td>
</tr>
<tr>
<td>Pacific/Honolulu</td>
</tr>
<tr>
<td>Pacific/Rarotonga</td>
</tr>
<tr>
<td>America/Guatemala</td>
</tr>
<tr>
<td>Australia/Hobart</td>
</tr>
<tr>
<td>Europe/London</td>
</tr>
<tr>
<td>America/Belize</td>
</tr>
<tr>
<td>America/Panama</td>
</tr>
<tr>
<td>Asia/Chungking</td>
</tr>
<tr>
<td>America/Managua</td>
</tr>
<tr>
<td>America/Indiana/Petersburg</td>
</tr>
<tr>
<td>Asia/Yerevan</td>
</tr>
<tr>
<td>Europe/Brussels</td>
</tr>
<tr>
<td>GMT</td>
</tr>
<tr>
<td>Europe/Warsaw</td>
</tr>
<tr>
<td>America/Chicago</td>
</tr>
<tr>
<td>Asia/Kashgar</td>
</tr>
<tr>
<td>Chile/Continental</td>
</tr>
<tr>
<td>Pacific/Yap</td>
</tr>
<tr>
<td>CET</td>
</tr>
<tr>
<td>Etc/GMT-1</td>
</tr>
<tr>
<td>Etc/GMT-0</td>
</tr>
<tr>
<td>Europe/Jersey</td>
</tr>
<tr>
<td>America/Tegucigalpa</td>
</tr>
<tr>
<td>Etc/GMT-5</td>
</tr>
<tr>
<td>Europe/Istanbul</td>
</tr>
<tr>
<td>America/Eirunepe</td>
</tr>
<tr>
<td>Etc/GMT-4</td>
</tr>
<tr>
<td>America/Miquelon</td>
</tr>
<tr>
<td>Etc/GMT-3</td>
</tr>
<tr>
<td>Europe/Luxembourg</td>
</tr>
<tr>
<td>Etc/GMT-2</td>
</tr>
<tr>
<td>Etc/GMT-9</td>
</tr>
<tr>
<td>America/Argentina/Catamarca</td>
</tr>
<tr>
<td>Etc/GMT-8</td>
</tr>
<tr>
<td>Etc/GMT-7</td>
</tr>
<tr>
<td>Etc/GMT-6</td>
</tr>
<tr>
<td>Europe/Zaporozhye</td>
</tr>
<tr>
<td>Canada/Yukon</td>
</tr>
<tr>
<td>Canada/Atlantic</td>
</tr>
<tr>
<td>Atlantic/St_Helena</td>
</tr>
<tr>
<td>Australia/Tasmania</td>
</tr>
<tr>
<td>Libya</td>
</tr>
<tr>
<td>Europe/Guernsey</td>
</tr>
<tr>
<td>America/Grand_Turk</td>
</tr>
<tr>
<td>US/Pacific-New</td>
</tr>
<tr>
<td>Asia/Samarkand</td>
</tr>
<tr>
<td>America/Argentina/Cordoba</td>
</tr>
<tr>
<td>Asia/Phnom_Penh</td>
</tr>
<tr>
<td>Africa/Kigali</td>
</tr>
<tr>
<td>Asia/Almaty</td>
</tr>
<tr>
<td>US/Alaska</td>
</tr>
<tr>
<td>Asia/Dubai</td>
</tr>
<tr>
<td>Europe/Isle_of_Man</td>
</tr>
<tr>
<td>America/Araguaina</td>
</tr>
<tr>
<td>Cuba</td>
</tr>
<tr>
<td>Asia/Novosibirsk</td>
</tr>
<tr>
<td>America/Argentina/Salta</td>
</tr>
<tr>
<td>Etc/GMT+3</td>
</tr>
<tr>
<td>Africa/Tunis</td>
</tr>
<tr>
<td>Etc/GMT+2</td>
</tr>
<tr>
<td>Etc/GMT+1</td>
</tr>
<tr>
<td>Pacific/Fakaofo</td>
</tr>
<tr>
<td>Africa/Tripoli</td>
</tr>
<tr>
<td>Etc/GMT+0</td>
</tr>
<tr>
<td>Israel</td>
</tr>
<tr>
<td>Africa/Banjul</td>
</tr>
<tr>
<td>Etc/GMT+7</td>
</tr>
<tr>
<td>Indian/Comoro</td>
</tr>
<tr>
<td>Etc/GMT+6</td>
</tr>
<tr>
<td>Etc/GMT+5</td>
</tr>
<tr>
<td>Etc/GMT+4</td>
</tr>
<tr>
<td>Pacific/Port_Moresby</td>
</tr>
<tr>
<td>US/Arizona</td>
</tr>
<tr>
<td>Antarctica/Syowa</td>
</tr>
<tr>
<td>Indian/Reunion</td>
</tr>
<tr>
<td>Pacific/Palau</td>
</tr>
<tr>
<td>Europe/Kaliningrad</td>
</tr>
<tr>
<td>America/Montevideo</td>
</tr>
<tr>
<td>Africa/Windhoek</td>
</tr>
<tr>
<td>Asia/Karachi</td>
</tr>
<tr>
<td>Africa/Mogadishu</td>
</tr>
<tr>
<td>Australia/Perth</td>
</tr>
<tr>
<td>Brazil/East</td>
</tr>
<tr>
<td>Etc/GMT</td>
</tr>
<tr>
<td>Asia/Chita</td>
</tr>
<tr>
<td>Pacific/Easter</td>
</tr>
<tr>
<td>Antarctica/Davis</td>
</tr>
<tr>
<td>Antarctica/McMurdo</td>
</tr>
<tr>
<td>Asia/Macao</td>
</tr>
<tr>
<td>America/Manaus</td>
</tr>
<tr>
<td>Africa/Freetown</td>
</tr>
<tr>
<td>Europe/Bucharest</td>
</tr>
<tr>
<td>Asia/Tomsk</td>
</tr>
<tr>
<td>America/Argentina/Mendoza</td>
</tr>
<tr>
<td>Asia/Macau</td>
</tr>
<tr>
<td>Europe/Malta</td>
</tr>
<tr>
<td>Mexico/BajaSur</td>
</tr>
<tr>
<td>Pacific/Tahiti</td>
</tr>
<tr>
<td>Africa/Asmera</td>
</tr>
<tr>
<td>Europe/Busingen</td>
</tr>
<tr>
<td>America/Argentina/Rio_Gallegos</td>
</tr>
<tr>
<td>Africa/Malabo</td>
</tr>
<tr>
<td>Europe/Skopje</td>
</tr>
<tr>
<td>America/Catamarca</td>
</tr>
<tr>
<td>America/Godthab</td>
</tr>
<tr>
<td>Europe/Sarajevo</td>
</tr>
<tr>
<td>Australia/ACT</td>
</tr>
<tr>
<td>GB-Eire</td>
</tr>
<tr>
<td>Africa/Lagos</td>
</tr>
<tr>
<td>America/Cordoba</td>
</tr>
<tr>
<td>Europe/Rome</td>
</tr>
<tr>
<td>Asia/Dacca</td>
</tr>
<tr>
<td>Indian/Mauritius</td>
</tr>
<tr>
<td>Pacific/Samoa</td>
</tr>
<tr>
<td>America/Regina</td>
</tr>
<tr>
<td>America/Fort_Wayne</td>
</tr>
<tr>
<td>America/Dawson_Creek</td>
</tr>
<tr>
<td>Africa/Algiers</td>
</tr>
<tr>
<td>Europe/Mariehamn</td>
</tr>
<tr>
<td>America/St_Johns</td>
</tr>
<tr>
<td>America/St_Thomas</td>
</tr>
<tr>
<td>Europe/Zurich</td>
</tr>
<tr>
<td>America/Anguilla</td>
</tr>
<tr>
<td>Asia/Dili</td>
</tr>
<tr>
<td>America/Denver</td>
</tr>
<tr>
<td>Africa/Bamako</td>
</tr>
<tr>
<td>Europe/Saratov</td>
</tr>
<tr>
<td>GB</td>
</tr>
<tr>
<td>Mexico/General</td>
</tr>
<tr>
<td>Pacific/Wallis</td>
</tr>
<tr>
<td>Europe/Gibraltar</td>
</tr>
<tr>
<td>Africa/Conakry</td>
</tr>
<tr>
<td>Africa/Lubumbashi</td>
</tr>
<tr>
<td>Asia/Istanbul</td>
</tr>
<tr>
<td>America/Havana</td>
</tr>
<tr>
<td>NZ-CHAT</td>
</tr>
<tr>
<td>Asia/Choibalsan</td>
</tr>
<tr>
<td>America/Porto_Acre</td>
</tr>
<tr>
<td>Asia/Omsk</td>
</tr>
<tr>
<td>Europe/Vaduz</td>
</tr>
<tr>
<td>US/Michigan</td>
</tr>
<tr>
<td>Asia/Dhaka</td>
</tr>
<tr>
<td>America/Barbados</td>
</tr>
<tr>
<td>Europe/Tiraspol</td>
</tr>
<tr>
<td>Atlantic/Cape_Verde</td>
</tr>
<tr>
<td>Asia/Yekaterinburg</td>
</tr>
<tr>
<td>America/Louisville</td>
</tr>
<tr>
<td>Pacific/Johnston</td>
</tr>
<tr>
<td>Pacific/Chatham</td>
</tr>
<tr>
<td>Europe/Ljubljana</td>
</tr>
<tr>
<td>America/Sao_Paulo</td>
</tr>
<tr>
<td>Asia/Jayapura</td>
</tr>
<tr>
<td>America/Curacao</td>
</tr>
<tr>
<td>Asia/Dushanbe</td>
</tr>
<tr>
<td>America/Guyana</td>
</tr>
<tr>
<td>America/Guayaquil</td>
</tr>
<tr>
<td>America/Martinique</td>
</tr>
<tr>
<td>Portugal</td>
</tr>
<tr>
<td>Europe/Berlin</td>
</tr>
<tr>
<td>Europe/Moscow</td>
</tr>
<tr>
<td>Europe/Chisinau</td>
</tr>
<tr>
<td>America/Puerto_Rico</td>
</tr>
<tr>
<td>America/Rankin_Inlet</td>
</tr>
<tr>
<td>Pacific/Ponape</td>
</tr>
<tr>
<td>Europe/Stockholm</td>
</tr>
<tr>
<td>Europe/Budapest</td>
</tr>
<tr>
<td>America/Argentina/Jujuy</td>
</tr>
<tr>
<td>Australia/Eucla</td>
</tr>
<tr>
<td>Asia/Shanghai</td>
</tr>
<tr>
<td>Universal</td>
</tr>
<tr>
<td>Europe/Zagreb</td>
</tr>
<tr>
<td>America/Port_of_Spain</td>
</tr>
<tr>
<td>Europe/Helsinki</td>
</tr>
<tr>
<td>Asia/Beirut</td>
</tr>
<tr>
<td>Asia/Tel_Aviv</td>
</tr>
<tr>
<td>Pacific/Bougainville</td>
</tr>
<tr>
<td>US/Central</td>
</tr>
<tr>
<td>Africa/Sao_Tome</td>
</tr>
<tr>
<td>Indian/Chagos</td>
</tr>
<tr>
<td>America/Cayenne</td>
</tr>
<tr>
<td>Asia/Yakutsk</td>
</tr>
<tr>
<td>Pacific/Galapagos</td>
</tr>
<tr>
<td>Australia/North</td>
</tr>
<tr>
<td>Europe/Paris</td>
</tr>
<tr>
<td>Africa/Ndjamena</td>
</tr>
<tr>
<td>Pacific/Fiji</td>
</tr>
<tr>
<td>America/Rainy_River</td>
</tr>
<tr>
<td>Indian/Maldives</td>
</tr>
<tr>
<td>Australia/Yancowinna</td>
</tr>
<tr>
<td>SystemV/AST4</td>
</tr>
<tr>
<td>Asia/Oral</td>
</tr>
<tr>
<td>America/Yellowknife</td>
</tr>
<tr>
<td>Pacific/Enderbury</td>
</tr>
<tr>
<td>America/Juneau</td>
</tr>
<tr>
<td>Australia/Victoria</td>
</tr>
<tr>
<td>America/Indiana/Vevay</td>
</tr>
<tr>
<td>Asia/Tashkent</td>
</tr>
<tr>
<td>Asia/Jakarta</td>
</tr>
<tr>
<td>Africa/Ceuta</td>
</tr>
<tr>
<td>Asia/Barnaul</td>
</tr>
<tr>
<td>America/Recife</td>
</tr>
<tr>
<td>America/Buenos_Aires</td>
</tr>
<tr>
<td>America/Noronha</td>
</tr>
<tr>
<td>America/Swift_Current</td>
</tr>
<tr>
<td>Australia/Adelaide</td>
</tr>
<tr>
<td>America/Metlakatla</td>
</tr>
<tr>
<td>Africa/Djibouti</td>
</tr>
<tr>
<td>America/Paramaribo</td>
</tr>
<tr>
<td>Asia/Qostanay</td>
</tr>
<tr>
<td>Europe/Simferopol</td>
</tr>
<tr>
<td>Europe/Sofia</td>
</tr>
<tr>
<td>Africa/Nouakchott</td>
</tr>
<tr>
<td>Europe/Prague</td>
</tr>
<tr>
<td>America/Indiana/Vincennes</td>
</tr>
<tr>
<td>Antarctica/Mawson</td>
</tr>
<tr>
<td>America/Kralendijk</td>
</tr>
<tr>
<td>Antarctica/Troll</td>
</tr>
<tr>
<td>Europe/Samara</td>
</tr>
<tr>
<td>Indian/Christmas</td>
</tr>
<tr>
<td>America/Antigua</td>
</tr>
<tr>
<td>Pacific/Gambier</td>
</tr>
<tr>
<td>America/Indianapolis</td>
</tr>
<tr>
<td>America/Inuvik</td>
</tr>
<tr>
<td>America/Iqaluit</td>
</tr>
<tr>
<td>Pacific/Funafuti</td>
</tr>
<tr>
<td>UTC</td>
</tr>
<tr>
<td>Antarctica/Macquarie</td>
</tr>
<tr>
<td>Canada/Pacific</td>
</tr>
<tr>
<td>America/Moncton</td>
</tr>
<tr>
<td>Africa/Gaborone</td>
</tr>
<tr>
<td>Pacific/Chuuk</td>
</tr>
<tr>
<td>Asia/Pyongyang</td>
</tr>
<tr>
<td>America/St_Vincent</td>
</tr>
<tr>
<td>Asia/Gaza</td>
</tr>
<tr>
<td>Etc/Universal</td>
</tr>
<tr>
<td>PST8PDT</td>
</tr>
<tr>
<td>Atlantic/Faeroe</td>
</tr>
<tr>
<td>Asia/Qyzylorda</td>
</tr>
<tr>
<td>Canada/Newfoundland</td>
</tr>
<tr>
<td>America/Kentucky/Louisville</td>
</tr>
<tr>
<td>America/Yakutat</td>
</tr>
<tr>
<td>Asia/Ho_Chi_Minh</td>
</tr>
<tr>
<td>Antarctica/Casey</td>
</tr>
<tr>
<td>Europe/Copenhagen</td>
</tr>
<tr>
<td>Africa/Asmara</td>
</tr>
<tr>
<td>Atlantic/Azores</td>
</tr>
<tr>
<td>Europe/Vienna</td>
</tr>
<tr>
<td>ROK</td>
</tr>
<tr>
<td>Pacific/Pitcairn</td>
</tr>
<tr>
<td>America/Mazatlan</td>
</tr>
<tr>
<td>Australia/Queensland</td>
</tr>
<tr>
<td>Pacific/Nauru</td>
</tr>
<tr>
<td>Europe/Tirane</td>
</tr>
<tr>
<td>Asia/Kolkata</td>
</tr>
<tr>
<td>SystemV/MST7</td>
</tr>
<tr>
<td>Australia/Canberra</td>
</tr>
<tr>
<td>MET</td>
</tr>
<tr>
<td>Australia/Broken_Hill</td>
</tr>
<tr>
<td>Europe/Riga</td>
</tr>
<tr>
<td>America/Dominica</td>
</tr>
<tr>
<td>Africa/Abidjan</td>
</tr>
<tr>
<td>America/Mendoza</td>
</tr>
<tr>
<td>America/Santarem</td>
</tr>
<tr>
<td>Kwajalein</td>
</tr>
<tr>
<td>America/Asuncion</td>
</tr>
<tr>
<td>Asia/Ulan_Bator</td>
</tr>
<tr>
<td>NZ</td>
</tr>
<tr>
<td>America/Boise</td>
</tr>
<tr>
<td>Australia/Currie</td>
</tr>
<tr>
<td>EST5EDT</td>
</tr>
<tr>
<td>Pacific/Guam</td>
</tr>
<tr>
<td>Pacific/Wake</td>
</tr>
<tr>
<td>Atlantic/Bermuda</td>
</tr>
<tr>
<td>America/Costa_Rica</td>
</tr>
<tr>
<td>America/Dawson</td>
</tr>
<tr>
<td>Asia/Chongqing</td>
</tr>
<tr>
<td>Eire</td>
</tr>
<tr>
<td>Europe/Amsterdam</td>
</tr>
<tr>
<td>America/Indiana/Knox</td>
</tr>
<tr>
<td>America/North_Dakota/Beulah</td>
</tr>
<tr>
<td>Africa/Accra</td>
</tr>
<tr>
<td>Atlantic/Faroe</td>
</tr>
<tr>
<td>Mexico/BajaNorte</td>
</tr>
<tr>
<td>America/Maceio</td>
</tr>
<tr>
<td>Etc/UCT</td>
</tr>
<tr>
<td>Pacific/Apia</td>
</tr>
<tr>
<td>GMT0</td>
</tr>
<tr>
<td>America/Atka</td>
</tr>
<tr>
<td>Pacific/Niue</td>
</tr>
<tr>
<td>Australia/Lord_Howe</td>
</tr>
<tr>
<td>Europe/Dublin</td>
</tr>
<tr>
<td>Pacific/Truk</td>
</tr>
<tr>
<td>MST7MDT</td>
</tr>
<tr>
<td>America/Monterrey</td>
</tr>
<tr>
<td>America/Nassau</td>
</tr>
<tr>
<td>America/Jamaica</td>
</tr>
<tr>
<td>Asia/Bishkek</td>
</tr>
<tr>
<td>America/Atikokan</td>
</tr>
<tr>
<td>Atlantic/Stanley</td>
</tr>
<tr>
<td>Australia/NSW</td>
</tr>
<tr>
<td>US/Hawaii</td>
</tr>
<tr>
<td>SystemV/CST6</td>
</tr>
<tr>
<td>Indian/Mahe</td>
</tr>
<tr>
<td>Asia/Aqtobe</td>
</tr>
<tr>
<td>America/Sitka</td>
</tr>
<tr>
<td>Asia/Vladivostok</td>
</tr>
<tr>
<td>Africa/Libreville</td>
</tr>
<tr>
<td>Africa/Maputo</td>
</tr>
<tr>
<td>Zulu</td>
</tr>
<tr>
<td>America/Kentucky/Monticello</td>
</tr>
<tr>
<td>Africa/El_Aaiun</td>
</tr>
<tr>
<td>Africa/Ouagadougou</td>
</tr>
<tr>
<td>America/Coral_Harbour</td>
</tr>
<tr>
<td>Pacific/Marquesas</td>
</tr>
<tr>
<td>Brazil/West</td>
</tr>
<tr>
<td>America/Aruba</td>
</tr>
<tr>
<td>America/North_Dakota/Center</td>
</tr>
<tr>
<td>America/Cayman</td>
</tr>
<tr>
<td>Asia/Ulaanbaatar</td>
</tr>
<tr>
<td>Asia/Baghdad</td>
</tr>
<tr>
<td>Europe/San_Marino</td>
</tr>
<tr>
<td>America/Indiana/Tell_City</td>
</tr>
<tr>
<td>America/Tijuana</td>
</tr>
<tr>
<td>Pacific/Saipan</td>
</tr>
<tr>
<td>SystemV/YST9</td>
</tr>
<tr>
<td>Africa/Douala</td>
</tr>
<tr>
<td>America/Chihuahua</td>
</tr>
<tr>
<td>America/Ojinaga</td>
</tr>
<tr>
<td>Asia/Hovd</td>
</tr>
<tr>
<td>America/Anchorage</td>
</tr>
<tr>
<td>Chile/EasterIsland</td>
</tr>
<tr>
<td>America/Halifax</td>
</tr>
<tr>
<td>Antarctica/Rothera</td>
</tr>
<tr>
<td>America/Indiana/Indianapolis</td>
</tr>
<tr>
<td>US/Mountain</td>
</tr>
<tr>
<td>Asia/Damascus</td>
</tr>
<tr>
<td>America/Argentina/San_Luis</td>
</tr>
<tr>
<td>America/Santiago</td>
</tr>
<tr>
<td>Asia/Baku</td>
</tr>
<tr>
<td>America/Argentina/Ushuaia</td>
</tr>
<tr>
<td>Atlantic/Reykjavik</td>
</tr>
<tr>
<td>Africa/Brazzaville</td>
</tr>
<tr>
<td>Africa/Porto-Novo</td>
</tr>
<tr>
<td>America/La_Paz</td>
</tr>
<tr>
<td>Antarctica/DumontDUrville</td>
</tr>
<tr>
<td>Asia/Taipei</td>
</tr>
<tr>
<td>Antarctica/South_Pole</td>
</tr>
<tr>
<td>Asia/Manila</td>
</tr>
<tr>
<td>Asia/Bangkok</td>
</tr>
<tr>
<td>Africa/Dar_es_Salaam</td>
</tr>
<tr>
<td>Poland</td>
</tr>
<tr>
<td>Atlantic/Madeira</td>
</tr>
<tr>
<td>Antarctica/Palmer</td>
</tr>
<tr>
<td>America/Thunder_Bay</td>
</tr>
<tr>
<td>Africa/Addis_Ababa</td>
</tr>
<tr>
<td>Asia/Yangon</td>
</tr>
<tr>
<td>Europe/Uzhgorod</td>
</tr>
<tr>
<td>Brazil/DeNoronha</td>
</tr>
<tr>
<td>Asia/Ashkhabad</td>
</tr>
<tr>
<td>Etc/Zulu</td>
</tr>
<tr>
<td>America/Indiana/Marengo</td>
</tr>
<tr>
<td>America/Creston</td>
</tr>
<tr>
<td>America/Punta_Arenas</td>
</tr>
<tr>
<td>America/Mexico_City</td>
</tr>
<tr>
<td>Antarctica/Vostok</td>
</tr>
<tr>
<td>Asia/Jerusalem</td>
</tr>
<tr>
<td>Europe/Andorra</td>
</tr>
<tr>
<td>US/Samoa</td>
</tr>
<tr>
<td>PRC</td>
</tr>
<tr>
<td>Asia/Vientiane</td>
</tr>
<tr>
<td>Pacific/Kiritimati</td>
</tr>
<tr>
<td>America/Matamoros</td>
</tr>
<tr>
<td>America/Blanc-Sablon</td>
</tr>
<tr>
<td>Asia/Riyadh</td>
</tr>
<tr>
<td>Iceland</td>
</tr>
<tr>
<td>Pacific/Pohnpei</td>
</tr>
<tr>
<td>Asia/Ujung_Pandang</td>
</tr>
<tr>
<td>Atlantic/South_Georgia</td>
</tr>
<tr>
<td>Europe/Lisbon</td>
</tr>
<tr>
<td>Asia/Harbin</td>
</tr>
<tr>
<td>Europe/Oslo</td>
</tr>
<tr>
<td>Asia/Novokuznetsk</td>
</tr>
<tr>
<td>CST6CDT</td>
</tr>
<tr>
<td>Atlantic/Canary</td>
</tr>
<tr>
<td>America/Knox_IN</td>
</tr>
<tr>
<td>Asia/Kuwait</td>
</tr>
<tr>
<td>SystemV/HST10</td>
</tr>
<tr>
<td>Pacific/Efate</td>
</tr>
<tr>
<td>Africa/Lome</td>
</tr>
<tr>
<td>America/Bogota</td>
</tr>
<tr>
<td>America/Menominee</td>
</tr>
<tr>
<td>America/Adak</td>
</tr>
<tr>
<td>Pacific/Norfolk</td>
</tr>
<tr>
<td>Europe/Kirov</td>
</tr>
<tr>
<td>America/Resolute</td>
</tr>
<tr>
<td>Pacific/Tarawa</td>
</tr>
<tr>
<td>Africa/Kampala</td>
</tr>
<tr>
<td>Asia/Krasnoyarsk</td>
</tr>
<tr>
<td>Greenwich</td>
</tr>
<tr>
<td>SystemV/EST5</td>
</tr>
<tr>
<td>America/Edmonton</td>
</tr>
<tr>
<td>Europe/Podgorica</td>
</tr>
<tr>
<td>Australia/South</td>
</tr>
<tr>
<td>Canada/Central</td>
</tr>
<tr>
<td>Africa/Bujumbura</td>
</tr>
<tr>
<td>America/Santo_Domingo</td>
</tr>
<tr>
<td>US/Eastern</td>
</tr>
<tr>
<td>Europe/Minsk</td>
</tr>
<tr>
<td>Pacific/Auckland</td>
</tr>
<tr>
<td>Africa/Casablanca</td>
</tr>
<tr>
<td>America/Glace_Bay</td>
</tr>
<tr>
<td>Canada/Eastern</td>
</tr>
<tr>
<td>Asia/Qatar</td>
</tr>
<tr>
<td>Europe/Kiev</td>
</tr>
<tr>
<td>Singapore</td>
</tr>
<tr>
<td>Asia/Magadan</td>
</tr>
<tr>
<td>SystemV/PST8</td>
</tr>
<tr>
<td>America/Port-au-Prince</td>
</tr>
<tr>
<td>Europe/Belfast</td>
</tr>
<tr>
<td>America/St_Barthelemy</td>
</tr>
<tr>
<td>Asia/Ashgabat</td>
</tr>
<tr>
<td>Africa/Luanda</td>
</tr>
<tr>
<td>America/Nipigon</td>
</tr>
<tr>
<td>Atlantic/Jan_Mayen</td>
</tr>
<tr>
<td>Brazil/Acre</td>
</tr>
<tr>
<td>Asia/Muscat</td>
</tr>
<tr>
<td>Asia/Bahrain</td>
</tr>
<tr>
<td>Europe/Vilnius</td>
</tr>
<tr>
<td>America/Fortaleza</td>
</tr>
<tr>
<td>Etc/GMT0</td>
</tr>
<tr>
<td>US/East-Indiana</td>
</tr>
<tr>
<td>America/Hermosillo</td>
</tr>
<tr>
<td>America/Cancun</td>
</tr>
<tr>
<td>Africa/Maseru</td>
</tr>
<tr>
<td>Pacific/Kosrae</td>
</tr>
<tr>
<td>Africa/Kinshasa</td>
</tr>
<tr>
<td>Asia/Kathmandu</td>
</tr>
<tr>
<td>Asia/Seoul</td>
</tr>
<tr>
<td>Australia/Sydney</td>
</tr>
<tr>
<td>America/Lima</td>
</tr>
<tr>
<td>Australia/LHI</td>
</tr>
<tr>
<td>America/St_Lucia</td>
</tr>
<tr>
<td>Europe/Madrid</td>
</tr>
<tr>
<td>America/Bahia_Banderas</td>
</tr>
<tr>
<td>America/Montserrat</td>
</tr>
<tr>
<td>Asia/Brunei</td>
</tr>
<tr>
<td>America/Santa_Isabel</td>
</tr>
<tr>
<td>Canada/Mountain</td>
</tr>
<tr>
<td>America/Cambridge_Bay</td>
</tr>
<tr>
<td>Asia/Colombo</td>
</tr>
<tr>
<td>Australia/West</td>
</tr>
<tr>
<td>Indian/Antananarivo</td>
</tr>
<tr>
<td>Australia/Brisbane</td>
</tr>
<tr>
<td>Indian/Mayotte</td>
</tr>
<tr>
<td>US/Indiana-Starke</td>
</tr>
<tr>
<td>Asia/Urumqi</td>
</tr>
<tr>
<td>US/Aleutian</td>
</tr>
<tr>
<td>Europe/Volgograd</td>
</tr>
<tr>
<td>America/Lower_Princes</td>
</tr>
<tr>
<td>America/Vancouver</td>
</tr>
<tr>
<td>Africa/Blantyre</td>
</tr>
<tr>
<td>America/Rio_Branco</td>
</tr>
<tr>
<td>America/Danmarkshavn</td>
</tr>
<tr>
<td>America/Detroit</td>
</tr>
<tr>
<td>America/Thule</td>
</tr>
<tr>
<td>Africa/Lusaka</td>
</tr>
<tr>
<td>Asia/Hong_Kong</td>
</tr>
<tr>
<td>Iran</td>
</tr>
<tr>
<td>America/Argentina/La_Rioja</td>
</tr>
<tr>
<td>Africa/Dakar</td>
</tr>
<tr>
<td>SystemV/CST6CDT</td>
</tr>
<tr>
<td>America/Tortola</td>
</tr>
<tr>
<td>America/Porto_Velho</td>
</tr>
<tr>
<td>Asia/Sakhalin</td>
</tr>
<tr>
<td>Etc/GMT+10</td>
</tr>
<tr>
<td>America/Scoresbysund</td>
</tr>
<tr>
<td>Asia/Kamchatka</td>
</tr>
<tr>
<td>Asia/Thimbu</td>
</tr>
<tr>
<td>Africa/Harare</td>
</tr>
<tr>
<td>Etc/GMT+12</td>
</tr>
<tr>
<td>Etc/GMT+11</td>
</tr>
<tr>
<td>Navajo</td>
</tr>
<tr>
<td>America/Nome</td>
</tr>
<tr>
<td>Europe/Tallinn</td>
</tr>
<tr>
<td>Turkey</td>
</tr>
<tr>
<td>Africa/Khartoum</td>
</tr>
<tr>
<td>Africa/Johannesburg</td>
</tr>
<tr>
<td>Africa/Bangui</td>
</tr>
<tr>
<td>Europe/Belgrade</td>
</tr>
<tr>
<td>Jamaica</td>
</tr>
<tr>
<td>Africa/Bissau</td>
</tr>
<tr>
<td>Asia/Tehran</td>
</tr>
<tr>
<td>WET</td>
</tr>
<tr>
<td>Europe/Astrakhan</td>
</tr>
<tr>
<td>Africa/Juba</td>
</tr>
<tr>
<td>America/Campo_Grande</td>
</tr>
<tr>
<td>America/Belem</td>
</tr>
<tr>
<td>Etc/Greenwich</td>
</tr>
<tr>
<td>Asia/Saigon</td>
</tr>
<tr>
<td>America/Ensenada</td>
</tr>
<tr>
<td>Pacific/Midway</td>
</tr>
<tr>
<td>America/Jujuy</td>
</tr>
<tr>
<td>Africa/Timbuktu</td>
</tr>
<tr>
<td>America/Bahia</td>
</tr>
<tr>
<td>America/Goose_Bay</td>
</tr>
<tr>
<td>America/Virgin</td>
</tr>
<tr>
<td>America/Pangnirtung</td>
</tr>
<tr>
<td>Asia/Katmandu</td>
</tr>
<tr>
<td>America/Phoenix</td>
</tr>
<tr>
<td>Africa/Niamey</td>
</tr>
<tr>
<td>America/Whitehorse</td>
</tr>
<tr>
<td>Pacific/Noumea</td>
</tr>
<tr>
<td>Asia/Tbilisi</td>
</tr>
<tr>
<td>America/Montreal</td>
</tr>
<tr>
<td>Asia/Makassar</td>
</tr>
<tr>
<td>America/Argentina/San_Juan</td>
</tr>
<tr>
<td>Hongkong</td>
</tr>
<tr>
<td>UCT</td>
</tr>
<tr>
<td>Asia/Nicosia</td>
</tr>
<tr>
<td>America/Indiana/Winamac</td>
</tr>
<tr>
<td>SystemV/MST7MDT</td>
</tr>
<tr>
<td>America/Argentina/ComodRivadavia</td>
</tr>
<tr>
<td>America/Boa_Vista</td>
</tr>
<tr>
<td>America/Grenada</td>
</tr>
<tr>
<td>Asia/Atyrau</td>
</tr>
<tr>
<td>Australia/Darwin</td>
</tr>
<tr>
<td>Asia/Khandyga</td>
</tr>
<tr>
<td>Asia/Kuala_Lumpur</td>
</tr>
<tr>
<td>Asia/Famagusta</td>
</tr>
<tr>
<td>Asia/Thimphu</td>
</tr>
<tr>
<td>Asia/Rangoon</td>
</tr>
<tr>
<td>Europe/Bratislava</td>
</tr>
<tr>
<td>Asia/Calcutta</td>
</tr>
<tr>
<td>America/Argentina/Tucuman</td>
</tr>
<tr>
<td>Asia/Kabul</td>
</tr>
<tr>
<td>Indian/Cocos</td>
</tr>
<tr>
<td>Japan</td>
</tr>
<tr>
<td>Pacific/Tongatapu</td>
</tr>
<tr>
<td>America/New_York</td>
</tr>
<tr>
<td>Etc/GMT-12</td>
</tr>
<tr>
<td>Etc/GMT-11</td>
</tr>
<tr>
<td>America/Nuuk</td>
</tr>
<tr>
<td>Etc/GMT-10</td>
</tr>
<tr>
<td>SystemV/YST9YDT</td>
</tr>
<tr>
<td>Europe/Ulyanovsk</td>
</tr>
<tr>
<td>Etc/GMT-14</td>
</tr>
<tr>
<td>Etc/GMT-13</td>
</tr>
<tr>
<td>W-SU</td>
</tr>
<tr>
<td>America/Merida</td>
</tr>
<tr>
<td>EET</td>
</tr>
<tr>
<td>America/Rosario</td>
</tr>
<tr>
<td>Canada/Saskatchewan</td>
</tr>
<tr>
<td>America/St_Kitts</td>
</tr>
<tr>
<td>Arctic/Longyearbyen</td>
</tr>
<tr>
<td>America/Fort_Nelson</td>
</tr>
<tr>
<td>America/Caracas</td>
</tr>
<tr>
<td>America/Guadeloupe</td>
</tr>
<tr>
<td>Asia/Hebron</td>
</tr>
<tr>
<td>Indian/Kerguelen</td>
</tr>
<tr>
<td>SystemV/PST8PDT</td>
</tr>
<tr>
<td>Africa/Monrovia</td>
</tr>
<tr>
<td>Asia/Ust-Nera</td>
</tr>
<tr>
<td>Egypt</td>
</tr>
<tr>
<td>Asia/Srednekolymsk</td>
</tr>
<tr>
<td>America/North_Dakota/New_Salem</td>
</tr>
<tr>
<td>Asia/Anadyr</td>
</tr>
<tr>
<td>Australia/Melbourne</td>
</tr>
<tr>
<td>Asia/Irkutsk</td>
</tr>
<tr>
<td>America/Shiprock</td>
</tr>
<tr>
<td>America/Winnipeg</td>
</tr>
<tr>
<td>Europe/Vatican</td>
</tr>
<tr>
<td>Asia/Amman</td>
</tr>
<tr>
<td>Etc/UTC</td>
</tr>
<tr>
<td>SystemV/AST4ADT</td>
</tr>
<tr>
<td>Asia/Tokyo</td>
</tr>
<tr>
<td>America/Toronto</td>
</tr>
<tr>
<td>Asia/Singapore</td>
</tr>
<tr>
<td>Australia/Lindeman</td>
</tr>
<tr>
<td>America/Los_Angeles</td>
</tr>
<tr>
<td>SystemV/EST5EDT</td>
</tr>
<tr>
<td>Pacific/Majuro</td>
</tr>
<tr>
<td>America/Argentina/Buenos_Aires</td>
</tr>
<tr>
<td>Europe/Nicosia</td>
</tr>
<tr>
<td>Pacific/Guadalcanal</td>
</tr>
<tr>
<td>Europe/Athens</td>
</tr>
<tr>
<td>US/Pacific</td>
</tr>
<tr>
<td>Europe/Monaco</td>
</tr>
</tbody>
</table>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/QwkVexFfD/">https://zhiyuandnc.github.io/QwkVexFfD/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（7）列表]]></title>
        <id>https://zhiyuandnc.github.io/eycw6BwYh/</id>
        <link href="https://zhiyuandnc.github.io/eycw6BwYh/">
        </link>
        <updated>2021-01-10T01:13:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-普通列表">二、普通列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;list&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;list&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;list&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;list&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="三-图标列表">三、图标列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;users icon&quot;&gt;&lt;/i&gt;
            SemanticUI
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;marker icon&quot;&gt;&lt;/i&gt;
            China
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;mail icon&quot;&gt;&lt;/i&gt;
            zhiyuandnc666@gmail.com
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;linkify icon&quot;&gt;&lt;/i&gt;
            www.semeantic.com
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="四-好友列表样式">四、好友列表样式</h2>
<pre><code class="language-html">&lt;div class=&quot;ui relaxed divided list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;big github middle aligned icon&quot;&gt;&lt;/i&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;a href=&quot;#&quot; class=&quot;header&quot;&gt;Semantic-UI&lt;/a&gt;
            &lt;div class=&quot;description&quot;&gt;Update 10 mins ago&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;big github middle aligned icon&quot;&gt;&lt;/i&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;a href=&quot;#&quot; class=&quot;header&quot;&gt;Bootstrap&lt;/a&gt;
            &lt;div class=&quot;description&quot;&gt;Update 22 days ago&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;big github middle aligned icon&quot;&gt;&lt;/i&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;a href=&quot;#&quot; class=&quot;header&quot;&gt;Element-UI&lt;/a&gt;
            &lt;div class=&quot;description&quot;&gt;Update 22 hours ago&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;big github middle aligned icon&quot;&gt;&lt;/i&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;a href=&quot;#&quot; class=&quot;header&quot;&gt;Vue&lt;/a&gt;
            &lt;div class=&quot;description&quot;&gt;Update 22 days ago&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;i class=&quot;big github middle aligned icon&quot;&gt;&lt;/i&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;a href=&quot;#&quot; class=&quot;header&quot;&gt;NodeJS&lt;/a&gt;
            &lt;div class=&quot;description&quot;&gt;Update 22 days ago&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="五-水平列表">五、水平列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui horizontal list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;ZhiYuanCaiJi&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;ZhiYuanCaiJi&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;ZhiYuanCaiJi&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;ZhiYuanCaiJi&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;ZhiYuanCaiJi&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-垂直列表">六、垂直列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui vertical list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;ui content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;ui content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;ui content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;ui content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;ui content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-动画效果列表">七、动画效果列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui middle aligned animated list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="八-垂直松散列表">八、垂直松散列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui relaxed divided list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="九-水平松散列表">九、水平松散列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui horizontal relaxed list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十-垂直单元格形式列表">十、垂直单元格形式列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui celled vertical list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十一-水平单元格形式列表">十一、水平单元格形式列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui horizontal celled list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十二-不同尺寸的列表">十二、不同尺寸的列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui horizontal mini list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui divider&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;ui horizontal tiny list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui divider&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;ui horizontal medium list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui divider&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;ui horizontal large list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui divider&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;ui horizontal big list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui divider&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;ui horizontal huge list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui divider&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;ui horizontal massive list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;./img/daniel.jpg&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;zhiyuan&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十三-好友列表">十三、好友列表</h2>
<pre><code class="language-html">&lt;div class=&quot;ui vertical relaxed middle aligned divided list&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;无他，唯手熟尔&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;right floated content&quot;&gt;
            &lt;div class=&quot;ui orange basic button&quot;&gt;
                &lt;i class=&quot;user plus icon&quot;&gt;&lt;/i&gt;添加好友
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;无他，唯手熟尔&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;right floated content&quot;&gt;
            &lt;div class=&quot;ui orange basic button&quot;&gt;
                &lt;i class=&quot;user plus icon&quot;&gt;&lt;/i&gt;添加好友
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;无他，唯手熟尔&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;right floated content&quot;&gt;
            &lt;div class=&quot;ui orange basic button&quot;&gt;
                &lt;i class=&quot;user plus icon&quot;&gt;&lt;/i&gt;添加好友
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;无他，唯手熟尔&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;right floated content&quot;&gt;
            &lt;div class=&quot;ui orange basic button&quot;&gt;
                &lt;i class=&quot;user plus icon&quot;&gt;&lt;/i&gt;添加好友
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;img src=&quot;https://v1.alapi.cn/api/avatar?email=zhiyuandnc666@gmail.com&amp;size=100&quot; alt=&quot;&quot; class=&quot;ui avatar image&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;div class=&quot;header&quot;&gt;絷缘&lt;/div&gt;
            &lt;div class=&quot;description&quot;&gt;无他，唯手熟尔&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;right floated content&quot;&gt;
            &lt;div class=&quot;ui orange basic button&quot;&gt;
                &lt;i class=&quot;user plus icon&quot;&gt;&lt;/i&gt;添加好友
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十四-实际效果">十四、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610243360335.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/eycw6BwYh/">https://zhiyuandnc.github.io/eycw6BwYh/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（6）标签]]></title>
        <id>https://zhiyuandnc.github.io/PBrRBU_6S/</id>
        <link href="https://zhiyuandnc.github.io/PBrRBU_6S/">
        </link>
        <updated>2021-01-10T00:55:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-普通标签">二、普通标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui label&quot;&gt;
    &lt;i class=&quot;mail red icon&quot;&gt;&lt;/i&gt;999+
&lt;/div&gt;
</code></pre>
<h2 id="三-带头像的标签">三、带头像的标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui image label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui image blue label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui image green label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui image violet label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui image yellow label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui image orange label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui image red label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan
&lt;/div&gt;
</code></pre>
<h2 id="四-带图标的标签">四、带图标的标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui image label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;zhiyuan&lt;i class=&quot;red delete icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
</code></pre>
<h2 id="五-气泡框标签">五、气泡框标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui bottom pointing red label&quot;&gt;帐户或不能为空&lt;/div&gt;
&lt;div class=&quot;ui top pointing red label&quot;&gt;帐户或不能为空&lt;/div&gt;
&lt;div class=&quot;ui left pointing red label&quot;&gt;帐户或不能为空&lt;/div&gt;
&lt;div class=&quot;ui right pointing red label&quot;&gt;帐户或不能为空&lt;/div&gt;

&lt;div class=&quot;ui bottom pointing red basic label&quot;&gt;帐户或不能为空&lt;/div&gt;
&lt;div class=&quot;ui top pointing red basic label&quot;&gt;帐户或不能为空&lt;/div&gt;
&lt;div class=&quot;ui left pointing red basic label&quot;&gt;帐户或不能为空&lt;/div&gt;
&lt;div class=&quot;ui right pointing red basic label&quot;&gt;帐户或不能为空&lt;/div&gt;
</code></pre>
<h2 id="六-角落标签">六、角落标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui small rounded image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
    &lt;a href=&quot;&quot; class=&quot;ui left corner red label&quot;&gt;
        &lt;i class=&quot;heart icon&quot;&gt;&lt;/i&gt;
    &lt;/a&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-书签样式的标签">七、书签样式的标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui tag label&quot;&gt;标签&lt;/div&gt;
&lt;div class=&quot;ui red tag label&quot;&gt;标签&lt;/div&gt;
&lt;div class=&quot;ui blue tag label&quot;&gt;标签&lt;/div&gt;
&lt;div class=&quot;ui green tag label&quot;&gt;标签&lt;/div&gt;
</code></pre>
<h2 id="八-绶带样式标签">八、绶带样式标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui medium bordered rounded image&quot;&gt;
    &lt;a href=&quot;&quot; class=&quot;ui red left ribbon label&quot;&gt;
        &lt;i class=&quot;copyright icon&quot;&gt;&lt;/i&gt;原创作品
    &lt;/a&gt;
    &lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;
    &lt;a href=&quot;&quot; class=&quot;ui green right ribbon label&quot;&gt;
        &lt;i class=&quot;share icon&quot;&gt;&lt;/i&gt;转载作品
    &lt;/a&gt;
&lt;/div&gt;
</code></pre>
<h2 id="九-附加标签样式">九、附加标签样式</h2>
<pre><code class="language-html">&lt;div class=&quot;ui raised segment&quot;&gt;
    &lt;p&gt;&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;div class=&quot;ui top attached label&quot;&gt;HTML&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
    &lt;p&gt;&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;div class=&quot;ui bottom attached label&quot;&gt;HTML&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
    &lt;p&gt;&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;div class=&quot;ui top left attached label&quot;&gt;HTML&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
    &lt;p&gt;&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;div class=&quot;ui top right attached label&quot;&gt;HTML&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
    &lt;p&gt;&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;div class=&quot;ui bottom left attached label&quot;&gt;HTML&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui raised segment&quot;&gt;
    &lt;p&gt;&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;div class=&quot;ui bottom right attached label&quot;&gt;HTML&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十-浮动角标标签">十、浮动角标标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui compact menu&quot;&gt;
    &lt;a href=&quot;&quot; class=&quot;item&quot;&gt;
        &lt;i class=&quot;mail icon&quot;&gt;&lt;/i&gt;邮件
        &lt;div class=&quot;ui floating red label&quot;&gt;99&lt;/div&gt;
    &lt;/a&gt;
    &lt;a href=&quot;&quot; class=&quot;item&quot;&gt;
        &lt;i class=&quot;users icon&quot;&gt;&lt;/i&gt;好友
        &lt;div class=&quot;ui floating red label&quot;&gt;99&lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十一-带图片的标签">十一、带图片的标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;
        zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui red label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;
        zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui olive label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;
        zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui yellow label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;
        zhiyuan
&lt;/div&gt;
&lt;div class=&quot;ui green basic label&quot;&gt;
    &lt;img src=&quot;./img/tx.jpg&quot; alt=&quot;&quot;&gt;
        zhiyuan
&lt;/div&gt;
</code></pre>
<h2 id="十二-圆形化标签">十二、圆形化标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui circular red label&quot;&gt;1&lt;/div&gt;
&lt;div class=&quot;ui circular orange label&quot;&gt;2&lt;/div&gt;
&lt;div class=&quot;ui circular blue label&quot;&gt;3&lt;/div&gt;
&lt;div class=&quot;ui circular violet label&quot;&gt;4&lt;/div&gt;
&lt;div class=&quot;ui circular green label&quot;&gt;5&lt;/div&gt;
&lt;div class=&quot;ui circular olive label&quot;&gt;6&lt;/div&gt;
&lt;div class=&quot;ui circular teal label&quot;&gt;7&lt;/div&gt;
&lt;div class=&quot;ui circular pink label&quot;&gt;8&lt;/div&gt;
&lt;div class=&quot;ui circular black label&quot;&gt;9&lt;/div&gt;
&lt;div class=&quot;ui circular purple label&quot;&gt;10&lt;/div&gt;
</code></pre>
<h2 id="十三-圆点标签">十三、圆点标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui red empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui orange empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui blue empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui violet empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui green empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui olive empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui teal empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui pink empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui black empty circular label&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui purple empty circular label&quot;&gt;&lt;/div&gt;
</code></pre>
<h2 id="十四-不同尺寸标签">十四、不同尺寸标签</h2>
<pre><code class="language-html">&lt;div class=&quot;ui mini label&quot;&gt;Mini&lt;/div&gt;
&lt;div class=&quot;ui tiny label&quot;&gt;Tiny&lt;/div&gt;
&lt;div class=&quot;ui small label&quot;&gt;Small&lt;/div&gt;
&lt;div class=&quot;ui medium label&quot;&gt;Medium&lt;/div&gt;
&lt;div class=&quot;ui large label&quot;&gt;Large&lt;/div&gt;
&lt;div class=&quot;ui big label&quot;&gt;Big&lt;/div&gt;
&lt;div class=&quot;ui huge label&quot;&gt;Huge&lt;/div&gt;
&lt;div class=&quot;ui massive label&quot;&gt;Massive&lt;/div&gt;
</code></pre>
<h2 id="十五-统一尺寸标签组">十五、统一尺寸标签组</h2>
<pre><code class="language-html">&lt;div class=&quot;ui big labels&quot;&gt;
    &lt;div class=&quot;ui label&quot;&gt;Label&lt;/div&gt;
    &lt;div class=&quot;ui label&quot;&gt;Label&lt;/div&gt;
    &lt;div class=&quot;ui label&quot;&gt;Label&lt;/div&gt;
    &lt;div class=&quot;ui label&quot;&gt;Label&lt;/div&gt;
    &lt;div class=&quot;ui label&quot;&gt;Label&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十六-实际效果">十六、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610241107962.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/PBrRBU_6S/">https://zhiyuandnc.github.io/PBrRBU_6S/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（5）输入框]]></title>
        <id>https://zhiyuandnc.github.io/T1juUwu3S/</id>
        <link href="https://zhiyuandnc.github.io/T1juUwu3S/">
        </link>
        <updated>2021-01-09T15:11:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-标准输入框">二、标准输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;标准输入框&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="三-聚焦输入框">三、聚焦输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui focus input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;聚焦输入框&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="四-加载图标输入框">四、加载图标输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui left icon loading input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;加载图标输入框&quot;&gt;
    &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui right icon loading input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;加载图标输入框&quot;&gt;
    &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
</code></pre>
<h2 id="五-不同状态输入框">五、不同状态输入框</h2>
<pre><code class="language-html">&lt;!--禁止输入框--&gt;
&lt;div class=&quot;ui disabled input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;禁止输入框&quot;&gt;
&lt;/div&gt;
&lt;!--错误输入框--&gt;
&lt;div class=&quot;ui error input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;错误输入框&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-带标签输入框">六、带标签输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui labeled input&quot;&gt;
    &lt;div class=&quot;ui orange label&quot;&gt;https://&lt;/div&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;带标签输入框&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-带图标输入框">七、带图标输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui right icon input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;带图标输入框&quot;&gt;
    &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui left icon input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;带图标输入框&quot;&gt;
    &lt;i class=&quot;user add icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui right icon input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;带图标输入框&quot;&gt;
    &lt;i class=&quot;circular search link icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui right icon input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;带图标输入框&quot;&gt;
    &lt;i class=&quot;circular search inverted link icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
</code></pre>
<h2 id="八-带下拉列表输入框">八、带下拉列表输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui right labeled input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;带下拉列表输入框&quot;&gt;
    &lt;div class=&quot;ui dropdown label&quot;&gt;
        &lt;div class=&quot;text&quot;&gt;.com&lt;/div&gt;
        &lt;i class=&quot;dropdown icon&quot;&gt;&lt;/i&gt;
        &lt;div class=&quot;menu&quot;&gt;
            &lt;div class=&quot;item&quot;&gt;.com&lt;/div&gt;
            &lt;div class=&quot;item&quot;&gt;.cn&lt;/div&gt;
            &lt;div class=&quot;item&quot;&gt;.org&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="九-图标标签输入框">九、图标+标签输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui right labeled left icon input&quot;&gt;
    &lt;i class=&quot;tags icon&quot;&gt;&lt;/i&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;图标标签组合&quot;&gt;
    &lt;div class=&quot;ui tag green label&quot;&gt;添加标签&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十-角落图标输入框">十、角落图标输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui left corner labeled input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;搜索...&quot;&gt;
    &lt;div class=&quot;ui left corner red label&quot;&gt;
        &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui right corner labeled input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;搜索...&quot;&gt;
        &lt;div class=&quot;ui right corner red label&quot;&gt;
            &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
        &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十一-带按钮的输入框">十一、带按钮的输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui action input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;搜索...&quot;&gt;
    &lt;button class=&quot;ui icon button&quot;&gt;
        &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
    &lt;/button&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十二-透明输入框">十二、透明输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui transparent input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;搜索...&quot;&gt;
&lt;/div&gt;

&lt;div class=&quot;ui transparent right icon input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;搜索...&quot;&gt; 
    &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;

&lt;div class=&quot;ui transparent left icon input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;搜索&quot;&gt;
    &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十三-适应容器输入框">十三、适应容器输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui fluid right icon input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;搜索&quot;&gt;
    &lt;i class=&quot;search icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十四-不同尺寸输入框">十四、不同尺寸输入框</h2>
<pre><code class="language-html">&lt;div class=&quot;ui mini input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;mini输入框&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui tiny input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;tiny输入框&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui small input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;small输入框&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui medium input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;medium输入框&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui large input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;large输入框&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui big input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;big输入框&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui huge input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;huge输入框&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;ui massive input&quot;&gt;
    &lt;input type=&quot;text&quot; placeholder=&quot;massive输入框&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十五-实际效果">十五、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610206026222.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/T1juUwu3S/">https://zhiyuandnc.github.io/T1juUwu3S/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（4）图片]]></title>
        <id>https://zhiyuandnc.github.io/6S9G53Ktp/</id>
        <link href="https://zhiyuandnc.github.io/6S9G53Ktp/">
        </link>
        <updated>2021-01-09T14:49:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-引入资源文件">一、引入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-不同尺寸的图片">二、不同尺寸的图片</h2>
<pre><code class="language-html">&lt;!-- 迷你图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-mini-image&lt;/div&gt;
&lt;div class=&quot;ui mini image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;!-- 较小图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-tiny-image&lt;/div&gt;
&lt;div class=&quot;ui tiny image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;!-- 小图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-small-image&lt;/div&gt;
&lt;div class=&quot;ui small image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot; title=&quot;小图片&quot;&gt;
&lt;/div&gt;
&lt;!-- 中等图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-medium-image&lt;/div&gt;
&lt;div class=&quot;ui medium image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot; title=&quot;中等图片&quot;&gt;
&lt;/div&gt;
&lt;!-- 大图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-large-image&lt;/div&gt;
&lt;div class=&quot;ui large image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;!-- 较大图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-big-image&lt;/div&gt;
&lt;div class=&quot;ui big image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;!-- 巨大图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-huge-image&lt;/div&gt;
&lt;div class=&quot;ui huge image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;!-- 最大图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-massive-image&lt;/div&gt;
&lt;div class=&quot;ui massive image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;            
</code></pre>
<h2 id="三-不同状态的图片">三、不同状态的图片</h2>
<pre><code class="language-html">&lt;!-- 隐藏的图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-hidden-image&lt;/div&gt;
&lt;div class=&quot;ui hidden image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
&lt;!-- 禁止的图片 --&gt;
&lt;div class=&quot;ui block header&quot;&gt;ui-disabled-image&lt;/div&gt;
&lt;div class=&quot;ui disabled small image&quot;&gt;
    &lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="四-有边框的图片">四、有边框的图片</h2>
<pre><code class="language-html">&lt;img src=&quot;./img/white-image.png&quot; alt=&quot;&quot; class=&quot;ui bordered small image&quot;&gt;
</code></pre>
<h2 id="五-适应容器的图片">五、适应容器的图片</h2>
<pre><code class="language-html">&lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot; class=&quot;ui fluid image&quot;&gt;
</code></pre>
<h2 id="六-圆角的图片">六、圆角的图片</h2>
<pre><code class="language-html">&lt;img src=&quot;./img/image.png&quot; alt=&quot;&quot; class=&quot;ui rounded medium image&quot;&gt;
</code></pre>
<h2 id="七-圆形的图片">七、圆形的图片</h2>
<pre><code class="language-html">&lt;img src=&quot;./img/square-image.png&quot; alt=&quot;&quot; class=&quot;ui circular small image&quot;&gt;
</code></pre>
<h2 id="八-位置居中的图片">八、位置居中的图片</h2>
<pre><code class="language-html">&lt;img src=&quot;img/paragraph.png&quot; class=&quot;ui centered aligned image&quot;&gt;
</code></pre>
<h2 id="九-同一尺寸图片组">九、同一尺寸图片组</h2>
<pre><code class="language-html">&lt;div class=&quot;ui small images&quot;&gt;
    &lt;img src=&quot;img/image.png&quot; class=&quot;ui image&quot;&gt;
    &lt;img src=&quot;img/image.png&quot; class=&quot;ui image&quot;&gt;
    &lt;img src=&quot;img/image.png&quot; class=&quot;ui image&quot;&gt;
    &lt;img src=&quot;img/image.png&quot; class=&quot;ui image&quot;&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十-实际效果">十、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610204333335.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/6S9G53Ktp/">https://zhiyuandnc.github.io/6S9G53Ktp/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（3）标题]]></title>
        <id>https://zhiyuandnc.github.io/wVXYh7sFa/</id>
        <link href="https://zhiyuandnc.github.io/wVXYh7sFa/">
        </link>
        <updated>2021-01-09T14:30:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-导入资源文件">一、导入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src = &quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-六级标题">二、六级标题</h2>
<pre><code class="language-html">&lt;h1 class=&quot;ui header&quot;&gt;一级标题&lt;/h1&gt;
&lt;h2 class=&quot;ui header&quot;&gt;二级标题&lt;/h2&gt;
&lt;h3 class=&quot;ui header&quot;&gt;三级标题&lt;/h3&gt;
&lt;h4 class=&quot;ui header&quot;&gt;四级标题&lt;/h4&gt;
&lt;h5 class=&quot;ui header&quot;&gt;五级标题&lt;/h5&gt;
&lt;h6 class=&quot;ui header&quot;&gt;六级标题&lt;/h6&gt;
</code></pre>
<h2 id="三-不同尺寸标题">三、不同尺寸标题</h2>
<pre><code class="language-html">&lt;div class=&quot;ui huge header&quot;&gt;巨型标题&lt;/div&gt;
&lt;div class=&quot;ui large header&quot;&gt;大型标题&lt;/div&gt;
&lt;div class=&quot;ui medium header&quot;&gt;中型标题&lt;/div&gt;
&lt;div class=&quot;ui small header&quot;&gt;小型标题&lt;/div&gt;
&lt;div class=&quot;ui tiny header&quot;&gt;超小标题&lt;/div&gt;
</code></pre>
<h2 id="四-语义化标题">四、语义化标题</h2>
<pre><code class="language-html">&lt;div class=&quot;ui header&quot;&gt;标题&lt;/div&gt;
&lt;div class=&quot;sub header&quot;&gt;副标题内容&lt;/div&gt;
</code></pre>
<h2 id="五-带图标标题">五、带图标标题</h2>
<pre><code class="language-html">&lt;div class=&quot;ui header&quot;&gt;
    &lt;img src=&quot;./img/school.png&quot; alt=&quot;&quot; class=&quot;ui image&quot;&gt;
    &lt;div class=&quot;content&quot;&gt;了解更多&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-块标题">六、块标题</h2>
<pre><code class="language-html">&lt;div class=&quot;ui block header&quot;&gt;BlockHeader&lt;/div&gt;
</code></pre>
<h2 id="七-顶部垂直附加标题">七、顶部垂直附加标题</h2>
<pre><code class="language-html">&lt;div class=&quot;ui top attached header&quot;&gt;顶部&lt;/div&gt;
</code></pre>
<h2 id="八-底部垂直附加标题">八、底部垂直附加标题</h2>
<pre><code class="language-html">&lt;div class=&quot;ui bottom attached header&quot;&gt;底部&lt;/div&gt;
</code></pre>
<h2 id="九-实际效果">九、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610203481276.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/wVXYh7sFa/">https://zhiyuandnc.github.io/wVXYh7sFa/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（2）分割线]]></title>
        <id>https://zhiyuandnc.github.io/P7fMkbvf8/</id>
        <link href="https://zhiyuandnc.github.io/P7fMkbvf8/">
        </link>
        <updated>2021-01-09T14:27:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-导入资源文件">一、导入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src = &quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-普通分割线">二、普通分割线</h2>
<pre><code class="language-html">&lt;div class=&quot;ui divider&quot;&gt;普通分割线&lt;/div&gt;
</code></pre>
<h2 id="三-纵向分割线">三、纵向分割线</h2>
<pre><code class="language-html">&lt;div class=&quot;ui vertical divider&quot;&gt;纵向分割线&lt;/div&gt;
</code></pre>
<h2 id="四-横向分割线">四、横向分割线</h2>
<pre><code class="language-html">&lt;div class=&quot;ui horizontal divider&quot;&gt;横向分割线&lt;/div&gt;
</code></pre>
<h2 id="五-实际效果">五、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610203238461.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/P7fMkbvf8/">https://zhiyuandnc.github.io/P7fMkbvf8/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SemanticUI学习（1）按钮]]></title>
        <id>https://zhiyuandnc.github.io/zylvLeQTD/</id>
        <link href="https://zhiyuandnc.github.io/zylvLeQTD/">
        </link>
        <updated>2021-01-09T13:27:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-导入资源文件">一、导入资源文件</h2>
<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css&quot;/&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src = &quot;https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="二-不同尺寸按钮">二、不同尺寸按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui button&quot;&gt;默认大小&lt;/div&gt;
&lt;div class=&quot;ui mini button&quot;&gt;迷你按钮&lt;/div&gt;
&lt;div class=&quot;ui tiny button&quot;&gt;较小按钮&lt;/div&gt;
&lt;div class=&quot;ui small button&quot;&gt;小按钮&lt;/div&gt;
&lt;div class=&quot;ui large button&quot;&gt;大按钮&lt;/div&gt;
&lt;div class=&quot;ui big button&quot;&gt;较大按钮&lt;/div&gt;
&lt;div class=&quot;ui huge button&quot;&gt;巨大按钮&lt;/div&gt;
&lt;div class=&quot;ui massive button&quot;&gt;最大按钮&lt;/div&gt;		
</code></pre>
<h2 id="三-不同颜色的按钮按级别分">三、不同颜色的按钮，按级别分</h2>
<pre><code class="language-html">&lt;div class=&quot;ui primary button&quot;&gt;primary&lt;/div&gt;
&lt;div class=&quot;ui secondary button&quot;&gt;secondary&lt;/div&gt;
&lt;div class=&quot;ui positive button&quot;&gt;positive&lt;/div&gt;
&lt;div class=&quot;ui negative button&quot;&gt;negative&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;ui primary basic button&quot;&gt;primary&lt;/div&gt;
&lt;div class=&quot;ui secondary basic button&quot;&gt;secondary&lt;/div&gt;
&lt;div class=&quot;ui positive basic button&quot;&gt;positive&lt;/div&gt;
&lt;div class=&quot;ui negative basic button&quot;&gt;negative&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;ui primary inverted button&quot;&gt;primary&lt;/div&gt;
&lt;div class=&quot;ui secondary inverted button&quot;&gt;secondary&lt;/div&gt;
&lt;div class=&quot;ui positive inverted button&quot;&gt;positive&lt;/div&gt;
&lt;div class=&quot;ui negative inverted button&quot;&gt;negative&lt;/div&gt;
</code></pre>
<h2 id="四-不同颜色的按钮">四、不同颜色的按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui teal button&quot;&gt;teal&lt;/div&gt;
&lt;div class=&quot;ui red button&quot;&gt;red&lt;/div&gt;
&lt;div class=&quot;ui orange button&quot;&gt;orange&lt;/div&gt;
&lt;div class=&quot;ui yellow button&quot;&gt;yellow&lt;/div&gt;
&lt;div class=&quot;ui olive button&quot;&gt;olive&lt;/div&gt;
&lt;div class=&quot;ui green button&quot;&gt;green&lt;/div&gt;
&lt;div class=&quot;ui blue button&quot;&gt;blue&lt;/div&gt;
&lt;div class=&quot;ui violet button&quot;&gt;violet&lt;/div&gt;
&lt;div class=&quot;ui purple button&quot;&gt;purple&lt;/div&gt;
&lt;div class=&quot;ui pink button&quot;&gt;pink&lt;/div&gt;
&lt;div class=&quot;ui brown button&quot;&gt;brown&lt;/div&gt;
&lt;div class=&quot;ui grey button&quot;&gt;grey&lt;/div&gt;
&lt;div class=&quot;ui black button&quot;&gt;black&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;ui teal basic button&quot;&gt;teal&lt;/div&gt;
&lt;div class=&quot;ui red basic button&quot;&gt;red&lt;/div&gt;
&lt;div class=&quot;ui orange basic button&quot;&gt;orange&lt;/div&gt;
&lt;div class=&quot;ui yellow basic button&quot;&gt;yellow&lt;/div&gt;
&lt;div class=&quot;ui olive basic button&quot;&gt;olive&lt;/div&gt;
&lt;div class=&quot;ui green basic button&quot;&gt;green&lt;/div&gt;
&lt;div class=&quot;ui blue basic button&quot;&gt;blue&lt;/div&gt;
&lt;div class=&quot;ui violet basic button&quot;&gt;violet&lt;/div&gt;
&lt;div class=&quot;ui purple basic button&quot;&gt;purple&lt;/div&gt;
&lt;div class=&quot;ui pink basic button&quot;&gt;pink&lt;/div&gt;
&lt;div class=&quot;ui brown basic button&quot;&gt;brown&lt;/div&gt;
&lt;div class=&quot;ui grey basic button&quot;&gt;grey&lt;/div&gt;
&lt;div class=&quot;ui black basic button&quot;&gt;black&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;ui teal inverted button&quot;&gt;teal&lt;/div&gt;
&lt;div class=&quot;ui red inverted button&quot;&gt;red&lt;/div&gt;
&lt;div class=&quot;ui orange inverted button&quot;&gt;orange&lt;/div&gt;
&lt;div class=&quot;ui yellow inverted button&quot;&gt;yellow&lt;/div&gt;
&lt;div class=&quot;ui olive inverted button&quot;&gt;olive&lt;/div&gt;
&lt;div class=&quot;ui green inverted button&quot;&gt;green&lt;/div&gt;
&lt;div class=&quot;ui blue inverted button&quot;&gt;blue&lt;/div&gt;
&lt;div class=&quot;ui violet inverted button&quot;&gt;violet&lt;/div&gt;
&lt;div class=&quot;ui purple inverted button&quot;&gt;purple&lt;/div&gt;
&lt;div class=&quot;ui pink inverted button&quot;&gt;pink&lt;/div&gt;
&lt;div class=&quot;ui brown inverted button&quot;&gt;brown&lt;/div&gt;
&lt;div class=&quot;ui grey inverted button&quot;&gt;grey&lt;/div&gt;
&lt;div class=&quot;ui black inverted button&quot;&gt;black&lt;/div&gt;
</code></pre>
<h2 id="五-有动画效果的按钮">五、有动画效果的按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui animated red button&quot;&gt;
    &lt;div class=&quot;visible content&quot;&gt;购物&lt;/div&gt;
    &lt;div class=&quot;hidden content&quot;&gt;
        &lt;i class=&quot;shop icon&quot;&gt;&lt;/i&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- 修改为垂直动画效果 --&gt;
&lt;div class=&quot;ui vertical animated green button&quot;&gt;
    &lt;div class=&quot;visible content&quot;&gt;回到顶部&lt;/div&gt;
    &lt;div class=&quot;hidden content&quot;&gt;
        &lt;i class=&quot;arrow up icon&quot;&gt;&lt;/i&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- 修改为渐隐动画效果 --&gt;
&lt;div class=&quot;ui fade animated orange button&quot;&gt;
    &lt;div class=&quot;visible content&quot;&gt;只要 ￥9.9&lt;/div&gt;
    &lt;div class=&quot;hidden content&quot;&gt;只要 $9.9&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="六-带标签按钮">六、带标签按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui labeled button&quot;&gt;
    &lt;div class=&quot;ui red button&quot;&gt;
        &lt;i class=&quot;shop icon&quot;&gt;&lt;/i&gt;Total
    &lt;/div&gt;
    &lt;div class=&quot;ui red basic label&quot;&gt;￥99999&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui right labeled button&quot;&gt;
    &lt;div class=&quot;ui red button&quot;&gt;
        &lt;i class=&quot;shop icon&quot;&gt;&lt;/i&gt;Total
    &lt;/div&gt;
    &lt;div class=&quot;ui red basic label&quot;&gt;￥99999&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui left labeled button&quot;&gt;
    &lt;div class=&quot;ui red basic right pointing label&quot;&gt;￥99999&lt;/div&gt;
    &lt;div class=&quot;ui red button&quot;&gt;
        &lt;i class=&quot;shop icon&quot;&gt;&lt;/i&gt;Total
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui left labeled button&quot;&gt;
    &lt;div class=&quot;ui red basic right pointing label&quot;&gt;￥99999&lt;/div&gt;
    &lt;div class=&quot;ui red button&quot;&gt;
        &lt;i class=&quot;shop icon&quot;&gt;&lt;/i&gt;Total
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="七-图标按钮">七、图标按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui icon red button&quot;&gt;
    &lt;i class=&quot;shop icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
</code></pre>
<h2 id="八-标签按钮">八、标签按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui left labeled icon red button&quot;&gt;
    &lt;i class=&quot;cart plus icon&quot;&gt;&lt;/i&gt;加入购物车
&lt;/div&gt;
&lt;div class=&quot;ui right labeled icon orange button&quot;&gt;
    &lt;i class=&quot;trash alternate icon&quot;&gt;&lt;/i&gt;清空购物车
&lt;/div&gt;
</code></pre>
<h2 id="九-普通按钮组合">九、普通按钮组合</h2>
<pre><code class="language-html">&lt;div class=&quot;ui buttons&quot;&gt;
    &lt;div class=&quot;ui green button&quot;&gt;按钮1&lt;/div&gt;
    &lt;div class=&quot;ui olive button&quot;&gt;按钮2&lt;/div&gt;
    &lt;div class=&quot;ui violet button&quot;&gt;按钮3&lt;/div&gt;
    &lt;div class=&quot;ui yellow button&quot;&gt;按钮4&lt;/div&gt;
    &lt;div class=&quot;ui orange button&quot;&gt;按钮5&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十-图标按钮组合">十、图标按钮组合</h2>
<pre><code class="language-html">&lt;div class=&quot;ui icon buttons&quot;&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;align left icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;align center icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;align right icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;align justify icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;bold icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;underline icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;text width icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;eraser icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;linkify icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;edit icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;italic icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;font icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;
    &lt;div class=&quot;ui icon button&quot;&gt;&lt;i class=&quot;share icon&quot;&gt;&lt;/i&gt;&lt;/div&gt;			
&lt;/div&gt;
</code></pre>
<h2 id="十一-条件选择按钮">十一、条件选择按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui buttons&quot;&gt;
    &lt;div class=&quot;ui green button&quot;&gt;Confirm&lt;/div&gt;
    &lt;div class=&quot;or&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;ui red button&quot;&gt;Cancle&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui buttons&quot;&gt;
    &lt;div class=&quot;ui green button&quot;&gt;Save&lt;/div&gt;
    &lt;div class=&quot;or&quot; data-text=&quot;&amp;&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;ui red button&quot;&gt;Quit&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十二-不同状态的按钮">十二、不同状态的按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui red button&quot;&gt;默认状态&lt;/div&gt;
&lt;div class=&quot;ui red active button&quot;&gt;激活状态&lt;/div&gt;
&lt;div class=&quot;ui red disabled button&quot;&gt;禁止状态&lt;/div&gt;
</code></pre>
<h2 id="十三-加载按钮">十三、加载按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui primary loading button&quot;&gt;加载按钮&lt;/div&gt;
</code></pre>
<h2 id="十四-个别平台配色按钮">十四、个别平台配色按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui facebook button&quot;&gt;
    &lt;i class=&quot;facebook icon&quot;&gt;&lt;/i&gt;Facebook
&lt;/div&gt;
&lt;div class=&quot;ui twitter button&quot;&gt;
    &lt;i class=&quot;twitter icon&quot;&gt;&lt;/i&gt;Facebook
&lt;/div&gt;
&lt;div class=&quot;ui button&quot;&gt;
    &lt;i class=&quot;qq icon&quot;&gt;&lt;/i&gt;QQ
&lt;/div&gt;
&lt;div class=&quot;ui google button&quot;&gt;
    &lt;i class=&quot;google icon&quot;&gt;&lt;/i&gt;Google
&lt;/div&gt;
&lt;div class=&quot;ui instagram button&quot;&gt;
    &lt;i class=&quot;instagram icon&quot;&gt;&lt;/i&gt;instagram
&lt;/div&gt;
&lt;div class=&quot;ui youtube button&quot;&gt;
    &lt;i class=&quot;youtube icon&quot;&gt;&lt;/i&gt;Facebook
&lt;/div&gt;
</code></pre>
<h2 id="十五-按钮浮动">十五、按钮浮动</h2>
<pre><code class="language-html">&lt;div class=&quot;ui left floated button&quot;&gt;左浮按钮&lt;/div&gt;
&lt;div class=&quot;ui right floated button&quot;&gt;右浮按钮&lt;/div&gt;
</code></pre>
<h2 id="十六-开关按钮">十六、开关按钮</h2>
<pre><code class="language-html">&lt;button class=&quot;ui toggle button&quot;&gt;投票&lt;/button&gt;
</code></pre>
<h2 id="十七-适应容器按钮">十七、适应容器按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui fluid button&quot;&gt;适应容器&lt;/div&gt;
</code></pre>
<h2 id="十八-圆形按钮">十八、圆形按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;ui circular icon blue button&quot;&gt;
    &lt;i class=&quot;setting icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon red button&quot;&gt;
    &lt;i class=&quot;qq icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon green button&quot;&gt;
    &lt;i class=&quot;wechat icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon twitter button&quot;&gt;
    &lt;i class=&quot;twitter icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon youtube button&quot;&gt;
    &lt;i class=&quot;youtube icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon yellow button&quot;&gt;
    &lt;i class=&quot;github icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon black button&quot;&gt;
    &lt;i class=&quot;steam symbol icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon red button&quot;&gt;
    &lt;i class=&quot;weibo icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;ui circular icon blue button&quot;&gt;
    &lt;i class=&quot;telegram plane icon&quot;&gt;&lt;/i&gt;
&lt;/div&gt;
</code></pre>
<h2 id="十九-垂直附加按钮">十九、垂直附加按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;container&quot; style=&quot;width:800px;margin:0 auto;&quot;&gt;
    &lt;div class=&quot;ui top attached blue button&quot;&gt;顶部&lt;/div&gt;
    &lt;div class=&quot;ui attached segment&quot;&gt;
        &lt;p&gt;&lt;img src=&quot;./img/paragraph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;ui bottom attached blue button&quot;&gt;底部&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="二十-垂直附加多个按钮">二十、垂直附加多个按钮</h2>
<pre><code class="language-html">&lt;div class=&quot;container&quot; style=&quot;width:800px;margin:0 auto;&quot;&gt;
    &lt;div class=&quot;ui top attached buttons&quot;&gt;
        &lt;div class=&quot;ui button&quot;&gt;左&lt;/div&gt;
        &lt;div class=&quot;ui button&quot;&gt;右&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;ui attached segment&quot;&gt;
        &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;ui bottom attached buttons&quot;&gt;
        &lt;div class=&quot;ui button&quot;&gt;左&lt;/div&gt;
        &lt;div class=&quot;ui button&quot;&gt;右&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="二十一-垂直按钮组合">二十一、垂直按钮组合</h2>
<pre><code class="language-html">&lt;div class=&quot;ui vertical labeled icon buttons&quot;&gt;
    &lt;div class=&quot;ui button active&quot;&gt;&lt;i class=&quot;home icon&quot;&gt;&lt;/i&gt;首页&lt;/div&gt;
    &lt;div class=&quot;ui button&quot;&gt;&lt;i class=&quot;book icon&quot;&gt;&lt;/i&gt;文档&lt;/div&gt;
    &lt;div class=&quot;ui button&quot;&gt;&lt;i class=&quot;tags icon&quot;&gt;&lt;/i&gt;标签&lt;/div&gt;
    &lt;div class=&quot;ui button&quot;&gt;&lt;i class=&quot;database icon&quot;&gt;&lt;/i&gt;数据库&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="二十二-限定按钮个数的按钮组">二十二、限定按钮个数的按钮组</h2>
<pre><code class="language-html">&lt;div class=&quot;container&quot; style=&quot;width:800px;margin:0 auto;&quot;&gt;
    &lt;div class=&quot;ui five blue buttons&quot;&gt;
        &lt;div class=&quot;ui button&quot;&gt;按钮1&lt;/div&gt;
        &lt;div class=&quot;ui button&quot;&gt;按钮2&lt;/div&gt;
        &lt;div class=&quot;ui button&quot;&gt;按钮3&lt;/div&gt;
        &lt;div class=&quot;ui button&quot;&gt;按钮4&lt;/div&gt;
        &lt;div class=&quot;ui button&quot;&gt;按钮5&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="二十三-实际效果">二十三、实际效果</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610202200554.png" alt="实际效果" loading="lazy"></figure>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/zylvLeQTD/">https://zhiyuandnc.github.io/zylvLeQTD/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常见MimeType记录]]></title>
        <id>https://zhiyuandnc.github.io/3mpH-6w7/</id>
        <link href="https://zhiyuandnc.github.io/3mpH-6w7/">
        </link>
        <updated>2021-01-07T02:53:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-mimetype大全">一、MimeType大全</h2>
<table>
<thead>
<tr>
<th>文件扩展名</th>
<th>Content-Type(Mime-Type)</th>
<th>文件扩展名</th>
<th>Content-Type(Mime-Type)</th>
</tr>
</thead>
<tbody>
<tr>
<td>.*（ 字节流，未知下载文件类型时使用）</td>
<td>application/octet-stream</td>
<td>.tif</td>
<td>image/tiff</td>
</tr>
<tr>
<td>.001</td>
<td>application/x-001</td>
<td>.301</td>
<td>application/x-301</td>
</tr>
<tr>
<td>.323</td>
<td>text/h323</td>
<td>.906</td>
<td>application/x-906</td>
</tr>
<tr>
<td>.907</td>
<td>drawing/907</td>
<td>.a11</td>
<td>application/x-a11</td>
</tr>
<tr>
<td>.acp</td>
<td>audio/x-mei-aac</td>
<td>.ai</td>
<td>application/postscript</td>
</tr>
<tr>
<td>.aif</td>
<td>audio/aiff</td>
<td>.aifc</td>
<td>audio/aiff</td>
</tr>
<tr>
<td>.aiff</td>
<td>audio/aiff</td>
<td>.anv</td>
<td>application/x-anv</td>
</tr>
<tr>
<td>.asa</td>
<td>text/asa</td>
<td>.asf</td>
<td>video/x-ms-asf</td>
</tr>
<tr>
<td>.asp</td>
<td>text/asp</td>
<td>.asx</td>
<td>video/x-ms-asf</td>
</tr>
<tr>
<td>.au</td>
<td>audio/basic</td>
<td>.avi</td>
<td>video/avi</td>
</tr>
<tr>
<td>.awf</td>
<td>application/vnd.adobe.workflow</td>
<td>.biz</td>
<td>text/xml</td>
</tr>
<tr>
<td>.bmp</td>
<td>application/x-bmp</td>
<td>.bot</td>
<td>application/x-bot</td>
</tr>
<tr>
<td>.c4t</td>
<td>application/x-c4t</td>
<td>.c90</td>
<td>application/x-c90</td>
</tr>
<tr>
<td>.cal</td>
<td>application/x-cals</td>
<td>.cat</td>
<td>application/vnd.ms-pki.seccat</td>
</tr>
<tr>
<td>.cdf</td>
<td>application/x-netcdf</td>
<td>.cdr</td>
<td>application/x-cdr</td>
</tr>
<tr>
<td>.cel</td>
<td>application/x-cel</td>
<td>.cer</td>
<td>application/x-x509-ca-cert</td>
</tr>
<tr>
<td>.cg4</td>
<td>application/x-g4</td>
<td>.cgm</td>
<td>application/x-cgm</td>
</tr>
<tr>
<td>.cit</td>
<td>application/x-cit</td>
<td>.class</td>
<td>java/*</td>
</tr>
<tr>
<td>.cml</td>
<td>text/xml</td>
<td>.cmp</td>
<td>application/x-cmp</td>
</tr>
<tr>
<td>.cmx</td>
<td>application/x-cmx</td>
<td>.cot</td>
<td>application/x-cot</td>
</tr>
<tr>
<td>.crl</td>
<td>application/pkix-crl</td>
<td>.crt</td>
<td>application/x-x509-ca-cert</td>
</tr>
<tr>
<td>.csi</td>
<td>application/x-csi</td>
<td>.css</td>
<td>text/css</td>
</tr>
<tr>
<td>.cut</td>
<td>application/x-cut</td>
<td>.dbf</td>
<td>application/x-dbf</td>
</tr>
<tr>
<td>.dbm</td>
<td>application/x-dbm</td>
<td>.dbx</td>
<td>application/x-dbx</td>
</tr>
<tr>
<td>.dcd</td>
<td>text/xml</td>
<td>.dcx</td>
<td>application/x-dcx</td>
</tr>
<tr>
<td>.der</td>
<td>application/x-x509-ca-cert</td>
<td>.dgn</td>
<td>application/x-dgn</td>
</tr>
<tr>
<td>.dib</td>
<td>application/x-dib</td>
<td>.dll</td>
<td>application/x-msdownload</td>
</tr>
<tr>
<td>.doc</td>
<td>application/msword</td>
<td>.dot</td>
<td>application/msword</td>
</tr>
<tr>
<td>.drw</td>
<td>application/x-drw</td>
<td>.dtd</td>
<td>text/xml</td>
</tr>
<tr>
<td>.dwf</td>
<td>Model/vnd.dwf</td>
<td>.dwf</td>
<td>application/x-dwf</td>
</tr>
<tr>
<td>.dwg</td>
<td>application/x-dwg</td>
<td>.dxb</td>
<td>application/x-dxb</td>
</tr>
<tr>
<td>.dxf</td>
<td>application/x-dxf</td>
<td>.edn</td>
<td>application/vnd.adobe.edn</td>
</tr>
<tr>
<td>.emf</td>
<td>application/x-emf</td>
<td>.eml</td>
<td>message/rfc822</td>
</tr>
<tr>
<td>.ent</td>
<td>text/xml</td>
<td>.epi</td>
<td>application/x-epi</td>
</tr>
<tr>
<td>.eps</td>
<td>application/x-ps</td>
<td>.eps</td>
<td>application/postscript</td>
</tr>
<tr>
<td>.etd</td>
<td>application/x-ebx</td>
<td>.exe</td>
<td>application/x-msdownload</td>
</tr>
<tr>
<td>.fax</td>
<td>image/fax</td>
<td>.fdf</td>
<td>application/vnd.fdf</td>
</tr>
<tr>
<td>.fif</td>
<td>application/fractals</td>
<td>.fo</td>
<td>text/xml</td>
</tr>
<tr>
<td>.frm</td>
<td>application/x-frm</td>
<td>.g4</td>
<td>application/x-g4</td>
</tr>
<tr>
<td>.gbr</td>
<td>application/x-gbr</td>
<td>.</td>
<td>application/x-</td>
</tr>
<tr>
<td>.gif</td>
<td>image/gif</td>
<td>.gl2</td>
<td>application/x-gl2</td>
</tr>
<tr>
<td>.gp4</td>
<td>application/x-gp4</td>
<td>.hgl</td>
<td>application/x-hgl</td>
</tr>
<tr>
<td>.hmr</td>
<td>application/x-hmr</td>
<td>.hpg</td>
<td>application/x-hpgl</td>
</tr>
<tr>
<td>.hpl</td>
<td>application/x-hpl</td>
<td>.hqx</td>
<td>application/mac-binhex40</td>
</tr>
<tr>
<td>.hrf</td>
<td>application/x-hrf</td>
<td>.hta</td>
<td>application/hta</td>
</tr>
<tr>
<td>.htc</td>
<td>text/x-component</td>
<td>.htm</td>
<td>text/html</td>
</tr>
<tr>
<td>.html</td>
<td>text/html</td>
<td>.htt</td>
<td>text/webviewhtml</td>
</tr>
<tr>
<td>.htx</td>
<td>text/html</td>
<td>.icb</td>
<td>application/x-icb</td>
</tr>
<tr>
<td>.ico</td>
<td>image/x-icon</td>
<td>.ico</td>
<td>application/x-ico</td>
</tr>
<tr>
<td>.iff</td>
<td>application/x-iff</td>
<td>.ig4</td>
<td>application/x-g4</td>
</tr>
<tr>
<td>.igs</td>
<td>application/x-igs</td>
<td>.iii</td>
<td>application/x-iphone</td>
</tr>
<tr>
<td>.img</td>
<td>application/x-img</td>
<td>.ins</td>
<td>application/x-internet-signup</td>
</tr>
<tr>
<td>.isp</td>
<td>application/x-internet-signup</td>
<td>.IVF</td>
<td>video/x-ivf</td>
</tr>
<tr>
<td>.java</td>
<td>java/*</td>
<td>.jfif</td>
<td>image/jpeg</td>
</tr>
<tr>
<td>.jpe</td>
<td>image/jpeg</td>
<td>.jpe</td>
<td>application/x-jpe</td>
</tr>
<tr>
<td>.jpeg</td>
<td>image/jpeg</td>
<td>.jpg</td>
<td>image/jpeg</td>
</tr>
<tr>
<td>.jpg</td>
<td>application/x-jpg</td>
<td>.js</td>
<td>application/x-javascript</td>
</tr>
<tr>
<td>.jsp</td>
<td>text/html</td>
<td>.la1</td>
<td>audio/x-liquid-file</td>
</tr>
<tr>
<td>.lar</td>
<td>application/x-laplayer-reg</td>
<td>.latex</td>
<td>application/x-latex</td>
</tr>
<tr>
<td>.lavs</td>
<td>audio/x-liquid-secure</td>
<td>.lbm</td>
<td>application/x-lbm</td>
</tr>
<tr>
<td>.lmsff</td>
<td>audio/x-la-lms</td>
<td>.ls</td>
<td>application/x-javascript</td>
</tr>
<tr>
<td>.ltr</td>
<td>application/x-ltr</td>
<td>.m1v</td>
<td>video/x-mpeg</td>
</tr>
<tr>
<td>.m2v</td>
<td>video/x-mpeg</td>
<td>.m3u</td>
<td>audio/mpegurl</td>
</tr>
<tr>
<td>.m4e</td>
<td>video/mpeg4</td>
<td>.mac</td>
<td>application/x-mac</td>
</tr>
<tr>
<td>.man</td>
<td>application/x-troff-man</td>
<td>.math</td>
<td>text/xml</td>
</tr>
<tr>
<td>.mdb</td>
<td>application/msaccess</td>
<td>.mdb</td>
<td>application/x-mdb</td>
</tr>
<tr>
<td>.mfp</td>
<td>application/x-shockwave-flash</td>
<td>.mht</td>
<td>message/rfc822</td>
</tr>
<tr>
<td>.mhtml</td>
<td>message/rfc822</td>
<td>.mi</td>
<td>application/x-mi</td>
</tr>
<tr>
<td>.mid</td>
<td>audio/mid</td>
<td>.midi</td>
<td>audio/mid</td>
</tr>
<tr>
<td>.mil</td>
<td>application/x-mil</td>
<td>.mml</td>
<td>text/xml</td>
</tr>
<tr>
<td>.mnd</td>
<td>audio/x-musicnet-download</td>
<td>.mns</td>
<td>audio/x-musicnet-stream</td>
</tr>
<tr>
<td>.mocha</td>
<td>application/x-javascript</td>
<td>.movie</td>
<td>video/x-sgi-movie</td>
</tr>
<tr>
<td>.mp1</td>
<td>audio/mp1</td>
<td>.mp2</td>
<td>audio/mp2</td>
</tr>
<tr>
<td>.mp2v</td>
<td>video/mpeg</td>
<td>.mp3</td>
<td>audio/mp3</td>
</tr>
<tr>
<td>.mp4</td>
<td>video/mpeg4</td>
<td>.mpa</td>
<td>video/x-mpg</td>
</tr>
<tr>
<td>.mpd</td>
<td>application/vnd.ms-project</td>
<td>.mpe</td>
<td>video/x-mpeg</td>
</tr>
<tr>
<td>.mpeg</td>
<td>video/mpg</td>
<td>.mpg</td>
<td>video/mpg</td>
</tr>
<tr>
<td>.mpga</td>
<td>audio/rn-mpeg</td>
<td>.mpp</td>
<td>application/vnd.ms-project</td>
</tr>
<tr>
<td>.mps</td>
<td>video/x-mpeg</td>
<td>.mpt</td>
<td>application/vnd.ms-project</td>
</tr>
<tr>
<td>.mpv</td>
<td>video/mpg</td>
<td>.mpv2</td>
<td>video/mpeg</td>
</tr>
<tr>
<td>.mpw</td>
<td>application/vnd.ms-project</td>
<td>.mpx</td>
<td>application/vnd.ms-project</td>
</tr>
<tr>
<td>.mtx</td>
<td>text/xml</td>
<td>.mxp</td>
<td>application/x-mmxp</td>
</tr>
<tr>
<td>.net</td>
<td>image/pnetvue</td>
<td>.nrf</td>
<td>application/x-nrf</td>
</tr>
<tr>
<td>.nws</td>
<td>message/rfc822</td>
<td>.odc</td>
<td>text/x-ms-odc</td>
</tr>
<tr>
<td>.out</td>
<td>application/x-out</td>
<td>.p10</td>
<td>application/pkcs10</td>
</tr>
<tr>
<td>.p12</td>
<td>application/x-pkcs12</td>
<td>.p7b</td>
<td>application/x-pkcs7-certificates</td>
</tr>
<tr>
<td>.p7c</td>
<td>application/pkcs7-mime</td>
<td>.p7m</td>
<td>application/pkcs7-mime</td>
</tr>
<tr>
<td>.p7r</td>
<td>application/x-pkcs7-certreqresp</td>
<td>.p7s</td>
<td>application/pkcs7-signature</td>
</tr>
<tr>
<td>.pc5</td>
<td>application/x-pc5</td>
<td>.pci</td>
<td>application/x-pci</td>
</tr>
<tr>
<td>.pcl</td>
<td>application/x-pcl</td>
<td>.pcx</td>
<td>application/x-pcx</td>
</tr>
<tr>
<td>.pdf</td>
<td>application/pdf</td>
<td>.pdf</td>
<td>application/pdf</td>
</tr>
<tr>
<td>.pdx</td>
<td>application/vnd.adobe.pdx</td>
<td>.pfx</td>
<td>application/x-pkcs12</td>
</tr>
<tr>
<td>.pgl</td>
<td>application/x-pgl</td>
<td>.pic</td>
<td>application/x-pic</td>
</tr>
<tr>
<td>.pko</td>
<td>application/vnd.ms-pki.pko</td>
<td>.pl</td>
<td>application/x-perl</td>
</tr>
<tr>
<td>.plg</td>
<td>text/html</td>
<td>.pls</td>
<td>audio/scpls</td>
</tr>
<tr>
<td>.plt</td>
<td>application/x-plt</td>
<td>.png</td>
<td>image/png</td>
</tr>
<tr>
<td>.png</td>
<td>application/x-png</td>
<td>.pot</td>
<td>application/vnd.ms-powerpoint</td>
</tr>
<tr>
<td>.ppa</td>
<td>application/vnd.ms-powerpoint</td>
<td>.ppm</td>
<td>application/x-ppm</td>
</tr>
<tr>
<td>.pps</td>
<td>application/vnd.ms-powerpoint</td>
<td>.ppt</td>
<td>application/vnd.ms-powerpoint</td>
</tr>
<tr>
<td>.ppt</td>
<td>application/x-ppt</td>
<td>.pr</td>
<td>application/x-pr</td>
</tr>
<tr>
<td>.prf</td>
<td>application/pics-rules</td>
<td>.prn</td>
<td>application/x-prn</td>
</tr>
<tr>
<td>.prt</td>
<td>application/x-prt</td>
<td>.ps</td>
<td>application/x-ps</td>
</tr>
<tr>
<td>.ps</td>
<td>application/postscript</td>
<td>.ptn</td>
<td>application/x-ptn</td>
</tr>
<tr>
<td>.pwz</td>
<td>application/vnd.ms-powerpoint</td>
<td>.r3t</td>
<td>text/vnd.rn-realtext3d</td>
</tr>
<tr>
<td>.ra</td>
<td>audio/vnd.rn-realaudio</td>
<td>.ram</td>
<td>audio/x-pn-realaudio</td>
</tr>
<tr>
<td>.ras</td>
<td>application/x-ras</td>
<td>.rat</td>
<td>application/rat-file</td>
</tr>
<tr>
<td>.rdf</td>
<td>text/xml</td>
<td>.rec</td>
<td>application/vnd.rn-recording</td>
</tr>
<tr>
<td>.red</td>
<td>application/x-red</td>
<td>.rgb</td>
<td>application/x-rgb</td>
</tr>
<tr>
<td>.rjs</td>
<td>application/vnd.rn-realsystem-rjs</td>
<td>.rjt</td>
<td>application/vnd.rn-realsystem-rjt</td>
</tr>
<tr>
<td>.rlc</td>
<td>application/x-rlc</td>
<td>.rle</td>
<td>application/x-rle</td>
</tr>
<tr>
<td>.rm</td>
<td>application/vnd.rn-realmedia</td>
<td>.rmf</td>
<td>application/vnd.adobe.rmf</td>
</tr>
<tr>
<td>.rmi</td>
<td>audio/mid</td>
<td>.rmj</td>
<td>application/vnd.rn-realsystem-rmj</td>
</tr>
<tr>
<td>.rmm</td>
<td>audio/x-pn-realaudio</td>
<td>.rmp</td>
<td>application/vnd.rn-rn_music_package</td>
</tr>
<tr>
<td>.rms</td>
<td>application/vnd.rn-realmedia-secure</td>
<td>.rmvb</td>
<td>application/vnd.rn-realmedia-vbr</td>
</tr>
<tr>
<td>.rmx</td>
<td>application/vnd.rn-realsystem-rmx</td>
<td>.rnx</td>
<td>application/vnd.rn-realplayer</td>
</tr>
<tr>
<td>.rp</td>
<td>image/vnd.rn-realpix</td>
<td>.rpm</td>
<td>audio/x-pn-realaudio-plugin</td>
</tr>
<tr>
<td>.rsml</td>
<td>application/vnd.rn-rsml</td>
<td>.rt</td>
<td>text/vnd.rn-realtext</td>
</tr>
<tr>
<td>.rtf</td>
<td>application/msword</td>
<td>.rtf</td>
<td>application/x-rtf</td>
</tr>
<tr>
<td>.rv</td>
<td>video/vnd.rn-realvideo</td>
<td>.sam</td>
<td>application/x-sam</td>
</tr>
<tr>
<td>.sat</td>
<td>application/x-sat</td>
<td>.sdp</td>
<td>application/sdp</td>
</tr>
<tr>
<td>.sdw</td>
<td>application/x-sdw</td>
<td>.sit</td>
<td>application/x-stuffit</td>
</tr>
<tr>
<td>.slb</td>
<td>application/x-slb</td>
<td>.sld</td>
<td>application/x-sld</td>
</tr>
<tr>
<td>.slk</td>
<td>drawing/x-slk</td>
<td>.smi</td>
<td>application/smil</td>
</tr>
<tr>
<td>.smil</td>
<td>application/smil</td>
<td>.smk</td>
<td>application/x-smk</td>
</tr>
<tr>
<td>.snd</td>
<td>audio/basic</td>
<td>.sol</td>
<td>text/plain</td>
</tr>
<tr>
<td>.sor</td>
<td>text/plain</td>
<td>.spc</td>
<td>application/x-pkcs7-certificates</td>
</tr>
<tr>
<td>.spl</td>
<td>application/futuresplash</td>
<td>.spp</td>
<td>text/xml</td>
</tr>
<tr>
<td>.ssm</td>
<td>application/streamingmedia</td>
<td>.sst</td>
<td>application/vnd.ms-pki.certstore</td>
</tr>
<tr>
<td>.stl</td>
<td>application/vnd.ms-pki.stl</td>
<td>.stm</td>
<td>text/html</td>
</tr>
<tr>
<td>.sty</td>
<td>application/x-sty</td>
<td>.svg</td>
<td>text/xml</td>
</tr>
<tr>
<td>.swf</td>
<td>application/x-shockwave-flash</td>
<td>.tdf</td>
<td>application/x-tdf</td>
</tr>
<tr>
<td>.tg4</td>
<td>application/x-tg4</td>
<td>.tga</td>
<td>application/x-tga</td>
</tr>
<tr>
<td>.tif</td>
<td>image/tiff</td>
<td>.tif</td>
<td>application/x-tif</td>
</tr>
<tr>
<td>.tiff</td>
<td>image/tiff</td>
<td>.tld</td>
<td>text/xml</td>
</tr>
<tr>
<td>.top</td>
<td>drawing/x-top</td>
<td>.torrent</td>
<td>application/x-bittorrent</td>
</tr>
<tr>
<td>.tsd</td>
<td>text/xml</td>
<td>.txt</td>
<td>text/plain</td>
</tr>
<tr>
<td>.uin</td>
<td>application/x-icq</td>
<td>.uls</td>
<td>text/iuls</td>
</tr>
<tr>
<td>.vcf</td>
<td>text/x-vcard</td>
<td>.vda</td>
<td>application/x-vda</td>
</tr>
<tr>
<td>.vdx</td>
<td>application/vnd.visio</td>
<td>.vml</td>
<td>text/xml</td>
</tr>
<tr>
<td>.vpg</td>
<td>application/x-vpeg005</td>
<td>.vsd</td>
<td>application/vnd.visio</td>
</tr>
<tr>
<td>.vsd</td>
<td>application/x-vsd</td>
<td>.vss</td>
<td>application/vnd.visio</td>
</tr>
<tr>
<td>.vst</td>
<td>application/vnd.visio</td>
<td>.vst</td>
<td>application/x-vst</td>
</tr>
<tr>
<td>.vsw</td>
<td>application/vnd.visio</td>
<td>.vsx</td>
<td>application/vnd.visio</td>
</tr>
<tr>
<td>.vtx</td>
<td>application/vnd.visio</td>
<td>.vxml</td>
<td>text/xml</td>
</tr>
<tr>
<td>.wav</td>
<td>audio/wav</td>
<td>.wax</td>
<td>audio/x-ms-wax</td>
</tr>
<tr>
<td>.wb1</td>
<td>application/x-wb1</td>
<td>.wb2</td>
<td>application/x-wb2</td>
</tr>
<tr>
<td>.wb3</td>
<td>application/x-wb3</td>
<td>.wbmp</td>
<td>image/vnd.wap.wbmp</td>
</tr>
<tr>
<td>.wiz</td>
<td>application/msword</td>
<td>.wk3</td>
<td>application/x-wk3</td>
</tr>
<tr>
<td>.wk4</td>
<td>application/x-wk4</td>
<td>.wkq</td>
<td>application/x-wkq</td>
</tr>
<tr>
<td>.wks</td>
<td>application/x-wks</td>
<td>.wm</td>
<td>video/x-ms-wm</td>
</tr>
<tr>
<td>.wma</td>
<td>audio/x-ms-wma</td>
<td>.wmd</td>
<td>application/x-ms-wmd</td>
</tr>
<tr>
<td>.wmf</td>
<td>application/x-wmf</td>
<td>.wml</td>
<td>text/vnd.wap.wml</td>
</tr>
<tr>
<td>.wmv</td>
<td>video/x-ms-wmv</td>
<td>.wmx</td>
<td>video/x-ms-wmx</td>
</tr>
<tr>
<td>.wmz</td>
<td>application/x-ms-wmz</td>
<td>.wp6</td>
<td>application/x-wp6</td>
</tr>
<tr>
<td>.wpd</td>
<td>application/x-wpd</td>
<td>.wpg</td>
<td>application/x-wpg</td>
</tr>
<tr>
<td>.wpl</td>
<td>application/vnd.ms-wpl</td>
<td>.wq1</td>
<td>application/x-wq1</td>
</tr>
<tr>
<td>.wr1</td>
<td>application/x-wr1</td>
<td>.wri</td>
<td>application/x-wri</td>
</tr>
<tr>
<td>.wrk</td>
<td>application/x-wrk</td>
<td>.ws</td>
<td>application/x-ws</td>
</tr>
<tr>
<td>.ws2</td>
<td>application/x-ws</td>
<td>.wsc</td>
<td>text/scriptlet</td>
</tr>
<tr>
<td>.wsdl</td>
<td>text/xml</td>
<td>.wvx</td>
<td>video/x-ms-wvx</td>
</tr>
<tr>
<td>.xdp</td>
<td>application/vnd.adobe.xdp</td>
<td>.xdr</td>
<td>text/xml</td>
</tr>
<tr>
<td>.xfd</td>
<td>application/vnd.adobe.xfd</td>
<td>.xfdf</td>
<td>application/vnd.adobe.xfdf</td>
</tr>
<tr>
<td>.xhtml</td>
<td>text/html</td>
<td>.xls</td>
<td>application/vnd.ms-excel</td>
</tr>
<tr>
<td>.xls</td>
<td>application/x-xls</td>
<td>.xlw</td>
<td>application/x-xlw</td>
</tr>
<tr>
<td>.xml</td>
<td>text/xml</td>
<td>.xpl</td>
<td>audio/scpls</td>
</tr>
<tr>
<td>.xq</td>
<td>text/xml</td>
<td>.xql</td>
<td>text/xml</td>
</tr>
<tr>
<td>.xquery</td>
<td>text/xml</td>
<td>.xsd</td>
<td>text/xml</td>
</tr>
<tr>
<td>.xsl</td>
<td>text/xml</td>
<td>.xslt</td>
<td>text/xml</td>
</tr>
<tr>
<td>.xwd</td>
<td>application/x-xwd</td>
<td>.x_b</td>
<td>application/x-x_b</td>
</tr>
<tr>
<td>.sis</td>
<td>application/vnd.symbian.install</td>
<td>.sisx</td>
<td>application/vnd.symbian.install</td>
</tr>
<tr>
<td>.x_t</td>
<td>application/x-x_t</td>
<td>.ipa</td>
<td>application/vnd.iphone</td>
</tr>
<tr>
<td>.apk</td>
<td>application/vnd.android.package-archive</td>
<td>.xap</td>
<td>application/x-silverlight-app</td>
</tr>
</tbody>
</table>
<h2 id="二-声明">二、声明</h2>
<blockquote>
<p>菜鸟教程链接：<a href="https://www.runoob.com/http/http-content-type.html">https://www.runoob.com/http/http-content-type.html</a><br>
本表格为转载菜鸟教程表格内容，非本人收集，转载请注明原文链接</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Graphics绘制普通验证码]]></title>
        <id>https://zhiyuandnc.github.io/zEKFZIKMH/</id>
        <link href="https://zhiyuandnc.github.io/zEKFZIKMH/">
        </link>
        <updated>2021-01-06T09:20:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-创建servletdemo继承httpservlet实现doget和dopost方法">一、创建ServletDemo继承HttpServlet，实现doGet和doPost方法</h2>
<pre><code class="language-java">@WebServlet(urlPatterns = &quot;/checkCodeServlet&quot;)
public class CheckServlet extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doGet(request, response);
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int width = 100;
        int height = 30;
        String checkCodes = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;
        int codeLen = 4;
        int lineCount = 20;
        int pointCount = 100;
        int spacing = width/codeLen;
        Random ran = new Random();
        StringBuilder sb = new StringBuilder();
        //创建画布
        BufferedImage bufferedImage = new BufferedImage(width,height, BufferedImage.TYPE_INT_RGB);
        //创建画笔
        Graphics graphics = bufferedImage.createGraphics();
        //设置画笔颜色
        graphics.setColor(new Color(238,238,238));
        //填充背景
        graphics.fillRect(0,0,width,height);
        //设置字体
        Font font  = new Font(&quot;微软雅黑&quot;,Font.BOLD,20);
        if(font!=null){
            graphics.setFont(font);
        }
        //重设颜色
        graphics.setColor(new Color(162,162,162));
        //绘制干扰点
        for (int i = 0; i &lt; pointCount; i++) {
            int x = MyUtils.getRanNum(0,width);
            int y = MyUtils.getRanNum(0,height);
            graphics.drawLine(x,y,x+1,y+1);
        }
        //重设颜色
        graphics.setColor(new Color(38,190,133));
        //绘制验证码
        for (int i = 0; i &lt; codeLen; i++) {
            String code = String.valueOf(checkCodes.charAt(MyUtils.getRanNum(0,checkCodes.length())));
            int x = MyUtils.getRanNum(i*spacing,Math.abs((i+1)*spacing-font.getSize()/2));
            int y = MyUtils.getRanNum(font.getSize(),height);
            graphics.drawString(code, x,y);
            sb.append(code);
            System.out.println(&quot;x:&quot;+x+&quot;\ty:&quot;+y);
        }
        //重设颜色
        graphics.setColor(new Color(148,218,248));
        //绘制干扰线
        for (int i = 0; i &lt; lineCount; i++) {
            int x1 = MyUtils.getRanNum(0,width);
            int y1 = MyUtils.getRanNum(0,height);
            int x2 = MyUtils.getRanNum(x1,width);
            int y2 = MyUtils.getRanNum(y1,height);
            graphics.drawLine(x1,y1,x2,y2);
        }
        System.out.println(sb);
        request.getSession().setAttribute(&quot;checkCodeSession&quot;,sb.toString());
        ImageIO.write(bufferedImage,&quot;png&quot;,response.getOutputStream());
    }
}
</code></pre>
<h2 id="二-实际效果如下">二、实际效果如下</h2>
<figure data-type="image" tabindex="1"><img src="https://zhiyuandnc.github.io/post-images/1610245282251.png" alt="" loading="lazy"></figure>
<blockquote>
<p>这种验证码还是比较古老了，早已经不再安全了，写这篇文章就是为了记录一下验证码的简单绘制，不适合用于项目中的验证</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/zEKFZIKMH/">https://zhiyuandnc.github.io/zEKFZIKMH/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式模拟实现C3P0读取配置文件创建Connection对象]]></title>
        <id>https://zhiyuandnc.github.io/UBe69VI0p/</id>
        <link href="https://zhiyuandnc.github.io/UBe69VI0p/">
        </link>
        <updated>2021-01-04T05:31:59.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本教程仅限于 <code>mysql-connectorv8.0.21</code> + <code>mysql8.0</code> + <code>jdk1.8</code></p>
</blockquote>
<h2 id="一-在pomxml中加入jdbc驱动jar包的依赖项">一、在pom.xml中加入JDBC驱动JAR包的依赖项</h2>
<pre><code class="language-java">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="二-书写配置文件并置于resources目录下">二、书写配置文件，并置于resources目录下</h2>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;c3p0-config&gt;
    &lt;default-config&gt;
        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;
        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=UTC&lt;/property&gt;
        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;
        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;
    &lt;/default-config&gt;
&lt;/c3p0-config&gt;
</code></pre>
<h2 id="三-书写jdbc简单工具类">三、书写JDBC简单工具类</h2>
<pre><code class="language-java">public class JDBCUtils {
    private JDBCUtils(){}
    public static Connection getConnection(String driverClass,String jdbcUrl,String user,String password){
        Connection conn = null;
        try {
            Class.forName(driverClass);
            conn = DriverManager.getConnection(jdbcUrl,user,password);
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return conn;
    }
}
</code></pre>
<h2 id="四-书写代码是用正则表达式实现xml配置文件解析">四、书写代码，是用正则表达式实现xml配置文件解析</h2>
<pre><code class="language-java">public class RegexDemo {
    public static void main(String[] args) throws IOException {
        StringBuilder sb = new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(RegexDemo.class.getClassLoader().getResourceAsStream(&quot;c3p0-config.xml&quot;), &quot;UTF-8&quot;));
        String str;
        while((str=br.readLine())!=null){
            sb.append(str);
        }
        Pattern p = compile(&quot;&lt;property name=\&quot;(.*?)\&quot;&gt;(.*?)&lt;/property&gt;&quot;);
        Matcher matcher = p.matcher(sb);
        HashMap&lt;String, String&gt; config = new HashMap&lt;String, String&gt;();
        while(matcher.find()){
            config.put(matcher.group(1),matcher.group(2));
        }
        Set&lt;Map.Entry&lt;String, String&gt;&gt; sets = config.entrySet();
        for (Map.Entry&lt;String, String&gt; set : sets) {
            System.out.println(set.getKey()+&quot;:&quot;+set.getValue());
        }
        String driverClass = config.get(&quot;driverClass&quot;);
        String jdbcUrl = URLDecoder.decode(config.get(&quot;jdbcUrl&quot;));
        jdbcUrl = jdbcUrl.replaceAll(&quot;&amp;amp;&quot;,&quot;&amp;&quot;);
        String user = config.get(&quot;user&quot;);
        String password = config.get(&quot;password&quot;);
        Connection conn = JDBCUtils.getConnection(driverClass, jdbcUrl, user, password);
        System.out.println(conn);
    }
}
</code></pre>
<h2 id="五-成功获取所需信息输出结果如下">五、成功获取所需信息，输出结果如下</h2>
<pre><code>password:123456
driverClass:com.mysql.cj.jdbc.Driver
jdbcUrl:jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=UTC
user:root
com.mysql.cj.jdbc.ConnectionImpl@49070868
</code></pre>
<blockquote>
<p>注意：在第四步的时候，我做了一个额外操作，将jdbcUrl中的&amp;amp;转义字符全部转换为&amp;，否则url是错误的，是不上数据库的！</p>
</blockquote>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/UBe69VI0p/">https://zhiyuandnc.github.io/UBe69VI0p/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Jsoup解析XML文档]]></title>
        <id>https://zhiyuandnc.github.io/rSoFG8-KT/</id>
        <link href="https://zhiyuandnc.github.io/rSoFG8-KT/">
        </link>
        <updated>2021-01-04T01:32:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本教程仅限于 <code>jsoupv1.11.3</code> + <code>jsoupXPathv0.3.2</code> + <code>jdk1.8</code></p>
</blockquote>
<h2 id="一-在pomxml中添加jsoup和jsoupxpath依赖">一、在pom.xml中添加jsoup和jsoupXPath依赖</h2>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;
    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;
    &lt;version&gt;1.11.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- https://mvnrepository.com/artifact/cn.wanghaomiao/JsoupXpath --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cn.wanghaomiao&lt;/groupId&gt;
    &lt;artifactId&gt;JsoupXpath&lt;/artifactId&gt;
    &lt;version&gt;0.3.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="二-jsoup概述">二、Jsoup概述</h2>
<ul>
<li>概述：Jsoup是一个专门用于解析HTML文档的技术，但是它太好用了，所以也被用来解析同为标记语言的xml文档</li>
<li>常用对象：<code>Jsoup</code> <code>Document</code>  <code>Elements</code> <code>Element</code> <code>Node</code></li>
</ul>
<h4 id="1-jsoup对象">1. Jsoup对象</h4>
<ul>
<li>parse(File in,String charsetName)：读取文档，创建Document对象</li>
<li>parse(String html)：解析文档字符串创建Document对象</li>
<li>parse(URL url,int timeoutMillis)：通过URL读取网页源码创建Document对象</li>
</ul>
<h4 id="2-document对象">2. Document对象</h4>
<ul>
<li>getElementsByTag(String tagName)：根据标签名称获取标签元素集合Elements对象</li>
<li>getElementsByAttribute(String key)：根据指定属性获取含有该属性的标签元素集合Elements对象</li>
<li>getElementsByAttributeValue(String key,String value)：根据指定属性和属性值获取含有该属性对的标签元素集合Elements对象</li>
<li>getElementsById(String id)：根据指定id值获取含有该id属性值的标签元素集合Elements对象</li>
</ul>
<h4 id="3-elements对象">3. Elements对象</h4>
<ul>
<li>继承自ArrayList&lt;Element&gt;，用于存放标签元素的集合，同ArrayList使用方式一样</li>
</ul>
<h4 id="4-element对象">4. Element对象</h4>
<p><code>获取子元素的方法同Document</code></p>
<ul>
<li>getElementsByTag(String tagName)：根据标签名称获取标签元素集合Elements对象</li>
<li>getElementsByAttribute(String key)：根据指定属性获取含有该属性的标签元素集合Elements对象</li>
<li>getElementsByAttributeValue(String key,String value)：根据指定属性和属性值获取含有该属性对的标签元素集合Elements对象</li>
<li>getElementsById(String id)：根据指定id值获取含有该id属性值的标签元素集合Elements对象</li>
</ul>
<p><code>获取属性值的方法</code></p>
<ul>
<li>String attr(String key)：根据属性名称获取属性值</li>
</ul>
<p><code>获取文本内容</code></p>
<ul>
<li>String text()：获取文本内容</li>
<li>String html()：获取标签内所有内容</li>
</ul>
<h2 id="三-书写代码实现解析-c3p0-configxml">三、书写代码，实现解析 <code>c3p0-config.xml</code></h2>
<blockquote>
<p>目标：解析xml文件，获得 <code>driverClass</code> ，<code>jdbcUrl</code>， <code>user</code> ，<code>password</code></p>
</blockquote>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;c3p0-config&gt;
    &lt;!--使用默认的配置读取连接池对象--&gt;
    &lt;default-config&gt;
        &lt;!--   连接参数    --&gt;
        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;
        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/test?useUnicode=ture&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;serverTimezone=Hongkong&lt;/property&gt;
        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;
        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;
        &lt;!--   初始化连接数     --&gt;
        &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;
        &lt;!--    最大空闲时间     --&gt;
        &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;
        &lt;!--   最大连接数     --&gt;
        &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;
        &lt;!--   最小连接数     --&gt;
        &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;
        &lt;!--   超时时间     --&gt;
        &lt;property name=&quot;checkoutTimeout&quot;&gt;3000&lt;/property&gt;
        &lt;property name=&quot;acquireRetryAttempts&quot;&gt;30&lt;/property&gt;
        &lt;property name=&quot;maxStatements&quot;&gt;0&lt;/property&gt;
        &lt;property name=&quot;maxStatementsPerConnection&quot;&gt;0&lt;/property&gt;
    &lt;/default-config&gt;
&lt;/c3p0-config&gt;
</code></pre>
<h3 id="1-getelementsbytagstring-tagname方法">1. getElementsByTag(String tagName)方法</h3>
<pre><code class="language-java">public class JsoupDemo {
    public static void main(String[] args) throws IOException {
        String path = URLDecoder.decode(JsoupDemo.class.getClassLoader().getResource(&quot;c3p0-config.xml&quot;).getPath());
        Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);
        Elements propertys = document.getElementsByTag(&quot;property&quot;);
        for (Element property : propertys) {
            System.out.println(property.text());
        }
    }
}
</code></pre>
<pre><code>//控制台打印结果
com.mysql.cj.jdbc.Driver
jdbc:mysql://localhost:3306/test?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong
root
123456
10
30
100
10
3000
30
0
0
</code></pre>
<h3 id="2-getelementsbyattributestring-key方法">2. getElementsByAttribute(String key)方法</h3>
<pre><code class="language-java">public class JsoupDemo {
    public static void main(String[] args) throws IOException {
        String path = URLDecoder.decode(JsoupDemo.class.getClassLoader().getResource(&quot;c3p0-config.xml&quot;).getPath());
        Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);
        Elements names = document.getElementsByAttribute(&quot;name&quot;);
        for (Element name : names) {
            System.out.println(name.text());
        }
    }
}
</code></pre>
<pre><code>//控制台打印结果
com.mysql.cj.jdbc.Driver
jdbc:mysql://localhost:3306/test?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong
root
123456
10
30
100
10
3000
30
0
0
</code></pre>
<h3 id="3-getelementsbyattributevaluestring-keystring-value方法">3. getElementsByAttributeValue(String key,String value)方法</h3>
<pre><code class="language-java">public class JsoupDemo {
    public static void main(String[] args) throws IOException {
        String path = URLDecoder.decode(JsoupDemo.class.getClassLoader().getResource(&quot;c3p0-config.xml&quot;).getPath());
        Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);
        Elements driverClass = document.getElementsByAttributeValue(&quot;name&quot;, &quot;driverClass&quot;);
        for (Element aClass : driverClass) {
            System.out.println(aClass.text());
        }
        Elements jdbcUrl = document.getElementsByAttributeValue(&quot;name&quot;, &quot;jdbcUrl&quot;);
        for (Element element : jdbcUrl) {
            System.out.println(element.text());
        }
        Elements user = document.getElementsByAttributeValue(&quot;name&quot;, &quot;user&quot;);
        for (Element element : user) {
            System.out.println(element.text());
        }
        Elements password = document.getElementsByAttributeValue(&quot;name&quot;, &quot;password&quot;);
        for (Element element : password) {
            System.out.println(element.text());
        }
    }
}
</code></pre>
<pre><code>//控制台打印结果
com.mysql.cj.jdbc.Driver
jdbc:mysql://localhost:3306/test?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong
root
123456
</code></pre>
<h3 id="4-getelementsbyidstring-id方法">4. getElementsById(String id)方法</h3>
<pre><code class="language-java">public class JsoupDemo {
    public static void main(String[] args) throws IOException {
        String path = URLDecoder.decode(JsoupDemo.class.getClassLoader().getResource(&quot;c3p0-config.xml&quot;).getPath(), &quot;UTF-8&quot;);
        Document document = Jsoup.parse(new File(path), &quot;UTF-8&quot;);
        Element idname = document.getElementById(&quot;idname&quot;);
        System.out.println(idname);
    }
}
</code></pre>
<pre><code>//控制台打印结果
null
//因为c3p0-config.xml文件中并没有含有id的标签
</code></pre>
<h2 id="四-书写代码使用jsoup的扩展功能解析xml文件">四、书写代码，使用Jsoup的扩展功能解析xml文件</h2>
<h3 id="1-第一步读取xml文件获取document对象">1. 第一步：读取xml文件获取Document对象</h3>
<pre><code class="language-java">String url = URLDecoder.decode(JsoupDemo.class.getClassLoader().getResource(&quot;c3p0-config.xml&quot;).getPath(),&quot;UTF-8&quot;);
Document parse = Jsoup.parse(new File(url), &quot;UTF-8&quot;);
</code></pre>
<h3 id="2-第二步使用document对象的select方法">2. 第二步：使用Document对象的select方法</h3>
<ul>
<li>概述：select方法支持所有基本的CSS选择器语法，我们可以通过传入指定选择器来获取指定Element对象</li>
</ul>
<pre><code class="language-java">//标签选择器
Elements es = parse.select(&quot;property&quot;);
//属性选择器
Elements es = parse.select(&quot;property[name=jdbcUrl]&quot;);
//组合选择器
Elements es = parse.select(&quot;default-config &gt; property[name=jdbcUrl]&quot;);
//ID选择器
Element e = parse.select(&quot;#id&quot;);
//Class选择器
Elements es = parse.select(&quot;.class&quot;);
</code></pre>
<p><code>其他选择器就不演示了，大家自己研究</code></p>
<h3 id="3-第三步完整代码">3. 第三步：完整代码</h3>
<pre><code class="language-java">public class JsoupDemo {
    public static void main(String[] args) throws IOException {
        String url = URLDecoder.decode(JsoupDemo.class.getClassLoader().getResource(&quot;c3p0-config.xml&quot;).getPath(),&quot;UTF-8&quot;);
        Document parse = Jsoup.parse(new File(url), &quot;UTF-8&quot;);
        Elements e1 = parse.select(&quot;property[name=driverClass]&quot;);
        for (Element element : e1) {
            System.out.println(element.text());
        }
        Elements e2 = parse.select(&quot;property[name=jdbcUrl]&quot;);
        for (Element element : e2) {
            System.out.println(element.text());
        }
        Elements e3 = parse.select(&quot;property[name=user]&quot;);
        for (Element element : e3) {
            System.out.println(element.text());
        }
        Elements e4 = parse.select(&quot;property[name=password]&quot;);
        for (Element element : e4) {
            System.out.println(element.text());
        }
        Elements e5 = parse.select(&quot;default-config &gt; property[name=driverClass]&quot;);
        for (Element element : e5) {
            System.out.println(element.text());
        }
        Elements e6 = parse.select(&quot;default-config &gt; property[name=jdbcUrl]&quot;);
        for (Element element : e6) {
            System.out.println(element.text());
        }
        Elements e7 = parse.select(&quot;default-config &gt; property[name=user]&quot;);
        for (Element element : e7) {
            System.out.println(element.text());
        }
        Elements e8 = parse.select(&quot;default-config &gt; property[name=password]&quot;);
        for (Element element : e8) {
            System.out.println(element.text());
        }
    }
}
</code></pre>
<pre><code>//控制台输出结果
com.mysql.cj.jdbc.Driver
jdbc:mysql://localhost:3306/test?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong
root
123456
com.mysql.cj.jdbc.Driver
jdbc:mysql://localhost:3306/test?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong
root
123456
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/rSoFG8-KT/">https://zhiyuandnc.github.io/rSoFG8-KT/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Gson创建/解析json格式文件]]></title>
        <id>https://zhiyuandnc.github.io/XXV7UsHKh/</id>
        <link href="https://zhiyuandnc.github.io/XXV7UsHKh/">
        </link>
        <updated>2021-01-03T07:15:38.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本教程仅限于 <code>gsonv2.8.5</code> + <code>jdk1.8</code></p>
</blockquote>
<h2 id="一-在pomxml中加入gson的依赖文件">一、在pom.xml中加入gson的依赖文件</h2>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
    &lt;artifactId&gt;gson&lt;/artifactId&gt;
    &lt;version&gt;2.8.5&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="二-书写代码使用无参构造创建json格式文本">二、书写代码，使用无参构造创建Json格式文本</h2>
<p><code>此处的Person同上次的org.json一样，是一个JavaBean对象</code></p>
<pre><code class="language-java">public static String createJsonText(){
        Person person = new Person(&quot;絷缘&quot;, 23, &quot;male&quot;, false, false, new String[]{&quot;Java&quot;, &quot;Linux&quot;, &quot;JavaScript&quot;, &quot;Vue&quot;, &quot;SemanticUI&quot;, &quot;NodeJS&quot;});
        Gson gson = new Gson();
        return gson.toJson(person);
}
</code></pre>
<h2 id="三-书写代码使用gsonbuilder在创建json之前设置高级属性">三、书写代码，使用GsonBuilder在创建Json之前设置高级属性</h2>
<pre><code class="language-java">public static String createJsonText(){
        Person person = new Person(&quot;絷缘&quot;, 23, &quot;male&quot;, false, false, new String[]{&quot;Java&quot;, &quot;Linux&quot;, &quot;JavaScript&quot;, &quot;Vue&quot;, &quot;SemanticUI&quot;, &quot;NodeJS&quot;});
        GsonBuilder gson = new GsonBuilder();
        //设置Json美化显示
        gson.setPrettyPrinting();
        //设置Json中key的首字母全部大写
        gson.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE);
        Gson gs = gson.create();
        return gs.toJson(person);
}
</code></pre>
<h2 id="四-书写代码使用gsonbuilder在创建json之前拥有格式化日期时间的功能">四、书写代码，使用GsonBuilder在创建Json之前拥有格式化日期时间的功能</h2>
<pre><code class="language-java">public static String createJsonText(){
        PersonWithBir person = new PersonWithBir(&quot;絷缘&quot;, 23, &quot;male&quot;, false, false, new String[]{&quot;Java&quot;, &quot;Linux&quot;, &quot;JavaScript&quot;, &quot;Vue&quot;, &quot;SemanticUI&quot;, &quot;NodeJS&quot;},new Date(System.currentTimeMillis()));
        Gson gson = new GsonBuilder().setDateFormat(&quot;yyyy-MM-dd&quot;).setPrettyPrinting().create();
        return gson.toJson(person);
}
</code></pre>
<h2 id="五-书写代码实现解析json格式文本">五、书写代码，实现解析Json格式文本</h2>
<p><code>person.json需要自己创建置于src目录（普通项目）或resources目录下（Maven项目）</code></p>
<pre><code class="language-java">public static void parseJson() throws IOException {
        InputStream is = GsonDemo1.class.getClassLoader().getResourceAsStream(&quot;person.json&quot;);
        BufferedReader br = new BufferedReader(new InputStreamReader(is, &quot;UTF-8&quot;));
        Gson gson = new Gson();
        Person person = gson.fromJson(br, Person.class);
        System.out.println(person);
}
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/XXV7UsHKh/">https://zhiyuandnc.github.io/XXV7UsHKh/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用org.json创建/解析json格式文件]]></title>
        <id>https://zhiyuandnc.github.io/4riCXnG78/</id>
        <link href="https://zhiyuandnc.github.io/4riCXnG78/">
        </link>
        <updated>2021-01-03T05:29:19.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本教程仅限于  <code>org.jsonv20201115</code> + <code>jdk1.8</code></p>
</blockquote>
<h2 id="一-在pomxml中加入orgjson的依赖文件">一、在pom.xml中加入org.json的依赖文件</h2>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/org.json/json --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.json&lt;/groupId&gt;
    &lt;artifactId&gt;json&lt;/artifactId&gt;
    &lt;version&gt;20201115&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="二-书写代码使用无参构造创建json格式文本">二、书写代码，使用无参构造创建Json格式文本</h2>
<pre><code class="language-java">public static String createJsonText(){
        JSONObject jsonObject = new JSONObject();
        jsonObject.put(&quot;name&quot;,&quot;絷缘&quot;);
        jsonObject.put(&quot;age&quot;,23);
        jsonObject.put(&quot;gender&quot;,&quot;male&quot;);
        jsonObject.put(&quot;now_time&quot;,new SimpleDateFormat(&quot;yyyy-MM-dd kk:mm:ss&quot;).format(new Date(System.currentTimeMillis())));
        jsonObject.put(&quot;skills&quot;,new String[]{&quot;Java&quot;,&quot;Linux&quot;,&quot;JavaScript&quot;,&quot;Vue&quot;,&quot;SemanticUI&quot;,&quot;NodeJS&quot;});
        jsonObject.put(&quot;has_house&quot;,false);
        jsonObject.put(&quot;has_car&quot;,false);
        return jsonObject.toString();
}
</code></pre>
<h2 id="三-书写代码使用有参构造传入hashmap对象创建json格式文本">三、书写代码，使用有参构造传入HashMap对象创建Json格式文本</h2>
<pre><code class="language-java">public static String createJsonByMap(){
        HashMap&lt;String, Object&gt; hashMap = new HashMap&lt;String, Object&gt;();
        hashMap.put(&quot;name&quot;,&quot;絷缘&quot;);
        hashMap.put(&quot;age&quot;,23);
        hashMap.put(&quot;gender&quot;,&quot;male&quot;);
        hashMap.put(&quot;now_time&quot;,new SimpleDateFormat(&quot;yyyy-MM-dd kk:mm:ss&quot;).format(new Date(System.currentTimeMillis())));
        hashMap.put(&quot;skills&quot;,new String[]{&quot;Java&quot;,&quot;Linux&quot;,&quot;JavaScript&quot;,&quot;Vue&quot;,&quot;SemanticUI&quot;,&quot;NodeJS&quot;});
        hashMap.put(&quot;has_house&quot;,false);
        hashMap.put(&quot;has_car&quot;,false);
        JSONObject jsonObject = new JSONObject(hashMap);
        return jsonObject.toString();
    }
</code></pre>
<h2 id="四-书写代码封装javabean实现创建json格式文本">四、书写代码，封装JavaBean实现创建Json格式文本</h2>
<pre><code class="language-java">import java.util.Arrays;

public class Person {
    private String name;
    private int age;
    private String gender;
    private boolean has_house;
    private boolean has_car;
    private String [] skills;
    public Person(){}
    public Person(String name, int age, String gender, boolean has_house, boolean has_car, String[] skills) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.has_house = has_house;
        this.has_car = has_car;
        this.skills = skills;
    }
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }

    public boolean isHas_house() {
        return has_house;
    }

    public boolean isHas_car() {
        return has_car;
    }

    public String[] getSkills() {
        return skills;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public void setHas_house(boolean has_house) {
        this.has_house = has_house;
    }

    public void setHas_car(boolean has_car) {
        this.has_car = has_car;
    }

    public void setSkills(String[] skills) {
        this.skills = skills;
    }
}
</code></pre>
<pre><code class="language-java">public static String createJsonByBean(){
        Person person = new Person(&quot;絷缘&quot;, 23, &quot;male&quot;, false, false, new String[]{&quot;Java&quot;, &quot;Linux&quot;, &quot;JavaScript&quot;, &quot;Vue&quot;, &quot;SemanticUI&quot;, &quot;NodeJS&quot;});
        JSONObject jsonObject = new JSONObject(person);
        return jsonObject.toString();
    }
</code></pre>
<h2 id="书写代码实现解析json文本">书写代码，实现解析Json文本</h2>
<p><code>需要自己创建文件person.json置于src目录（普通项目）或resources目录下（Maven项目）</code></p>
<pre><code class="language-json">{
  &quot;skills&quot;: [
    &quot;Java&quot;,
    &quot;Linux&quot;,
    &quot;JavaScript&quot;,
    &quot;Vue&quot;,
    &quot;SemanticUI&quot;,
    &quot;NodeJS&quot;
  ],
  &quot;has_car&quot;: false,
  &quot;gender&quot;: &quot;male&quot;,
  &quot;name&quot;: &quot;絷缘&quot;,
  &quot;has_house&quot;: false,
  &quot;age&quot;: 23
}
</code></pre>
<p><code>为了方便看代码，文章中出现的异常我都会抛出</code></p>
<pre><code class="language-java">public static void parseJson() throws IOException {
        InputStream is = JsonDemo1.class.getClassLoader().getResourceAsStream(&quot;person.json&quot;);
        BufferedReader br = new BufferedReader(new InputStreamReader(is, &quot;UTF-8&quot;));
        StringBuilder sb = new StringBuilder();
        String content;
        while((content=br.readLine())!=null){
            sb.append(content);
        }
        System.out.println(sb.toString());
        JSONObject jsonObject = new JSONObject(sb.toString());
        System.out.println(jsonObject.getString(&quot;name&quot;));
        System.out.println(jsonObject.getJSONArray(&quot;skills&quot;));
        System.out.println(jsonObject.getString(&quot;gender&quot;));
        System.out.println(jsonObject.getInt(&quot;age&quot;));
        System.out.println(jsonObject.getBoolean(&quot;has_house&quot;));
        System.out.println(jsonObject.getBoolean(&quot;has_car&quot;));
    }
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/4riCXnG78/">https://zhiyuandnc.github.io/4riCXnG78/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Druid数据库连接池技术]]></title>
        <id>https://zhiyuandnc.github.io/-gGSoZP8v/</id>
        <link href="https://zhiyuandnc.github.io/-gGSoZP8v/">
        </link>
        <updated>2021-01-02T10:37:28.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本教程仅限于 <code>druidv1.2.4</code> + <code>mysql8.0</code> + <code>jdk1.8</code></p>
</blockquote>
<h2 id="一-在pomxml中加入druid依赖文件">一、在pom.xml中加入druid依赖文件</h2>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid&lt;/artifactId&gt;
    &lt;version&gt;1.2.4&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="二-书写配置文件">二、书写配置文件</h2>
<h3 id="1-druid数据库连接池技术对配置文件的命名没有要求因为它需要我们自己拿到配置文件的io流然后将io流作为参数传递创建数据库连接池对象">1. druid数据库连接池技术对配置文件的命名没有要求，因为它需要我们自己拿到配置文件的IO流，然后将IO流作为参数传递，创建数据库连接池对象</h3>
<h3 id="2-我就以-druidproperties-配置文件为例继续讲解">2. 我就以 druid.properties 配置文件为例，继续讲解</h3>
<pre><code class="language-properties">driverClassName=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT
username=root
password=123456
#初始化连接数
initialSize=5
#最大连接数
maxActive=10
#超时时间
maxWait=3000
</code></pre>
<h2 id="三-书写代码测试正常的数据库连接对象的获取">三、书写代码，测试正常的数据库连接对象的获取</h2>
<p><code>为了方便看代码，我不去捕获异常，直接将异常抛出</code></p>
<pre><code class="language-java">public class DruidDemo{
    public static void main(String[] args) throws Exception{
        Properties pros = new Properties();
        pros.load(new BufferedReader(new InputStreamReader(DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;),&quot;UTF-8&quot;)));
        DataSource ds = DruidDataSourceFactory.createDataSource(pros);
        Connection conn = ds.getConnection();
        System.out.println(conn);
    }
}
</code></pre>
<h2 id="四-进行一些crud操作">四、进行一些CRUD操作</h2>
<pre><code class="language-java">public class DruidDemo{
    public static void main(String[] args){
        Properties pros = new Properties();
        pros.load(new BufferedReader(new InputStreamReader(DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;),&quot;UTF-8&quot;)));
        DataSource ds = DruidDataSourceFactory.createDataSource(pros);
        Connection conn = ds.getConnection();
        String sql = &quot;select * from user&quot;;
        PreparedStatement pstat = conn.prepareStatement(sql);
        ResultSet rs = pstat.executeQuery();
        while(rs.next()){
            System.out.println(rs.getInt(&quot;id&quot;)+&quot;\t&quot;+rs.getString(&quot;name&quot;)+&quot;\t&quot;+rs.getInt(&quot;age&quot;)+&quot;\t&quot;+rs.getString(&quot;gender&quot;)+&quot;\t&quot;);
        }
    }
}
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/-gGSoZP8v/">https://zhiyuandnc.github.io/-gGSoZP8v/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C3P0数据库连接池技术]]></title>
        <id>https://zhiyuandnc.github.io/c3p0/</id>
        <link href="https://zhiyuandnc.github.io/c3p0/">
        </link>
        <updated>2021-01-02T09:32:26.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本教程仅限于 <code>c3p0v0.9.5.2</code> + <code>mysql8.0</code> + <code>jdk1.8</code></p>
</blockquote>
<h2 id="一-在pomxml中加入c3p0依赖文件">一、在pom.xml中加入C3P0依赖文件</h2>
<p><code>如果是普通项目，需要解决依赖问题，c3p0的jar包依赖于mchange-common的jar包</code></p>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.mchange&lt;/groupId&gt;
    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
    &lt;version&gt;0.9.5.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="二-书写配置文件">二、书写配置文件</h2>
<h3 id="1-严格按照规定命名为-c3p0properties-文件">1. 严格按照规定命名为 <code>c3p0.properties</code> 文件</h3>
<p><code>这里需要注意和通常的不一样的是需要在每个key前加c3p0</code></p>
<pre><code class="language-properties">c3p0.driverClass=com.mysql.cj.jdbc.Driver
c3p0.jdbcUrl=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimeZone=UTC
c3p0.user=root
c3p0.password=123456
c3p0.initialPoolSize=10
c3p0.maxPoolSize=100
c3p0.checkoutTimeout=3000
</code></pre>
<h3 id="2-严格按照规定命名为-c3p0-configxml-文件">2. 严格按照规定命名为 <code>c3p0-config.xml</code> 文件</h3>
<p><code>这里需要注意一个地方就是jdbcUrl里本来用来连接各个参数的&amp;符号在xml文件中会被转义就如同html规则一般，所以我们想要使用表示&amp;符号的转义字符&amp;amp;来替换&amp;符号</code></p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&gt;
&lt;c3p0-config&gt;
    &lt;default-config&gt;
        &lt;property name=&quot;driverClass&quot;&gt;&lt;/property&gt;
        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimeZone=UTC&lt;/property&gt;
        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;
        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;
        &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;
        &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;
        &lt;property name=&quot;checkoutTimeout&quot;&gt;3000&lt;/property&gt;
    &lt;/default-config&gt;
&lt;/c3p0-config&gt;
</code></pre>
<blockquote>
<p>本教程以Idea工具为例，所以如果是普通Java项目，请将配置文件置于src目录下，若是Maven管理的项目，请直接将配置文件置于resources目录下，具体原因详见JDBC篇</p>
</blockquote>
<h2 id="三-书写代码测试正常的数据连接对象的获取">三、书写代码，测试正常的数据连接对象的获取</h2>
<p><code>为了方便看代码，我不去捕获，直接将SQL异常抛出。</code></p>
<pre><code class="language-java">public class C3P0Demo{
    public static void main(String[] args){
        DataSource ds = new ComboPooledDataSource();
        Connection conn = null;
        for(int i = 0;i &lt; 20;i++){
            System.out.println(ds.getConnection());
        }
    }
}
</code></pre>
<h2 id="四-进行一些crud操作">四、进行一些CRUD操作</h2>
<pre><code class="language-java">public class C3P0Demo{
    public static void main(String[] args){
        DataSource ds = new ComboPooledDataSource();
        Connection conn = ds.getConnection();
        String sql = &quot;select * from user&quot;;
        PreparedStatement pstat = conn.prepareStatement();
        ResultSet rs = pstat.executeQuery();
        while(rs.next()){
            System.out.println(rs.getInt(&quot;id&quot;)+&quot;\t&quot;+rs.getString(&quot;name&quot;)+&quot;\t&quot;+rs.getInt(&quot;age&quot;)+&quot;\t&quot;+rs.getString(&quot;gender&quot;)+&quot;\t&quot;);
        }
    }
}
</code></pre>
<blockquote>
<p>原文作者：絷缘<br>
作者邮箱：zhiyuanworkemail@163.com<br>
原文地址：<a href="https://zhiyuandnc.github.io/c3p0/">https://zhiyuandnc.github.io/c3p0/</a><br>
版权声明：本文为博主原创文章，转载请注明原文链接作者信息</p>
</blockquote>
]]></content>
    </entry>
</feed>